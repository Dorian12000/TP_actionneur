
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ca9c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000490  0800cc80  0800cc80  0001cc80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800d110  0800d110  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  0800d110  0800d110  0001d110  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800d118  0800d118  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800d118  0800d118  0001d118  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800d11c  0800d11c  0001d11c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0800d120  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000062c  20000298  0800d3b8  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008c4  0800d3b8  000208c4  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b648  00000000  00000000  0002030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003815  00000000  00000000  0003b953  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001658  00000000  00000000  0003f168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001143  00000000  00000000  000407c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a566  00000000  00000000  00041903  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bd99  00000000  00000000  0006be69  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00114768  00000000  00000000  00087c02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000070f4  00000000  00000000  0019c36c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001a3460  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000298 	.word	0x20000298
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800cc64 	.word	0x0800cc64

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000029c 	.word	0x2000029c
 800021c:	0800cc64 	.word	0x0800cc64

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_d2f>:
 8000c18:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000c1c:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000c20:	bf24      	itt	cs
 8000c22:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000c26:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000c2a:	d90d      	bls.n	8000c48 <__aeabi_d2f+0x30>
 8000c2c:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c30:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c34:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c38:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c3c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c40:	bf08      	it	eq
 8000c42:	f020 0001 	biceq.w	r0, r0, #1
 8000c46:	4770      	bx	lr
 8000c48:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c4c:	d121      	bne.n	8000c92 <__aeabi_d2f+0x7a>
 8000c4e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c52:	bfbc      	itt	lt
 8000c54:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c58:	4770      	bxlt	lr
 8000c5a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c5e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c62:	f1c2 0218 	rsb	r2, r2, #24
 8000c66:	f1c2 0c20 	rsb	ip, r2, #32
 8000c6a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c6e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c72:	bf18      	it	ne
 8000c74:	f040 0001 	orrne.w	r0, r0, #1
 8000c78:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c7c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c80:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c84:	ea40 000c 	orr.w	r0, r0, ip
 8000c88:	fa23 f302 	lsr.w	r3, r3, r2
 8000c8c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c90:	e7cc      	b.n	8000c2c <__aeabi_d2f+0x14>
 8000c92:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c96:	d107      	bne.n	8000ca8 <__aeabi_d2f+0x90>
 8000c98:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c9c:	bf1e      	ittt	ne
 8000c9e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000ca2:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000ca6:	4770      	bxne	lr
 8000ca8:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000cac:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000cb0:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000cb4:	4770      	bx	lr
 8000cb6:	bf00      	nop

08000cb8 <__aeabi_uldivmod>:
 8000cb8:	b953      	cbnz	r3, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cba:	b94a      	cbnz	r2, 8000cd0 <__aeabi_uldivmod+0x18>
 8000cbc:	2900      	cmp	r1, #0
 8000cbe:	bf08      	it	eq
 8000cc0:	2800      	cmpeq	r0, #0
 8000cc2:	bf1c      	itt	ne
 8000cc4:	f04f 31ff 	movne.w	r1, #4294967295
 8000cc8:	f04f 30ff 	movne.w	r0, #4294967295
 8000ccc:	f000 b970 	b.w	8000fb0 <__aeabi_idiv0>
 8000cd0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cd4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cd8:	f000 f806 	bl	8000ce8 <__udivmoddi4>
 8000cdc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000ce0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000ce4:	b004      	add	sp, #16
 8000ce6:	4770      	bx	lr

08000ce8 <__udivmoddi4>:
 8000ce8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000cec:	9e08      	ldr	r6, [sp, #32]
 8000cee:	460d      	mov	r5, r1
 8000cf0:	4604      	mov	r4, r0
 8000cf2:	460f      	mov	r7, r1
 8000cf4:	2b00      	cmp	r3, #0
 8000cf6:	d14a      	bne.n	8000d8e <__udivmoddi4+0xa6>
 8000cf8:	428a      	cmp	r2, r1
 8000cfa:	4694      	mov	ip, r2
 8000cfc:	d965      	bls.n	8000dca <__udivmoddi4+0xe2>
 8000cfe:	fab2 f382 	clz	r3, r2
 8000d02:	b143      	cbz	r3, 8000d16 <__udivmoddi4+0x2e>
 8000d04:	fa02 fc03 	lsl.w	ip, r2, r3
 8000d08:	f1c3 0220 	rsb	r2, r3, #32
 8000d0c:	409f      	lsls	r7, r3
 8000d0e:	fa20 f202 	lsr.w	r2, r0, r2
 8000d12:	4317      	orrs	r7, r2
 8000d14:	409c      	lsls	r4, r3
 8000d16:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000d1a:	fa1f f58c 	uxth.w	r5, ip
 8000d1e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000d22:	0c22      	lsrs	r2, r4, #16
 8000d24:	fb0e 7711 	mls	r7, lr, r1, r7
 8000d28:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000d2c:	fb01 f005 	mul.w	r0, r1, r5
 8000d30:	4290      	cmp	r0, r2
 8000d32:	d90a      	bls.n	8000d4a <__udivmoddi4+0x62>
 8000d34:	eb1c 0202 	adds.w	r2, ip, r2
 8000d38:	f101 37ff 	add.w	r7, r1, #4294967295
 8000d3c:	f080 811c 	bcs.w	8000f78 <__udivmoddi4+0x290>
 8000d40:	4290      	cmp	r0, r2
 8000d42:	f240 8119 	bls.w	8000f78 <__udivmoddi4+0x290>
 8000d46:	3902      	subs	r1, #2
 8000d48:	4462      	add	r2, ip
 8000d4a:	1a12      	subs	r2, r2, r0
 8000d4c:	b2a4      	uxth	r4, r4
 8000d4e:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d52:	fb0e 2210 	mls	r2, lr, r0, r2
 8000d56:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d5a:	fb00 f505 	mul.w	r5, r0, r5
 8000d5e:	42a5      	cmp	r5, r4
 8000d60:	d90a      	bls.n	8000d78 <__udivmoddi4+0x90>
 8000d62:	eb1c 0404 	adds.w	r4, ip, r4
 8000d66:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d6a:	f080 8107 	bcs.w	8000f7c <__udivmoddi4+0x294>
 8000d6e:	42a5      	cmp	r5, r4
 8000d70:	f240 8104 	bls.w	8000f7c <__udivmoddi4+0x294>
 8000d74:	4464      	add	r4, ip
 8000d76:	3802      	subs	r0, #2
 8000d78:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d7c:	1b64      	subs	r4, r4, r5
 8000d7e:	2100      	movs	r1, #0
 8000d80:	b11e      	cbz	r6, 8000d8a <__udivmoddi4+0xa2>
 8000d82:	40dc      	lsrs	r4, r3
 8000d84:	2300      	movs	r3, #0
 8000d86:	e9c6 4300 	strd	r4, r3, [r6]
 8000d8a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d8e:	428b      	cmp	r3, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0xbc>
 8000d92:	2e00      	cmp	r6, #0
 8000d94:	f000 80ed 	beq.w	8000f72 <__udivmoddi4+0x28a>
 8000d98:	2100      	movs	r1, #0
 8000d9a:	e9c6 0500 	strd	r0, r5, [r6]
 8000d9e:	4608      	mov	r0, r1
 8000da0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000da4:	fab3 f183 	clz	r1, r3
 8000da8:	2900      	cmp	r1, #0
 8000daa:	d149      	bne.n	8000e40 <__udivmoddi4+0x158>
 8000dac:	42ab      	cmp	r3, r5
 8000dae:	d302      	bcc.n	8000db6 <__udivmoddi4+0xce>
 8000db0:	4282      	cmp	r2, r0
 8000db2:	f200 80f8 	bhi.w	8000fa6 <__udivmoddi4+0x2be>
 8000db6:	1a84      	subs	r4, r0, r2
 8000db8:	eb65 0203 	sbc.w	r2, r5, r3
 8000dbc:	2001      	movs	r0, #1
 8000dbe:	4617      	mov	r7, r2
 8000dc0:	2e00      	cmp	r6, #0
 8000dc2:	d0e2      	beq.n	8000d8a <__udivmoddi4+0xa2>
 8000dc4:	e9c6 4700 	strd	r4, r7, [r6]
 8000dc8:	e7df      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000dca:	b902      	cbnz	r2, 8000dce <__udivmoddi4+0xe6>
 8000dcc:	deff      	udf	#255	; 0xff
 8000dce:	fab2 f382 	clz	r3, r2
 8000dd2:	2b00      	cmp	r3, #0
 8000dd4:	f040 8090 	bne.w	8000ef8 <__udivmoddi4+0x210>
 8000dd8:	1a8a      	subs	r2, r1, r2
 8000dda:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000dde:	fa1f fe8c 	uxth.w	lr, ip
 8000de2:	2101      	movs	r1, #1
 8000de4:	fbb2 f5f7 	udiv	r5, r2, r7
 8000de8:	fb07 2015 	mls	r0, r7, r5, r2
 8000dec:	0c22      	lsrs	r2, r4, #16
 8000dee:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000df2:	fb0e f005 	mul.w	r0, lr, r5
 8000df6:	4290      	cmp	r0, r2
 8000df8:	d908      	bls.n	8000e0c <__udivmoddi4+0x124>
 8000dfa:	eb1c 0202 	adds.w	r2, ip, r2
 8000dfe:	f105 38ff 	add.w	r8, r5, #4294967295
 8000e02:	d202      	bcs.n	8000e0a <__udivmoddi4+0x122>
 8000e04:	4290      	cmp	r0, r2
 8000e06:	f200 80cb 	bhi.w	8000fa0 <__udivmoddi4+0x2b8>
 8000e0a:	4645      	mov	r5, r8
 8000e0c:	1a12      	subs	r2, r2, r0
 8000e0e:	b2a4      	uxth	r4, r4
 8000e10:	fbb2 f0f7 	udiv	r0, r2, r7
 8000e14:	fb07 2210 	mls	r2, r7, r0, r2
 8000e18:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000e1c:	fb0e fe00 	mul.w	lr, lr, r0
 8000e20:	45a6      	cmp	lr, r4
 8000e22:	d908      	bls.n	8000e36 <__udivmoddi4+0x14e>
 8000e24:	eb1c 0404 	adds.w	r4, ip, r4
 8000e28:	f100 32ff 	add.w	r2, r0, #4294967295
 8000e2c:	d202      	bcs.n	8000e34 <__udivmoddi4+0x14c>
 8000e2e:	45a6      	cmp	lr, r4
 8000e30:	f200 80bb 	bhi.w	8000faa <__udivmoddi4+0x2c2>
 8000e34:	4610      	mov	r0, r2
 8000e36:	eba4 040e 	sub.w	r4, r4, lr
 8000e3a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000e3e:	e79f      	b.n	8000d80 <__udivmoddi4+0x98>
 8000e40:	f1c1 0720 	rsb	r7, r1, #32
 8000e44:	408b      	lsls	r3, r1
 8000e46:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e4a:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e4e:	fa05 f401 	lsl.w	r4, r5, r1
 8000e52:	fa20 f307 	lsr.w	r3, r0, r7
 8000e56:	40fd      	lsrs	r5, r7
 8000e58:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000e5c:	4323      	orrs	r3, r4
 8000e5e:	fbb5 f8f9 	udiv	r8, r5, r9
 8000e62:	fa1f fe8c 	uxth.w	lr, ip
 8000e66:	fb09 5518 	mls	r5, r9, r8, r5
 8000e6a:	0c1c      	lsrs	r4, r3, #16
 8000e6c:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000e70:	fb08 f50e 	mul.w	r5, r8, lr
 8000e74:	42a5      	cmp	r5, r4
 8000e76:	fa02 f201 	lsl.w	r2, r2, r1
 8000e7a:	fa00 f001 	lsl.w	r0, r0, r1
 8000e7e:	d90b      	bls.n	8000e98 <__udivmoddi4+0x1b0>
 8000e80:	eb1c 0404 	adds.w	r4, ip, r4
 8000e84:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e88:	f080 8088 	bcs.w	8000f9c <__udivmoddi4+0x2b4>
 8000e8c:	42a5      	cmp	r5, r4
 8000e8e:	f240 8085 	bls.w	8000f9c <__udivmoddi4+0x2b4>
 8000e92:	f1a8 0802 	sub.w	r8, r8, #2
 8000e96:	4464      	add	r4, ip
 8000e98:	1b64      	subs	r4, r4, r5
 8000e9a:	b29d      	uxth	r5, r3
 8000e9c:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ea0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ea4:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000ea8:	fb03 fe0e 	mul.w	lr, r3, lr
 8000eac:	45a6      	cmp	lr, r4
 8000eae:	d908      	bls.n	8000ec2 <__udivmoddi4+0x1da>
 8000eb0:	eb1c 0404 	adds.w	r4, ip, r4
 8000eb4:	f103 35ff 	add.w	r5, r3, #4294967295
 8000eb8:	d26c      	bcs.n	8000f94 <__udivmoddi4+0x2ac>
 8000eba:	45a6      	cmp	lr, r4
 8000ebc:	d96a      	bls.n	8000f94 <__udivmoddi4+0x2ac>
 8000ebe:	3b02      	subs	r3, #2
 8000ec0:	4464      	add	r4, ip
 8000ec2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000ec6:	fba3 9502 	umull	r9, r5, r3, r2
 8000eca:	eba4 040e 	sub.w	r4, r4, lr
 8000ece:	42ac      	cmp	r4, r5
 8000ed0:	46c8      	mov	r8, r9
 8000ed2:	46ae      	mov	lr, r5
 8000ed4:	d356      	bcc.n	8000f84 <__udivmoddi4+0x29c>
 8000ed6:	d053      	beq.n	8000f80 <__udivmoddi4+0x298>
 8000ed8:	b156      	cbz	r6, 8000ef0 <__udivmoddi4+0x208>
 8000eda:	ebb0 0208 	subs.w	r2, r0, r8
 8000ede:	eb64 040e 	sbc.w	r4, r4, lr
 8000ee2:	fa04 f707 	lsl.w	r7, r4, r7
 8000ee6:	40ca      	lsrs	r2, r1
 8000ee8:	40cc      	lsrs	r4, r1
 8000eea:	4317      	orrs	r7, r2
 8000eec:	e9c6 7400 	strd	r7, r4, [r6]
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	2100      	movs	r1, #0
 8000ef4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ef8:	f1c3 0120 	rsb	r1, r3, #32
 8000efc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000f00:	fa20 f201 	lsr.w	r2, r0, r1
 8000f04:	fa25 f101 	lsr.w	r1, r5, r1
 8000f08:	409d      	lsls	r5, r3
 8000f0a:	432a      	orrs	r2, r5
 8000f0c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f10:	fa1f fe8c 	uxth.w	lr, ip
 8000f14:	fbb1 f0f7 	udiv	r0, r1, r7
 8000f18:	fb07 1510 	mls	r5, r7, r0, r1
 8000f1c:	0c11      	lsrs	r1, r2, #16
 8000f1e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000f22:	fb00 f50e 	mul.w	r5, r0, lr
 8000f26:	428d      	cmp	r5, r1
 8000f28:	fa04 f403 	lsl.w	r4, r4, r3
 8000f2c:	d908      	bls.n	8000f40 <__udivmoddi4+0x258>
 8000f2e:	eb1c 0101 	adds.w	r1, ip, r1
 8000f32:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f36:	d22f      	bcs.n	8000f98 <__udivmoddi4+0x2b0>
 8000f38:	428d      	cmp	r5, r1
 8000f3a:	d92d      	bls.n	8000f98 <__udivmoddi4+0x2b0>
 8000f3c:	3802      	subs	r0, #2
 8000f3e:	4461      	add	r1, ip
 8000f40:	1b49      	subs	r1, r1, r5
 8000f42:	b292      	uxth	r2, r2
 8000f44:	fbb1 f5f7 	udiv	r5, r1, r7
 8000f48:	fb07 1115 	mls	r1, r7, r5, r1
 8000f4c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f50:	fb05 f10e 	mul.w	r1, r5, lr
 8000f54:	4291      	cmp	r1, r2
 8000f56:	d908      	bls.n	8000f6a <__udivmoddi4+0x282>
 8000f58:	eb1c 0202 	adds.w	r2, ip, r2
 8000f5c:	f105 38ff 	add.w	r8, r5, #4294967295
 8000f60:	d216      	bcs.n	8000f90 <__udivmoddi4+0x2a8>
 8000f62:	4291      	cmp	r1, r2
 8000f64:	d914      	bls.n	8000f90 <__udivmoddi4+0x2a8>
 8000f66:	3d02      	subs	r5, #2
 8000f68:	4462      	add	r2, ip
 8000f6a:	1a52      	subs	r2, r2, r1
 8000f6c:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000f70:	e738      	b.n	8000de4 <__udivmoddi4+0xfc>
 8000f72:	4631      	mov	r1, r6
 8000f74:	4630      	mov	r0, r6
 8000f76:	e708      	b.n	8000d8a <__udivmoddi4+0xa2>
 8000f78:	4639      	mov	r1, r7
 8000f7a:	e6e6      	b.n	8000d4a <__udivmoddi4+0x62>
 8000f7c:	4610      	mov	r0, r2
 8000f7e:	e6fb      	b.n	8000d78 <__udivmoddi4+0x90>
 8000f80:	4548      	cmp	r0, r9
 8000f82:	d2a9      	bcs.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f84:	ebb9 0802 	subs.w	r8, r9, r2
 8000f88:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000f8c:	3b01      	subs	r3, #1
 8000f8e:	e7a3      	b.n	8000ed8 <__udivmoddi4+0x1f0>
 8000f90:	4645      	mov	r5, r8
 8000f92:	e7ea      	b.n	8000f6a <__udivmoddi4+0x282>
 8000f94:	462b      	mov	r3, r5
 8000f96:	e794      	b.n	8000ec2 <__udivmoddi4+0x1da>
 8000f98:	4640      	mov	r0, r8
 8000f9a:	e7d1      	b.n	8000f40 <__udivmoddi4+0x258>
 8000f9c:	46d0      	mov	r8, sl
 8000f9e:	e77b      	b.n	8000e98 <__udivmoddi4+0x1b0>
 8000fa0:	3d02      	subs	r5, #2
 8000fa2:	4462      	add	r2, ip
 8000fa4:	e732      	b.n	8000e0c <__udivmoddi4+0x124>
 8000fa6:	4608      	mov	r0, r1
 8000fa8:	e70a      	b.n	8000dc0 <__udivmoddi4+0xd8>
 8000faa:	4464      	add	r4, ip
 8000fac:	3802      	subs	r0, #2
 8000fae:	e742      	b.n	8000e36 <__udivmoddi4+0x14e>

08000fb0 <__aeabi_idiv0>:
 8000fb0:	4770      	bx	lr
 8000fb2:	bf00      	nop

08000fb4 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b08c      	sub	sp, #48	; 0x30
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000fba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000fc6:	1d3b      	adds	r3, r7, #4
 8000fc8:	2220      	movs	r2, #32
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4618      	mov	r0, r3
 8000fce:	f009 fcf4 	bl	800a9ba <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000fd2:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fd4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000fd8:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000fda:	4b31      	ldr	r3, [pc, #196]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fdc:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000fe0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000fe2:	4b2f      	ldr	r3, [pc, #188]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000fe8:	4b2d      	ldr	r3, [pc, #180]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000fee:	4b2c      	ldr	r3, [pc, #176]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000ff0:	2200      	movs	r2, #0
 8000ff2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000ff4:	4b2a      	ldr	r3, [pc, #168]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000ffa:	4b29      	ldr	r3, [pc, #164]	; (80010a0 <MX_ADC1_Init+0xec>)
 8000ffc:	2204      	movs	r2, #4
 8000ffe:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8001000:	4b27      	ldr	r3, [pc, #156]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001002:	2200      	movs	r2, #0
 8001004:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8001006:	4b26      	ldr	r3, [pc, #152]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001008:	2200      	movs	r2, #0
 800100a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 800100c:	4b24      	ldr	r3, [pc, #144]	; (80010a0 <MX_ADC1_Init+0xec>)
 800100e:	2201      	movs	r2, #1
 8001010:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8001012:	4b23      	ldr	r3, [pc, #140]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001014:	2200      	movs	r2, #0
 8001016:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 800101a:	4b21      	ldr	r3, [pc, #132]	; (80010a0 <MX_ADC1_Init+0xec>)
 800101c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001020:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001022:	4b1f      	ldr	r3, [pc, #124]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001024:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001028:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 800102a:	4b1d      	ldr	r3, [pc, #116]	; (80010a0 <MX_ADC1_Init+0xec>)
 800102c:	2201      	movs	r2, #1
 800102e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001032:	4b1b      	ldr	r3, [pc, #108]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001034:	2200      	movs	r2, #0
 8001036:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8001038:	4b19      	ldr	r3, [pc, #100]	; (80010a0 <MX_ADC1_Init+0xec>)
 800103a:	2200      	movs	r2, #0
 800103c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001040:	4817      	ldr	r0, [pc, #92]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001042:	f001 feaf 	bl	8002da4 <HAL_ADC_Init>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d001      	beq.n	8001050 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 800104c:	f000 fbfa 	bl	8001844 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8001050:	2300      	movs	r3, #0
 8001052:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8001054:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001058:	4619      	mov	r1, r3
 800105a:	4811      	ldr	r0, [pc, #68]	; (80010a0 <MX_ADC1_Init+0xec>)
 800105c:	f002 ff96 	bl	8003f8c <HAL_ADCEx_MultiModeConfigChannel>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8001066:	f000 fbed 	bl	8001844 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 800106a:	4b0e      	ldr	r3, [pc, #56]	; (80010a4 <MX_ADC1_Init+0xf0>)
 800106c:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800106e:	2306      	movs	r3, #6
 8001070:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8001072:	2302      	movs	r3, #2
 8001074:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001076:	237f      	movs	r3, #127	; 0x7f
 8001078:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 800107a:	2304      	movs	r3, #4
 800107c:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 800107e:	2300      	movs	r3, #0
 8001080:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8001082:	1d3b      	adds	r3, r7, #4
 8001084:	4619      	mov	r1, r3
 8001086:	4806      	ldr	r0, [pc, #24]	; (80010a0 <MX_ADC1_Init+0xec>)
 8001088:	f002 f936 	bl	80032f8 <HAL_ADC_ConfigChannel>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8001092:	f000 fbd7 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001096:	bf00      	nop
 8001098:	3730      	adds	r7, #48	; 0x30
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	200002b4 	.word	0x200002b4
 80010a4:	08600004 	.word	0x08600004

080010a8 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80010ae:	463b      	mov	r3, r7
 80010b0:	2220      	movs	r2, #32
 80010b2:	2100      	movs	r1, #0
 80010b4:	4618      	mov	r0, r3
 80010b6:	f009 fc80 	bl	800a9ba <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80010ba:	4b33      	ldr	r3, [pc, #204]	; (8001188 <MX_ADC2_Init+0xe0>)
 80010bc:	4a33      	ldr	r2, [pc, #204]	; (800118c <MX_ADC2_Init+0xe4>)
 80010be:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80010c0:	4b31      	ldr	r3, [pc, #196]	; (8001188 <MX_ADC2_Init+0xe0>)
 80010c2:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80010c6:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80010c8:	4b2f      	ldr	r3, [pc, #188]	; (8001188 <MX_ADC2_Init+0xe0>)
 80010ca:	2200      	movs	r2, #0
 80010cc:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80010ce:	4b2e      	ldr	r3, [pc, #184]	; (8001188 <MX_ADC2_Init+0xe0>)
 80010d0:	2200      	movs	r2, #0
 80010d2:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 80010d4:	4b2c      	ldr	r3, [pc, #176]	; (8001188 <MX_ADC2_Init+0xe0>)
 80010d6:	2200      	movs	r2, #0
 80010d8:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 80010da:	4b2b      	ldr	r3, [pc, #172]	; (8001188 <MX_ADC2_Init+0xe0>)
 80010dc:	2201      	movs	r2, #1
 80010de:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80010e0:	4b29      	ldr	r3, [pc, #164]	; (8001188 <MX_ADC2_Init+0xe0>)
 80010e2:	2204      	movs	r2, #4
 80010e4:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 80010e6:	4b28      	ldr	r3, [pc, #160]	; (8001188 <MX_ADC2_Init+0xe0>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 80010ec:	4b26      	ldr	r3, [pc, #152]	; (8001188 <MX_ADC2_Init+0xe0>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 80010f2:	4b25      	ldr	r3, [pc, #148]	; (8001188 <MX_ADC2_Init+0xe0>)
 80010f4:	2202      	movs	r2, #2
 80010f6:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 80010f8:	4b23      	ldr	r3, [pc, #140]	; (8001188 <MX_ADC2_Init+0xe0>)
 80010fa:	2200      	movs	r2, #0
 80010fc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001100:	4b21      	ldr	r3, [pc, #132]	; (8001188 <MX_ADC2_Init+0xe0>)
 8001102:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001106:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001108:	4b1f      	ldr	r3, [pc, #124]	; (8001188 <MX_ADC2_Init+0xe0>)
 800110a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800110e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001110:	4b1d      	ldr	r3, [pc, #116]	; (8001188 <MX_ADC2_Init+0xe0>)
 8001112:	2201      	movs	r2, #1
 8001114:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001118:	4b1b      	ldr	r3, [pc, #108]	; (8001188 <MX_ADC2_Init+0xe0>)
 800111a:	2200      	movs	r2, #0
 800111c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800111e:	4b1a      	ldr	r3, [pc, #104]	; (8001188 <MX_ADC2_Init+0xe0>)
 8001120:	2200      	movs	r2, #0
 8001122:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001126:	4818      	ldr	r0, [pc, #96]	; (8001188 <MX_ADC2_Init+0xe0>)
 8001128:	f001 fe3c 	bl	8002da4 <HAL_ADC_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001132:	f000 fb87 	bl	8001844 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001136:	4b16      	ldr	r3, [pc, #88]	; (8001190 <MX_ADC2_Init+0xe8>)
 8001138:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800113a:	2306      	movs	r3, #6
 800113c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800113e:	2302      	movs	r3, #2
 8001140:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8001142:	237f      	movs	r3, #127	; 0x7f
 8001144:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8001146:	2304      	movs	r3, #4
 8001148:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800114a:	2300      	movs	r3, #0
 800114c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800114e:	463b      	mov	r3, r7
 8001150:	4619      	mov	r1, r3
 8001152:	480d      	ldr	r0, [pc, #52]	; (8001188 <MX_ADC2_Init+0xe0>)
 8001154:	f002 f8d0 	bl	80032f8 <HAL_ADC_ConfigChannel>
 8001158:	4603      	mov	r3, r0
 800115a:	2b00      	cmp	r3, #0
 800115c:	d001      	beq.n	8001162 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 800115e:	f000 fb71 	bl	8001844 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8001162:	4b0c      	ldr	r3, [pc, #48]	; (8001194 <MX_ADC2_Init+0xec>)
 8001164:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 8001166:	230c      	movs	r3, #12
 8001168:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800116a:	463b      	mov	r3, r7
 800116c:	4619      	mov	r1, r3
 800116e:	4806      	ldr	r0, [pc, #24]	; (8001188 <MX_ADC2_Init+0xe0>)
 8001170:	f002 f8c2 	bl	80032f8 <HAL_ADC_ConfigChannel>
 8001174:	4603      	mov	r3, r0
 8001176:	2b00      	cmp	r3, #0
 8001178:	d001      	beq.n	800117e <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 800117a:	f000 fb63 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 800117e:	bf00      	nop
 8001180:	3720      	adds	r7, #32
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000320 	.word	0x20000320
 800118c:	50000100 	.word	0x50000100
 8001190:	19200040 	.word	0x19200040
 8001194:	1d500080 	.word	0x1d500080

08001198 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b0a4      	sub	sp, #144	; 0x90
 800119c:	af00      	add	r7, sp, #0
 800119e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011a0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011a4:	2200      	movs	r2, #0
 80011a6:	601a      	str	r2, [r3, #0]
 80011a8:	605a      	str	r2, [r3, #4]
 80011aa:	609a      	str	r2, [r3, #8]
 80011ac:	60da      	str	r2, [r3, #12]
 80011ae:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80011b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011b4:	2254      	movs	r2, #84	; 0x54
 80011b6:	2100      	movs	r1, #0
 80011b8:	4618      	mov	r0, r3
 80011ba:	f009 fbfe 	bl	800a9ba <memset>
  if(adcHandle->Instance==ADC1)
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	681b      	ldr	r3, [r3, #0]
 80011c2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80011c6:	f040 80a0 	bne.w	800130a <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80011ca:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80011ce:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80011d0:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80011d4:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80011d6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80011da:	4618      	mov	r0, r3
 80011dc:	f004 fbc8 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 80011e0:	4603      	mov	r3, r0
 80011e2:	2b00      	cmp	r3, #0
 80011e4:	d001      	beq.n	80011ea <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 80011e6:	f000 fb2d 	bl	8001844 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80011ea:	4b9c      	ldr	r3, [pc, #624]	; (800145c <HAL_ADC_MspInit+0x2c4>)
 80011ec:	681b      	ldr	r3, [r3, #0]
 80011ee:	3301      	adds	r3, #1
 80011f0:	4a9a      	ldr	r2, [pc, #616]	; (800145c <HAL_ADC_MspInit+0x2c4>)
 80011f2:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80011f4:	4b99      	ldr	r3, [pc, #612]	; (800145c <HAL_ADC_MspInit+0x2c4>)
 80011f6:	681b      	ldr	r3, [r3, #0]
 80011f8:	2b01      	cmp	r3, #1
 80011fa:	d10b      	bne.n	8001214 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80011fc:	4b98      	ldr	r3, [pc, #608]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 80011fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001200:	4a97      	ldr	r2, [pc, #604]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 8001202:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001206:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001208:	4b95      	ldr	r3, [pc, #596]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 800120a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800120c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001210:	627b      	str	r3, [r7, #36]	; 0x24
 8001212:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001214:	4b92      	ldr	r3, [pc, #584]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 8001216:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001218:	4a91      	ldr	r2, [pc, #580]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 800121a:	f043 0304 	orr.w	r3, r3, #4
 800121e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001220:	4b8f      	ldr	r3, [pc, #572]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 8001222:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001224:	f003 0304 	and.w	r3, r3, #4
 8001228:	623b      	str	r3, [r7, #32]
 800122a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122c:	4b8c      	ldr	r3, [pc, #560]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 800122e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001230:	4a8b      	ldr	r2, [pc, #556]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 8001232:	f043 0301 	orr.w	r3, r3, #1
 8001236:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001238:	4b89      	ldr	r3, [pc, #548]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 800123a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123c:	f003 0301 	and.w	r3, r3, #1
 8001240:	61fb      	str	r3, [r7, #28]
 8001242:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001244:	4b86      	ldr	r3, [pc, #536]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 8001246:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001248:	4a85      	ldr	r2, [pc, #532]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 800124a:	f043 0302 	orr.w	r3, r3, #2
 800124e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001250:	4b83      	ldr	r3, [pc, #524]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 8001252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001254:	f003 0302 	and.w	r3, r3, #2
 8001258:	61bb      	str	r3, [r7, #24]
 800125a:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800125c:	2304      	movs	r3, #4
 800125e:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001260:	2303      	movs	r3, #3
 8001262:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001266:	2300      	movs	r3, #0
 8001268:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800126c:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001270:	4619      	mov	r1, r3
 8001272:	487c      	ldr	r0, [pc, #496]	; (8001464 <HAL_ADC_MspInit+0x2cc>)
 8001274:	f003 fba4 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8001278:	2302      	movs	r3, #2
 800127a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800127c:	2303      	movs	r3, #3
 800127e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001282:	2300      	movs	r3, #0
 8001284:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8001288:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800128c:	4619      	mov	r1, r3
 800128e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001292:	f003 fb95 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001296:	2303      	movs	r3, #3
 8001298:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800129a:	2303      	movs	r3, #3
 800129c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012a0:	2300      	movs	r3, #0
 80012a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012a6:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80012aa:	4619      	mov	r1, r3
 80012ac:	486e      	ldr	r0, [pc, #440]	; (8001468 <HAL_ADC_MspInit+0x2d0>)
 80012ae:	f003 fb87 	bl	80049c0 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 80012b2:	4b6e      	ldr	r3, [pc, #440]	; (800146c <HAL_ADC_MspInit+0x2d4>)
 80012b4:	4a6e      	ldr	r2, [pc, #440]	; (8001470 <HAL_ADC_MspInit+0x2d8>)
 80012b6:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 80012b8:	4b6c      	ldr	r3, [pc, #432]	; (800146c <HAL_ADC_MspInit+0x2d4>)
 80012ba:	2205      	movs	r2, #5
 80012bc:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80012be:	4b6b      	ldr	r3, [pc, #428]	; (800146c <HAL_ADC_MspInit+0x2d4>)
 80012c0:	2200      	movs	r2, #0
 80012c2:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 80012c4:	4b69      	ldr	r3, [pc, #420]	; (800146c <HAL_ADC_MspInit+0x2d4>)
 80012c6:	2200      	movs	r2, #0
 80012c8:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 80012ca:	4b68      	ldr	r3, [pc, #416]	; (800146c <HAL_ADC_MspInit+0x2d4>)
 80012cc:	2280      	movs	r2, #128	; 0x80
 80012ce:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 80012d0:	4b66      	ldr	r3, [pc, #408]	; (800146c <HAL_ADC_MspInit+0x2d4>)
 80012d2:	f44f 7280 	mov.w	r2, #256	; 0x100
 80012d6:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 80012d8:	4b64      	ldr	r3, [pc, #400]	; (800146c <HAL_ADC_MspInit+0x2d4>)
 80012da:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80012de:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 80012e0:	4b62      	ldr	r3, [pc, #392]	; (800146c <HAL_ADC_MspInit+0x2d4>)
 80012e2:	2220      	movs	r2, #32
 80012e4:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 80012e6:	4b61      	ldr	r3, [pc, #388]	; (800146c <HAL_ADC_MspInit+0x2d4>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 80012ec:	485f      	ldr	r0, [pc, #380]	; (800146c <HAL_ADC_MspInit+0x2d4>)
 80012ee:	f003 f835 	bl	800435c <HAL_DMA_Init>
 80012f2:	4603      	mov	r3, r0
 80012f4:	2b00      	cmp	r3, #0
 80012f6:	d001      	beq.n	80012fc <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 80012f8:	f000 faa4 	bl	8001844 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	4a5b      	ldr	r2, [pc, #364]	; (800146c <HAL_ADC_MspInit+0x2d4>)
 8001300:	655a      	str	r2, [r3, #84]	; 0x54
 8001302:	4a5a      	ldr	r2, [pc, #360]	; (800146c <HAL_ADC_MspInit+0x2d4>)
 8001304:	687b      	ldr	r3, [r7, #4]
 8001306:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001308:	e0a4      	b.n	8001454 <HAL_ADC_MspInit+0x2bc>
  else if(adcHandle->Instance==ADC2)
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	4a59      	ldr	r2, [pc, #356]	; (8001474 <HAL_ADC_MspInit+0x2dc>)
 8001310:	4293      	cmp	r3, r2
 8001312:	f040 809f 	bne.w	8001454 <HAL_ADC_MspInit+0x2bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001316:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800131a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800131c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001320:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001322:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001326:	4618      	mov	r0, r3
 8001328:	f004 fb22 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <HAL_ADC_MspInit+0x19e>
      Error_Handler();
 8001332:	f000 fa87 	bl	8001844 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001336:	4b49      	ldr	r3, [pc, #292]	; (800145c <HAL_ADC_MspInit+0x2c4>)
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	3301      	adds	r3, #1
 800133c:	4a47      	ldr	r2, [pc, #284]	; (800145c <HAL_ADC_MspInit+0x2c4>)
 800133e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001340:	4b46      	ldr	r3, [pc, #280]	; (800145c <HAL_ADC_MspInit+0x2c4>)
 8001342:	681b      	ldr	r3, [r3, #0]
 8001344:	2b01      	cmp	r3, #1
 8001346:	d10b      	bne.n	8001360 <HAL_ADC_MspInit+0x1c8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 8001348:	4b45      	ldr	r3, [pc, #276]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 800134a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800134c:	4a44      	ldr	r2, [pc, #272]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 800134e:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001352:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001354:	4b42      	ldr	r3, [pc, #264]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 8001356:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001358:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800135c:	617b      	str	r3, [r7, #20]
 800135e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001360:	4b3f      	ldr	r3, [pc, #252]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 8001362:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001364:	4a3e      	ldr	r2, [pc, #248]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 8001366:	f043 0304 	orr.w	r3, r3, #4
 800136a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800136c:	4b3c      	ldr	r3, [pc, #240]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 800136e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001370:	f003 0304 	and.w	r3, r3, #4
 8001374:	613b      	str	r3, [r7, #16]
 8001376:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001378:	4b39      	ldr	r3, [pc, #228]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 800137a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800137c:	4a38      	ldr	r2, [pc, #224]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 800137e:	f043 0301 	orr.w	r3, r3, #1
 8001382:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001384:	4b36      	ldr	r3, [pc, #216]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 8001386:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001388:	f003 0301 	and.w	r3, r3, #1
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001390:	4b33      	ldr	r3, [pc, #204]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 8001392:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001394:	4a32      	ldr	r2, [pc, #200]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 8001396:	f043 0302 	orr.w	r3, r3, #2
 800139a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800139c:	4b30      	ldr	r3, [pc, #192]	; (8001460 <HAL_ADC_MspInit+0x2c8>)
 800139e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80013a0:	f003 0302 	and.w	r3, r3, #2
 80013a4:	60bb      	str	r3, [r7, #8]
 80013a6:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 80013a8:	230b      	movs	r3, #11
 80013aa:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013ac:	2303      	movs	r3, #3
 80013ae:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013b2:	2300      	movs	r3, #0
 80013b4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80013b8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013bc:	4619      	mov	r1, r3
 80013be:	4829      	ldr	r0, [pc, #164]	; (8001464 <HAL_ADC_MspInit+0x2cc>)
 80013c0:	f003 fafe 	bl	80049c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 80013c4:	2301      	movs	r3, #1
 80013c6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013c8:	2303      	movs	r3, #3
 80013ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ce:	2300      	movs	r3, #0
 80013d0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 80013d4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013d8:	4619      	mov	r1, r3
 80013da:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80013de:	f003 faef 	bl	80049c0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = V_Imes_Pin;
 80013e2:	2304      	movs	r3, #4
 80013e4:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80013e6:	2303      	movs	r3, #3
 80013e8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ec:	2300      	movs	r3, #0
 80013ee:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(V_Imes_GPIO_Port, &GPIO_InitStruct);
 80013f2:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80013f6:	4619      	mov	r1, r3
 80013f8:	481b      	ldr	r0, [pc, #108]	; (8001468 <HAL_ADC_MspInit+0x2d0>)
 80013fa:	f003 fae1 	bl	80049c0 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 80013fe:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <HAL_ADC_MspInit+0x2e0>)
 8001400:	4a1e      	ldr	r2, [pc, #120]	; (800147c <HAL_ADC_MspInit+0x2e4>)
 8001402:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001404:	4b1c      	ldr	r3, [pc, #112]	; (8001478 <HAL_ADC_MspInit+0x2e0>)
 8001406:	2224      	movs	r2, #36	; 0x24
 8001408:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800140a:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <HAL_ADC_MspInit+0x2e0>)
 800140c:	2200      	movs	r2, #0
 800140e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <HAL_ADC_MspInit+0x2e0>)
 8001412:	2200      	movs	r2, #0
 8001414:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <HAL_ADC_MspInit+0x2e0>)
 8001418:	2280      	movs	r2, #128	; 0x80
 800141a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800141c:	4b16      	ldr	r3, [pc, #88]	; (8001478 <HAL_ADC_MspInit+0x2e0>)
 800141e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001422:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001424:	4b14      	ldr	r3, [pc, #80]	; (8001478 <HAL_ADC_MspInit+0x2e0>)
 8001426:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800142a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800142c:	4b12      	ldr	r3, [pc, #72]	; (8001478 <HAL_ADC_MspInit+0x2e0>)
 800142e:	2220      	movs	r2, #32
 8001430:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001432:	4b11      	ldr	r3, [pc, #68]	; (8001478 <HAL_ADC_MspInit+0x2e0>)
 8001434:	2200      	movs	r2, #0
 8001436:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001438:	480f      	ldr	r0, [pc, #60]	; (8001478 <HAL_ADC_MspInit+0x2e0>)
 800143a:	f002 ff8f 	bl	800435c <HAL_DMA_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <HAL_ADC_MspInit+0x2b0>
      Error_Handler();
 8001444:	f000 f9fe 	bl	8001844 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	4a0b      	ldr	r2, [pc, #44]	; (8001478 <HAL_ADC_MspInit+0x2e0>)
 800144c:	655a      	str	r2, [r3, #84]	; 0x54
 800144e:	4a0a      	ldr	r2, [pc, #40]	; (8001478 <HAL_ADC_MspInit+0x2e0>)
 8001450:	687b      	ldr	r3, [r7, #4]
 8001452:	6293      	str	r3, [r2, #40]	; 0x28
}
 8001454:	bf00      	nop
 8001456:	3790      	adds	r7, #144	; 0x90
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}
 800145c:	2000044c 	.word	0x2000044c
 8001460:	40021000 	.word	0x40021000
 8001464:	48000800 	.word	0x48000800
 8001468:	48000400 	.word	0x48000400
 800146c:	2000038c 	.word	0x2000038c
 8001470:	4002001c 	.word	0x4002001c
 8001474:	50000100 	.word	0x50000100
 8001478:	200003ec 	.word	0x200003ec
 800147c:	40020008 	.word	0x40020008

08001480 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 8001486:	4b16      	ldr	r3, [pc, #88]	; (80014e0 <MX_DMA_Init+0x60>)
 8001488:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800148a:	4a15      	ldr	r2, [pc, #84]	; (80014e0 <MX_DMA_Init+0x60>)
 800148c:	f043 0304 	orr.w	r3, r3, #4
 8001490:	6493      	str	r3, [r2, #72]	; 0x48
 8001492:	4b13      	ldr	r3, [pc, #76]	; (80014e0 <MX_DMA_Init+0x60>)
 8001494:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001496:	f003 0304 	and.w	r3, r3, #4
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 800149e:	4b10      	ldr	r3, [pc, #64]	; (80014e0 <MX_DMA_Init+0x60>)
 80014a0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014a2:	4a0f      	ldr	r2, [pc, #60]	; (80014e0 <MX_DMA_Init+0x60>)
 80014a4:	f043 0301 	orr.w	r3, r3, #1
 80014a8:	6493      	str	r3, [r2, #72]	; 0x48
 80014aa:	4b0d      	ldr	r3, [pc, #52]	; (80014e0 <MX_DMA_Init+0x60>)
 80014ac:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80014ae:	f003 0301 	and.w	r3, r3, #1
 80014b2:	603b      	str	r3, [r7, #0]
 80014b4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 80014b6:	2200      	movs	r2, #0
 80014b8:	2100      	movs	r1, #0
 80014ba:	200b      	movs	r0, #11
 80014bc:	f002 ff26 	bl	800430c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 80014c0:	200b      	movs	r0, #11
 80014c2:	f002 ff3d 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 80014c6:	2200      	movs	r2, #0
 80014c8:	2100      	movs	r1, #0
 80014ca:	200c      	movs	r0, #12
 80014cc:	f002 ff1e 	bl	800430c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 80014d0:	200c      	movs	r0, #12
 80014d2:	f002 ff35 	bl	8004340 <HAL_NVIC_EnableIRQ>

}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40021000 	.word	0x40021000

080014e4 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08a      	sub	sp, #40	; 0x28
 80014e8:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ea:	f107 0314 	add.w	r3, r7, #20
 80014ee:	2200      	movs	r2, #0
 80014f0:	601a      	str	r2, [r3, #0]
 80014f2:	605a      	str	r2, [r3, #4]
 80014f4:	609a      	str	r2, [r3, #8]
 80014f6:	60da      	str	r2, [r3, #12]
 80014f8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80014fa:	4b3f      	ldr	r3, [pc, #252]	; (80015f8 <MX_GPIO_Init+0x114>)
 80014fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014fe:	4a3e      	ldr	r2, [pc, #248]	; (80015f8 <MX_GPIO_Init+0x114>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001506:	4b3c      	ldr	r3, [pc, #240]	; (80015f8 <MX_GPIO_Init+0x114>)
 8001508:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001512:	4b39      	ldr	r3, [pc, #228]	; (80015f8 <MX_GPIO_Init+0x114>)
 8001514:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001516:	4a38      	ldr	r2, [pc, #224]	; (80015f8 <MX_GPIO_Init+0x114>)
 8001518:	f043 0320 	orr.w	r3, r3, #32
 800151c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800151e:	4b36      	ldr	r3, [pc, #216]	; (80015f8 <MX_GPIO_Init+0x114>)
 8001520:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001522:	f003 0320 	and.w	r3, r3, #32
 8001526:	60fb      	str	r3, [r7, #12]
 8001528:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800152a:	4b33      	ldr	r3, [pc, #204]	; (80015f8 <MX_GPIO_Init+0x114>)
 800152c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800152e:	4a32      	ldr	r2, [pc, #200]	; (80015f8 <MX_GPIO_Init+0x114>)
 8001530:	f043 0301 	orr.w	r3, r3, #1
 8001534:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001536:	4b30      	ldr	r3, [pc, #192]	; (80015f8 <MX_GPIO_Init+0x114>)
 8001538:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800153a:	f003 0301 	and.w	r3, r3, #1
 800153e:	60bb      	str	r3, [r7, #8]
 8001540:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001542:	4b2d      	ldr	r3, [pc, #180]	; (80015f8 <MX_GPIO_Init+0x114>)
 8001544:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001546:	4a2c      	ldr	r2, [pc, #176]	; (80015f8 <MX_GPIO_Init+0x114>)
 8001548:	f043 0302 	orr.w	r3, r3, #2
 800154c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800154e:	4b2a      	ldr	r3, [pc, #168]	; (80015f8 <MX_GPIO_Init+0x114>)
 8001550:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001552:	f003 0302 	and.w	r3, r3, #2
 8001556:	607b      	str	r3, [r7, #4]
 8001558:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800155a:	4b27      	ldr	r3, [pc, #156]	; (80015f8 <MX_GPIO_Init+0x114>)
 800155c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800155e:	4a26      	ldr	r2, [pc, #152]	; (80015f8 <MX_GPIO_Init+0x114>)
 8001560:	f043 0308 	orr.w	r3, r3, #8
 8001564:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001566:	4b24      	ldr	r3, [pc, #144]	; (80015f8 <MX_GPIO_Init+0x114>)
 8001568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800156a:	f003 0308 	and.w	r3, r3, #8
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	2120      	movs	r1, #32
 8001576:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800157a:	f003 fba3 	bl	8004cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 800157e:	2200      	movs	r2, #0
 8001580:	2104      	movs	r1, #4
 8001582:	481e      	ldr	r0, [pc, #120]	; (80015fc <MX_GPIO_Init+0x118>)
 8001584:	f003 fb9e 	bl	8004cc4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8001588:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800158e:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8001592:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8001598:	f107 0314 	add.w	r3, r7, #20
 800159c:	4619      	mov	r1, r3
 800159e:	4818      	ldr	r0, [pc, #96]	; (8001600 <MX_GPIO_Init+0x11c>)
 80015a0:	f003 fa0e 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 80015a4:	2320      	movs	r3, #32
 80015a6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a8:	2301      	movs	r3, #1
 80015aa:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ac:	2300      	movs	r3, #0
 80015ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015b0:	2300      	movs	r3, #0
 80015b2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 80015b4:	f107 0314 	add.w	r3, r7, #20
 80015b8:	4619      	mov	r1, r3
 80015ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80015be:	f003 f9ff 	bl	80049c0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 80015c2:	2304      	movs	r3, #4
 80015c4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015c6:	2301      	movs	r3, #1
 80015c8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ca:	2300      	movs	r3, #0
 80015cc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ce:	2300      	movs	r3, #0
 80015d0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 80015d2:	f107 0314 	add.w	r3, r7, #20
 80015d6:	4619      	mov	r1, r3
 80015d8:	4808      	ldr	r0, [pc, #32]	; (80015fc <MX_GPIO_Init+0x118>)
 80015da:	f003 f9f1 	bl	80049c0 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 80015de:	2200      	movs	r2, #0
 80015e0:	2100      	movs	r1, #0
 80015e2:	2028      	movs	r0, #40	; 0x28
 80015e4:	f002 fe92 	bl	800430c <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 80015e8:	2028      	movs	r0, #40	; 0x28
 80015ea:	f002 fea9 	bl	8004340 <HAL_NVIC_EnableIRQ>

}
 80015ee:	bf00      	nop
 80015f0:	3728      	adds	r7, #40	; 0x28
 80015f2:	46bd      	mov	sp, r7
 80015f4:	bd80      	pop	{r7, pc}
 80015f6:	bf00      	nop
 80015f8:	40021000 	.word	0x40021000
 80015fc:	48000c00 	.word	0x48000c00
 8001600:	48000800 	.word	0x48000800

08001604 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001604:	b480      	push	{r7}
 8001606:	b083      	sub	sp, #12
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001614:	d12a      	bne.n	800166c <HAL_ADC_ConvCpltCallback+0x68>
	{
		adcValue[0] = (float)dmaADCU;
 8001616:	4b18      	ldr	r3, [pc, #96]	; (8001678 <HAL_ADC_ConvCpltCallback+0x74>)
 8001618:	681b      	ldr	r3, [r3, #0]
 800161a:	ee07 3a90 	vmov	s15, r3
 800161e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001622:	4b16      	ldr	r3, [pc, #88]	; (800167c <HAL_ADC_ConvCpltCallback+0x78>)
 8001624:	edc3 7a00 	vstr	s15, [r3]
		adcValue[0] = adcValue[0] * 3300 / 4096;
 8001628:	4b14      	ldr	r3, [pc, #80]	; (800167c <HAL_ADC_ConvCpltCallback+0x78>)
 800162a:	edd3 7a00 	vldr	s15, [r3]
 800162e:	ed9f 7a14 	vldr	s14, [pc, #80]	; 8001680 <HAL_ADC_ConvCpltCallback+0x7c>
 8001632:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001636:	eddf 6a13 	vldr	s13, [pc, #76]	; 8001684 <HAL_ADC_ConvCpltCallback+0x80>
 800163a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800163e:	4b0f      	ldr	r3, [pc, #60]	; (800167c <HAL_ADC_ConvCpltCallback+0x78>)
 8001640:	edc3 7a00 	vstr	s15, [r3]
		adcValue[0] -= OFFSET_SME;
 8001644:	4b0d      	ldr	r3, [pc, #52]	; (800167c <HAL_ADC_ConvCpltCallback+0x78>)
 8001646:	edd3 7a00 	vldr	s15, [r3]
 800164a:	ed9f 7a0f 	vldr	s14, [pc, #60]	; 8001688 <HAL_ADC_ConvCpltCallback+0x84>
 800164e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001652:	4b0a      	ldr	r3, [pc, #40]	; (800167c <HAL_ADC_ConvCpltCallback+0x78>)
 8001654:	edc3 7a00 	vstr	s15, [r3]
		adcValue[0] = adcValue[0] / SENSITIVITY_SME;
 8001658:	4b08      	ldr	r3, [pc, #32]	; (800167c <HAL_ADC_ConvCpltCallback+0x78>)
 800165a:	ed93 7a00 	vldr	s14, [r3]
 800165e:	eddf 6a0b 	vldr	s13, [pc, #44]	; 800168c <HAL_ADC_ConvCpltCallback+0x88>
 8001662:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001666:	4b05      	ldr	r3, [pc, #20]	; (800167c <HAL_ADC_ConvCpltCallback+0x78>)
 8001668:	edc3 7a00 	vstr	s15, [r3]
	}
}
 800166c:	bf00      	nop
 800166e:	370c      	adds	r7, #12
 8001670:	46bd      	mov	sp, r7
 8001672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001676:	4770      	bx	lr
 8001678:	20000458 	.word	0x20000458
 800167c:	2000045c 	.word	0x2000045c
 8001680:	454e4000 	.word	0x454e4000
 8001684:	45800000 	.word	0x45800000
 8001688:	44ce4000 	.word	0x44ce4000
 800168c:	42480000 	.word	0x42480000

08001690 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001694:	f001 f8e5 	bl	8002862 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001698:	f000 f83a 	bl	8001710 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800169c:	f7ff ff22 	bl	80014e4 <MX_GPIO_Init>
  MX_DMA_Init();
 80016a0:	f7ff feee 	bl	8001480 <MX_DMA_Init>
  MX_ADC2_Init();
 80016a4:	f7ff fd00 	bl	80010a8 <MX_ADC2_Init>
  MX_ADC1_Init();
 80016a8:	f7ff fc84 	bl	8000fb4 <MX_ADC1_Init>
  MX_TIM1_Init();
 80016ac:	f000 fab2 	bl	8001c14 <MX_TIM1_Init>
  MX_TIM3_Init();
 80016b0:	f000 fb5e 	bl	8001d70 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 80016b4:	f000 fd16 	bl	80020e4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 80016b8:	f000 fd60 	bl	800217c <MX_USART3_UART_Init>
  MX_TIM4_Init();
 80016bc:	f000 fbae 	bl	8001e1c <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 80016c0:	f000 fe50 	bl	8002364 <Shell_Init>

	  if(HAL_TIM_Encoder_Start(&htim3, TIM_CHANNEL_ALL) != HAL_OK) // Encodeur
 80016c4:	213c      	movs	r1, #60	; 0x3c
 80016c6:	480f      	ldr	r0, [pc, #60]	; (8001704 <main+0x74>)
 80016c8:	f004 ff1c 	bl	8006504 <HAL_TIM_Encoder_Start>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <main+0x46>
	  {
		  Error_Handler();
 80016d2:	f000 f8b7 	bl	8001844 <Error_Handler>
	  }

	if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 80016d6:	217f      	movs	r1, #127	; 0x7f
 80016d8:	480b      	ldr	r0, [pc, #44]	; (8001708 <main+0x78>)
 80016da:	f002 fbf5 	bl	8003ec8 <HAL_ADCEx_Calibration_Start>
 80016de:	4603      	mov	r3, r0
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d001      	beq.n	80016e8 <main+0x58>
	{
		Error_Handler();
 80016e4:	f000 f8ae 	bl	8001844 <Error_Handler>
	}

	if(HAL_ADC_Start_DMA(&hadc1, &dmaADCU, 1) != HAL_OK)
 80016e8:	2201      	movs	r2, #1
 80016ea:	4908      	ldr	r1, [pc, #32]	; (800170c <main+0x7c>)
 80016ec:	4806      	ldr	r0, [pc, #24]	; (8001708 <main+0x78>)
 80016ee:	f001 fd1b 	bl	8003128 <HAL_ADC_Start_DMA>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <main+0x6c>
	{
		Error_Handler();
 80016f8:	f000 f8a4 	bl	8001844 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 80016fc:	f000 fe72 	bl	80023e4 <Shell_Loop>
 8001700:	e7fc      	b.n	80016fc <main+0x6c>
 8001702:	bf00      	nop
 8001704:	20000500 	.word	0x20000500
 8001708:	200002b4 	.word	0x200002b4
 800170c:	20000458 	.word	0x20000458

08001710 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001710:	b580      	push	{r7, lr}
 8001712:	b094      	sub	sp, #80	; 0x50
 8001714:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001716:	f107 0318 	add.w	r3, r7, #24
 800171a:	2238      	movs	r2, #56	; 0x38
 800171c:	2100      	movs	r1, #0
 800171e:	4618      	mov	r0, r3
 8001720:	f009 f94b 	bl	800a9ba <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001724:	1d3b      	adds	r3, r7, #4
 8001726:	2200      	movs	r2, #0
 8001728:	601a      	str	r2, [r3, #0]
 800172a:	605a      	str	r2, [r3, #4]
 800172c:	609a      	str	r2, [r3, #8]
 800172e:	60da      	str	r2, [r3, #12]
 8001730:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8001732:	2000      	movs	r0, #0
 8001734:	f003 fb02 	bl	8004d3c <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001738:	2301      	movs	r3, #1
 800173a:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800173c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001740:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001742:	2302      	movs	r3, #2
 8001744:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001746:	2303      	movs	r3, #3
 8001748:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 800174a:	2306      	movs	r3, #6
 800174c:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 800174e:	2355      	movs	r3, #85	; 0x55
 8001750:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001752:	2302      	movs	r3, #2
 8001754:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8001756:	2302      	movs	r3, #2
 8001758:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800175a:	2302      	movs	r3, #2
 800175c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800175e:	f107 0318 	add.w	r3, r7, #24
 8001762:	4618      	mov	r0, r3
 8001764:	f003 fb9e 	bl	8004ea4 <HAL_RCC_OscConfig>
 8001768:	4603      	mov	r3, r0
 800176a:	2b00      	cmp	r3, #0
 800176c:	d001      	beq.n	8001772 <SystemClock_Config+0x62>
  {
    Error_Handler();
 800176e:	f000 f869 	bl	8001844 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001772:	230f      	movs	r3, #15
 8001774:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001776:	2303      	movs	r3, #3
 8001778:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800177a:	2300      	movs	r3, #0
 800177c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800177e:	2300      	movs	r3, #0
 8001780:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001782:	2300      	movs	r3, #0
 8001784:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001786:	1d3b      	adds	r3, r7, #4
 8001788:	2104      	movs	r1, #4
 800178a:	4618      	mov	r0, r3
 800178c:	f003 fea2 	bl	80054d4 <HAL_RCC_ClockConfig>
 8001790:	4603      	mov	r3, r0
 8001792:	2b00      	cmp	r3, #0
 8001794:	d001      	beq.n	800179a <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001796:	f000 f855 	bl	8001844 <Error_Handler>
  }
}
 800179a:	bf00      	nop
 800179c:	3750      	adds	r7, #80	; 0x50
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}
 80017a2:	0000      	movs	r0, r0
 80017a4:	0000      	movs	r0, r0
	...

080017a8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80017a8:	b580      	push	{r7, lr}
 80017aa:	b084      	sub	sp, #16
 80017ac:	af00      	add	r7, sp, #0
 80017ae:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	4a1e      	ldr	r2, [pc, #120]	; (8001830 <HAL_TIM_PeriodElapsedCallback+0x88>)
 80017b6:	4293      	cmp	r3, r2
 80017b8:	d101      	bne.n	80017be <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80017ba:	f001 f86b 	bl	8002894 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
	if(htim->Instance == TIM4)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4a1c      	ldr	r2, [pc, #112]	; (8001834 <HAL_TIM_PeriodElapsedCallback+0x8c>)
 80017c4:	4293      	cmp	r3, r2
 80017c6:	d12b      	bne.n	8001820 <HAL_TIM_PeriodElapsedCallback+0x78>
	{
		uint32_t encoder_value = htim->Instance->CNT;
 80017c8:	687b      	ldr	r3, [r7, #4]
 80017ca:	681b      	ldr	r3, [r3, #0]
 80017cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017ce:	60fb      	str	r3, [r7, #12]

		float distance = (encoder_value - prev_encoder_value) / RES_ENCODER;
 80017d0:	4b19      	ldr	r3, [pc, #100]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x90>)
 80017d2:	681b      	ldr	r3, [r3, #0]
 80017d4:	68fa      	ldr	r2, [r7, #12]
 80017d6:	1ad3      	subs	r3, r2, r3
 80017d8:	0b1b      	lsrs	r3, r3, #12
 80017da:	ee07 3a90 	vmov	s15, r3
 80017de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017e2:	edc7 7a02 	vstr	s15, [r7, #8]

		rpm = 60.0 * distance / TE;
 80017e6:	68b8      	ldr	r0, [r7, #8]
 80017e8:	f7fe fee6 	bl	80005b8 <__aeabi_f2d>
 80017ec:	f04f 0200 	mov.w	r2, #0
 80017f0:	4b12      	ldr	r3, [pc, #72]	; (800183c <HAL_TIM_PeriodElapsedCallback+0x94>)
 80017f2:	f7fe ff39 	bl	8000668 <__aeabi_dmul>
 80017f6:	4602      	mov	r2, r0
 80017f8:	460b      	mov	r3, r1
 80017fa:	4610      	mov	r0, r2
 80017fc:	4619      	mov	r1, r3
 80017fe:	a30a      	add	r3, pc, #40	; (adr r3, 8001828 <HAL_TIM_PeriodElapsedCallback+0x80>)
 8001800:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001804:	f7ff f85a 	bl	80008bc <__aeabi_ddiv>
 8001808:	4602      	mov	r2, r0
 800180a:	460b      	mov	r3, r1
 800180c:	4610      	mov	r0, r2
 800180e:	4619      	mov	r1, r3
 8001810:	f7ff fa02 	bl	8000c18 <__aeabi_d2f>
 8001814:	4603      	mov	r3, r0
 8001816:	4a0a      	ldr	r2, [pc, #40]	; (8001840 <HAL_TIM_PeriodElapsedCallback+0x98>)
 8001818:	6013      	str	r3, [r2, #0]

		prev_encoder_value = encoder_value;
 800181a:	4a07      	ldr	r2, [pc, #28]	; (8001838 <HAL_TIM_PeriodElapsedCallback+0x90>)
 800181c:	68fb      	ldr	r3, [r7, #12]
 800181e:	6013      	str	r3, [r2, #0]

	}
  /* USER CODE END Callback 1 */
}
 8001820:	bf00      	nop
 8001822:	3710      	adds	r7, #16
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	88e368f1 	.word	0x88e368f1
 800182c:	3ef4f8b5 	.word	0x3ef4f8b5
 8001830:	40001000 	.word	0x40001000
 8001834:	40000800 	.word	0x40000800
 8001838:	20000450 	.word	0x20000450
 800183c:	404e0000 	.word	0x404e0000
 8001840:	20000454 	.word	0x20000454

08001844 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001848:	b672      	cpsid	i
}
 800184a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800184c:	e7fe      	b.n	800184c <Error_Handler+0x8>
	...

08001850 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001856:	4b0f      	ldr	r3, [pc, #60]	; (8001894 <HAL_MspInit+0x44>)
 8001858:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800185a:	4a0e      	ldr	r2, [pc, #56]	; (8001894 <HAL_MspInit+0x44>)
 800185c:	f043 0301 	orr.w	r3, r3, #1
 8001860:	6613      	str	r3, [r2, #96]	; 0x60
 8001862:	4b0c      	ldr	r3, [pc, #48]	; (8001894 <HAL_MspInit+0x44>)
 8001864:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001866:	f003 0301 	and.w	r3, r3, #1
 800186a:	607b      	str	r3, [r7, #4]
 800186c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800186e:	4b09      	ldr	r3, [pc, #36]	; (8001894 <HAL_MspInit+0x44>)
 8001870:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001872:	4a08      	ldr	r2, [pc, #32]	; (8001894 <HAL_MspInit+0x44>)
 8001874:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001878:	6593      	str	r3, [r2, #88]	; 0x58
 800187a:	4b06      	ldr	r3, [pc, #24]	; (8001894 <HAL_MspInit+0x44>)
 800187c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800187e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8001886:	f003 fafd 	bl	8004e84 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800188a:	bf00      	nop
 800188c:	3708      	adds	r7, #8
 800188e:	46bd      	mov	sp, r7
 8001890:	bd80      	pop	{r7, pc}
 8001892:	bf00      	nop
 8001894:	40021000 	.word	0x40021000

08001898 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b08c      	sub	sp, #48	; 0x30
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80018a0:	2300      	movs	r3, #0
 80018a2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80018a4:	2300      	movs	r3, #0
 80018a6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80018a8:	4b2c      	ldr	r3, [pc, #176]	; (800195c <HAL_InitTick+0xc4>)
 80018aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018ac:	4a2b      	ldr	r2, [pc, #172]	; (800195c <HAL_InitTick+0xc4>)
 80018ae:	f043 0310 	orr.w	r3, r3, #16
 80018b2:	6593      	str	r3, [r2, #88]	; 0x58
 80018b4:	4b29      	ldr	r3, [pc, #164]	; (800195c <HAL_InitTick+0xc4>)
 80018b6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80018b8:	f003 0310 	and.w	r3, r3, #16
 80018bc:	60bb      	str	r3, [r7, #8]
 80018be:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80018c0:	f107 020c 	add.w	r2, r7, #12
 80018c4:	f107 0310 	add.w	r3, r7, #16
 80018c8:	4611      	mov	r1, r2
 80018ca:	4618      	mov	r0, r3
 80018cc:	f003 ffd8 	bl	8005880 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80018d0:	f003 ffaa 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 80018d4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80018d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80018d8:	4a21      	ldr	r2, [pc, #132]	; (8001960 <HAL_InitTick+0xc8>)
 80018da:	fba2 2303 	umull	r2, r3, r2, r3
 80018de:	0c9b      	lsrs	r3, r3, #18
 80018e0:	3b01      	subs	r3, #1
 80018e2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 80018e4:	4b1f      	ldr	r3, [pc, #124]	; (8001964 <HAL_InitTick+0xcc>)
 80018e6:	4a20      	ldr	r2, [pc, #128]	; (8001968 <HAL_InitTick+0xd0>)
 80018e8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 80018ea:	4b1e      	ldr	r3, [pc, #120]	; (8001964 <HAL_InitTick+0xcc>)
 80018ec:	f240 32e7 	movw	r2, #999	; 0x3e7
 80018f0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 80018f2:	4a1c      	ldr	r2, [pc, #112]	; (8001964 <HAL_InitTick+0xcc>)
 80018f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80018f6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 80018f8:	4b1a      	ldr	r3, [pc, #104]	; (8001964 <HAL_InitTick+0xcc>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018fe:	4b19      	ldr	r3, [pc, #100]	; (8001964 <HAL_InitTick+0xcc>)
 8001900:	2200      	movs	r2, #0
 8001902:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001904:	4817      	ldr	r0, [pc, #92]	; (8001964 <HAL_InitTick+0xcc>)
 8001906:	f004 fa81 	bl	8005e0c <HAL_TIM_Base_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001910:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001914:	2b00      	cmp	r3, #0
 8001916:	d11b      	bne.n	8001950 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001918:	4812      	ldr	r0, [pc, #72]	; (8001964 <HAL_InitTick+0xcc>)
 800191a:	f004 facf 	bl	8005ebc <HAL_TIM_Base_Start_IT>
 800191e:	4603      	mov	r3, r0
 8001920:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001924:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001928:	2b00      	cmp	r3, #0
 800192a:	d111      	bne.n	8001950 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800192c:	2036      	movs	r0, #54	; 0x36
 800192e:	f002 fd07 	bl	8004340 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001932:	687b      	ldr	r3, [r7, #4]
 8001934:	2b0f      	cmp	r3, #15
 8001936:	d808      	bhi.n	800194a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001938:	2200      	movs	r2, #0
 800193a:	6879      	ldr	r1, [r7, #4]
 800193c:	2036      	movs	r0, #54	; 0x36
 800193e:	f002 fce5 	bl	800430c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001942:	4a0a      	ldr	r2, [pc, #40]	; (800196c <HAL_InitTick+0xd4>)
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	6013      	str	r3, [r2, #0]
 8001948:	e002      	b.n	8001950 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800194a:	2301      	movs	r3, #1
 800194c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001950:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001954:	4618      	mov	r0, r3
 8001956:	3730      	adds	r7, #48	; 0x30
 8001958:	46bd      	mov	sp, r7
 800195a:	bd80      	pop	{r7, pc}
 800195c:	40021000 	.word	0x40021000
 8001960:	431bde83 	.word	0x431bde83
 8001964:	20000464 	.word	0x20000464
 8001968:	40001000 	.word	0x40001000
 800196c:	200000c8 	.word	0x200000c8

08001970 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001974:	e7fe      	b.n	8001974 <NMI_Handler+0x4>

08001976 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001976:	b480      	push	{r7}
 8001978:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800197a:	e7fe      	b.n	800197a <HardFault_Handler+0x4>

0800197c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001980:	e7fe      	b.n	8001980 <MemManage_Handler+0x4>

08001982 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001982:	b480      	push	{r7}
 8001984:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001986:	e7fe      	b.n	8001986 <BusFault_Handler+0x4>

08001988 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001988:	b480      	push	{r7}
 800198a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800198c:	e7fe      	b.n	800198c <UsageFault_Handler+0x4>

0800198e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800198e:	b480      	push	{r7}
 8001990:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001992:	bf00      	nop
 8001994:	46bd      	mov	sp, r7
 8001996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800199a:	4770      	bx	lr

0800199c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800199c:	b480      	push	{r7}
 800199e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80019a0:	bf00      	nop
 80019a2:	46bd      	mov	sp, r7
 80019a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a8:	4770      	bx	lr

080019aa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80019aa:	b480      	push	{r7}
 80019ac:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80019ae:	bf00      	nop
 80019b0:	46bd      	mov	sp, r7
 80019b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b6:	4770      	bx	lr

080019b8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80019b8:	b480      	push	{r7}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80019bc:	bf00      	nop
 80019be:	46bd      	mov	sp, r7
 80019c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c4:	4770      	bx	lr
	...

080019c8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80019cc:	4802      	ldr	r0, [pc, #8]	; (80019d8 <DMA1_Channel1_IRQHandler+0x10>)
 80019ce:	f002 fea8 	bl	8004722 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200003ec 	.word	0x200003ec

080019dc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 80019e0:	4802      	ldr	r0, [pc, #8]	; (80019ec <DMA1_Channel2_IRQHandler+0x10>)
 80019e2:	f002 fe9e 	bl	8004722 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	2000038c 	.word	0x2000038c

080019f0 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80019f4:	4802      	ldr	r0, [pc, #8]	; (8001a00 <TIM1_UP_TIM16_IRQHandler+0x10>)
 80019f6:	f004 fe13 	bl	8006620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200004b4 	.word	0x200004b4

08001a04 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8001a08:	4802      	ldr	r0, [pc, #8]	; (8001a14 <TIM4_IRQHandler+0x10>)
 8001a0a:	f004 fe09 	bl	8006620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8001a0e:	bf00      	nop
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop
 8001a14:	2000054c 	.word	0x2000054c

08001a18 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001a18:	b580      	push	{r7, lr}
 8001a1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001a1c:	4802      	ldr	r0, [pc, #8]	; (8001a28 <USART2_IRQHandler+0x10>)
 8001a1e:	f006 fa75 	bl	8007f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001a22:	bf00      	nop
 8001a24:	bd80      	pop	{r7, pc}
 8001a26:	bf00      	nop
 8001a28:	20000598 	.word	0x20000598

08001a2c <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001a2c:	b580      	push	{r7, lr}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001a30:	4802      	ldr	r0, [pc, #8]	; (8001a3c <USART3_IRQHandler+0x10>)
 8001a32:	f006 fa6b 	bl	8007f0c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001a36:	bf00      	nop
 8001a38:	bd80      	pop	{r7, pc}
 8001a3a:	bf00      	nop
 8001a3c:	20000628 	.word	0x20000628

08001a40 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001a40:	b580      	push	{r7, lr}
 8001a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001a44:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001a48:	f003 f954 	bl	8004cf4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}

08001a50 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8001a50:	b580      	push	{r7, lr}
 8001a52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001a54:	4802      	ldr	r0, [pc, #8]	; (8001a60 <TIM6_DAC_IRQHandler+0x10>)
 8001a56:	f004 fde3 	bl	8006620 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001a5a:	bf00      	nop
 8001a5c:	bd80      	pop	{r7, pc}
 8001a5e:	bf00      	nop
 8001a60:	20000464 	.word	0x20000464

08001a64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001a64:	b480      	push	{r7}
 8001a66:	af00      	add	r7, sp, #0
  return 1;
 8001a68:	2301      	movs	r3, #1
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_kill>:

int _kill(int pid, int sig)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b082      	sub	sp, #8
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
 8001a7c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001a7e:	f009 f84b 	bl	800ab18 <__errno>
 8001a82:	4603      	mov	r3, r0
 8001a84:	2216      	movs	r2, #22
 8001a86:	601a      	str	r2, [r3, #0]
  return -1;
 8001a88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	3708      	adds	r7, #8
 8001a90:	46bd      	mov	sp, r7
 8001a92:	bd80      	pop	{r7, pc}

08001a94 <_exit>:

void _exit (int status)
{
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b082      	sub	sp, #8
 8001a98:	af00      	add	r7, sp, #0
 8001a9a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001a9c:	f04f 31ff 	mov.w	r1, #4294967295
 8001aa0:	6878      	ldr	r0, [r7, #4]
 8001aa2:	f7ff ffe7 	bl	8001a74 <_kill>
  while (1) {}    /* Make sure we hang here */
 8001aa6:	e7fe      	b.n	8001aa6 <_exit+0x12>

08001aa8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	60b9      	str	r1, [r7, #8]
 8001ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
 8001ab8:	e00a      	b.n	8001ad0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001aba:	f3af 8000 	nop.w
 8001abe:	4601      	mov	r1, r0
 8001ac0:	68bb      	ldr	r3, [r7, #8]
 8001ac2:	1c5a      	adds	r2, r3, #1
 8001ac4:	60ba      	str	r2, [r7, #8]
 8001ac6:	b2ca      	uxtb	r2, r1
 8001ac8:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	3301      	adds	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	dbf0      	blt.n	8001aba <_read+0x12>
  }

  return len;
 8001ad8:	687b      	ldr	r3, [r7, #4]
}
 8001ada:	4618      	mov	r0, r3
 8001adc:	3718      	adds	r7, #24
 8001ade:	46bd      	mov	sp, r7
 8001ae0:	bd80      	pop	{r7, pc}

08001ae2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001ae2:	b580      	push	{r7, lr}
 8001ae4:	b086      	sub	sp, #24
 8001ae6:	af00      	add	r7, sp, #0
 8001ae8:	60f8      	str	r0, [r7, #12]
 8001aea:	60b9      	str	r1, [r7, #8]
 8001aec:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001aee:	2300      	movs	r3, #0
 8001af0:	617b      	str	r3, [r7, #20]
 8001af2:	e009      	b.n	8001b08 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001af4:	68bb      	ldr	r3, [r7, #8]
 8001af6:	1c5a      	adds	r2, r3, #1
 8001af8:	60ba      	str	r2, [r7, #8]
 8001afa:	781b      	ldrb	r3, [r3, #0]
 8001afc:	4618      	mov	r0, r3
 8001afe:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001b02:	697b      	ldr	r3, [r7, #20]
 8001b04:	3301      	adds	r3, #1
 8001b06:	617b      	str	r3, [r7, #20]
 8001b08:	697a      	ldr	r2, [r7, #20]
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	429a      	cmp	r2, r3
 8001b0e:	dbf1      	blt.n	8001af4 <_write+0x12>
  }
  return len;
 8001b10:	687b      	ldr	r3, [r7, #4]
}
 8001b12:	4618      	mov	r0, r3
 8001b14:	3718      	adds	r7, #24
 8001b16:	46bd      	mov	sp, r7
 8001b18:	bd80      	pop	{r7, pc}

08001b1a <_close>:

int _close(int file)
{
 8001b1a:	b480      	push	{r7}
 8001b1c:	b083      	sub	sp, #12
 8001b1e:	af00      	add	r7, sp, #0
 8001b20:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001b26:	4618      	mov	r0, r3
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr

08001b32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001b32:	b480      	push	{r7}
 8001b34:	b083      	sub	sp, #12
 8001b36:	af00      	add	r7, sp, #0
 8001b38:	6078      	str	r0, [r7, #4]
 8001b3a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001b42:	605a      	str	r2, [r3, #4]
  return 0;
 8001b44:	2300      	movs	r3, #0
}
 8001b46:	4618      	mov	r0, r3
 8001b48:	370c      	adds	r7, #12
 8001b4a:	46bd      	mov	sp, r7
 8001b4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b50:	4770      	bx	lr

08001b52 <_isatty>:

int _isatty(int file)
{
 8001b52:	b480      	push	{r7}
 8001b54:	b083      	sub	sp, #12
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001b5a:	2301      	movs	r3, #1
}
 8001b5c:	4618      	mov	r0, r3
 8001b5e:	370c      	adds	r7, #12
 8001b60:	46bd      	mov	sp, r7
 8001b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b66:	4770      	bx	lr

08001b68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	b085      	sub	sp, #20
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	60f8      	str	r0, [r7, #12]
 8001b70:	60b9      	str	r1, [r7, #8]
 8001b72:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001b74:	2300      	movs	r3, #0
}
 8001b76:	4618      	mov	r0, r3
 8001b78:	3714      	adds	r7, #20
 8001b7a:	46bd      	mov	sp, r7
 8001b7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b80:	4770      	bx	lr
	...

08001b84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001b84:	b580      	push	{r7, lr}
 8001b86:	b086      	sub	sp, #24
 8001b88:	af00      	add	r7, sp, #0
 8001b8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001b8c:	4a14      	ldr	r2, [pc, #80]	; (8001be0 <_sbrk+0x5c>)
 8001b8e:	4b15      	ldr	r3, [pc, #84]	; (8001be4 <_sbrk+0x60>)
 8001b90:	1ad3      	subs	r3, r2, r3
 8001b92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001b94:	697b      	ldr	r3, [r7, #20]
 8001b96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001b98:	4b13      	ldr	r3, [pc, #76]	; (8001be8 <_sbrk+0x64>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	2b00      	cmp	r3, #0
 8001b9e:	d102      	bne.n	8001ba6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ba0:	4b11      	ldr	r3, [pc, #68]	; (8001be8 <_sbrk+0x64>)
 8001ba2:	4a12      	ldr	r2, [pc, #72]	; (8001bec <_sbrk+0x68>)
 8001ba4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ba6:	4b10      	ldr	r3, [pc, #64]	; (8001be8 <_sbrk+0x64>)
 8001ba8:	681a      	ldr	r2, [r3, #0]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	4413      	add	r3, r2
 8001bae:	693a      	ldr	r2, [r7, #16]
 8001bb0:	429a      	cmp	r2, r3
 8001bb2:	d207      	bcs.n	8001bc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001bb4:	f008 ffb0 	bl	800ab18 <__errno>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	220c      	movs	r2, #12
 8001bbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001bbe:	f04f 33ff 	mov.w	r3, #4294967295
 8001bc2:	e009      	b.n	8001bd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001bc4:	4b08      	ldr	r3, [pc, #32]	; (8001be8 <_sbrk+0x64>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001bca:	4b07      	ldr	r3, [pc, #28]	; (8001be8 <_sbrk+0x64>)
 8001bcc:	681a      	ldr	r2, [r3, #0]
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	4413      	add	r3, r2
 8001bd2:	4a05      	ldr	r2, [pc, #20]	; (8001be8 <_sbrk+0x64>)
 8001bd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
}
 8001bd8:	4618      	mov	r0, r3
 8001bda:	3718      	adds	r7, #24
 8001bdc:	46bd      	mov	sp, r7
 8001bde:	bd80      	pop	{r7, pc}
 8001be0:	20020000 	.word	0x20020000
 8001be4:	00000400 	.word	0x00000400
 8001be8:	200004b0 	.word	0x200004b0
 8001bec:	200008c8 	.word	0x200008c8

08001bf0 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001bf4:	4b06      	ldr	r3, [pc, #24]	; (8001c10 <SystemInit+0x20>)
 8001bf6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bfa:	4a05      	ldr	r2, [pc, #20]	; (8001c10 <SystemInit+0x20>)
 8001bfc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001c00:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001c04:	bf00      	nop
 8001c06:	46bd      	mov	sp, r7
 8001c08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0c:	4770      	bx	lr
 8001c0e:	bf00      	nop
 8001c10:	e000ed00 	.word	0xe000ed00

08001c14 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001c14:	b580      	push	{r7, lr}
 8001c16:	b098      	sub	sp, #96	; 0x60
 8001c18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c1a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c1e:	2200      	movs	r2, #0
 8001c20:	601a      	str	r2, [r3, #0]
 8001c22:	605a      	str	r2, [r3, #4]
 8001c24:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001c26:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c2a:	2200      	movs	r2, #0
 8001c2c:	601a      	str	r2, [r3, #0]
 8001c2e:	605a      	str	r2, [r3, #4]
 8001c30:	609a      	str	r2, [r3, #8]
 8001c32:	60da      	str	r2, [r3, #12]
 8001c34:	611a      	str	r2, [r3, #16]
 8001c36:	615a      	str	r2, [r3, #20]
 8001c38:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001c3a:	1d3b      	adds	r3, r7, #4
 8001c3c:	2234      	movs	r2, #52	; 0x34
 8001c3e:	2100      	movs	r1, #0
 8001c40:	4618      	mov	r0, r3
 8001c42:	f008 feba 	bl	800a9ba <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001c46:	4b48      	ldr	r3, [pc, #288]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001c48:	4a48      	ldr	r2, [pc, #288]	; (8001d6c <MX_TIM1_Init+0x158>)
 8001c4a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001c4c:	4b46      	ldr	r3, [pc, #280]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001c4e:	2200      	movs	r2, #0
 8001c50:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001c52:	4b45      	ldr	r3, [pc, #276]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001c54:	2220      	movs	r2, #32
 8001c56:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8001c58:	4b43      	ldr	r3, [pc, #268]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001c5a:	f241 0299 	movw	r2, #4249	; 0x1099
 8001c5e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001c60:	4b41      	ldr	r3, [pc, #260]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001c62:	2200      	movs	r2, #0
 8001c64:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001c66:	4b40      	ldr	r3, [pc, #256]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001c68:	2200      	movs	r2, #0
 8001c6a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001c6c:	4b3e      	ldr	r3, [pc, #248]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001c6e:	2200      	movs	r2, #0
 8001c70:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001c72:	483d      	ldr	r0, [pc, #244]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001c74:	f004 f99a 	bl	8005fac <HAL_TIM_PWM_Init>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001c7e:	f7ff fde1 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001c82:	2320      	movs	r3, #32
 8001c84:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001c86:	2300      	movs	r3, #0
 8001c88:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001c8a:	2380      	movs	r3, #128	; 0x80
 8001c8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001c8e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001c92:	4619      	mov	r1, r3
 8001c94:	4834      	ldr	r0, [pc, #208]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001c96:	f005 fe49 	bl	800792c <HAL_TIMEx_MasterConfigSynchronization>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d001      	beq.n	8001ca4 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001ca0:	f7ff fdd0 	bl	8001844 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001ca4:	2360      	movs	r3, #96	; 0x60
 8001ca6:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2146;
 8001ca8:	f640 0362 	movw	r3, #2146	; 0x862
 8001cac:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001cae:	2300      	movs	r3, #0
 8001cb0:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001cb2:	2300      	movs	r3, #0
 8001cb4:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001cb6:	2300      	movs	r3, #0
 8001cb8:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001cc2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cc6:	2200      	movs	r2, #0
 8001cc8:	4619      	mov	r1, r3
 8001cca:	4827      	ldr	r0, [pc, #156]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001ccc:	f004 fe28 	bl	8006920 <HAL_TIM_PWM_ConfigChannel>
 8001cd0:	4603      	mov	r3, r0
 8001cd2:	2b00      	cmp	r3, #0
 8001cd4:	d001      	beq.n	8001cda <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001cd6:	f7ff fdb5 	bl	8001844 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001cda:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cde:	2204      	movs	r2, #4
 8001ce0:	4619      	mov	r1, r3
 8001ce2:	4821      	ldr	r0, [pc, #132]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001ce4:	f004 fe1c 	bl	8006920 <HAL_TIM_PWM_ConfigChannel>
 8001ce8:	4603      	mov	r3, r0
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d001      	beq.n	8001cf2 <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001cee:	f7ff fda9 	bl	8001844 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001cf2:	2300      	movs	r3, #0
 8001cf4:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001cf6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001cfa:	2208      	movs	r2, #8
 8001cfc:	4619      	mov	r1, r3
 8001cfe:	481a      	ldr	r0, [pc, #104]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001d00:	f004 fe0e 	bl	8006920 <HAL_TIM_PWM_ConfigChannel>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001d0a:	f7ff fd9b 	bl	8001844 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001d0e:	2300      	movs	r3, #0
 8001d10:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001d12:	2300      	movs	r3, #0
 8001d14:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001d16:	2300      	movs	r3, #0
 8001d18:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001d1a:	2322      	movs	r3, #34	; 0x22
 8001d1c:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001d1e:	2300      	movs	r3, #0
 8001d20:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001d22:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001d26:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001d28:	2300      	movs	r3, #0
 8001d2a:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001d2c:	2300      	movs	r3, #0
 8001d2e:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001d30:	2300      	movs	r3, #0
 8001d32:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001d34:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001d38:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001d3a:	2300      	movs	r3, #0
 8001d3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001d3e:	2300      	movs	r3, #0
 8001d40:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001d42:	2300      	movs	r3, #0
 8001d44:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001d46:	1d3b      	adds	r3, r7, #4
 8001d48:	4619      	mov	r1, r3
 8001d4a:	4807      	ldr	r0, [pc, #28]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001d4c:	f005 fe84 	bl	8007a58 <HAL_TIMEx_ConfigBreakDeadTime>
 8001d50:	4603      	mov	r3, r0
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d001      	beq.n	8001d5a <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001d56:	f7ff fd75 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001d5a:	4803      	ldr	r0, [pc, #12]	; (8001d68 <MX_TIM1_Init+0x154>)
 8001d5c:	f000 f95a 	bl	8002014 <HAL_TIM_MspPostInit>

}
 8001d60:	bf00      	nop
 8001d62:	3760      	adds	r7, #96	; 0x60
 8001d64:	46bd      	mov	sp, r7
 8001d66:	bd80      	pop	{r7, pc}
 8001d68:	200004b4 	.word	0x200004b4
 8001d6c:	40012c00 	.word	0x40012c00

08001d70 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001d70:	b580      	push	{r7, lr}
 8001d72:	b08c      	sub	sp, #48	; 0x30
 8001d74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001d76:	f107 030c 	add.w	r3, r7, #12
 8001d7a:	2224      	movs	r2, #36	; 0x24
 8001d7c:	2100      	movs	r1, #0
 8001d7e:	4618      	mov	r0, r3
 8001d80:	f008 fe1b 	bl	800a9ba <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001d84:	463b      	mov	r3, r7
 8001d86:	2200      	movs	r2, #0
 8001d88:	601a      	str	r2, [r3, #0]
 8001d8a:	605a      	str	r2, [r3, #4]
 8001d8c:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001d8e:	4b21      	ldr	r3, [pc, #132]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001d90:	4a21      	ldr	r2, [pc, #132]	; (8001e18 <MX_TIM3_Init+0xa8>)
 8001d92:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001d94:	4b1f      	ldr	r3, [pc, #124]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001d96:	2200      	movs	r2, #0
 8001d98:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d9a:	4b1e      	ldr	r3, [pc, #120]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001d9c:	2200      	movs	r2, #0
 8001d9e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001da0:	4b1c      	ldr	r3, [pc, #112]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001da2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001da6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001da8:	4b1a      	ldr	r3, [pc, #104]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001daa:	2200      	movs	r2, #0
 8001dac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001dae:	4b19      	ldr	r3, [pc, #100]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001db0:	2200      	movs	r2, #0
 8001db2:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI1;
 8001db4:	2301      	movs	r3, #1
 8001db6:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001db8:	2300      	movs	r3, #0
 8001dba:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001dbc:	2301      	movs	r3, #1
 8001dbe:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 8001dc4:	2300      	movs	r3, #0
 8001dc6:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001dc8:	2300      	movs	r3, #0
 8001dca:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001dcc:	2301      	movs	r3, #1
 8001dce:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001dd0:	2300      	movs	r3, #0
 8001dd2:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 8001dd4:	2300      	movs	r3, #0
 8001dd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001dd8:	f107 030c 	add.w	r3, r7, #12
 8001ddc:	4619      	mov	r1, r3
 8001dde:	480d      	ldr	r0, [pc, #52]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001de0:	f004 faea 	bl	80063b8 <HAL_TIM_Encoder_Init>
 8001de4:	4603      	mov	r3, r0
 8001de6:	2b00      	cmp	r3, #0
 8001de8:	d001      	beq.n	8001dee <MX_TIM3_Init+0x7e>
  {
    Error_Handler();
 8001dea:	f7ff fd2b 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001dee:	2300      	movs	r3, #0
 8001df0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001df2:	2300      	movs	r3, #0
 8001df4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001df6:	463b      	mov	r3, r7
 8001df8:	4619      	mov	r1, r3
 8001dfa:	4806      	ldr	r0, [pc, #24]	; (8001e14 <MX_TIM3_Init+0xa4>)
 8001dfc:	f005 fd96 	bl	800792c <HAL_TIMEx_MasterConfigSynchronization>
 8001e00:	4603      	mov	r3, r0
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d001      	beq.n	8001e0a <MX_TIM3_Init+0x9a>
  {
    Error_Handler();
 8001e06:	f7ff fd1d 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001e0a:	bf00      	nop
 8001e0c:	3730      	adds	r7, #48	; 0x30
 8001e0e:	46bd      	mov	sp, r7
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000500 	.word	0x20000500
 8001e18:	40000400 	.word	0x40000400

08001e1c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	b088      	sub	sp, #32
 8001e20:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e22:	f107 0310 	add.w	r3, r7, #16
 8001e26:	2200      	movs	r2, #0
 8001e28:	601a      	str	r2, [r3, #0]
 8001e2a:	605a      	str	r2, [r3, #4]
 8001e2c:	609a      	str	r2, [r3, #8]
 8001e2e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001e30:	1d3b      	adds	r3, r7, #4
 8001e32:	2200      	movs	r2, #0
 8001e34:	601a      	str	r2, [r3, #0]
 8001e36:	605a      	str	r2, [r3, #4]
 8001e38:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001e3a:	4b1d      	ldr	r3, [pc, #116]	; (8001eb0 <MX_TIM4_Init+0x94>)
 8001e3c:	4a1d      	ldr	r2, [pc, #116]	; (8001eb4 <MX_TIM4_Init+0x98>)
 8001e3e:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 169;
 8001e40:	4b1b      	ldr	r3, [pc, #108]	; (8001eb0 <MX_TIM4_Init+0x94>)
 8001e42:	22a9      	movs	r2, #169	; 0xa9
 8001e44:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001e46:	4b1a      	ldr	r3, [pc, #104]	; (8001eb0 <MX_TIM4_Init+0x94>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 19;
 8001e4c:	4b18      	ldr	r3, [pc, #96]	; (8001eb0 <MX_TIM4_Init+0x94>)
 8001e4e:	2213      	movs	r2, #19
 8001e50:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001e52:	4b17      	ldr	r3, [pc, #92]	; (8001eb0 <MX_TIM4_Init+0x94>)
 8001e54:	2200      	movs	r2, #0
 8001e56:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001e58:	4b15      	ldr	r3, [pc, #84]	; (8001eb0 <MX_TIM4_Init+0x94>)
 8001e5a:	2200      	movs	r2, #0
 8001e5c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001e5e:	4814      	ldr	r0, [pc, #80]	; (8001eb0 <MX_TIM4_Init+0x94>)
 8001e60:	f003 ffd4 	bl	8005e0c <HAL_TIM_Base_Init>
 8001e64:	4603      	mov	r3, r0
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d001      	beq.n	8001e6e <MX_TIM4_Init+0x52>
  {
    Error_Handler();
 8001e6a:	f7ff fceb 	bl	8001844 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001e6e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001e72:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001e74:	f107 0310 	add.w	r3, r7, #16
 8001e78:	4619      	mov	r1, r3
 8001e7a:	480d      	ldr	r0, [pc, #52]	; (8001eb0 <MX_TIM4_Init+0x94>)
 8001e7c:	f004 fe64 	bl	8006b48 <HAL_TIM_ConfigClockSource>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d001      	beq.n	8001e8a <MX_TIM4_Init+0x6e>
  {
    Error_Handler();
 8001e86:	f7ff fcdd 	bl	8001844 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001e8a:	2300      	movs	r3, #0
 8001e8c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001e8e:	2300      	movs	r3, #0
 8001e90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001e92:	1d3b      	adds	r3, r7, #4
 8001e94:	4619      	mov	r1, r3
 8001e96:	4806      	ldr	r0, [pc, #24]	; (8001eb0 <MX_TIM4_Init+0x94>)
 8001e98:	f005 fd48 	bl	800792c <HAL_TIMEx_MasterConfigSynchronization>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	2b00      	cmp	r3, #0
 8001ea0:	d001      	beq.n	8001ea6 <MX_TIM4_Init+0x8a>
  {
    Error_Handler();
 8001ea2:	f7ff fccf 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001ea6:	bf00      	nop
 8001ea8:	3720      	adds	r7, #32
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	2000054c 	.word	0x2000054c
 8001eb4:	40000800 	.word	0x40000800

08001eb8 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	b084      	sub	sp, #16
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001ec0:	687b      	ldr	r3, [r7, #4]
 8001ec2:	681b      	ldr	r3, [r3, #0]
 8001ec4:	4a0d      	ldr	r2, [pc, #52]	; (8001efc <HAL_TIM_PWM_MspInit+0x44>)
 8001ec6:	4293      	cmp	r3, r2
 8001ec8:	d113      	bne.n	8001ef2 <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001eca:	4b0d      	ldr	r3, [pc, #52]	; (8001f00 <HAL_TIM_PWM_MspInit+0x48>)
 8001ecc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001ece:	4a0c      	ldr	r2, [pc, #48]	; (8001f00 <HAL_TIM_PWM_MspInit+0x48>)
 8001ed0:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001ed4:	6613      	str	r3, [r2, #96]	; 0x60
 8001ed6:	4b0a      	ldr	r3, [pc, #40]	; (8001f00 <HAL_TIM_PWM_MspInit+0x48>)
 8001ed8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001eda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001ede:	60fb      	str	r3, [r7, #12]
 8001ee0:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	2100      	movs	r1, #0
 8001ee6:	2019      	movs	r0, #25
 8001ee8:	f002 fa10 	bl	800430c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001eec:	2019      	movs	r0, #25
 8001eee:	f002 fa27 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001ef2:	bf00      	nop
 8001ef4:	3710      	adds	r7, #16
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	bd80      	pop	{r7, pc}
 8001efa:	bf00      	nop
 8001efc:	40012c00 	.word	0x40012c00
 8001f00:	40021000 	.word	0x40021000

08001f04 <HAL_TIM_Encoder_MspInit>:

void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* tim_encoderHandle)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b08a      	sub	sp, #40	; 0x28
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f0c:	f107 0314 	add.w	r3, r7, #20
 8001f10:	2200      	movs	r2, #0
 8001f12:	601a      	str	r2, [r3, #0]
 8001f14:	605a      	str	r2, [r3, #4]
 8001f16:	609a      	str	r2, [r3, #8]
 8001f18:	60da      	str	r2, [r3, #12]
 8001f1a:	611a      	str	r2, [r3, #16]
  if(tim_encoderHandle->Instance==TIM3)
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	4a26      	ldr	r2, [pc, #152]	; (8001fbc <HAL_TIM_Encoder_MspInit+0xb8>)
 8001f22:	4293      	cmp	r3, r2
 8001f24:	d145      	bne.n	8001fb2 <HAL_TIM_Encoder_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f26:	4b26      	ldr	r3, [pc, #152]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f2a:	4a25      	ldr	r2, [pc, #148]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001f2c:	f043 0302 	orr.w	r3, r3, #2
 8001f30:	6593      	str	r3, [r2, #88]	; 0x58
 8001f32:	4b23      	ldr	r3, [pc, #140]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001f34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001f36:	f003 0302 	and.w	r3, r3, #2
 8001f3a:	613b      	str	r3, [r7, #16]
 8001f3c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	4b20      	ldr	r3, [pc, #128]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001f40:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f42:	4a1f      	ldr	r2, [pc, #124]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001f44:	f043 0301 	orr.w	r3, r3, #1
 8001f48:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f4a:	4b1d      	ldr	r3, [pc, #116]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001f4c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	60fb      	str	r3, [r7, #12]
 8001f54:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001f56:	4b1a      	ldr	r3, [pc, #104]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001f58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f5a:	4a19      	ldr	r2, [pc, #100]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001f5c:	f043 0304 	orr.w	r3, r3, #4
 8001f60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001f62:	4b17      	ldr	r3, [pc, #92]	; (8001fc0 <HAL_TIM_Encoder_MspInit+0xbc>)
 8001f64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001f66:	f003 0304 	and.w	r3, r3, #4
 8001f6a:	60bb      	str	r3, [r7, #8]
 8001f6c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    PA7     ------> TIM3_CH2
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f6e:	23c0      	movs	r3, #192	; 0xc0
 8001f70:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f72:	2302      	movs	r3, #2
 8001f74:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f76:	2300      	movs	r3, #0
 8001f78:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001f7e:	2302      	movs	r3, #2
 8001f80:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f82:	f107 0314 	add.w	r3, r7, #20
 8001f86:	4619      	mov	r1, r3
 8001f88:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001f8c:	f002 fd18 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001f90:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001f94:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f96:	2302      	movs	r3, #2
 8001f98:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f9a:	2300      	movs	r3, #0
 8001f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001fa2:	2302      	movs	r3, #2
 8001fa4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001fa6:	f107 0314 	add.w	r3, r7, #20
 8001faa:	4619      	mov	r1, r3
 8001fac:	4805      	ldr	r0, [pc, #20]	; (8001fc4 <HAL_TIM_Encoder_MspInit+0xc0>)
 8001fae:	f002 fd07 	bl	80049c0 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001fb2:	bf00      	nop
 8001fb4:	3728      	adds	r7, #40	; 0x28
 8001fb6:	46bd      	mov	sp, r7
 8001fb8:	bd80      	pop	{r7, pc}
 8001fba:	bf00      	nop
 8001fbc:	40000400 	.word	0x40000400
 8001fc0:	40021000 	.word	0x40021000
 8001fc4:	48000800 	.word	0x48000800

08001fc8 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001fc8:	b580      	push	{r7, lr}
 8001fca:	b084      	sub	sp, #16
 8001fcc:	af00      	add	r7, sp, #0
 8001fce:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM4)
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a0d      	ldr	r2, [pc, #52]	; (800200c <HAL_TIM_Base_MspInit+0x44>)
 8001fd6:	4293      	cmp	r3, r2
 8001fd8:	d113      	bne.n	8002002 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001fda:	4b0d      	ldr	r3, [pc, #52]	; (8002010 <HAL_TIM_Base_MspInit+0x48>)
 8001fdc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fde:	4a0c      	ldr	r2, [pc, #48]	; (8002010 <HAL_TIM_Base_MspInit+0x48>)
 8001fe0:	f043 0304 	orr.w	r3, r3, #4
 8001fe4:	6593      	str	r3, [r2, #88]	; 0x58
 8001fe6:	4b0a      	ldr	r3, [pc, #40]	; (8002010 <HAL_TIM_Base_MspInit+0x48>)
 8001fe8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001fea:	f003 0304 	and.w	r3, r3, #4
 8001fee:	60fb      	str	r3, [r7, #12]
 8001ff0:	68fb      	ldr	r3, [r7, #12]

    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 0, 0);
 8001ff2:	2200      	movs	r2, #0
 8001ff4:	2100      	movs	r1, #0
 8001ff6:	201e      	movs	r0, #30
 8001ff8:	f002 f988 	bl	800430c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8001ffc:	201e      	movs	r0, #30
 8001ffe:	f002 f99f 	bl	8004340 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 8002002:	bf00      	nop
 8002004:	3710      	adds	r7, #16
 8002006:	46bd      	mov	sp, r7
 8002008:	bd80      	pop	{r7, pc}
 800200a:	bf00      	nop
 800200c:	40000800 	.word	0x40000800
 8002010:	40021000 	.word	0x40021000

08002014 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	b08a      	sub	sp, #40	; 0x28
 8002018:	af00      	add	r7, sp, #0
 800201a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800201c:	f107 0314 	add.w	r3, r7, #20
 8002020:	2200      	movs	r2, #0
 8002022:	601a      	str	r2, [r3, #0]
 8002024:	605a      	str	r2, [r3, #4]
 8002026:	609a      	str	r2, [r3, #8]
 8002028:	60da      	str	r2, [r3, #12]
 800202a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	4a29      	ldr	r2, [pc, #164]	; (80020d8 <HAL_TIM_MspPostInit+0xc4>)
 8002032:	4293      	cmp	r3, r2
 8002034:	d14b      	bne.n	80020ce <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002036:	4b29      	ldr	r3, [pc, #164]	; (80020dc <HAL_TIM_MspPostInit+0xc8>)
 8002038:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800203a:	4a28      	ldr	r2, [pc, #160]	; (80020dc <HAL_TIM_MspPostInit+0xc8>)
 800203c:	f043 0302 	orr.w	r3, r3, #2
 8002040:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002042:	4b26      	ldr	r3, [pc, #152]	; (80020dc <HAL_TIM_MspPostInit+0xc8>)
 8002044:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	613b      	str	r3, [r7, #16]
 800204c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204e:	4b23      	ldr	r3, [pc, #140]	; (80020dc <HAL_TIM_MspPostInit+0xc8>)
 8002050:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002052:	4a22      	ldr	r2, [pc, #136]	; (80020dc <HAL_TIM_MspPostInit+0xc8>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	64d3      	str	r3, [r2, #76]	; 0x4c
 800205a:	4b20      	ldr	r3, [pc, #128]	; (80020dc <HAL_TIM_MspPostInit+0xc8>)
 800205c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8002066:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800206a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206c:	2302      	movs	r3, #2
 800206e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002070:	2300      	movs	r3, #0
 8002072:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002074:	2300      	movs	r3, #0
 8002076:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8002078:	2306      	movs	r3, #6
 800207a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800207c:	f107 0314 	add.w	r3, r7, #20
 8002080:	4619      	mov	r1, r3
 8002082:	4817      	ldr	r0, [pc, #92]	; (80020e0 <HAL_TIM_MspPostInit+0xcc>)
 8002084:	f002 fc9c 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8002088:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800209a:	2304      	movs	r3, #4
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	480e      	ldr	r0, [pc, #56]	; (80020e0 <HAL_TIM_MspPostInit+0xcc>)
 80020a6:	f002 fc8b 	bl	80049c0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 80020aa:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 80020ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020b0:	2302      	movs	r3, #2
 80020b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020b4:	2300      	movs	r3, #0
 80020b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020b8:	2300      	movs	r3, #0
 80020ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 80020bc:	2306      	movs	r3, #6
 80020be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020c0:	f107 0314 	add.w	r3, r7, #20
 80020c4:	4619      	mov	r1, r3
 80020c6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020ca:	f002 fc79 	bl	80049c0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 80020ce:	bf00      	nop
 80020d0:	3728      	adds	r7, #40	; 0x28
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	40012c00 	.word	0x40012c00
 80020dc:	40021000 	.word	0x40021000
 80020e0:	48000400 	.word	0x48000400

080020e4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80020e4:	b580      	push	{r7, lr}
 80020e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80020e8:	4b22      	ldr	r3, [pc, #136]	; (8002174 <MX_USART2_UART_Init+0x90>)
 80020ea:	4a23      	ldr	r2, [pc, #140]	; (8002178 <MX_USART2_UART_Init+0x94>)
 80020ec:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80020ee:	4b21      	ldr	r3, [pc, #132]	; (8002174 <MX_USART2_UART_Init+0x90>)
 80020f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80020f4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80020f6:	4b1f      	ldr	r3, [pc, #124]	; (8002174 <MX_USART2_UART_Init+0x90>)
 80020f8:	2200      	movs	r2, #0
 80020fa:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80020fc:	4b1d      	ldr	r3, [pc, #116]	; (8002174 <MX_USART2_UART_Init+0x90>)
 80020fe:	2200      	movs	r2, #0
 8002100:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002102:	4b1c      	ldr	r3, [pc, #112]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002104:	2200      	movs	r2, #0
 8002106:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002108:	4b1a      	ldr	r3, [pc, #104]	; (8002174 <MX_USART2_UART_Init+0x90>)
 800210a:	220c      	movs	r2, #12
 800210c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800210e:	4b19      	ldr	r3, [pc, #100]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002110:	2200      	movs	r2, #0
 8002112:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002114:	4b17      	ldr	r3, [pc, #92]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002116:	2200      	movs	r2, #0
 8002118:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800211a:	4b16      	ldr	r3, [pc, #88]	; (8002174 <MX_USART2_UART_Init+0x90>)
 800211c:	2200      	movs	r2, #0
 800211e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8002120:	4b14      	ldr	r3, [pc, #80]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002122:	2200      	movs	r2, #0
 8002124:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002126:	4b13      	ldr	r3, [pc, #76]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002128:	2200      	movs	r2, #0
 800212a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800212c:	4811      	ldr	r0, [pc, #68]	; (8002174 <MX_USART2_UART_Init+0x90>)
 800212e:	f005 fdb0 	bl	8007c92 <HAL_UART_Init>
 8002132:	4603      	mov	r3, r0
 8002134:	2b00      	cmp	r3, #0
 8002136:	d001      	beq.n	800213c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8002138:	f7ff fb84 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 800213c:	2100      	movs	r1, #0
 800213e:	480d      	ldr	r0, [pc, #52]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002140:	f007 fd53 	bl	8009bea <HAL_UARTEx_SetTxFifoThreshold>
 8002144:	4603      	mov	r3, r0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d001      	beq.n	800214e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 800214a:	f7ff fb7b 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 800214e:	2100      	movs	r1, #0
 8002150:	4808      	ldr	r0, [pc, #32]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002152:	f007 fd88 	bl	8009c66 <HAL_UARTEx_SetRxFifoThreshold>
 8002156:	4603      	mov	r3, r0
 8002158:	2b00      	cmp	r3, #0
 800215a:	d001      	beq.n	8002160 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 800215c:	f7ff fb72 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8002160:	4804      	ldr	r0, [pc, #16]	; (8002174 <MX_USART2_UART_Init+0x90>)
 8002162:	f007 fd09 	bl	8009b78 <HAL_UARTEx_DisableFifoMode>
 8002166:	4603      	mov	r3, r0
 8002168:	2b00      	cmp	r3, #0
 800216a:	d001      	beq.n	8002170 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800216c:	f7ff fb6a 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002170:	bf00      	nop
 8002172:	bd80      	pop	{r7, pc}
 8002174:	20000598 	.word	0x20000598
 8002178:	40004400 	.word	0x40004400

0800217c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002180:	4b22      	ldr	r3, [pc, #136]	; (800220c <MX_USART3_UART_Init+0x90>)
 8002182:	4a23      	ldr	r2, [pc, #140]	; (8002210 <MX_USART3_UART_Init+0x94>)
 8002184:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8002186:	4b21      	ldr	r3, [pc, #132]	; (800220c <MX_USART3_UART_Init+0x90>)
 8002188:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800218c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800218e:	4b1f      	ldr	r3, [pc, #124]	; (800220c <MX_USART3_UART_Init+0x90>)
 8002190:	2200      	movs	r2, #0
 8002192:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8002194:	4b1d      	ldr	r3, [pc, #116]	; (800220c <MX_USART3_UART_Init+0x90>)
 8002196:	2200      	movs	r2, #0
 8002198:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800219a:	4b1c      	ldr	r3, [pc, #112]	; (800220c <MX_USART3_UART_Init+0x90>)
 800219c:	2200      	movs	r2, #0
 800219e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80021a0:	4b1a      	ldr	r3, [pc, #104]	; (800220c <MX_USART3_UART_Init+0x90>)
 80021a2:	220c      	movs	r2, #12
 80021a4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80021a6:	4b19      	ldr	r3, [pc, #100]	; (800220c <MX_USART3_UART_Init+0x90>)
 80021a8:	2200      	movs	r2, #0
 80021aa:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80021ac:	4b17      	ldr	r3, [pc, #92]	; (800220c <MX_USART3_UART_Init+0x90>)
 80021ae:	2200      	movs	r2, #0
 80021b0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80021b2:	4b16      	ldr	r3, [pc, #88]	; (800220c <MX_USART3_UART_Init+0x90>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80021b8:	4b14      	ldr	r3, [pc, #80]	; (800220c <MX_USART3_UART_Init+0x90>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80021be:	4b13      	ldr	r3, [pc, #76]	; (800220c <MX_USART3_UART_Init+0x90>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80021c4:	4811      	ldr	r0, [pc, #68]	; (800220c <MX_USART3_UART_Init+0x90>)
 80021c6:	f005 fd64 	bl	8007c92 <HAL_UART_Init>
 80021ca:	4603      	mov	r3, r0
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d001      	beq.n	80021d4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 80021d0:	f7ff fb38 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021d4:	2100      	movs	r1, #0
 80021d6:	480d      	ldr	r0, [pc, #52]	; (800220c <MX_USART3_UART_Init+0x90>)
 80021d8:	f007 fd07 	bl	8009bea <HAL_UARTEx_SetTxFifoThreshold>
 80021dc:	4603      	mov	r3, r0
 80021de:	2b00      	cmp	r3, #0
 80021e0:	d001      	beq.n	80021e6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 80021e2:	f7ff fb2f 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80021e6:	2100      	movs	r1, #0
 80021e8:	4808      	ldr	r0, [pc, #32]	; (800220c <MX_USART3_UART_Init+0x90>)
 80021ea:	f007 fd3c 	bl	8009c66 <HAL_UARTEx_SetRxFifoThreshold>
 80021ee:	4603      	mov	r3, r0
 80021f0:	2b00      	cmp	r3, #0
 80021f2:	d001      	beq.n	80021f8 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 80021f4:	f7ff fb26 	bl	8001844 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 80021f8:	4804      	ldr	r0, [pc, #16]	; (800220c <MX_USART3_UART_Init+0x90>)
 80021fa:	f007 fcbd 	bl	8009b78 <HAL_UARTEx_DisableFifoMode>
 80021fe:	4603      	mov	r3, r0
 8002200:	2b00      	cmp	r3, #0
 8002202:	d001      	beq.n	8002208 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002204:	f7ff fb1e 	bl	8001844 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002208:	bf00      	nop
 800220a:	bd80      	pop	{r7, pc}
 800220c:	20000628 	.word	0x20000628
 8002210:	40004800 	.word	0x40004800

08002214 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002214:	b580      	push	{r7, lr}
 8002216:	b0a0      	sub	sp, #128	; 0x80
 8002218:	af00      	add	r7, sp, #0
 800221a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800221c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002220:	2200      	movs	r2, #0
 8002222:	601a      	str	r2, [r3, #0]
 8002224:	605a      	str	r2, [r3, #4]
 8002226:	609a      	str	r2, [r3, #8]
 8002228:	60da      	str	r2, [r3, #12]
 800222a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800222c:	f107 0318 	add.w	r3, r7, #24
 8002230:	2254      	movs	r2, #84	; 0x54
 8002232:	2100      	movs	r1, #0
 8002234:	4618      	mov	r0, r3
 8002236:	f008 fbc0 	bl	800a9ba <memset>
  if(uartHandle->Instance==USART2)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	4a45      	ldr	r2, [pc, #276]	; (8002354 <HAL_UART_MspInit+0x140>)
 8002240:	4293      	cmp	r3, r2
 8002242:	d13f      	bne.n	80022c4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002244:	2302      	movs	r3, #2
 8002246:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002248:	2300      	movs	r3, #0
 800224a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800224c:	f107 0318 	add.w	r3, r7, #24
 8002250:	4618      	mov	r0, r3
 8002252:	f003 fb8d 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 8002256:	4603      	mov	r3, r0
 8002258:	2b00      	cmp	r3, #0
 800225a:	d001      	beq.n	8002260 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800225c:	f7ff faf2 	bl	8001844 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002260:	4b3d      	ldr	r3, [pc, #244]	; (8002358 <HAL_UART_MspInit+0x144>)
 8002262:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002264:	4a3c      	ldr	r2, [pc, #240]	; (8002358 <HAL_UART_MspInit+0x144>)
 8002266:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800226a:	6593      	str	r3, [r2, #88]	; 0x58
 800226c:	4b3a      	ldr	r3, [pc, #232]	; (8002358 <HAL_UART_MspInit+0x144>)
 800226e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002270:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002274:	617b      	str	r3, [r7, #20]
 8002276:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002278:	4b37      	ldr	r3, [pc, #220]	; (8002358 <HAL_UART_MspInit+0x144>)
 800227a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800227c:	4a36      	ldr	r2, [pc, #216]	; (8002358 <HAL_UART_MspInit+0x144>)
 800227e:	f043 0301 	orr.w	r3, r3, #1
 8002282:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002284:	4b34      	ldr	r3, [pc, #208]	; (8002358 <HAL_UART_MspInit+0x144>)
 8002286:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002288:	f003 0301 	and.w	r3, r3, #1
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002290:	230c      	movs	r3, #12
 8002292:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002294:	2302      	movs	r3, #2
 8002296:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002298:	2300      	movs	r3, #0
 800229a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800229c:	2300      	movs	r3, #0
 800229e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80022a0:	2307      	movs	r3, #7
 80022a2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022a4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80022a8:	4619      	mov	r1, r3
 80022aa:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80022ae:	f002 fb87 	bl	80049c0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80022b2:	2200      	movs	r2, #0
 80022b4:	2100      	movs	r1, #0
 80022b6:	2026      	movs	r0, #38	; 0x26
 80022b8:	f002 f828 	bl	800430c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80022bc:	2026      	movs	r0, #38	; 0x26
 80022be:	f002 f83f 	bl	8004340 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80022c2:	e043      	b.n	800234c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4a24      	ldr	r2, [pc, #144]	; (800235c <HAL_UART_MspInit+0x148>)
 80022ca:	4293      	cmp	r3, r2
 80022cc:	d13e      	bne.n	800234c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80022ce:	2304      	movs	r3, #4
 80022d0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80022d2:	2300      	movs	r3, #0
 80022d4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80022d6:	f107 0318 	add.w	r3, r7, #24
 80022da:	4618      	mov	r0, r3
 80022dc:	f003 fb48 	bl	8005970 <HAL_RCCEx_PeriphCLKConfig>
 80022e0:	4603      	mov	r3, r0
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d001      	beq.n	80022ea <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80022e6:	f7ff faad 	bl	8001844 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80022ea:	4b1b      	ldr	r3, [pc, #108]	; (8002358 <HAL_UART_MspInit+0x144>)
 80022ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022ee:	4a1a      	ldr	r2, [pc, #104]	; (8002358 <HAL_UART_MspInit+0x144>)
 80022f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022f4:	6593      	str	r3, [r2, #88]	; 0x58
 80022f6:	4b18      	ldr	r3, [pc, #96]	; (8002358 <HAL_UART_MspInit+0x144>)
 80022f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80022fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80022fe:	60fb      	str	r3, [r7, #12]
 8002300:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002302:	4b15      	ldr	r3, [pc, #84]	; (8002358 <HAL_UART_MspInit+0x144>)
 8002304:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002306:	4a14      	ldr	r2, [pc, #80]	; (8002358 <HAL_UART_MspInit+0x144>)
 8002308:	f043 0304 	orr.w	r3, r3, #4
 800230c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800230e:	4b12      	ldr	r3, [pc, #72]	; (8002358 <HAL_UART_MspInit+0x144>)
 8002310:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002312:	f003 0304 	and.w	r3, r3, #4
 8002316:	60bb      	str	r3, [r7, #8]
 8002318:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800231a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800231e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002320:	2302      	movs	r3, #2
 8002322:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002324:	2300      	movs	r3, #0
 8002326:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002328:	2300      	movs	r3, #0
 800232a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800232c:	2307      	movs	r3, #7
 800232e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002330:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002334:	4619      	mov	r1, r3
 8002336:	480a      	ldr	r0, [pc, #40]	; (8002360 <HAL_UART_MspInit+0x14c>)
 8002338:	f002 fb42 	bl	80049c0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800233c:	2200      	movs	r2, #0
 800233e:	2100      	movs	r1, #0
 8002340:	2027      	movs	r0, #39	; 0x27
 8002342:	f001 ffe3 	bl	800430c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002346:	2027      	movs	r0, #39	; 0x27
 8002348:	f001 fffa 	bl	8004340 <HAL_NVIC_EnableIRQ>
}
 800234c:	bf00      	nop
 800234e:	3780      	adds	r7, #128	; 0x80
 8002350:	46bd      	mov	sp, r7
 8002352:	bd80      	pop	{r7, pc}
 8002354:	40004400 	.word	0x40004400
 8002358:	40021000 	.word	0x40021000
 800235c:	40004800 	.word	0x40004800
 8002360:	48000800 	.word	0x48000800

08002364 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8002364:	b580      	push	{r7, lr}
 8002366:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8002368:	2224      	movs	r2, #36	; 0x24
 800236a:	2100      	movs	r1, #0
 800236c:	4816      	ldr	r0, [pc, #88]	; (80023c8 <Shell_Init+0x64>)
 800236e:	f008 fb24 	bl	800a9ba <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8002372:	2240      	movs	r2, #64	; 0x40
 8002374:	2100      	movs	r1, #0
 8002376:	4815      	ldr	r0, [pc, #84]	; (80023cc <Shell_Init+0x68>)
 8002378:	f008 fb1f 	bl	800a9ba <memset>
 800237c:	4b14      	ldr	r3, [pc, #80]	; (80023d0 <Shell_Init+0x6c>)
 800237e:	2200      	movs	r2, #0
 8002380:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8002382:	2240      	movs	r2, #64	; 0x40
 8002384:	2100      	movs	r1, #0
 8002386:	4813      	ldr	r0, [pc, #76]	; (80023d4 <Shell_Init+0x70>)
 8002388:	f008 fb17 	bl	800a9ba <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800238c:	2201      	movs	r2, #1
 800238e:	4910      	ldr	r1, [pc, #64]	; (80023d0 <Shell_Init+0x6c>)
 8002390:	4811      	ldr	r0, [pc, #68]	; (80023d8 <Shell_Init+0x74>)
 8002392:	f005 fd65 	bl	8007e60 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8002396:	4811      	ldr	r0, [pc, #68]	; (80023dc <Shell_Init+0x78>)
 8002398:	f7fd ffa2 	bl	80002e0 <strlen>
 800239c:	4603      	mov	r3, r0
 800239e:	b29a      	uxth	r2, r3
 80023a0:	f04f 33ff 	mov.w	r3, #4294967295
 80023a4:	490d      	ldr	r1, [pc, #52]	; (80023dc <Shell_Init+0x78>)
 80023a6:	480c      	ldr	r0, [pc, #48]	; (80023d8 <Shell_Init+0x74>)
 80023a8:	f005 fcc3 	bl	8007d32 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80023ac:	480c      	ldr	r0, [pc, #48]	; (80023e0 <Shell_Init+0x7c>)
 80023ae:	f7fd ff97 	bl	80002e0 <strlen>
 80023b2:	4603      	mov	r3, r0
 80023b4:	b29a      	uxth	r2, r3
 80023b6:	f04f 33ff 	mov.w	r3, #4294967295
 80023ba:	4909      	ldr	r1, [pc, #36]	; (80023e0 <Shell_Init+0x7c>)
 80023bc:	4806      	ldr	r0, [pc, #24]	; (80023d8 <Shell_Init+0x74>)
 80023be:	f005 fcb8 	bl	8007d32 <HAL_UART_Transmit>
}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	20000744 	.word	0x20000744
 80023cc:	20000700 	.word	0x20000700
 80023d0:	200006bc 	.word	0x200006bc
 80023d4:	200006c0 	.word	0x200006c0
 80023d8:	20000598 	.word	0x20000598
 80023dc:	20000020 	.word	0x20000020
 80023e0:	20000004 	.word	0x20000004

080023e4 <Shell_Loop>:

void Shell_Loop(void){
 80023e4:	b580      	push	{r7, lr}
 80023e6:	b088      	sub	sp, #32
 80023e8:	af02      	add	r7, sp, #8
	if(uartRxReceived){
 80023ea:	4ba0      	ldr	r3, [pc, #640]	; (800266c <Shell_Loop+0x288>)
 80023ec:	781b      	ldrb	r3, [r3, #0]
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d05b      	beq.n	80024aa <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 80023f2:	4b9f      	ldr	r3, [pc, #636]	; (8002670 <Shell_Loop+0x28c>)
 80023f4:	781b      	ldrb	r3, [r3, #0]
 80023f6:	2b08      	cmp	r3, #8
 80023f8:	d034      	beq.n	8002464 <Shell_Loop+0x80>
 80023fa:	2b0d      	cmp	r3, #13
 80023fc:	d142      	bne.n	8002484 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 80023fe:	f04f 33ff 	mov.w	r3, #4294967295
 8002402:	2203      	movs	r2, #3
 8002404:	499b      	ldr	r1, [pc, #620]	; (8002674 <Shell_Loop+0x290>)
 8002406:	489c      	ldr	r0, [pc, #624]	; (8002678 <Shell_Loop+0x294>)
 8002408:	f005 fc93 	bl	8007d32 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 800240c:	4b9b      	ldr	r3, [pc, #620]	; (800267c <Shell_Loop+0x298>)
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a9b      	ldr	r2, [pc, #620]	; (8002680 <Shell_Loop+0x29c>)
 8002412:	2100      	movs	r1, #0
 8002414:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8002416:	4b9b      	ldr	r3, [pc, #620]	; (8002684 <Shell_Loop+0x2a0>)
 8002418:	2200      	movs	r2, #0
 800241a:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 800241c:	499a      	ldr	r1, [pc, #616]	; (8002688 <Shell_Loop+0x2a4>)
 800241e:	4898      	ldr	r0, [pc, #608]	; (8002680 <Shell_Loop+0x29c>)
 8002420:	f008 fad4 	bl	800a9cc <strtok>
 8002424:	4603      	mov	r3, r0
 8002426:	4a99      	ldr	r2, [pc, #612]	; (800268c <Shell_Loop+0x2a8>)
 8002428:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800242a:	e010      	b.n	800244e <Shell_Loop+0x6a>
				argv[argc++] = token;
 800242c:	4b95      	ldr	r3, [pc, #596]	; (8002684 <Shell_Loop+0x2a0>)
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	1c5a      	adds	r2, r3, #1
 8002432:	4994      	ldr	r1, [pc, #592]	; (8002684 <Shell_Loop+0x2a0>)
 8002434:	600a      	str	r2, [r1, #0]
 8002436:	4a95      	ldr	r2, [pc, #596]	; (800268c <Shell_Loop+0x2a8>)
 8002438:	6812      	ldr	r2, [r2, #0]
 800243a:	4995      	ldr	r1, [pc, #596]	; (8002690 <Shell_Loop+0x2ac>)
 800243c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8002440:	4991      	ldr	r1, [pc, #580]	; (8002688 <Shell_Loop+0x2a4>)
 8002442:	2000      	movs	r0, #0
 8002444:	f008 fac2 	bl	800a9cc <strtok>
 8002448:	4603      	mov	r3, r0
 800244a:	4a90      	ldr	r2, [pc, #576]	; (800268c <Shell_Loop+0x2a8>)
 800244c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800244e:	4b8f      	ldr	r3, [pc, #572]	; (800268c <Shell_Loop+0x2a8>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	2b00      	cmp	r3, #0
 8002454:	d1ea      	bne.n	800242c <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8002456:	4b89      	ldr	r3, [pc, #548]	; (800267c <Shell_Loop+0x298>)
 8002458:	2200      	movs	r2, #0
 800245a:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 800245c:	4b8d      	ldr	r3, [pc, #564]	; (8002694 <Shell_Loop+0x2b0>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]
			break;
 8002462:	e01f      	b.n	80024a4 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002464:	4b85      	ldr	r3, [pc, #532]	; (800267c <Shell_Loop+0x298>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	1e5a      	subs	r2, r3, #1
 800246a:	4984      	ldr	r1, [pc, #528]	; (800267c <Shell_Loop+0x298>)
 800246c:	600a      	str	r2, [r1, #0]
 800246e:	4a84      	ldr	r2, [pc, #528]	; (8002680 <Shell_Loop+0x29c>)
 8002470:	2100      	movs	r1, #0
 8002472:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8002474:	f04f 33ff 	mov.w	r3, #4294967295
 8002478:	2204      	movs	r2, #4
 800247a:	4987      	ldr	r1, [pc, #540]	; (8002698 <Shell_Loop+0x2b4>)
 800247c:	487e      	ldr	r0, [pc, #504]	; (8002678 <Shell_Loop+0x294>)
 800247e:	f005 fc58 	bl	8007d32 <HAL_UART_Transmit>
			break;
 8002482:	e00f      	b.n	80024a4 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002484:	4b7d      	ldr	r3, [pc, #500]	; (800267c <Shell_Loop+0x298>)
 8002486:	681b      	ldr	r3, [r3, #0]
 8002488:	1c5a      	adds	r2, r3, #1
 800248a:	497c      	ldr	r1, [pc, #496]	; (800267c <Shell_Loop+0x298>)
 800248c:	600a      	str	r2, [r1, #0]
 800248e:	4a78      	ldr	r2, [pc, #480]	; (8002670 <Shell_Loop+0x28c>)
 8002490:	7811      	ldrb	r1, [r2, #0]
 8002492:	4a7b      	ldr	r2, [pc, #492]	; (8002680 <Shell_Loop+0x29c>)
 8002494:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8002496:	f04f 33ff 	mov.w	r3, #4294967295
 800249a:	2201      	movs	r2, #1
 800249c:	4974      	ldr	r1, [pc, #464]	; (8002670 <Shell_Loop+0x28c>)
 800249e:	4876      	ldr	r0, [pc, #472]	; (8002678 <Shell_Loop+0x294>)
 80024a0:	f005 fc47 	bl	8007d32 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80024a4:	4b71      	ldr	r3, [pc, #452]	; (800266c <Shell_Loop+0x288>)
 80024a6:	2200      	movs	r2, #0
 80024a8:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80024aa:	4b7a      	ldr	r3, [pc, #488]	; (8002694 <Shell_Loop+0x2b0>)
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	f000 8179 	beq.w	80027a6 <Shell_Loop+0x3c2>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80024b4:	4b76      	ldr	r3, [pc, #472]	; (8002690 <Shell_Loop+0x2ac>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4978      	ldr	r1, [pc, #480]	; (800269c <Shell_Loop+0x2b8>)
 80024ba:	4618      	mov	r0, r3
 80024bc:	f7fd feb0 	bl	8000220 <strcmp>
 80024c0:	4603      	mov	r3, r0
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d107      	bne.n	80024d6 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80024c6:	f04f 33ff 	mov.w	r3, #4294967295
 80024ca:	221a      	movs	r2, #26
 80024cc:	4974      	ldr	r1, [pc, #464]	; (80026a0 <Shell_Loop+0x2bc>)
 80024ce:	486a      	ldr	r0, [pc, #424]	; (8002678 <Shell_Loop+0x294>)
 80024d0:	f005 fc2f 	bl	8007d32 <HAL_UART_Transmit>
 80024d4:	e15d      	b.n	8002792 <Shell_Loop+0x3ae>
		}
		else if(strcmp(argv[0],"help")==0){
 80024d6:	4b6e      	ldr	r3, [pc, #440]	; (8002690 <Shell_Loop+0x2ac>)
 80024d8:	681b      	ldr	r3, [r3, #0]
 80024da:	4972      	ldr	r1, [pc, #456]	; (80026a4 <Shell_Loop+0x2c0>)
 80024dc:	4618      	mov	r0, r3
 80024de:	f7fd fe9f 	bl	8000220 <strcmp>
 80024e2:	4603      	mov	r3, r0
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10e      	bne.n	8002506 <Shell_Loop+0x122>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80024e8:	4a6f      	ldr	r2, [pc, #444]	; (80026a8 <Shell_Loop+0x2c4>)
 80024ea:	2140      	movs	r1, #64	; 0x40
 80024ec:	486f      	ldr	r0, [pc, #444]	; (80026ac <Shell_Loop+0x2c8>)
 80024ee:	f008 f9ed 	bl	800a8cc <sniprintf>
 80024f2:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	b29a      	uxth	r2, r3
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
 80024fc:	496b      	ldr	r1, [pc, #428]	; (80026ac <Shell_Loop+0x2c8>)
 80024fe:	485e      	ldr	r0, [pc, #376]	; (8002678 <Shell_Loop+0x294>)
 8002500:	f005 fc17 	bl	8007d32 <HAL_UART_Transmit>
 8002504:	e145      	b.n	8002792 <Shell_Loop+0x3ae>
		}
		else if(strcmp(argv[0], "speed") == 0)
 8002506:	4b62      	ldr	r3, [pc, #392]	; (8002690 <Shell_Loop+0x2ac>)
 8002508:	681b      	ldr	r3, [r3, #0]
 800250a:	4969      	ldr	r1, [pc, #420]	; (80026b0 <Shell_Loop+0x2cc>)
 800250c:	4618      	mov	r0, r3
 800250e:	f7fd fe87 	bl	8000220 <strcmp>
 8002512:	4603      	mov	r3, r0
 8002514:	2b00      	cmp	r3, #0
 8002516:	d15d      	bne.n	80025d4 <Shell_Loop+0x1f0>
		{
			uint16_t speedValue = atoi(argv[1]);
 8002518:	4b5d      	ldr	r3, [pc, #372]	; (8002690 <Shell_Loop+0x2ac>)
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	4618      	mov	r0, r3
 800251e:	f007 fc2f 	bl	8009d80 <atoi>
 8002522:	4603      	mov	r3, r0
 8002524:	82fb      	strh	r3, [r7, #22]

			if(speedValue > MAX_SPEED)
 8002526:	8afb      	ldrh	r3, [r7, #22]
 8002528:	2b64      	cmp	r3, #100	; 0x64
 800252a:	d901      	bls.n	8002530 <Shell_Loop+0x14c>
			{
				speedValue = MAX_SPEED;
 800252c:	2364      	movs	r3, #100	; 0x64
 800252e:	82fb      	strh	r3, [r7, #22]
			else if(speedValue < MIN_SPEED)
			{
				speedValue = MIN_SPEED;
			}

			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Wait\r\n");
 8002530:	4a60      	ldr	r2, [pc, #384]	; (80026b4 <Shell_Loop+0x2d0>)
 8002532:	2140      	movs	r1, #64	; 0x40
 8002534:	485d      	ldr	r0, [pc, #372]	; (80026ac <Shell_Loop+0x2c8>)
 8002536:	f008 f9c9 	bl	800a8cc <sniprintf>
 800253a:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800253c:	68bb      	ldr	r3, [r7, #8]
 800253e:	b29a      	uxth	r2, r3
 8002540:	f04f 33ff 	mov.w	r3, #4294967295
 8002544:	4959      	ldr	r1, [pc, #356]	; (80026ac <Shell_Loop+0x2c8>)
 8002546:	484c      	ldr	r0, [pc, #304]	; (8002678 <Shell_Loop+0x294>)
 8002548:	f005 fbf3 	bl	8007d32 <HAL_UART_Transmit>

			while(currentSpeed != speedValue)
 800254c:	e03c      	b.n	80025c8 <Shell_Loop+0x1e4>
			{
				if(currentSpeed > speedValue)
 800254e:	4b5a      	ldr	r3, [pc, #360]	; (80026b8 <Shell_Loop+0x2d4>)
 8002550:	881b      	ldrh	r3, [r3, #0]
 8002552:	8afa      	ldrh	r2, [r7, #22]
 8002554:	429a      	cmp	r2, r3
 8002556:	d206      	bcs.n	8002566 <Shell_Loop+0x182>
				{
					currentSpeed--;
 8002558:	4b57      	ldr	r3, [pc, #348]	; (80026b8 <Shell_Loop+0x2d4>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	3b01      	subs	r3, #1
 800255e:	b29a      	uxth	r2, r3
 8002560:	4b55      	ldr	r3, [pc, #340]	; (80026b8 <Shell_Loop+0x2d4>)
 8002562:	801a      	strh	r2, [r3, #0]
 8002564:	e00a      	b.n	800257c <Shell_Loop+0x198>
				}
				else if(currentSpeed < speedValue)
 8002566:	4b54      	ldr	r3, [pc, #336]	; (80026b8 <Shell_Loop+0x2d4>)
 8002568:	881b      	ldrh	r3, [r3, #0]
 800256a:	8afa      	ldrh	r2, [r7, #22]
 800256c:	429a      	cmp	r2, r3
 800256e:	d905      	bls.n	800257c <Shell_Loop+0x198>
				{
					currentSpeed++;
 8002570:	4b51      	ldr	r3, [pc, #324]	; (80026b8 <Shell_Loop+0x2d4>)
 8002572:	881b      	ldrh	r3, [r3, #0]
 8002574:	3301      	adds	r3, #1
 8002576:	b29a      	uxth	r2, r3
 8002578:	4b4f      	ldr	r3, [pc, #316]	; (80026b8 <Shell_Loop+0x2d4>)
 800257a:	801a      	strh	r2, [r3, #0]
				}

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (MAX_DUTY_CYCLE * currentSpeed)/100);
 800257c:	4b4e      	ldr	r3, [pc, #312]	; (80026b8 <Shell_Loop+0x2d4>)
 800257e:	881b      	ldrh	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	f241 0399 	movw	r3, #4249	; 0x1099
 8002586:	fb02 f303 	mul.w	r3, r2, r3
 800258a:	4a4c      	ldr	r2, [pc, #304]	; (80026bc <Shell_Loop+0x2d8>)
 800258c:	fb82 1203 	smull	r1, r2, r2, r3
 8002590:	1152      	asrs	r2, r2, #5
 8002592:	17db      	asrs	r3, r3, #31
 8002594:	1ad2      	subs	r2, r2, r3
 8002596:	4b4a      	ldr	r3, [pc, #296]	; (80026c0 <Shell_Loop+0x2dc>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, MAX_DUTY_CYCLE - (MAX_DUTY_CYCLE * currentSpeed)/100);
 800259c:	4b46      	ldr	r3, [pc, #280]	; (80026b8 <Shell_Loop+0x2d4>)
 800259e:	881b      	ldrh	r3, [r3, #0]
 80025a0:	461a      	mov	r2, r3
 80025a2:	f241 0399 	movw	r3, #4249	; 0x1099
 80025a6:	fb02 f303 	mul.w	r3, r2, r3
 80025aa:	4a44      	ldr	r2, [pc, #272]	; (80026bc <Shell_Loop+0x2d8>)
 80025ac:	fb82 1203 	smull	r1, r2, r2, r3
 80025b0:	1152      	asrs	r2, r2, #5
 80025b2:	17db      	asrs	r3, r3, #31
 80025b4:	1a9b      	subs	r3, r3, r2
 80025b6:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80025ba:	3319      	adds	r3, #25
 80025bc:	4a40      	ldr	r2, [pc, #256]	; (80026c0 <Shell_Loop+0x2dc>)
 80025be:	6812      	ldr	r2, [r2, #0]
 80025c0:	6393      	str	r3, [r2, #56]	; 0x38

				HAL_Delay(100);
 80025c2:	2064      	movs	r0, #100	; 0x64
 80025c4:	f000 f984 	bl	80028d0 <HAL_Delay>
			while(currentSpeed != speedValue)
 80025c8:	4b3b      	ldr	r3, [pc, #236]	; (80026b8 <Shell_Loop+0x2d4>)
 80025ca:	881b      	ldrh	r3, [r3, #0]
 80025cc:	8afa      	ldrh	r2, [r7, #22]
 80025ce:	429a      	cmp	r2, r3
 80025d0:	d1bd      	bne.n	800254e <Shell_Loop+0x16a>
 80025d2:	e0de      	b.n	8002792 <Shell_Loop+0x3ae>
			}
		}
		else if(strcmp(argv[0], "start") == 0)
 80025d4:	4b2e      	ldr	r3, [pc, #184]	; (8002690 <Shell_Loop+0x2ac>)
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	493a      	ldr	r1, [pc, #232]	; (80026c4 <Shell_Loop+0x2e0>)
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd fe20 	bl	8000220 <strcmp>
 80025e0:	4603      	mov	r3, r0
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d172      	bne.n	80026cc <Shell_Loop+0x2e8>
		{
			if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80025e6:	2100      	movs	r1, #0
 80025e8:	4835      	ldr	r0, [pc, #212]	; (80026c0 <Shell_Loop+0x2dc>)
 80025ea:	f003 fd37 	bl	800605c <HAL_TIM_PWM_Start>
 80025ee:	4603      	mov	r3, r0
 80025f0:	2b00      	cmp	r3, #0
 80025f2:	d006      	beq.n	8002602 <Shell_Loop+0x21e>
			{
				HAL_UART_Transmit(&huart2, errorMsg, sizeof(errorMsg), HAL_MAX_DELAY);
 80025f4:	f04f 33ff 	mov.w	r3, #4294967295
 80025f8:	2206      	movs	r2, #6
 80025fa:	4933      	ldr	r1, [pc, #204]	; (80026c8 <Shell_Loop+0x2e4>)
 80025fc:	481e      	ldr	r0, [pc, #120]	; (8002678 <Shell_Loop+0x294>)
 80025fe:	f005 fb98 	bl	8007d32 <HAL_UART_Transmit>
			}
			if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8002602:	2100      	movs	r1, #0
 8002604:	482e      	ldr	r0, [pc, #184]	; (80026c0 <Shell_Loop+0x2dc>)
 8002606:	f005 f871 	bl	80076ec <HAL_TIMEx_PWMN_Start>
 800260a:	4603      	mov	r3, r0
 800260c:	2b00      	cmp	r3, #0
 800260e:	d006      	beq.n	800261e <Shell_Loop+0x23a>
			{
				HAL_UART_Transmit(&huart2, errorMsg, sizeof(errorMsg), HAL_MAX_DELAY);
 8002610:	f04f 33ff 	mov.w	r3, #4294967295
 8002614:	2206      	movs	r2, #6
 8002616:	492c      	ldr	r1, [pc, #176]	; (80026c8 <Shell_Loop+0x2e4>)
 8002618:	4817      	ldr	r0, [pc, #92]	; (8002678 <Shell_Loop+0x294>)
 800261a:	f005 fb8a 	bl	8007d32 <HAL_UART_Transmit>
			}
			if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 800261e:	2104      	movs	r1, #4
 8002620:	4827      	ldr	r0, [pc, #156]	; (80026c0 <Shell_Loop+0x2dc>)
 8002622:	f003 fd1b 	bl	800605c <HAL_TIM_PWM_Start>
 8002626:	4603      	mov	r3, r0
 8002628:	2b00      	cmp	r3, #0
 800262a:	d006      	beq.n	800263a <Shell_Loop+0x256>
			{
				HAL_UART_Transmit(&huart2, errorMsg, sizeof(errorMsg), HAL_MAX_DELAY);
 800262c:	f04f 33ff 	mov.w	r3, #4294967295
 8002630:	2206      	movs	r2, #6
 8002632:	4925      	ldr	r1, [pc, #148]	; (80026c8 <Shell_Loop+0x2e4>)
 8002634:	4810      	ldr	r0, [pc, #64]	; (8002678 <Shell_Loop+0x294>)
 8002636:	f005 fb7c 	bl	8007d32 <HAL_UART_Transmit>
			}
			if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 800263a:	2104      	movs	r1, #4
 800263c:	4820      	ldr	r0, [pc, #128]	; (80026c0 <Shell_Loop+0x2dc>)
 800263e:	f005 f855 	bl	80076ec <HAL_TIMEx_PWMN_Start>
 8002642:	4603      	mov	r3, r0
 8002644:	2b00      	cmp	r3, #0
 8002646:	d006      	beq.n	8002656 <Shell_Loop+0x272>
			{
				HAL_UART_Transmit(&huart2, errorMsg, sizeof(errorMsg), HAL_MAX_DELAY);
 8002648:	f04f 33ff 	mov.w	r3, #4294967295
 800264c:	2206      	movs	r2, #6
 800264e:	491e      	ldr	r1, [pc, #120]	; (80026c8 <Shell_Loop+0x2e4>)
 8002650:	4809      	ldr	r0, [pc, #36]	; (8002678 <Shell_Loop+0x294>)
 8002652:	f005 fb6e 	bl	8007d32 <HAL_UART_Transmit>
			}
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, MAX_DUTY_CYCLE / 2);
 8002656:	4b1a      	ldr	r3, [pc, #104]	; (80026c0 <Shell_Loop+0x2dc>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f640 024c 	movw	r2, #2124	; 0x84c
 800265e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, MAX_DUTY_CYCLE / 2);
 8002660:	4b17      	ldr	r3, [pc, #92]	; (80026c0 <Shell_Loop+0x2dc>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	f640 024c 	movw	r2, #2124	; 0x84c
 8002668:	639a      	str	r2, [r3, #56]	; 0x38
 800266a:	e092      	b.n	8002792 <Shell_Loop+0x3ae>
 800266c:	200006b8 	.word	0x200006b8
 8002670:	200006bc 	.word	0x200006bc
 8002674:	20000088 	.word	0x20000088
 8002678:	20000598 	.word	0x20000598
 800267c:	20000740 	.word	0x20000740
 8002680:	20000700 	.word	0x20000700
 8002684:	20000768 	.word	0x20000768
 8002688:	0800cc80 	.word	0x0800cc80
 800268c:	2000076c 	.word	0x2000076c
 8002690:	20000744 	.word	0x20000744
 8002694:	20000770 	.word	0x20000770
 8002698:	2000008c 	.word	0x2000008c
 800269c:	0800cc84 	.word	0x0800cc84
 80026a0:	200000a4 	.word	0x200000a4
 80026a4:	0800cc94 	.word	0x0800cc94
 80026a8:	0800cc9c 	.word	0x0800cc9c
 80026ac:	200006c0 	.word	0x200006c0
 80026b0:	0800ccc4 	.word	0x0800ccc4
 80026b4:	0800cccc 	.word	0x0800cccc
 80026b8:	200000c6 	.word	0x200000c6
 80026bc:	51eb851f 	.word	0x51eb851f
 80026c0:	200004b4 	.word	0x200004b4
 80026c4:	0800ccd4 	.word	0x0800ccd4
 80026c8:	200000c0 	.word	0x200000c0
		}
		else if(strcmp(argv[0], "stop") == 0)
 80026cc:	4b38      	ldr	r3, [pc, #224]	; (80027b0 <Shell_Loop+0x3cc>)
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	4938      	ldr	r1, [pc, #224]	; (80027b4 <Shell_Loop+0x3d0>)
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd fda4 	bl	8000220 <strcmp>
 80026d8:	4603      	mov	r3, r0
 80026da:	2b00      	cmp	r3, #0
 80026dc:	d110      	bne.n	8002700 <Shell_Loop+0x31c>
		{
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80026de:	2100      	movs	r1, #0
 80026e0:	4835      	ldr	r0, [pc, #212]	; (80027b8 <Shell_Loop+0x3d4>)
 80026e2:	f003 fdcd 	bl	8006280 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80026e6:	2100      	movs	r1, #0
 80026e8:	4833      	ldr	r0, [pc, #204]	; (80027b8 <Shell_Loop+0x3d4>)
 80026ea:	f005 f8c1 	bl	8007870 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80026ee:	2104      	movs	r1, #4
 80026f0:	4831      	ldr	r0, [pc, #196]	; (80027b8 <Shell_Loop+0x3d4>)
 80026f2:	f003 fdc5 	bl	8006280 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 80026f6:	2104      	movs	r1, #4
 80026f8:	482f      	ldr	r0, [pc, #188]	; (80027b8 <Shell_Loop+0x3d4>)
 80026fa:	f005 f8b9 	bl	8007870 <HAL_TIMEx_PWMN_Stop>
 80026fe:	e048      	b.n	8002792 <Shell_Loop+0x3ae>
		}
		else if(strcmp(argv[0], "readCurrent") == 0)
 8002700:	4b2b      	ldr	r3, [pc, #172]	; (80027b0 <Shell_Loop+0x3cc>)
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	492d      	ldr	r1, [pc, #180]	; (80027bc <Shell_Loop+0x3d8>)
 8002706:	4618      	mov	r0, r3
 8002708:	f7fd fd8a 	bl	8000220 <strcmp>
 800270c:	4603      	mov	r3, r0
 800270e:	2b00      	cmp	r3, #0
 8002710:	d117      	bne.n	8002742 <Shell_Loop+0x35e>
		{
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "%f\r\n", adcValue[0]);
 8002712:	4b2b      	ldr	r3, [pc, #172]	; (80027c0 <Shell_Loop+0x3dc>)
 8002714:	681b      	ldr	r3, [r3, #0]
 8002716:	4618      	mov	r0, r3
 8002718:	f7fd ff4e 	bl	80005b8 <__aeabi_f2d>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	e9cd 2300 	strd	r2, r3, [sp]
 8002724:	4a27      	ldr	r2, [pc, #156]	; (80027c4 <Shell_Loop+0x3e0>)
 8002726:	2140      	movs	r1, #64	; 0x40
 8002728:	4827      	ldr	r0, [pc, #156]	; (80027c8 <Shell_Loop+0x3e4>)
 800272a:	f008 f8cf 	bl	800a8cc <sniprintf>
 800272e:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	b29a      	uxth	r2, r3
 8002734:	f04f 33ff 	mov.w	r3, #4294967295
 8002738:	4923      	ldr	r1, [pc, #140]	; (80027c8 <Shell_Loop+0x3e4>)
 800273a:	4824      	ldr	r0, [pc, #144]	; (80027cc <Shell_Loop+0x3e8>)
 800273c:	f005 faf9 	bl	8007d32 <HAL_UART_Transmit>
 8002740:	e027      	b.n	8002792 <Shell_Loop+0x3ae>
		}
		else if(strcmp(argv[0], "readSpeed") == 0)
 8002742:	4b1b      	ldr	r3, [pc, #108]	; (80027b0 <Shell_Loop+0x3cc>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	4922      	ldr	r1, [pc, #136]	; (80027d0 <Shell_Loop+0x3ec>)
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd fd69 	bl	8000220 <strcmp>
 800274e:	4603      	mov	r3, r0
 8002750:	2b00      	cmp	r3, #0
 8002752:	d117      	bne.n	8002784 <Shell_Loop+0x3a0>
		{
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "%f\r\n", rpm);
 8002754:	4b1f      	ldr	r3, [pc, #124]	; (80027d4 <Shell_Loop+0x3f0>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4618      	mov	r0, r3
 800275a:	f7fd ff2d 	bl	80005b8 <__aeabi_f2d>
 800275e:	4602      	mov	r2, r0
 8002760:	460b      	mov	r3, r1
 8002762:	e9cd 2300 	strd	r2, r3, [sp]
 8002766:	4a17      	ldr	r2, [pc, #92]	; (80027c4 <Shell_Loop+0x3e0>)
 8002768:	2140      	movs	r1, #64	; 0x40
 800276a:	4817      	ldr	r0, [pc, #92]	; (80027c8 <Shell_Loop+0x3e4>)
 800276c:	f008 f8ae 	bl	800a8cc <sniprintf>
 8002770:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002772:	693b      	ldr	r3, [r7, #16]
 8002774:	b29a      	uxth	r2, r3
 8002776:	f04f 33ff 	mov.w	r3, #4294967295
 800277a:	4913      	ldr	r1, [pc, #76]	; (80027c8 <Shell_Loop+0x3e4>)
 800277c:	4813      	ldr	r0, [pc, #76]	; (80027cc <Shell_Loop+0x3e8>)
 800277e:	f005 fad8 	bl	8007d32 <HAL_UART_Transmit>
 8002782:	e006      	b.n	8002792 <Shell_Loop+0x3ae>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 8002784:	f04f 33ff 	mov.w	r3, #4294967295
 8002788:	2214      	movs	r2, #20
 800278a:	4913      	ldr	r1, [pc, #76]	; (80027d8 <Shell_Loop+0x3f4>)
 800278c:	480f      	ldr	r0, [pc, #60]	; (80027cc <Shell_Loop+0x3e8>)
 800278e:	f005 fad0 	bl	8007d32 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 8002792:	f04f 33ff 	mov.w	r3, #4294967295
 8002796:	221c      	movs	r2, #28
 8002798:	4910      	ldr	r1, [pc, #64]	; (80027dc <Shell_Loop+0x3f8>)
 800279a:	480c      	ldr	r0, [pc, #48]	; (80027cc <Shell_Loop+0x3e8>)
 800279c:	f005 fac9 	bl	8007d32 <HAL_UART_Transmit>
		newCmdReady = 0;
 80027a0:	4b0f      	ldr	r3, [pc, #60]	; (80027e0 <Shell_Loop+0x3fc>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
	}
}
 80027a6:	bf00      	nop
 80027a8:	3718      	adds	r7, #24
 80027aa:	46bd      	mov	sp, r7
 80027ac:	bd80      	pop	{r7, pc}
 80027ae:	bf00      	nop
 80027b0:	20000744 	.word	0x20000744
 80027b4:	0800ccdc 	.word	0x0800ccdc
 80027b8:	200004b4 	.word	0x200004b4
 80027bc:	0800cce4 	.word	0x0800cce4
 80027c0:	2000045c 	.word	0x2000045c
 80027c4:	0800ccf0 	.word	0x0800ccf0
 80027c8:	200006c0 	.word	0x200006c0
 80027cc:	20000598 	.word	0x20000598
 80027d0:	0800ccf8 	.word	0x0800ccf8
 80027d4:	20000454 	.word	0x20000454
 80027d8:	20000090 	.word	0x20000090
 80027dc:	20000004 	.word	0x20000004
 80027e0:	20000770 	.word	0x20000770

080027e4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b082      	sub	sp, #8
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 80027ec:	4b05      	ldr	r3, [pc, #20]	; (8002804 <HAL_UART_RxCpltCallback+0x20>)
 80027ee:	2201      	movs	r2, #1
 80027f0:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 80027f2:	2201      	movs	r2, #1
 80027f4:	4904      	ldr	r1, [pc, #16]	; (8002808 <HAL_UART_RxCpltCallback+0x24>)
 80027f6:	4805      	ldr	r0, [pc, #20]	; (800280c <HAL_UART_RxCpltCallback+0x28>)
 80027f8:	f005 fb32 	bl	8007e60 <HAL_UART_Receive_IT>
}
 80027fc:	bf00      	nop
 80027fe:	3708      	adds	r7, #8
 8002800:	46bd      	mov	sp, r7
 8002802:	bd80      	pop	{r7, pc}
 8002804:	200006b8 	.word	0x200006b8
 8002808:	200006bc 	.word	0x200006bc
 800280c:	20000598 	.word	0x20000598

08002810 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002810:	480d      	ldr	r0, [pc, #52]	; (8002848 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002812:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002814:	480d      	ldr	r0, [pc, #52]	; (800284c <LoopForever+0x6>)
  ldr r1, =_edata
 8002816:	490e      	ldr	r1, [pc, #56]	; (8002850 <LoopForever+0xa>)
  ldr r2, =_sidata
 8002818:	4a0e      	ldr	r2, [pc, #56]	; (8002854 <LoopForever+0xe>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 800281c:	e002      	b.n	8002824 <LoopCopyDataInit>

0800281e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002822:	3304      	adds	r3, #4

08002824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002828:	d3f9      	bcc.n	800281e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282a:	4a0b      	ldr	r2, [pc, #44]	; (8002858 <LoopForever+0x12>)
  ldr r4, =_ebss
 800282c:	4c0b      	ldr	r4, [pc, #44]	; (800285c <LoopForever+0x16>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002830:	e001      	b.n	8002836 <LoopFillZerobss>

08002832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002834:	3204      	adds	r2, #4

08002836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002838:	d3fb      	bcc.n	8002832 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800283a:	f7ff f9d9 	bl	8001bf0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800283e:	f008 f971 	bl	800ab24 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002842:	f7fe ff25 	bl	8001690 <main>

08002846 <LoopForever>:

LoopForever:
    b LoopForever
 8002846:	e7fe      	b.n	8002846 <LoopForever>
  ldr   r0, =_estack
 8002848:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800284c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002850:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 8002854:	0800d120 	.word	0x0800d120
  ldr r2, =_sbss
 8002858:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 800285c:	200008c4 	.word	0x200008c4

08002860 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002860:	e7fe      	b.n	8002860 <ADC1_2_IRQHandler>

08002862 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002862:	b580      	push	{r7, lr}
 8002864:	b082      	sub	sp, #8
 8002866:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 8002868:	2300      	movs	r3, #0
 800286a:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800286c:	2003      	movs	r0, #3
 800286e:	f001 fd42 	bl	80042f6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002872:	200f      	movs	r0, #15
 8002874:	f7ff f810 	bl	8001898 <HAL_InitTick>
 8002878:	4603      	mov	r3, r0
 800287a:	2b00      	cmp	r3, #0
 800287c:	d002      	beq.n	8002884 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 800287e:	2301      	movs	r3, #1
 8002880:	71fb      	strb	r3, [r7, #7]
 8002882:	e001      	b.n	8002888 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8002884:	f7fe ffe4 	bl	8001850 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8002888:	79fb      	ldrb	r3, [r7, #7]

}
 800288a:	4618      	mov	r0, r3
 800288c:	3708      	adds	r7, #8
 800288e:	46bd      	mov	sp, r7
 8002890:	bd80      	pop	{r7, pc}
	...

08002894 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002898:	4b05      	ldr	r3, [pc, #20]	; (80028b0 <HAL_IncTick+0x1c>)
 800289a:	681a      	ldr	r2, [r3, #0]
 800289c:	4b05      	ldr	r3, [pc, #20]	; (80028b4 <HAL_IncTick+0x20>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4413      	add	r3, r2
 80028a2:	4a03      	ldr	r2, [pc, #12]	; (80028b0 <HAL_IncTick+0x1c>)
 80028a4:	6013      	str	r3, [r2, #0]
}
 80028a6:	bf00      	nop
 80028a8:	46bd      	mov	sp, r7
 80028aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ae:	4770      	bx	lr
 80028b0:	20000774 	.word	0x20000774
 80028b4:	200000cc 	.word	0x200000cc

080028b8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80028b8:	b480      	push	{r7}
 80028ba:	af00      	add	r7, sp, #0
  return uwTick;
 80028bc:	4b03      	ldr	r3, [pc, #12]	; (80028cc <HAL_GetTick+0x14>)
 80028be:	681b      	ldr	r3, [r3, #0]
}
 80028c0:	4618      	mov	r0, r3
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr
 80028ca:	bf00      	nop
 80028cc:	20000774 	.word	0x20000774

080028d0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028d0:	b580      	push	{r7, lr}
 80028d2:	b084      	sub	sp, #16
 80028d4:	af00      	add	r7, sp, #0
 80028d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028d8:	f7ff ffee 	bl	80028b8 <HAL_GetTick>
 80028dc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028e2:	68fb      	ldr	r3, [r7, #12]
 80028e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028e8:	d004      	beq.n	80028f4 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 80028ea:	4b09      	ldr	r3, [pc, #36]	; (8002910 <HAL_Delay+0x40>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	68fa      	ldr	r2, [r7, #12]
 80028f0:	4413      	add	r3, r2
 80028f2:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80028f4:	bf00      	nop
 80028f6:	f7ff ffdf 	bl	80028b8 <HAL_GetTick>
 80028fa:	4602      	mov	r2, r0
 80028fc:	68bb      	ldr	r3, [r7, #8]
 80028fe:	1ad3      	subs	r3, r2, r3
 8002900:	68fa      	ldr	r2, [r7, #12]
 8002902:	429a      	cmp	r2, r3
 8002904:	d8f7      	bhi.n	80028f6 <HAL_Delay+0x26>
  {
  }
}
 8002906:	bf00      	nop
 8002908:	bf00      	nop
 800290a:	3710      	adds	r7, #16
 800290c:	46bd      	mov	sp, r7
 800290e:	bd80      	pop	{r7, pc}
 8002910:	200000cc 	.word	0x200000cc

08002914 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002914:	b480      	push	{r7}
 8002916:	b083      	sub	sp, #12
 8002918:	af00      	add	r7, sp, #0
 800291a:	6078      	str	r0, [r7, #4]
 800291c:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	689b      	ldr	r3, [r3, #8]
 8002922:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	431a      	orrs	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	609a      	str	r2, [r3, #8]
}
 800292e:	bf00      	nop
 8002930:	370c      	adds	r7, #12
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr

0800293a <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800293a:	b480      	push	{r7}
 800293c:	b083      	sub	sp, #12
 800293e:	af00      	add	r7, sp, #0
 8002940:	6078      	str	r0, [r7, #4]
 8002942:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	689b      	ldr	r3, [r3, #8]
 8002948:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 800294c:	683b      	ldr	r3, [r7, #0]
 800294e:	431a      	orrs	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	609a      	str	r2, [r3, #8]
}
 8002954:	bf00      	nop
 8002956:	370c      	adds	r7, #12
 8002958:	46bd      	mov	sp, r7
 800295a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800295e:	4770      	bx	lr

08002960 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002960:	b480      	push	{r7}
 8002962:	b083      	sub	sp, #12
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002970:	4618      	mov	r0, r3
 8002972:	370c      	adds	r7, #12
 8002974:	46bd      	mov	sp, r7
 8002976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800297a:	4770      	bx	lr

0800297c <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 800297c:	b480      	push	{r7}
 800297e:	b087      	sub	sp, #28
 8002980:	af00      	add	r7, sp, #0
 8002982:	60f8      	str	r0, [r7, #12]
 8002984:	60b9      	str	r1, [r7, #8]
 8002986:	607a      	str	r2, [r7, #4]
 8002988:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800298a:	68fb      	ldr	r3, [r7, #12]
 800298c:	3360      	adds	r3, #96	; 0x60
 800298e:	461a      	mov	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	009b      	lsls	r3, r3, #2
 8002994:	4413      	add	r3, r2
 8002996:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002998:	697b      	ldr	r3, [r7, #20]
 800299a:	681a      	ldr	r2, [r3, #0]
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <LL_ADC_SetOffset+0x44>)
 800299e:	4013      	ands	r3, r2
 80029a0:	687a      	ldr	r2, [r7, #4]
 80029a2:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80029a6:	683a      	ldr	r2, [r7, #0]
 80029a8:	430a      	orrs	r2, r1
 80029aa:	4313      	orrs	r3, r2
 80029ac:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80029b0:	697b      	ldr	r3, [r7, #20]
 80029b2:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80029b4:	bf00      	nop
 80029b6:	371c      	adds	r7, #28
 80029b8:	46bd      	mov	sp, r7
 80029ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029be:	4770      	bx	lr
 80029c0:	03fff000 	.word	0x03fff000

080029c4 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80029c4:	b480      	push	{r7}
 80029c6:	b085      	sub	sp, #20
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
 80029cc:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	3360      	adds	r3, #96	; 0x60
 80029d2:	461a      	mov	r2, r3
 80029d4:	683b      	ldr	r3, [r7, #0]
 80029d6:	009b      	lsls	r3, r3, #2
 80029d8:	4413      	add	r3, r2
 80029da:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 80029e4:	4618      	mov	r0, r3
 80029e6:	3714      	adds	r7, #20
 80029e8:	46bd      	mov	sp, r7
 80029ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ee:	4770      	bx	lr

080029f0 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 80029f0:	b480      	push	{r7}
 80029f2:	b087      	sub	sp, #28
 80029f4:	af00      	add	r7, sp, #0
 80029f6:	60f8      	str	r0, [r7, #12]
 80029f8:	60b9      	str	r1, [r7, #8]
 80029fa:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80029fc:	68fb      	ldr	r3, [r7, #12]
 80029fe:	3360      	adds	r3, #96	; 0x60
 8002a00:	461a      	mov	r2, r3
 8002a02:	68bb      	ldr	r3, [r7, #8]
 8002a04:	009b      	lsls	r3, r3, #2
 8002a06:	4413      	add	r3, r2
 8002a08:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a0a:	697b      	ldr	r3, [r7, #20]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	431a      	orrs	r2, r3
 8002a16:	697b      	ldr	r3, [r7, #20]
 8002a18:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8002a1a:	bf00      	nop
 8002a1c:	371c      	adds	r7, #28
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr

08002a26 <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8002a26:	b480      	push	{r7}
 8002a28:	b087      	sub	sp, #28
 8002a2a:	af00      	add	r7, sp, #0
 8002a2c:	60f8      	str	r0, [r7, #12]
 8002a2e:	60b9      	str	r1, [r7, #8]
 8002a30:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	3360      	adds	r3, #96	; 0x60
 8002a36:	461a      	mov	r2, r3
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	009b      	lsls	r3, r3, #2
 8002a3c:	4413      	add	r3, r2
 8002a3e:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a40:	697b      	ldr	r3, [r7, #20]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	431a      	orrs	r2, r3
 8002a4c:	697b      	ldr	r3, [r7, #20]
 8002a4e:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002a50:	bf00      	nop
 8002a52:	371c      	adds	r7, #28
 8002a54:	46bd      	mov	sp, r7
 8002a56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5a:	4770      	bx	lr

08002a5c <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	b087      	sub	sp, #28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	60f8      	str	r0, [r7, #12]
 8002a64:	60b9      	str	r1, [r7, #8]
 8002a66:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	3360      	adds	r3, #96	; 0x60
 8002a6c:	461a      	mov	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	009b      	lsls	r3, r3, #2
 8002a72:	4413      	add	r3, r2
 8002a74:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002a76:	697b      	ldr	r3, [r7, #20]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	431a      	orrs	r2, r3
 8002a82:	697b      	ldr	r3, [r7, #20]
 8002a84:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8002a86:	bf00      	nop
 8002a88:	371c      	adds	r7, #28
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a90:	4770      	bx	lr

08002a92 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8002a92:	b480      	push	{r7}
 8002a94:	b083      	sub	sp, #12
 8002a96:	af00      	add	r7, sp, #0
 8002a98:	6078      	str	r0, [r7, #4]
 8002a9a:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	695b      	ldr	r3, [r3, #20]
 8002aa0:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002aa4:	683b      	ldr	r3, [r7, #0]
 8002aa6:	431a      	orrs	r2, r3
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	615a      	str	r2, [r3, #20]
}
 8002aac:	bf00      	nop
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	68db      	ldr	r3, [r3, #12]
 8002ac4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d101      	bne.n	8002ad0 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 8002acc:	2301      	movs	r3, #1
 8002ace:	e000      	b.n	8002ad2 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8002ad0:	2300      	movs	r3, #0
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	370c      	adds	r7, #12
 8002ad6:	46bd      	mov	sp, r7
 8002ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002adc:	4770      	bx	lr

08002ade <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002ade:	b480      	push	{r7}
 8002ae0:	b087      	sub	sp, #28
 8002ae2:	af00      	add	r7, sp, #0
 8002ae4:	60f8      	str	r0, [r7, #12]
 8002ae6:	60b9      	str	r1, [r7, #8]
 8002ae8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	3330      	adds	r3, #48	; 0x30
 8002aee:	461a      	mov	r2, r3
 8002af0:	68bb      	ldr	r3, [r7, #8]
 8002af2:	0a1b      	lsrs	r3, r3, #8
 8002af4:	009b      	lsls	r3, r3, #2
 8002af6:	f003 030c 	and.w	r3, r3, #12
 8002afa:	4413      	add	r3, r2
 8002afc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	681a      	ldr	r2, [r3, #0]
 8002b02:	68bb      	ldr	r3, [r7, #8]
 8002b04:	f003 031f 	and.w	r3, r3, #31
 8002b08:	211f      	movs	r1, #31
 8002b0a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b0e:	43db      	mvns	r3, r3
 8002b10:	401a      	ands	r2, r3
 8002b12:	687b      	ldr	r3, [r7, #4]
 8002b14:	0e9b      	lsrs	r3, r3, #26
 8002b16:	f003 011f 	and.w	r1, r3, #31
 8002b1a:	68bb      	ldr	r3, [r7, #8]
 8002b1c:	f003 031f 	and.w	r3, r3, #31
 8002b20:	fa01 f303 	lsl.w	r3, r1, r3
 8002b24:	431a      	orrs	r2, r3
 8002b26:	697b      	ldr	r3, [r7, #20]
 8002b28:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8002b2a:	bf00      	nop
 8002b2c:	371c      	adds	r7, #28
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b34:	4770      	bx	lr

08002b36 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8002b36:	b480      	push	{r7}
 8002b38:	b087      	sub	sp, #28
 8002b3a:	af00      	add	r7, sp, #0
 8002b3c:	60f8      	str	r0, [r7, #12]
 8002b3e:	60b9      	str	r1, [r7, #8]
 8002b40:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002b42:	68fb      	ldr	r3, [r7, #12]
 8002b44:	3314      	adds	r3, #20
 8002b46:	461a      	mov	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	0e5b      	lsrs	r3, r3, #25
 8002b4c:	009b      	lsls	r3, r3, #2
 8002b4e:	f003 0304 	and.w	r3, r3, #4
 8002b52:	4413      	add	r3, r2
 8002b54:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002b56:	697b      	ldr	r3, [r7, #20]
 8002b58:	681a      	ldr	r2, [r3, #0]
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	0d1b      	lsrs	r3, r3, #20
 8002b5e:	f003 031f 	and.w	r3, r3, #31
 8002b62:	2107      	movs	r1, #7
 8002b64:	fa01 f303 	lsl.w	r3, r1, r3
 8002b68:	43db      	mvns	r3, r3
 8002b6a:	401a      	ands	r2, r3
 8002b6c:	68bb      	ldr	r3, [r7, #8]
 8002b6e:	0d1b      	lsrs	r3, r3, #20
 8002b70:	f003 031f 	and.w	r3, r3, #31
 8002b74:	6879      	ldr	r1, [r7, #4]
 8002b76:	fa01 f303 	lsl.w	r3, r1, r3
 8002b7a:	431a      	orrs	r2, r3
 8002b7c:	697b      	ldr	r3, [r7, #20]
 8002b7e:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8002b80:	bf00      	nop
 8002b82:	371c      	adds	r7, #28
 8002b84:	46bd      	mov	sp, r7
 8002b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b8a:	4770      	bx	lr

08002b8c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b085      	sub	sp, #20
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	4a0f      	ldr	r2, [pc, #60]	; (8002bd8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8002b9c:	4293      	cmp	r3, r2
 8002b9e:	d10a      	bne.n	8002bb6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8002ba0:	68fb      	ldr	r3, [r7, #12]
 8002ba2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002ba6:	68bb      	ldr	r3, [r7, #8]
 8002ba8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bac:	431a      	orrs	r2, r3
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8002bb4:	e00a      	b.n	8002bcc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002bc2:	43db      	mvns	r3, r3
 8002bc4:	401a      	ands	r2, r3
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8002bcc:	bf00      	nop
 8002bce:	3714      	adds	r7, #20
 8002bd0:	46bd      	mov	sp, r7
 8002bd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bd6:	4770      	bx	lr
 8002bd8:	407f0000 	.word	0x407f0000

08002bdc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	b083      	sub	sp, #12
 8002be0:	af00      	add	r7, sp, #0
 8002be2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	689b      	ldr	r3, [r3, #8]
 8002be8:	f003 031f 	and.w	r3, r3, #31
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b083      	sub	sp, #12
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002c08:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c0c:	687a      	ldr	r2, [r7, #4]
 8002c0e:	6093      	str	r3, [r2, #8]
}
 8002c10:	bf00      	nop
 8002c12:	370c      	adds	r7, #12
 8002c14:	46bd      	mov	sp, r7
 8002c16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c1a:	4770      	bx	lr

08002c1c <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002c1c:	b480      	push	{r7}
 8002c1e:	b083      	sub	sp, #12
 8002c20:	af00      	add	r7, sp, #0
 8002c22:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	689b      	ldr	r3, [r3, #8]
 8002c28:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002c2c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002c30:	d101      	bne.n	8002c36 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002c32:	2301      	movs	r3, #1
 8002c34:	e000      	b.n	8002c38 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002c36:	2300      	movs	r3, #0
}
 8002c38:	4618      	mov	r0, r3
 8002c3a:	370c      	adds	r7, #12
 8002c3c:	46bd      	mov	sp, r7
 8002c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c42:	4770      	bx	lr

08002c44 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002c44:	b480      	push	{r7}
 8002c46:	b083      	sub	sp, #12
 8002c48:	af00      	add	r7, sp, #0
 8002c4a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	689b      	ldr	r3, [r3, #8]
 8002c50:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002c54:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002c58:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002c60:	bf00      	nop
 8002c62:	370c      	adds	r7, #12
 8002c64:	46bd      	mov	sp, r7
 8002c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6a:	4770      	bx	lr

08002c6c <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002c6c:	b480      	push	{r7}
 8002c6e:	b083      	sub	sp, #12
 8002c70:	af00      	add	r7, sp, #0
 8002c72:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c7c:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002c80:	d101      	bne.n	8002c86 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002c82:	2301      	movs	r3, #1
 8002c84:	e000      	b.n	8002c88 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	370c      	adds	r7, #12
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c92:	4770      	bx	lr

08002c94 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002c94:	b480      	push	{r7}
 8002c96:	b083      	sub	sp, #12
 8002c98:	af00      	add	r7, sp, #0
 8002c9a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	689b      	ldr	r3, [r3, #8]
 8002ca0:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ca4:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002ca8:	f043 0201 	orr.w	r2, r3, #1
 8002cac:	687b      	ldr	r3, [r7, #4]
 8002cae:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002cb0:	bf00      	nop
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b083      	sub	sp, #12
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	689b      	ldr	r3, [r3, #8]
 8002cc8:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ccc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002cd0:	f043 0202 	orr.w	r2, r3, #2
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002cd8:	bf00      	nop
 8002cda:	370c      	adds	r7, #12
 8002cdc:	46bd      	mov	sp, r7
 8002cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ce2:	4770      	bx	lr

08002ce4 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002ce4:	b480      	push	{r7}
 8002ce6:	b083      	sub	sp, #12
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	689b      	ldr	r3, [r3, #8]
 8002cf0:	f003 0301 	and.w	r3, r3, #1
 8002cf4:	2b01      	cmp	r3, #1
 8002cf6:	d101      	bne.n	8002cfc <LL_ADC_IsEnabled+0x18>
 8002cf8:	2301      	movs	r3, #1
 8002cfa:	e000      	b.n	8002cfe <LL_ADC_IsEnabled+0x1a>
 8002cfc:	2300      	movs	r3, #0
}
 8002cfe:	4618      	mov	r0, r3
 8002d00:	370c      	adds	r7, #12
 8002d02:	46bd      	mov	sp, r7
 8002d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d08:	4770      	bx	lr

08002d0a <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002d0a:	b480      	push	{r7}
 8002d0c:	b083      	sub	sp, #12
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	689b      	ldr	r3, [r3, #8]
 8002d16:	f003 0302 	and.w	r3, r3, #2
 8002d1a:	2b02      	cmp	r3, #2
 8002d1c:	d101      	bne.n	8002d22 <LL_ADC_IsDisableOngoing+0x18>
 8002d1e:	2301      	movs	r3, #1
 8002d20:	e000      	b.n	8002d24 <LL_ADC_IsDisableOngoing+0x1a>
 8002d22:	2300      	movs	r3, #0
}
 8002d24:	4618      	mov	r0, r3
 8002d26:	370c      	adds	r7, #12
 8002d28:	46bd      	mov	sp, r7
 8002d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2e:	4770      	bx	lr

08002d30 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002d30:	b480      	push	{r7}
 8002d32:	b083      	sub	sp, #12
 8002d34:	af00      	add	r7, sp, #0
 8002d36:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002d40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002d44:	f043 0204 	orr.w	r2, r3, #4
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002d4c:	bf00      	nop
 8002d4e:	370c      	adds	r7, #12
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr

08002d58 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d58:	b480      	push	{r7}
 8002d5a:	b083      	sub	sp, #12
 8002d5c:	af00      	add	r7, sp, #0
 8002d5e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	689b      	ldr	r3, [r3, #8]
 8002d64:	f003 0304 	and.w	r3, r3, #4
 8002d68:	2b04      	cmp	r3, #4
 8002d6a:	d101      	bne.n	8002d70 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002d6c:	2301      	movs	r3, #1
 8002d6e:	e000      	b.n	8002d72 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002d70:	2300      	movs	r3, #0
}
 8002d72:	4618      	mov	r0, r3
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	689b      	ldr	r3, [r3, #8]
 8002d8a:	f003 0308 	and.w	r3, r3, #8
 8002d8e:	2b08      	cmp	r3, #8
 8002d90:	d101      	bne.n	8002d96 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002d92:	2301      	movs	r3, #1
 8002d94:	e000      	b.n	8002d98 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002d96:	2300      	movs	r3, #0
}
 8002d98:	4618      	mov	r0, r3
 8002d9a:	370c      	adds	r7, #12
 8002d9c:	46bd      	mov	sp, r7
 8002d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da2:	4770      	bx	lr

08002da4 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002da4:	b590      	push	{r4, r7, lr}
 8002da6:	b089      	sub	sp, #36	; 0x24
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002dac:	2300      	movs	r3, #0
 8002dae:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002db0:	2300      	movs	r3, #0
 8002db2:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d101      	bne.n	8002dbe <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002dba:	2301      	movs	r3, #1
 8002dbc:	e1af      	b.n	800311e <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	695b      	ldr	r3, [r3, #20]
 8002dc2:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d109      	bne.n	8002de0 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002dcc:	6878      	ldr	r0, [r7, #4]
 8002dce:	f7fe f9e3 	bl	8001198 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	2200      	movs	r2, #0
 8002dd6:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	2200      	movs	r2, #0
 8002ddc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002de0:	687b      	ldr	r3, [r7, #4]
 8002de2:	681b      	ldr	r3, [r3, #0]
 8002de4:	4618      	mov	r0, r3
 8002de6:	f7ff ff19 	bl	8002c1c <LL_ADC_IsDeepPowerDownEnabled>
 8002dea:	4603      	mov	r3, r0
 8002dec:	2b00      	cmp	r3, #0
 8002dee:	d004      	beq.n	8002dfa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	681b      	ldr	r3, [r3, #0]
 8002df4:	4618      	mov	r0, r3
 8002df6:	f7ff feff 	bl	8002bf8 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	4618      	mov	r0, r3
 8002e00:	f7ff ff34 	bl	8002c6c <LL_ADC_IsInternalRegulatorEnabled>
 8002e04:	4603      	mov	r3, r0
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	d115      	bne.n	8002e36 <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4618      	mov	r0, r3
 8002e10:	f7ff ff18 	bl	8002c44 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002e14:	4b9f      	ldr	r3, [pc, #636]	; (8003094 <HAL_ADC_Init+0x2f0>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	099b      	lsrs	r3, r3, #6
 8002e1a:	4a9f      	ldr	r2, [pc, #636]	; (8003098 <HAL_ADC_Init+0x2f4>)
 8002e1c:	fba2 2303 	umull	r2, r3, r2, r3
 8002e20:	099b      	lsrs	r3, r3, #6
 8002e22:	3301      	adds	r3, #1
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e28:	e002      	b.n	8002e30 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002e2a:	68bb      	ldr	r3, [r7, #8]
 8002e2c:	3b01      	subs	r3, #1
 8002e2e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002e30:	68bb      	ldr	r3, [r7, #8]
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d1f9      	bne.n	8002e2a <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7ff ff16 	bl	8002c6c <LL_ADC_IsInternalRegulatorEnabled>
 8002e40:	4603      	mov	r3, r0
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d10d      	bne.n	8002e62 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e4a:	f043 0210 	orr.w	r2, r3, #16
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002e52:	687b      	ldr	r3, [r7, #4]
 8002e54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002e56:	f043 0201 	orr.w	r2, r3, #1
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002e5e:	2301      	movs	r3, #1
 8002e60:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7ff ff76 	bl	8002d58 <LL_ADC_REG_IsConversionOngoing>
 8002e6c:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002e6e:	687b      	ldr	r3, [r7, #4]
 8002e70:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e72:	f003 0310 	and.w	r3, r3, #16
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	f040 8148 	bne.w	800310c <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002e7c:	697b      	ldr	r3, [r7, #20]
 8002e7e:	2b00      	cmp	r3, #0
 8002e80:	f040 8144 	bne.w	800310c <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e88:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002e8c:	f043 0202 	orr.w	r2, r3, #2
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	4618      	mov	r0, r3
 8002e9a:	f7ff ff23 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002e9e:	4603      	mov	r3, r0
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d141      	bne.n	8002f28 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002eac:	d004      	beq.n	8002eb8 <HAL_ADC_Init+0x114>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a7a      	ldr	r2, [pc, #488]	; (800309c <HAL_ADC_Init+0x2f8>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d10f      	bne.n	8002ed8 <HAL_ADC_Init+0x134>
 8002eb8:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ebc:	f7ff ff12 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002ec0:	4604      	mov	r4, r0
 8002ec2:	4876      	ldr	r0, [pc, #472]	; (800309c <HAL_ADC_Init+0x2f8>)
 8002ec4:	f7ff ff0e 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002ec8:	4603      	mov	r3, r0
 8002eca:	4323      	orrs	r3, r4
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bf0c      	ite	eq
 8002ed0:	2301      	moveq	r3, #1
 8002ed2:	2300      	movne	r3, #0
 8002ed4:	b2db      	uxtb	r3, r3
 8002ed6:	e012      	b.n	8002efe <HAL_ADC_Init+0x15a>
 8002ed8:	4871      	ldr	r0, [pc, #452]	; (80030a0 <HAL_ADC_Init+0x2fc>)
 8002eda:	f7ff ff03 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002ede:	4604      	mov	r4, r0
 8002ee0:	4870      	ldr	r0, [pc, #448]	; (80030a4 <HAL_ADC_Init+0x300>)
 8002ee2:	f7ff feff 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002ee6:	4603      	mov	r3, r0
 8002ee8:	431c      	orrs	r4, r3
 8002eea:	486f      	ldr	r0, [pc, #444]	; (80030a8 <HAL_ADC_Init+0x304>)
 8002eec:	f7ff fefa 	bl	8002ce4 <LL_ADC_IsEnabled>
 8002ef0:	4603      	mov	r3, r0
 8002ef2:	4323      	orrs	r3, r4
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bf0c      	ite	eq
 8002ef8:	2301      	moveq	r3, #1
 8002efa:	2300      	movne	r3, #0
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	2b00      	cmp	r3, #0
 8002f00:	d012      	beq.n	8002f28 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f0a:	d004      	beq.n	8002f16 <HAL_ADC_Init+0x172>
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a62      	ldr	r2, [pc, #392]	; (800309c <HAL_ADC_Init+0x2f8>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d101      	bne.n	8002f1a <HAL_ADC_Init+0x176>
 8002f16:	4a65      	ldr	r2, [pc, #404]	; (80030ac <HAL_ADC_Init+0x308>)
 8002f18:	e000      	b.n	8002f1c <HAL_ADC_Init+0x178>
 8002f1a:	4a65      	ldr	r2, [pc, #404]	; (80030b0 <HAL_ADC_Init+0x30c>)
 8002f1c:	687b      	ldr	r3, [r7, #4]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	4619      	mov	r1, r3
 8002f22:	4610      	mov	r0, r2
 8002f24:	f7ff fcf6 	bl	8002914 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	7f5b      	ldrb	r3, [r3, #29]
 8002f2c:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f32:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002f38:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002f3e:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f46:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002f48:	4313      	orrs	r3, r2
 8002f4a:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002f52:	2b01      	cmp	r3, #1
 8002f54:	d106      	bne.n	8002f64 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002f5a:	3b01      	subs	r3, #1
 8002f5c:	045b      	lsls	r3, r3, #17
 8002f5e:	69ba      	ldr	r2, [r7, #24]
 8002f60:	4313      	orrs	r3, r2
 8002f62:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002f64:	687b      	ldr	r3, [r7, #4]
 8002f66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f68:	2b00      	cmp	r3, #0
 8002f6a:	d009      	beq.n	8002f80 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002f70:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f78:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002f7a:	69ba      	ldr	r2, [r7, #24]
 8002f7c:	4313      	orrs	r3, r2
 8002f7e:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	681b      	ldr	r3, [r3, #0]
 8002f84:	68da      	ldr	r2, [r3, #12]
 8002f86:	4b4b      	ldr	r3, [pc, #300]	; (80030b4 <HAL_ADC_Init+0x310>)
 8002f88:	4013      	ands	r3, r2
 8002f8a:	687a      	ldr	r2, [r7, #4]
 8002f8c:	6812      	ldr	r2, [r2, #0]
 8002f8e:	69b9      	ldr	r1, [r7, #24]
 8002f90:	430b      	orrs	r3, r1
 8002f92:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002f94:	687b      	ldr	r3, [r7, #4]
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	691b      	ldr	r3, [r3, #16]
 8002f9a:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	430a      	orrs	r2, r1
 8002fa8:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002faa:	687b      	ldr	r3, [r7, #4]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff fed2 	bl	8002d58 <LL_ADC_REG_IsConversionOngoing>
 8002fb4:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	4618      	mov	r0, r3
 8002fbc:	f7ff fedf 	bl	8002d7e <LL_ADC_INJ_IsConversionOngoing>
 8002fc0:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002fc2:	693b      	ldr	r3, [r7, #16]
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d17f      	bne.n	80030c8 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002fc8:	68fb      	ldr	r3, [r7, #12]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d17c      	bne.n	80030c8 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fd2:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002fda:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002fdc:	4313      	orrs	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002fe0:	687b      	ldr	r3, [r7, #4]
 8002fe2:	681b      	ldr	r3, [r3, #0]
 8002fe4:	68db      	ldr	r3, [r3, #12]
 8002fe6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002fea:	f023 0302 	bic.w	r3, r3, #2
 8002fee:	687a      	ldr	r2, [r7, #4]
 8002ff0:	6812      	ldr	r2, [r2, #0]
 8002ff2:	69b9      	ldr	r1, [r7, #24]
 8002ff4:	430b      	orrs	r3, r1
 8002ff6:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002ff8:	687b      	ldr	r3, [r7, #4]
 8002ffa:	691b      	ldr	r3, [r3, #16]
 8002ffc:	2b00      	cmp	r3, #0
 8002ffe:	d017      	beq.n	8003030 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	691a      	ldr	r2, [r3, #16]
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 800300e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	681b      	ldr	r3, [r3, #0]
 8003014:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003018:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 800301c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003020:	687a      	ldr	r2, [r7, #4]
 8003022:	6911      	ldr	r1, [r2, #16]
 8003024:	687a      	ldr	r2, [r7, #4]
 8003026:	6812      	ldr	r2, [r2, #0]
 8003028:	430b      	orrs	r3, r1
 800302a:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 800302e:	e013      	b.n	8003058 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	691a      	ldr	r2, [r3, #16]
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 800303e:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8003048:	687a      	ldr	r2, [r7, #4]
 800304a:	6812      	ldr	r2, [r2, #0]
 800304c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8003050:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003054:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800305e:	2b01      	cmp	r3, #1
 8003060:	d12a      	bne.n	80030b8 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	691b      	ldr	r3, [r3, #16]
 8003068:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 800306c:	f023 0304 	bic.w	r3, r3, #4
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8003074:	687a      	ldr	r2, [r7, #4]
 8003076:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003078:	4311      	orrs	r1, r2
 800307a:	687a      	ldr	r2, [r7, #4]
 800307c:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 800307e:	4311      	orrs	r1, r2
 8003080:	687a      	ldr	r2, [r7, #4]
 8003082:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8003084:	430a      	orrs	r2, r1
 8003086:	431a      	orrs	r2, r3
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	f042 0201 	orr.w	r2, r2, #1
 8003090:	611a      	str	r2, [r3, #16]
 8003092:	e019      	b.n	80030c8 <HAL_ADC_Init+0x324>
 8003094:	20000000 	.word	0x20000000
 8003098:	053e2d63 	.word	0x053e2d63
 800309c:	50000100 	.word	0x50000100
 80030a0:	50000400 	.word	0x50000400
 80030a4:	50000500 	.word	0x50000500
 80030a8:	50000600 	.word	0x50000600
 80030ac:	50000300 	.word	0x50000300
 80030b0:	50000700 	.word	0x50000700
 80030b4:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	691a      	ldr	r2, [r3, #16]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f022 0201 	bic.w	r2, r2, #1
 80030c6:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	695b      	ldr	r3, [r3, #20]
 80030cc:	2b01      	cmp	r3, #1
 80030ce:	d10c      	bne.n	80030ea <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80030d6:	f023 010f 	bic.w	r1, r3, #15
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	6a1b      	ldr	r3, [r3, #32]
 80030de:	1e5a      	subs	r2, r3, #1
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	430a      	orrs	r2, r1
 80030e6:	631a      	str	r2, [r3, #48]	; 0x30
 80030e8:	e007      	b.n	80030fa <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	f022 020f 	bic.w	r2, r2, #15
 80030f8:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80030fe:	f023 0303 	bic.w	r3, r3, #3
 8003102:	f043 0201 	orr.w	r2, r3, #1
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	65da      	str	r2, [r3, #92]	; 0x5c
 800310a:	e007      	b.n	800311c <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003110:	f043 0210 	orr.w	r2, r3, #16
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800311c:	7ffb      	ldrb	r3, [r7, #31]
}
 800311e:	4618      	mov	r0, r3
 8003120:	3724      	adds	r7, #36	; 0x24
 8003122:	46bd      	mov	sp, r7
 8003124:	bd90      	pop	{r4, r7, pc}
 8003126:	bf00      	nop

08003128 <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b086      	sub	sp, #24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800313c:	d004      	beq.n	8003148 <HAL_ADC_Start_DMA+0x20>
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a5a      	ldr	r2, [pc, #360]	; (80032ac <HAL_ADC_Start_DMA+0x184>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d101      	bne.n	800314c <HAL_ADC_Start_DMA+0x24>
 8003148:	4b59      	ldr	r3, [pc, #356]	; (80032b0 <HAL_ADC_Start_DMA+0x188>)
 800314a:	e000      	b.n	800314e <HAL_ADC_Start_DMA+0x26>
 800314c:	4b59      	ldr	r3, [pc, #356]	; (80032b4 <HAL_ADC_Start_DMA+0x18c>)
 800314e:	4618      	mov	r0, r3
 8003150:	f7ff fd44 	bl	8002bdc <LL_ADC_GetMultimode>
 8003154:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003156:	68fb      	ldr	r3, [r7, #12]
 8003158:	681b      	ldr	r3, [r3, #0]
 800315a:	4618      	mov	r0, r3
 800315c:	f7ff fdfc 	bl	8002d58 <LL_ADC_REG_IsConversionOngoing>
 8003160:	4603      	mov	r3, r0
 8003162:	2b00      	cmp	r3, #0
 8003164:	f040 809b 	bne.w	800329e <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800316e:	2b01      	cmp	r3, #1
 8003170:	d101      	bne.n	8003176 <HAL_ADC_Start_DMA+0x4e>
 8003172:	2302      	movs	r3, #2
 8003174:	e096      	b.n	80032a4 <HAL_ADC_Start_DMA+0x17c>
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	2201      	movs	r2, #1
 800317a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4a4d      	ldr	r2, [pc, #308]	; (80032b8 <HAL_ADC_Start_DMA+0x190>)
 8003184:	4293      	cmp	r3, r2
 8003186:	d008      	beq.n	800319a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	2b00      	cmp	r3, #0
 800318c:	d005      	beq.n	800319a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 800318e:	693b      	ldr	r3, [r7, #16]
 8003190:	2b05      	cmp	r3, #5
 8003192:	d002      	beq.n	800319a <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8003194:	693b      	ldr	r3, [r7, #16]
 8003196:	2b09      	cmp	r3, #9
 8003198:	d17a      	bne.n	8003290 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 800319a:	68f8      	ldr	r0, [r7, #12]
 800319c:	f000 fcec 	bl	8003b78 <ADC_Enable>
 80031a0:	4603      	mov	r3, r0
 80031a2:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 80031a4:	7dfb      	ldrb	r3, [r7, #23]
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d16d      	bne.n	8003286 <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031ae:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80031b2:	f023 0301 	bic.w	r3, r3, #1
 80031b6:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4a3a      	ldr	r2, [pc, #232]	; (80032ac <HAL_ADC_Start_DMA+0x184>)
 80031c4:	4293      	cmp	r3, r2
 80031c6:	d009      	beq.n	80031dc <HAL_ADC_Start_DMA+0xb4>
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	4a3b      	ldr	r2, [pc, #236]	; (80032bc <HAL_ADC_Start_DMA+0x194>)
 80031ce:	4293      	cmp	r3, r2
 80031d0:	d002      	beq.n	80031d8 <HAL_ADC_Start_DMA+0xb0>
 80031d2:	68fb      	ldr	r3, [r7, #12]
 80031d4:	681b      	ldr	r3, [r3, #0]
 80031d6:	e003      	b.n	80031e0 <HAL_ADC_Start_DMA+0xb8>
 80031d8:	4b39      	ldr	r3, [pc, #228]	; (80032c0 <HAL_ADC_Start_DMA+0x198>)
 80031da:	e001      	b.n	80031e0 <HAL_ADC_Start_DMA+0xb8>
 80031dc:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 80031e0:	68fa      	ldr	r2, [r7, #12]
 80031e2:	6812      	ldr	r2, [r2, #0]
 80031e4:	4293      	cmp	r3, r2
 80031e6:	d002      	beq.n	80031ee <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80031e8:	693b      	ldr	r3, [r7, #16]
 80031ea:	2b00      	cmp	r3, #0
 80031ec:	d105      	bne.n	80031fa <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 80031ee:	68fb      	ldr	r3, [r7, #12]
 80031f0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031f2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80031fe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003202:	2b00      	cmp	r3, #0
 8003204:	d006      	beq.n	8003214 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8003206:	68fb      	ldr	r3, [r7, #12]
 8003208:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800320a:	f023 0206 	bic.w	r2, r3, #6
 800320e:	68fb      	ldr	r3, [r7, #12]
 8003210:	661a      	str	r2, [r3, #96]	; 0x60
 8003212:	e002      	b.n	800321a <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003214:	68fb      	ldr	r3, [r7, #12]
 8003216:	2200      	movs	r2, #0
 8003218:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800321e:	4a29      	ldr	r2, [pc, #164]	; (80032c4 <HAL_ADC_Start_DMA+0x19c>)
 8003220:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003222:	68fb      	ldr	r3, [r7, #12]
 8003224:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003226:	4a28      	ldr	r2, [pc, #160]	; (80032c8 <HAL_ADC_Start_DMA+0x1a0>)
 8003228:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800322a:	68fb      	ldr	r3, [r7, #12]
 800322c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800322e:	4a27      	ldr	r2, [pc, #156]	; (80032cc <HAL_ADC_Start_DMA+0x1a4>)
 8003230:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	221c      	movs	r2, #28
 8003238:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	2200      	movs	r2, #0
 800323e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	685a      	ldr	r2, [r3, #4]
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0210 	orr.w	r2, r2, #16
 8003250:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	681b      	ldr	r3, [r3, #0]
 8003256:	68da      	ldr	r2, [r3, #12]
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	f042 0201 	orr.w	r2, r2, #1
 8003260:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	3340      	adds	r3, #64	; 0x40
 800326c:	4619      	mov	r1, r3
 800326e:	68ba      	ldr	r2, [r7, #8]
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	f001 f91b 	bl	80044ac <HAL_DMA_Start_IT>
 8003276:	4603      	mov	r3, r0
 8003278:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fd56 	bl	8002d30 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 8003284:	e00d      	b.n	80032a2 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 800328e:	e008      	b.n	80032a2 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	2200      	movs	r2, #0
 8003298:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 800329c:	e001      	b.n	80032a2 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800329e:	2302      	movs	r3, #2
 80032a0:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80032a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80032a4:	4618      	mov	r0, r3
 80032a6:	3718      	adds	r7, #24
 80032a8:	46bd      	mov	sp, r7
 80032aa:	bd80      	pop	{r7, pc}
 80032ac:	50000100 	.word	0x50000100
 80032b0:	50000300 	.word	0x50000300
 80032b4:	50000700 	.word	0x50000700
 80032b8:	50000600 	.word	0x50000600
 80032bc:	50000500 	.word	0x50000500
 80032c0:	50000400 	.word	0x50000400
 80032c4:	08003cfb 	.word	0x08003cfb
 80032c8:	08003dd3 	.word	0x08003dd3
 80032cc:	08003def 	.word	0x08003def

080032d0 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b083      	sub	sp, #12
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80032d8:	bf00      	nop
 80032da:	370c      	adds	r7, #12
 80032dc:	46bd      	mov	sp, r7
 80032de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e2:	4770      	bx	lr

080032e4 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b083      	sub	sp, #12
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 80032ec:	bf00      	nop
 80032ee:	370c      	adds	r7, #12
 80032f0:	46bd      	mov	sp, r7
 80032f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032f6:	4770      	bx	lr

080032f8 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 80032f8:	b580      	push	{r7, lr}
 80032fa:	b0b6      	sub	sp, #216	; 0xd8
 80032fc:	af00      	add	r7, sp, #0
 80032fe:	6078      	str	r0, [r7, #4]
 8003300:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003302:	2300      	movs	r3, #0
 8003304:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8003308:	2300      	movs	r3, #0
 800330a:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003312:	2b01      	cmp	r3, #1
 8003314:	d102      	bne.n	800331c <HAL_ADC_ConfigChannel+0x24>
 8003316:	2302      	movs	r3, #2
 8003318:	f000 bc13 	b.w	8003b42 <HAL_ADC_ConfigChannel+0x84a>
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4618      	mov	r0, r3
 800332a:	f7ff fd15 	bl	8002d58 <LL_ADC_REG_IsConversionOngoing>
 800332e:	4603      	mov	r3, r0
 8003330:	2b00      	cmp	r3, #0
 8003332:	f040 83f3 	bne.w	8003b1c <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	6818      	ldr	r0, [r3, #0]
 800333a:	683b      	ldr	r3, [r7, #0]
 800333c:	6859      	ldr	r1, [r3, #4]
 800333e:	683b      	ldr	r3, [r7, #0]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	461a      	mov	r2, r3
 8003344:	f7ff fbcb 	bl	8002ade <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7ff fd03 	bl	8002d58 <LL_ADC_REG_IsConversionOngoing>
 8003352:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8003356:	687b      	ldr	r3, [r7, #4]
 8003358:	681b      	ldr	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7ff fd0f 	bl	8002d7e <LL_ADC_INJ_IsConversionOngoing>
 8003360:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003364:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 8003368:	2b00      	cmp	r3, #0
 800336a:	f040 81d9 	bne.w	8003720 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 800336e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003372:	2b00      	cmp	r3, #0
 8003374:	f040 81d4 	bne.w	8003720 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	689b      	ldr	r3, [r3, #8]
 800337c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003380:	d10f      	bne.n	80033a2 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6818      	ldr	r0, [r3, #0]
 8003386:	683b      	ldr	r3, [r7, #0]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	2200      	movs	r2, #0
 800338c:	4619      	mov	r1, r3
 800338e:	f7ff fbd2 	bl	8002b36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 800339a:	4618      	mov	r0, r3
 800339c:	f7ff fb79 	bl	8002a92 <LL_ADC_SetSamplingTimeCommonConfig>
 80033a0:	e00e      	b.n	80033c0 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	6818      	ldr	r0, [r3, #0]
 80033a6:	683b      	ldr	r3, [r7, #0]
 80033a8:	6819      	ldr	r1, [r3, #0]
 80033aa:	683b      	ldr	r3, [r7, #0]
 80033ac:	689b      	ldr	r3, [r3, #8]
 80033ae:	461a      	mov	r2, r3
 80033b0:	f7ff fbc1 	bl	8002b36 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80033b4:	687b      	ldr	r3, [r7, #4]
 80033b6:	681b      	ldr	r3, [r3, #0]
 80033b8:	2100      	movs	r1, #0
 80033ba:	4618      	mov	r0, r3
 80033bc:	f7ff fb69 	bl	8002a92 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	695a      	ldr	r2, [r3, #20]
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	68db      	ldr	r3, [r3, #12]
 80033ca:	08db      	lsrs	r3, r3, #3
 80033cc:	f003 0303 	and.w	r3, r3, #3
 80033d0:	005b      	lsls	r3, r3, #1
 80033d2:	fa02 f303 	lsl.w	r3, r2, r3
 80033d6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80033da:	683b      	ldr	r3, [r7, #0]
 80033dc:	691b      	ldr	r3, [r3, #16]
 80033de:	2b04      	cmp	r3, #4
 80033e0:	d022      	beq.n	8003428 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	6818      	ldr	r0, [r3, #0]
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	6919      	ldr	r1, [r3, #16]
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	681a      	ldr	r2, [r3, #0]
 80033ee:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80033f2:	f7ff fac3 	bl	800297c <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	6818      	ldr	r0, [r3, #0]
 80033fa:	683b      	ldr	r3, [r7, #0]
 80033fc:	6919      	ldr	r1, [r3, #16]
 80033fe:	683b      	ldr	r3, [r7, #0]
 8003400:	699b      	ldr	r3, [r3, #24]
 8003402:	461a      	mov	r2, r3
 8003404:	f7ff fb0f 	bl	8002a26 <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6818      	ldr	r0, [r3, #0]
 800340c:	683b      	ldr	r3, [r7, #0]
 800340e:	6919      	ldr	r1, [r3, #16]
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	7f1b      	ldrb	r3, [r3, #28]
 8003414:	2b01      	cmp	r3, #1
 8003416:	d102      	bne.n	800341e <HAL_ADC_ConfigChannel+0x126>
 8003418:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800341c:	e000      	b.n	8003420 <HAL_ADC_ConfigChannel+0x128>
 800341e:	2300      	movs	r3, #0
 8003420:	461a      	mov	r2, r3
 8003422:	f7ff fb1b 	bl	8002a5c <LL_ADC_SetOffsetSaturation>
 8003426:	e17b      	b.n	8003720 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	2100      	movs	r1, #0
 800342e:	4618      	mov	r0, r3
 8003430:	f7ff fac8 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003434:	4603      	mov	r3, r0
 8003436:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800343a:	2b00      	cmp	r3, #0
 800343c:	d10a      	bne.n	8003454 <HAL_ADC_ConfigChannel+0x15c>
 800343e:	687b      	ldr	r3, [r7, #4]
 8003440:	681b      	ldr	r3, [r3, #0]
 8003442:	2100      	movs	r1, #0
 8003444:	4618      	mov	r0, r3
 8003446:	f7ff fabd 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 800344a:	4603      	mov	r3, r0
 800344c:	0e9b      	lsrs	r3, r3, #26
 800344e:	f003 021f 	and.w	r2, r3, #31
 8003452:	e01e      	b.n	8003492 <HAL_ADC_ConfigChannel+0x19a>
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	2100      	movs	r1, #0
 800345a:	4618      	mov	r0, r3
 800345c:	f7ff fab2 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003460:	4603      	mov	r3, r0
 8003462:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003466:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800346a:	fa93 f3a3 	rbit	r3, r3
 800346e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003472:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8003476:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800347a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 8003482:	2320      	movs	r3, #32
 8003484:	e004      	b.n	8003490 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 8003486:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800348a:	fab3 f383 	clz	r3, r3
 800348e:	b2db      	uxtb	r3, r3
 8003490:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003492:	683b      	ldr	r3, [r7, #0]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800349a:	2b00      	cmp	r3, #0
 800349c:	d105      	bne.n	80034aa <HAL_ADC_ConfigChannel+0x1b2>
 800349e:	683b      	ldr	r3, [r7, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	0e9b      	lsrs	r3, r3, #26
 80034a4:	f003 031f 	and.w	r3, r3, #31
 80034a8:	e018      	b.n	80034dc <HAL_ADC_ConfigChannel+0x1e4>
 80034aa:	683b      	ldr	r3, [r7, #0]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034b2:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80034b6:	fa93 f3a3 	rbit	r3, r3
 80034ba:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80034be:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80034c2:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80034c6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d101      	bne.n	80034d2 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80034ce:	2320      	movs	r3, #32
 80034d0:	e004      	b.n	80034dc <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80034d2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80034d6:	fab3 f383 	clz	r3, r3
 80034da:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80034dc:	429a      	cmp	r2, r3
 80034de:	d106      	bne.n	80034ee <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	681b      	ldr	r3, [r3, #0]
 80034e4:	2200      	movs	r2, #0
 80034e6:	2100      	movs	r1, #0
 80034e8:	4618      	mov	r0, r3
 80034ea:	f7ff fa81 	bl	80029f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	2101      	movs	r1, #1
 80034f4:	4618      	mov	r0, r3
 80034f6:	f7ff fa65 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80034fa:	4603      	mov	r3, r0
 80034fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003500:	2b00      	cmp	r3, #0
 8003502:	d10a      	bne.n	800351a <HAL_ADC_ConfigChannel+0x222>
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	2101      	movs	r1, #1
 800350a:	4618      	mov	r0, r3
 800350c:	f7ff fa5a 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003510:	4603      	mov	r3, r0
 8003512:	0e9b      	lsrs	r3, r3, #26
 8003514:	f003 021f 	and.w	r2, r3, #31
 8003518:	e01e      	b.n	8003558 <HAL_ADC_ConfigChannel+0x260>
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	2101      	movs	r1, #1
 8003520:	4618      	mov	r0, r3
 8003522:	f7ff fa4f 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003526:	4603      	mov	r3, r0
 8003528:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800352c:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003530:	fa93 f3a3 	rbit	r3, r3
 8003534:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 8003538:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800353c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003540:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 8003548:	2320      	movs	r3, #32
 800354a:	e004      	b.n	8003556 <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 800354c:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003550:	fab3 f383 	clz	r3, r3
 8003554:	b2db      	uxtb	r3, r3
 8003556:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003558:	683b      	ldr	r3, [r7, #0]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003560:	2b00      	cmp	r3, #0
 8003562:	d105      	bne.n	8003570 <HAL_ADC_ConfigChannel+0x278>
 8003564:	683b      	ldr	r3, [r7, #0]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	0e9b      	lsrs	r3, r3, #26
 800356a:	f003 031f 	and.w	r3, r3, #31
 800356e:	e018      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x2aa>
 8003570:	683b      	ldr	r3, [r7, #0]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003578:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800357c:	fa93 f3a3 	rbit	r3, r3
 8003580:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 8003584:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8003588:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 800358c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8003590:	2b00      	cmp	r3, #0
 8003592:	d101      	bne.n	8003598 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 8003594:	2320      	movs	r3, #32
 8003596:	e004      	b.n	80035a2 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8003598:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800359c:	fab3 f383 	clz	r3, r3
 80035a0:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80035a2:	429a      	cmp	r2, r3
 80035a4:	d106      	bne.n	80035b4 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2200      	movs	r2, #0
 80035ac:	2101      	movs	r1, #1
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7ff fa1e 	bl	80029f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	2102      	movs	r1, #2
 80035ba:	4618      	mov	r0, r3
 80035bc:	f7ff fa02 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80035c0:	4603      	mov	r3, r0
 80035c2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d10a      	bne.n	80035e0 <HAL_ADC_ConfigChannel+0x2e8>
 80035ca:	687b      	ldr	r3, [r7, #4]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	2102      	movs	r1, #2
 80035d0:	4618      	mov	r0, r3
 80035d2:	f7ff f9f7 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80035d6:	4603      	mov	r3, r0
 80035d8:	0e9b      	lsrs	r3, r3, #26
 80035da:	f003 021f 	and.w	r2, r3, #31
 80035de:	e01e      	b.n	800361e <HAL_ADC_ConfigChannel+0x326>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2102      	movs	r1, #2
 80035e6:	4618      	mov	r0, r3
 80035e8:	f7ff f9ec 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80035ec:	4603      	mov	r3, r0
 80035ee:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80035f6:	fa93 f3a3 	rbit	r3, r3
 80035fa:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 80035fe:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003602:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 8003606:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800360a:	2b00      	cmp	r3, #0
 800360c:	d101      	bne.n	8003612 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 800360e:	2320      	movs	r3, #32
 8003610:	e004      	b.n	800361c <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003612:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8003616:	fab3 f383 	clz	r3, r3
 800361a:	b2db      	uxtb	r3, r3
 800361c:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800361e:	683b      	ldr	r3, [r7, #0]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003626:	2b00      	cmp	r3, #0
 8003628:	d105      	bne.n	8003636 <HAL_ADC_ConfigChannel+0x33e>
 800362a:	683b      	ldr	r3, [r7, #0]
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	0e9b      	lsrs	r3, r3, #26
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	e016      	b.n	8003664 <HAL_ADC_ConfigChannel+0x36c>
 8003636:	683b      	ldr	r3, [r7, #0]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800363e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003642:	fa93 f3a3 	rbit	r3, r3
 8003646:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 8003648:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800364a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 800364e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 8003656:	2320      	movs	r3, #32
 8003658:	e004      	b.n	8003664 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800365a:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800365e:	fab3 f383 	clz	r3, r3
 8003662:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003664:	429a      	cmp	r2, r3
 8003666:	d106      	bne.n	8003676 <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	2200      	movs	r2, #0
 800366e:	2102      	movs	r1, #2
 8003670:	4618      	mov	r0, r3
 8003672:	f7ff f9bd 	bl	80029f0 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	2103      	movs	r1, #3
 800367c:	4618      	mov	r0, r3
 800367e:	f7ff f9a1 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003682:	4603      	mov	r3, r0
 8003684:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003688:	2b00      	cmp	r3, #0
 800368a:	d10a      	bne.n	80036a2 <HAL_ADC_ConfigChannel+0x3aa>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	2103      	movs	r1, #3
 8003692:	4618      	mov	r0, r3
 8003694:	f7ff f996 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 8003698:	4603      	mov	r3, r0
 800369a:	0e9b      	lsrs	r3, r3, #26
 800369c:	f003 021f 	and.w	r2, r3, #31
 80036a0:	e017      	b.n	80036d2 <HAL_ADC_ConfigChannel+0x3da>
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	2103      	movs	r1, #3
 80036a8:	4618      	mov	r0, r3
 80036aa:	f7ff f98b 	bl	80029c4 <LL_ADC_GetOffsetChannel>
 80036ae:	4603      	mov	r3, r0
 80036b0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036b2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80036b4:	fa93 f3a3 	rbit	r3, r3
 80036b8:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80036ba:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80036bc:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80036be:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036c0:	2b00      	cmp	r3, #0
 80036c2:	d101      	bne.n	80036c8 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80036c4:	2320      	movs	r3, #32
 80036c6:	e003      	b.n	80036d0 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80036c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80036ca:	fab3 f383 	clz	r3, r3
 80036ce:	b2db      	uxtb	r3, r3
 80036d0:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d105      	bne.n	80036ea <HAL_ADC_ConfigChannel+0x3f2>
 80036de:	683b      	ldr	r3, [r7, #0]
 80036e0:	681b      	ldr	r3, [r3, #0]
 80036e2:	0e9b      	lsrs	r3, r3, #26
 80036e4:	f003 031f 	and.w	r3, r3, #31
 80036e8:	e011      	b.n	800370e <HAL_ADC_ConfigChannel+0x416>
 80036ea:	683b      	ldr	r3, [r7, #0]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036f0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80036f2:	fa93 f3a3 	rbit	r3, r3
 80036f6:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 80036f8:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80036fa:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 80036fc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d101      	bne.n	8003706 <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003702:	2320      	movs	r3, #32
 8003704:	e003      	b.n	800370e <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 8003706:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003708:	fab3 f383 	clz	r3, r3
 800370c:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800370e:	429a      	cmp	r2, r3
 8003710:	d106      	bne.n	8003720 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003712:	687b      	ldr	r3, [r7, #4]
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	2200      	movs	r2, #0
 8003718:	2103      	movs	r1, #3
 800371a:	4618      	mov	r0, r3
 800371c:	f7ff f968 	bl	80029f0 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4618      	mov	r0, r3
 8003726:	f7ff fadd 	bl	8002ce4 <LL_ADC_IsEnabled>
 800372a:	4603      	mov	r3, r0
 800372c:	2b00      	cmp	r3, #0
 800372e:	f040 813d 	bne.w	80039ac <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6818      	ldr	r0, [r3, #0]
 8003736:	683b      	ldr	r3, [r7, #0]
 8003738:	6819      	ldr	r1, [r3, #0]
 800373a:	683b      	ldr	r3, [r7, #0]
 800373c:	68db      	ldr	r3, [r3, #12]
 800373e:	461a      	mov	r2, r3
 8003740:	f7ff fa24 	bl	8002b8c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003744:	683b      	ldr	r3, [r7, #0]
 8003746:	68db      	ldr	r3, [r3, #12]
 8003748:	4aa2      	ldr	r2, [pc, #648]	; (80039d4 <HAL_ADC_ConfigChannel+0x6dc>)
 800374a:	4293      	cmp	r3, r2
 800374c:	f040 812e 	bne.w	80039ac <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003754:	683b      	ldr	r3, [r7, #0]
 8003756:	681b      	ldr	r3, [r3, #0]
 8003758:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <HAL_ADC_ConfigChannel+0x480>
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	0e9b      	lsrs	r3, r3, #26
 8003766:	3301      	adds	r3, #1
 8003768:	f003 031f 	and.w	r3, r3, #31
 800376c:	2b09      	cmp	r3, #9
 800376e:	bf94      	ite	ls
 8003770:	2301      	movls	r3, #1
 8003772:	2300      	movhi	r3, #0
 8003774:	b2db      	uxtb	r3, r3
 8003776:	e019      	b.n	80037ac <HAL_ADC_ConfigChannel+0x4b4>
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800377e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8003780:	fa93 f3a3 	rbit	r3, r3
 8003784:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 8003786:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8003788:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 800378a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800378c:	2b00      	cmp	r3, #0
 800378e:	d101      	bne.n	8003794 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8003790:	2320      	movs	r3, #32
 8003792:	e003      	b.n	800379c <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 8003794:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8003796:	fab3 f383 	clz	r3, r3
 800379a:	b2db      	uxtb	r3, r3
 800379c:	3301      	adds	r3, #1
 800379e:	f003 031f 	and.w	r3, r3, #31
 80037a2:	2b09      	cmp	r3, #9
 80037a4:	bf94      	ite	ls
 80037a6:	2301      	movls	r3, #1
 80037a8:	2300      	movhi	r3, #0
 80037aa:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037ac:	2b00      	cmp	r3, #0
 80037ae:	d079      	beq.n	80038a4 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80037b8:	2b00      	cmp	r3, #0
 80037ba:	d107      	bne.n	80037cc <HAL_ADC_ConfigChannel+0x4d4>
 80037bc:	683b      	ldr	r3, [r7, #0]
 80037be:	681b      	ldr	r3, [r3, #0]
 80037c0:	0e9b      	lsrs	r3, r3, #26
 80037c2:	3301      	adds	r3, #1
 80037c4:	069b      	lsls	r3, r3, #26
 80037c6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037ca:	e015      	b.n	80037f8 <HAL_ADC_ConfigChannel+0x500>
 80037cc:	683b      	ldr	r3, [r7, #0]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80037d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80037d4:	fa93 f3a3 	rbit	r3, r3
 80037d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80037da:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037dc:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 80037de:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 80037e4:	2320      	movs	r3, #32
 80037e6:	e003      	b.n	80037f0 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 80037e8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80037ea:	fab3 f383 	clz	r3, r3
 80037ee:	b2db      	uxtb	r3, r3
 80037f0:	3301      	adds	r3, #1
 80037f2:	069b      	lsls	r3, r3, #26
 80037f4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80037f8:	683b      	ldr	r3, [r7, #0]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003800:	2b00      	cmp	r3, #0
 8003802:	d109      	bne.n	8003818 <HAL_ADC_ConfigChannel+0x520>
 8003804:	683b      	ldr	r3, [r7, #0]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	0e9b      	lsrs	r3, r3, #26
 800380a:	3301      	adds	r3, #1
 800380c:	f003 031f 	and.w	r3, r3, #31
 8003810:	2101      	movs	r1, #1
 8003812:	fa01 f303 	lsl.w	r3, r1, r3
 8003816:	e017      	b.n	8003848 <HAL_ADC_ConfigChannel+0x550>
 8003818:	683b      	ldr	r3, [r7, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800381e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003820:	fa93 f3a3 	rbit	r3, r3
 8003824:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 8003826:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003828:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800382a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800382c:	2b00      	cmp	r3, #0
 800382e:	d101      	bne.n	8003834 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003830:	2320      	movs	r3, #32
 8003832:	e003      	b.n	800383c <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003834:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003836:	fab3 f383 	clz	r3, r3
 800383a:	b2db      	uxtb	r3, r3
 800383c:	3301      	adds	r3, #1
 800383e:	f003 031f 	and.w	r3, r3, #31
 8003842:	2101      	movs	r1, #1
 8003844:	fa01 f303 	lsl.w	r3, r1, r3
 8003848:	ea42 0103 	orr.w	r1, r2, r3
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003854:	2b00      	cmp	r3, #0
 8003856:	d10a      	bne.n	800386e <HAL_ADC_ConfigChannel+0x576>
 8003858:	683b      	ldr	r3, [r7, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	0e9b      	lsrs	r3, r3, #26
 800385e:	3301      	adds	r3, #1
 8003860:	f003 021f 	and.w	r2, r3, #31
 8003864:	4613      	mov	r3, r2
 8003866:	005b      	lsls	r3, r3, #1
 8003868:	4413      	add	r3, r2
 800386a:	051b      	lsls	r3, r3, #20
 800386c:	e018      	b.n	80038a0 <HAL_ADC_ConfigChannel+0x5a8>
 800386e:	683b      	ldr	r3, [r7, #0]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003874:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003876:	fa93 f3a3 	rbit	r3, r3
 800387a:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 800387c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800387e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8003880:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003882:	2b00      	cmp	r3, #0
 8003884:	d101      	bne.n	800388a <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 8003886:	2320      	movs	r3, #32
 8003888:	e003      	b.n	8003892 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 800388a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800388c:	fab3 f383 	clz	r3, r3
 8003890:	b2db      	uxtb	r3, r3
 8003892:	3301      	adds	r3, #1
 8003894:	f003 021f 	and.w	r2, r3, #31
 8003898:	4613      	mov	r3, r2
 800389a:	005b      	lsls	r3, r3, #1
 800389c:	4413      	add	r3, r2
 800389e:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80038a0:	430b      	orrs	r3, r1
 80038a2:	e07e      	b.n	80039a2 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80038a4:	683b      	ldr	r3, [r7, #0]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d107      	bne.n	80038c0 <HAL_ADC_ConfigChannel+0x5c8>
 80038b0:	683b      	ldr	r3, [r7, #0]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	0e9b      	lsrs	r3, r3, #26
 80038b6:	3301      	adds	r3, #1
 80038b8:	069b      	lsls	r3, r3, #26
 80038ba:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038be:	e015      	b.n	80038ec <HAL_ADC_ConfigChannel+0x5f4>
 80038c0:	683b      	ldr	r3, [r7, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80038c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80038c8:	fa93 f3a3 	rbit	r3, r3
 80038cc:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80038ce:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80038d0:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80038d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d101      	bne.n	80038dc <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80038d8:	2320      	movs	r3, #32
 80038da:	e003      	b.n	80038e4 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 80038dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80038de:	fab3 f383 	clz	r3, r3
 80038e2:	b2db      	uxtb	r3, r3
 80038e4:	3301      	adds	r3, #1
 80038e6:	069b      	lsls	r3, r3, #26
 80038e8:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	681b      	ldr	r3, [r3, #0]
 80038f0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d109      	bne.n	800390c <HAL_ADC_ConfigChannel+0x614>
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	0e9b      	lsrs	r3, r3, #26
 80038fe:	3301      	adds	r3, #1
 8003900:	f003 031f 	and.w	r3, r3, #31
 8003904:	2101      	movs	r1, #1
 8003906:	fa01 f303 	lsl.w	r3, r1, r3
 800390a:	e017      	b.n	800393c <HAL_ADC_ConfigChannel+0x644>
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003912:	6a3b      	ldr	r3, [r7, #32]
 8003914:	fa93 f3a3 	rbit	r3, r3
 8003918:	61fb      	str	r3, [r7, #28]
  return result;
 800391a:	69fb      	ldr	r3, [r7, #28]
 800391c:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 800391e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003920:	2b00      	cmp	r3, #0
 8003922:	d101      	bne.n	8003928 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003924:	2320      	movs	r3, #32
 8003926:	e003      	b.n	8003930 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 8003928:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800392a:	fab3 f383 	clz	r3, r3
 800392e:	b2db      	uxtb	r3, r3
 8003930:	3301      	adds	r3, #1
 8003932:	f003 031f 	and.w	r3, r3, #31
 8003936:	2101      	movs	r1, #1
 8003938:	fa01 f303 	lsl.w	r3, r1, r3
 800393c:	ea42 0103 	orr.w	r1, r2, r3
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003948:	2b00      	cmp	r3, #0
 800394a:	d10d      	bne.n	8003968 <HAL_ADC_ConfigChannel+0x670>
 800394c:	683b      	ldr	r3, [r7, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	0e9b      	lsrs	r3, r3, #26
 8003952:	3301      	adds	r3, #1
 8003954:	f003 021f 	and.w	r2, r3, #31
 8003958:	4613      	mov	r3, r2
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	4413      	add	r3, r2
 800395e:	3b1e      	subs	r3, #30
 8003960:	051b      	lsls	r3, r3, #20
 8003962:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8003966:	e01b      	b.n	80039a0 <HAL_ADC_ConfigChannel+0x6a8>
 8003968:	683b      	ldr	r3, [r7, #0]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	fa93 f3a3 	rbit	r3, r3
 8003974:	613b      	str	r3, [r7, #16]
  return result;
 8003976:	693b      	ldr	r3, [r7, #16]
 8003978:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800397a:	69bb      	ldr	r3, [r7, #24]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d101      	bne.n	8003984 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8003980:	2320      	movs	r3, #32
 8003982:	e003      	b.n	800398c <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 8003984:	69bb      	ldr	r3, [r7, #24]
 8003986:	fab3 f383 	clz	r3, r3
 800398a:	b2db      	uxtb	r3, r3
 800398c:	3301      	adds	r3, #1
 800398e:	f003 021f 	and.w	r2, r3, #31
 8003992:	4613      	mov	r3, r2
 8003994:	005b      	lsls	r3, r3, #1
 8003996:	4413      	add	r3, r2
 8003998:	3b1e      	subs	r3, #30
 800399a:	051b      	lsls	r3, r3, #20
 800399c:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80039a0:	430b      	orrs	r3, r1
 80039a2:	683a      	ldr	r2, [r7, #0]
 80039a4:	6892      	ldr	r2, [r2, #8]
 80039a6:	4619      	mov	r1, r3
 80039a8:	f7ff f8c5 	bl	8002b36 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80039ac:	683b      	ldr	r3, [r7, #0]
 80039ae:	681a      	ldr	r2, [r3, #0]
 80039b0:	4b09      	ldr	r3, [pc, #36]	; (80039d8 <HAL_ADC_ConfigChannel+0x6e0>)
 80039b2:	4013      	ands	r3, r2
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	f000 80be 	beq.w	8003b36 <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80039c2:	d004      	beq.n	80039ce <HAL_ADC_ConfigChannel+0x6d6>
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	4a04      	ldr	r2, [pc, #16]	; (80039dc <HAL_ADC_ConfigChannel+0x6e4>)
 80039ca:	4293      	cmp	r3, r2
 80039cc:	d10a      	bne.n	80039e4 <HAL_ADC_ConfigChannel+0x6ec>
 80039ce:	4b04      	ldr	r3, [pc, #16]	; (80039e0 <HAL_ADC_ConfigChannel+0x6e8>)
 80039d0:	e009      	b.n	80039e6 <HAL_ADC_ConfigChannel+0x6ee>
 80039d2:	bf00      	nop
 80039d4:	407f0000 	.word	0x407f0000
 80039d8:	80080000 	.word	0x80080000
 80039dc:	50000100 	.word	0x50000100
 80039e0:	50000300 	.word	0x50000300
 80039e4:	4b59      	ldr	r3, [pc, #356]	; (8003b4c <HAL_ADC_ConfigChannel+0x854>)
 80039e6:	4618      	mov	r0, r3
 80039e8:	f7fe ffba 	bl	8002960 <LL_ADC_GetCommonPathInternalCh>
 80039ec:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4a56      	ldr	r2, [pc, #344]	; (8003b50 <HAL_ADC_ConfigChannel+0x858>)
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d004      	beq.n	8003a04 <HAL_ADC_ConfigChannel+0x70c>
 80039fa:	683b      	ldr	r3, [r7, #0]
 80039fc:	681b      	ldr	r3, [r3, #0]
 80039fe:	4a55      	ldr	r2, [pc, #340]	; (8003b54 <HAL_ADC_ConfigChannel+0x85c>)
 8003a00:	4293      	cmp	r3, r2
 8003a02:	d13a      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003a04:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a08:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d134      	bne.n	8003a7a <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a18:	d005      	beq.n	8003a26 <HAL_ADC_ConfigChannel+0x72e>
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a4e      	ldr	r2, [pc, #312]	; (8003b58 <HAL_ADC_ConfigChannel+0x860>)
 8003a20:	4293      	cmp	r3, r2
 8003a22:	f040 8085 	bne.w	8003b30 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003a2e:	d004      	beq.n	8003a3a <HAL_ADC_ConfigChannel+0x742>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	4a49      	ldr	r2, [pc, #292]	; (8003b5c <HAL_ADC_ConfigChannel+0x864>)
 8003a36:	4293      	cmp	r3, r2
 8003a38:	d101      	bne.n	8003a3e <HAL_ADC_ConfigChannel+0x746>
 8003a3a:	4a49      	ldr	r2, [pc, #292]	; (8003b60 <HAL_ADC_ConfigChannel+0x868>)
 8003a3c:	e000      	b.n	8003a40 <HAL_ADC_ConfigChannel+0x748>
 8003a3e:	4a43      	ldr	r2, [pc, #268]	; (8003b4c <HAL_ADC_ConfigChannel+0x854>)
 8003a40:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a44:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8003a48:	4619      	mov	r1, r3
 8003a4a:	4610      	mov	r0, r2
 8003a4c:	f7fe ff75 	bl	800293a <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003a50:	4b44      	ldr	r3, [pc, #272]	; (8003b64 <HAL_ADC_ConfigChannel+0x86c>)
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	099b      	lsrs	r3, r3, #6
 8003a56:	4a44      	ldr	r2, [pc, #272]	; (8003b68 <HAL_ADC_ConfigChannel+0x870>)
 8003a58:	fba2 2303 	umull	r2, r3, r2, r3
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	1c5a      	adds	r2, r3, #1
 8003a60:	4613      	mov	r3, r2
 8003a62:	005b      	lsls	r3, r3, #1
 8003a64:	4413      	add	r3, r2
 8003a66:	009b      	lsls	r3, r3, #2
 8003a68:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a6a:	e002      	b.n	8003a72 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f9      	bne.n	8003a6c <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003a78:	e05a      	b.n	8003b30 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8003a7a:	683b      	ldr	r3, [r7, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	4a3b      	ldr	r2, [pc, #236]	; (8003b6c <HAL_ADC_ConfigChannel+0x874>)
 8003a80:	4293      	cmp	r3, r2
 8003a82:	d125      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x7d8>
 8003a84:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003a88:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11f      	bne.n	8003ad0 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	681b      	ldr	r3, [r3, #0]
 8003a94:	4a31      	ldr	r2, [pc, #196]	; (8003b5c <HAL_ADC_ConfigChannel+0x864>)
 8003a96:	4293      	cmp	r3, r2
 8003a98:	d104      	bne.n	8003aa4 <HAL_ADC_ConfigChannel+0x7ac>
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	4a34      	ldr	r2, [pc, #208]	; (8003b70 <HAL_ADC_ConfigChannel+0x878>)
 8003aa0:	4293      	cmp	r3, r2
 8003aa2:	d047      	beq.n	8003b34 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003aac:	d004      	beq.n	8003ab8 <HAL_ADC_ConfigChannel+0x7c0>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	4a2a      	ldr	r2, [pc, #168]	; (8003b5c <HAL_ADC_ConfigChannel+0x864>)
 8003ab4:	4293      	cmp	r3, r2
 8003ab6:	d101      	bne.n	8003abc <HAL_ADC_ConfigChannel+0x7c4>
 8003ab8:	4a29      	ldr	r2, [pc, #164]	; (8003b60 <HAL_ADC_ConfigChannel+0x868>)
 8003aba:	e000      	b.n	8003abe <HAL_ADC_ConfigChannel+0x7c6>
 8003abc:	4a23      	ldr	r2, [pc, #140]	; (8003b4c <HAL_ADC_ConfigChannel+0x854>)
 8003abe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ac2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4610      	mov	r0, r2
 8003aca:	f7fe ff36 	bl	800293a <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003ace:	e031      	b.n	8003b34 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8003ad0:	683b      	ldr	r3, [r7, #0]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	4a27      	ldr	r2, [pc, #156]	; (8003b74 <HAL_ADC_ConfigChannel+0x87c>)
 8003ad6:	4293      	cmp	r3, r2
 8003ad8:	d12d      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8003ada:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003ade:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d127      	bne.n	8003b36 <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a1c      	ldr	r2, [pc, #112]	; (8003b5c <HAL_ADC_ConfigChannel+0x864>)
 8003aec:	4293      	cmp	r3, r2
 8003aee:	d022      	beq.n	8003b36 <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003af8:	d004      	beq.n	8003b04 <HAL_ADC_ConfigChannel+0x80c>
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	4a17      	ldr	r2, [pc, #92]	; (8003b5c <HAL_ADC_ConfigChannel+0x864>)
 8003b00:	4293      	cmp	r3, r2
 8003b02:	d101      	bne.n	8003b08 <HAL_ADC_ConfigChannel+0x810>
 8003b04:	4a16      	ldr	r2, [pc, #88]	; (8003b60 <HAL_ADC_ConfigChannel+0x868>)
 8003b06:	e000      	b.n	8003b0a <HAL_ADC_ConfigChannel+0x812>
 8003b08:	4a10      	ldr	r2, [pc, #64]	; (8003b4c <HAL_ADC_ConfigChannel+0x854>)
 8003b0a:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003b0e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003b12:	4619      	mov	r1, r3
 8003b14:	4610      	mov	r0, r2
 8003b16:	f7fe ff10 	bl	800293a <LL_ADC_SetCommonPathInternalCh>
 8003b1a:	e00c      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b20:	f043 0220 	orr.w	r2, r3, #32
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003b28:	2301      	movs	r3, #1
 8003b2a:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003b2e:	e002      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003b30:	bf00      	nop
 8003b32:	e000      	b.n	8003b36 <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003b34:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003b3e:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003b42:	4618      	mov	r0, r3
 8003b44:	37d8      	adds	r7, #216	; 0xd8
 8003b46:	46bd      	mov	sp, r7
 8003b48:	bd80      	pop	{r7, pc}
 8003b4a:	bf00      	nop
 8003b4c:	50000700 	.word	0x50000700
 8003b50:	c3210000 	.word	0xc3210000
 8003b54:	90c00010 	.word	0x90c00010
 8003b58:	50000600 	.word	0x50000600
 8003b5c:	50000100 	.word	0x50000100
 8003b60:	50000300 	.word	0x50000300
 8003b64:	20000000 	.word	0x20000000
 8003b68:	053e2d63 	.word	0x053e2d63
 8003b6c:	c7520000 	.word	0xc7520000
 8003b70:	50000500 	.word	0x50000500
 8003b74:	cb840000 	.word	0xcb840000

08003b78 <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 8003b78:	b580      	push	{r7, lr}
 8003b7a:	b084      	sub	sp, #16
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	4618      	mov	r0, r3
 8003b86:	f7ff f8ad 	bl	8002ce4 <LL_ADC_IsEnabled>
 8003b8a:	4603      	mov	r3, r0
 8003b8c:	2b00      	cmp	r3, #0
 8003b8e:	d14d      	bne.n	8003c2c <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	689a      	ldr	r2, [r3, #8]
 8003b96:	4b28      	ldr	r3, [pc, #160]	; (8003c38 <ADC_Enable+0xc0>)
 8003b98:	4013      	ands	r3, r2
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d00d      	beq.n	8003bba <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba2:	f043 0210 	orr.w	r2, r3, #16
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003bae:	f043 0201 	orr.w	r2, r3, #1
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 8003bb6:	2301      	movs	r3, #1
 8003bb8:	e039      	b.n	8003c2e <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	4618      	mov	r0, r3
 8003bc0:	f7ff f868 	bl	8002c94 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 8003bc4:	f7fe fe78 	bl	80028b8 <HAL_GetTick>
 8003bc8:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bca:	e028      	b.n	8003c1e <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f7ff f887 	bl	8002ce4 <LL_ADC_IsEnabled>
 8003bd6:	4603      	mov	r3, r0
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d104      	bne.n	8003be6 <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	4618      	mov	r0, r3
 8003be2:	f7ff f857 	bl	8002c94 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003be6:	f7fe fe67 	bl	80028b8 <HAL_GetTick>
 8003bea:	4602      	mov	r2, r0
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	1ad3      	subs	r3, r2, r3
 8003bf0:	2b02      	cmp	r3, #2
 8003bf2:	d914      	bls.n	8003c1e <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	681b      	ldr	r3, [r3, #0]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0301 	and.w	r3, r3, #1
 8003bfe:	2b01      	cmp	r3, #1
 8003c00:	d00d      	beq.n	8003c1e <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c06:	f043 0210 	orr.w	r2, r3, #16
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c12:	f043 0201 	orr.w	r2, r3, #1
 8003c16:	687b      	ldr	r3, [r7, #4]
 8003c18:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e007      	b.n	8003c2e <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	681b      	ldr	r3, [r3, #0]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f003 0301 	and.w	r3, r3, #1
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d1cf      	bne.n	8003bcc <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003c2c:	2300      	movs	r3, #0
}
 8003c2e:	4618      	mov	r0, r3
 8003c30:	3710      	adds	r7, #16
 8003c32:	46bd      	mov	sp, r7
 8003c34:	bd80      	pop	{r7, pc}
 8003c36:	bf00      	nop
 8003c38:	8000003f 	.word	0x8000003f

08003c3c <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003c3c:	b580      	push	{r7, lr}
 8003c3e:	b084      	sub	sp, #16
 8003c40:	af00      	add	r7, sp, #0
 8003c42:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f7ff f85e 	bl	8002d0a <LL_ADC_IsDisableOngoing>
 8003c4e:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4618      	mov	r0, r3
 8003c56:	f7ff f845 	bl	8002ce4 <LL_ADC_IsEnabled>
 8003c5a:	4603      	mov	r3, r0
 8003c5c:	2b00      	cmp	r3, #0
 8003c5e:	d047      	beq.n	8003cf0 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d144      	bne.n	8003cf0 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	689b      	ldr	r3, [r3, #8]
 8003c6c:	f003 030d 	and.w	r3, r3, #13
 8003c70:	2b01      	cmp	r3, #1
 8003c72:	d10c      	bne.n	8003c8e <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7ff f81f 	bl	8002cbc <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	2203      	movs	r2, #3
 8003c84:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003c86:	f7fe fe17 	bl	80028b8 <HAL_GetTick>
 8003c8a:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003c8c:	e029      	b.n	8003ce2 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c92:	f043 0210 	orr.w	r2, r3, #16
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c9e:	f043 0201 	orr.w	r2, r3, #1
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003ca6:	2301      	movs	r3, #1
 8003ca8:	e023      	b.n	8003cf2 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003caa:	f7fe fe05 	bl	80028b8 <HAL_GetTick>
 8003cae:	4602      	mov	r2, r0
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	1ad3      	subs	r3, r2, r3
 8003cb4:	2b02      	cmp	r3, #2
 8003cb6:	d914      	bls.n	8003ce2 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	689b      	ldr	r3, [r3, #8]
 8003cbe:	f003 0301 	and.w	r3, r3, #1
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d00d      	beq.n	8003ce2 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003cca:	f043 0210 	orr.w	r2, r3, #16
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003cd6:	f043 0201 	orr.w	r2, r3, #1
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003cde:	2301      	movs	r3, #1
 8003ce0:	e007      	b.n	8003cf2 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	689b      	ldr	r3, [r3, #8]
 8003ce8:	f003 0301 	and.w	r3, r3, #1
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	d1dc      	bne.n	8003caa <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003cf0:	2300      	movs	r3, #0
}
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	3710      	adds	r7, #16
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	bd80      	pop	{r7, pc}

08003cfa <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003cfa:	b580      	push	{r7, lr}
 8003cfc:	b084      	sub	sp, #16
 8003cfe:	af00      	add	r7, sp, #0
 8003d00:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d06:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003d08:	68fb      	ldr	r3, [r7, #12]
 8003d0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d0c:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003d10:	2b00      	cmp	r3, #0
 8003d12:	d14b      	bne.n	8003dac <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d18:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003d1c:	68fb      	ldr	r3, [r7, #12]
 8003d1e:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	681b      	ldr	r3, [r3, #0]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f003 0308 	and.w	r3, r3, #8
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d021      	beq.n	8003d72 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	4618      	mov	r0, r3
 8003d34:	f7fe fec0 	bl	8002ab8 <LL_ADC_REG_IsTriggerSourceSWStart>
 8003d38:	4603      	mov	r3, r0
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d032      	beq.n	8003da4 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	68db      	ldr	r3, [r3, #12]
 8003d44:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003d48:	2b00      	cmp	r3, #0
 8003d4a:	d12b      	bne.n	8003da4 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d50:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d5c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d11f      	bne.n	8003da4 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d68:	f043 0201 	orr.w	r2, r3, #1
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d70:	e018      	b.n	8003da4 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	68db      	ldr	r3, [r3, #12]
 8003d78:	f003 0302 	and.w	r3, r3, #2
 8003d7c:	2b00      	cmp	r3, #0
 8003d7e:	d111      	bne.n	8003da4 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d84:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d90:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d105      	bne.n	8003da4 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d9c:	f043 0201 	orr.w	r2, r3, #1
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003da4:	68f8      	ldr	r0, [r7, #12]
 8003da6:	f7fd fc2d 	bl	8001604 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003daa:	e00e      	b.n	8003dca <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003db0:	f003 0310 	and.w	r3, r3, #16
 8003db4:	2b00      	cmp	r3, #0
 8003db6:	d003      	beq.n	8003dc0 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003db8:	68f8      	ldr	r0, [r7, #12]
 8003dba:	f7ff fa93 	bl	80032e4 <HAL_ADC_ErrorCallback>
}
 8003dbe:	e004      	b.n	8003dca <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003dc4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003dc6:	6878      	ldr	r0, [r7, #4]
 8003dc8:	4798      	blx	r3
}
 8003dca:	bf00      	nop
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b084      	sub	sp, #16
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dde:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003de0:	68f8      	ldr	r0, [r7, #12]
 8003de2:	f7ff fa75 	bl	80032d0 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003de6:	bf00      	nop
 8003de8:	3710      	adds	r7, #16
 8003dea:	46bd      	mov	sp, r7
 8003dec:	bd80      	pop	{r7, pc}

08003dee <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003dee:	b580      	push	{r7, lr}
 8003df0:	b084      	sub	sp, #16
 8003df2:	af00      	add	r7, sp, #0
 8003df4:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dfa:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e00:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003e0c:	f043 0204 	orr.w	r2, r3, #4
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003e14:	68f8      	ldr	r0, [r7, #12]
 8003e16:	f7ff fa65 	bl	80032e4 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003e1a:	bf00      	nop
 8003e1c:	3710      	adds	r7, #16
 8003e1e:	46bd      	mov	sp, r7
 8003e20:	bd80      	pop	{r7, pc}

08003e22 <LL_ADC_IsEnabled>:
{
 8003e22:	b480      	push	{r7}
 8003e24:	b083      	sub	sp, #12
 8003e26:	af00      	add	r7, sp, #0
 8003e28:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	689b      	ldr	r3, [r3, #8]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	2b01      	cmp	r3, #1
 8003e34:	d101      	bne.n	8003e3a <LL_ADC_IsEnabled+0x18>
 8003e36:	2301      	movs	r3, #1
 8003e38:	e000      	b.n	8003e3c <LL_ADC_IsEnabled+0x1a>
 8003e3a:	2300      	movs	r3, #0
}
 8003e3c:	4618      	mov	r0, r3
 8003e3e:	370c      	adds	r7, #12
 8003e40:	46bd      	mov	sp, r7
 8003e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e46:	4770      	bx	lr

08003e48 <LL_ADC_StartCalibration>:
{
 8003e48:	b480      	push	{r7}
 8003e4a:	b083      	sub	sp, #12
 8003e4c:	af00      	add	r7, sp, #0
 8003e4e:	6078      	str	r0, [r7, #4]
 8003e50:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003e5a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003e5e:	683a      	ldr	r2, [r7, #0]
 8003e60:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003e64:	4313      	orrs	r3, r2
 8003e66:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	609a      	str	r2, [r3, #8]
}
 8003e6e:	bf00      	nop
 8003e70:	370c      	adds	r7, #12
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr

08003e7a <LL_ADC_IsCalibrationOnGoing>:
{
 8003e7a:	b480      	push	{r7}
 8003e7c:	b083      	sub	sp, #12
 8003e7e:	af00      	add	r7, sp, #0
 8003e80:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	689b      	ldr	r3, [r3, #8]
 8003e86:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003e8a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003e8e:	d101      	bne.n	8003e94 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003e90:	2301      	movs	r3, #1
 8003e92:	e000      	b.n	8003e96 <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	370c      	adds	r7, #12
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea0:	4770      	bx	lr

08003ea2 <LL_ADC_REG_IsConversionOngoing>:
{
 8003ea2:	b480      	push	{r7}
 8003ea4:	b083      	sub	sp, #12
 8003ea6:	af00      	add	r7, sp, #0
 8003ea8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	689b      	ldr	r3, [r3, #8]
 8003eae:	f003 0304 	and.w	r3, r3, #4
 8003eb2:	2b04      	cmp	r3, #4
 8003eb4:	d101      	bne.n	8003eba <LL_ADC_REG_IsConversionOngoing+0x18>
 8003eb6:	2301      	movs	r3, #1
 8003eb8:	e000      	b.n	8003ebc <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003eba:	2300      	movs	r3, #0
}
 8003ebc:	4618      	mov	r0, r3
 8003ebe:	370c      	adds	r7, #12
 8003ec0:	46bd      	mov	sp, r7
 8003ec2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec6:	4770      	bx	lr

08003ec8 <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003ec8:	b580      	push	{r7, lr}
 8003eca:	b084      	sub	sp, #16
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003edc:	2b01      	cmp	r3, #1
 8003ede:	d101      	bne.n	8003ee4 <HAL_ADCEx_Calibration_Start+0x1c>
 8003ee0:	2302      	movs	r3, #2
 8003ee2:	e04d      	b.n	8003f80 <HAL_ADCEx_Calibration_Start+0xb8>
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2201      	movs	r2, #1
 8003ee8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003eec:	6878      	ldr	r0, [r7, #4]
 8003eee:	f7ff fea5 	bl	8003c3c <ADC_Disable>
 8003ef2:	4603      	mov	r3, r0
 8003ef4:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003ef6:	7bfb      	ldrb	r3, [r7, #15]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d136      	bne.n	8003f6a <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f00:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003f04:	f023 0302 	bic.w	r3, r3, #2
 8003f08:	f043 0202 	orr.w	r2, r3, #2
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	6839      	ldr	r1, [r7, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7ff ff96 	bl	8003e48 <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f1c:	e014      	b.n	8003f48 <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003f1e:	68bb      	ldr	r3, [r7, #8]
 8003f20:	3301      	adds	r3, #1
 8003f22:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003f24:	68bb      	ldr	r3, [r7, #8]
 8003f26:	4a18      	ldr	r2, [pc, #96]	; (8003f88 <HAL_ADCEx_Calibration_Start+0xc0>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d90d      	bls.n	8003f48 <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f30:	f023 0312 	bic.w	r3, r3, #18
 8003f34:	f043 0210 	orr.w	r2, r3, #16
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2200      	movs	r2, #0
 8003f40:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003f44:	2301      	movs	r3, #1
 8003f46:	e01b      	b.n	8003f80 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	4618      	mov	r0, r3
 8003f4e:	f7ff ff94 	bl	8003e7a <LL_ADC_IsCalibrationOnGoing>
 8003f52:	4603      	mov	r3, r0
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d1e2      	bne.n	8003f1e <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f5c:	f023 0303 	bic.w	r3, r3, #3
 8003f60:	f043 0201 	orr.w	r2, r3, #1
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	65da      	str	r2, [r3, #92]	; 0x5c
 8003f68:	e005      	b.n	8003f76 <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f6e:	f043 0210 	orr.w	r2, r3, #16
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f7e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003f80:	4618      	mov	r0, r3
 8003f82:	3710      	adds	r7, #16
 8003f84:	46bd      	mov	sp, r7
 8003f86:	bd80      	pop	{r7, pc}
 8003f88:	0004de01 	.word	0x0004de01

08003f8c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003f8c:	b590      	push	{r4, r7, lr}
 8003f8e:	b0a1      	sub	sp, #132	; 0x84
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
 8003f94:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003f96:	2300      	movs	r3, #0
 8003f98:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003fa2:	2b01      	cmp	r3, #1
 8003fa4:	d101      	bne.n	8003faa <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003fa6:	2302      	movs	r3, #2
 8003fa8:	e0e7      	b.n	800417a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	2201      	movs	r2, #1
 8003fae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003fb2:	2300      	movs	r3, #0
 8003fb4:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003fc2:	d102      	bne.n	8003fca <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003fc4:	4b6f      	ldr	r3, [pc, #444]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003fc6:	60bb      	str	r3, [r7, #8]
 8003fc8:	e009      	b.n	8003fde <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	4a6e      	ldr	r2, [pc, #440]	; (8004188 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003fd0:	4293      	cmp	r3, r2
 8003fd2:	d102      	bne.n	8003fda <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003fd4:	4b6d      	ldr	r3, [pc, #436]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003fd6:	60bb      	str	r3, [r7, #8]
 8003fd8:	e001      	b.n	8003fde <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003fda:	2300      	movs	r3, #0
 8003fdc:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003fde:	68bb      	ldr	r3, [r7, #8]
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d10b      	bne.n	8003ffc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fe8:	f043 0220 	orr.w	r2, r3, #32
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2200      	movs	r2, #0
 8003ff4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003ff8:	2301      	movs	r3, #1
 8003ffa:	e0be      	b.n	800417a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7ff ff4f 	bl	8003ea2 <LL_ADC_REG_IsConversionOngoing>
 8004004:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	4618      	mov	r0, r3
 800400c:	f7ff ff49 	bl	8003ea2 <LL_ADC_REG_IsConversionOngoing>
 8004010:	4603      	mov	r3, r0
 8004012:	2b00      	cmp	r3, #0
 8004014:	f040 80a0 	bne.w	8004158 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8004018:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800401a:	2b00      	cmp	r3, #0
 800401c:	f040 809c 	bne.w	8004158 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004028:	d004      	beq.n	8004034 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	4a55      	ldr	r2, [pc, #340]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d101      	bne.n	8004038 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8004034:	4b56      	ldr	r3, [pc, #344]	; (8004190 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8004036:	e000      	b.n	800403a <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8004038:	4b56      	ldr	r3, [pc, #344]	; (8004194 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 800403a:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800403c:	683b      	ldr	r3, [r7, #0]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	2b00      	cmp	r3, #0
 8004042:	d04b      	beq.n	80040dc <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8004044:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004046:	689b      	ldr	r3, [r3, #8]
 8004048:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	6859      	ldr	r1, [r3, #4]
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8004056:	035b      	lsls	r3, r3, #13
 8004058:	430b      	orrs	r3, r1
 800405a:	431a      	orrs	r2, r3
 800405c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800405e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004068:	d004      	beq.n	8004074 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	681b      	ldr	r3, [r3, #0]
 800406e:	4a45      	ldr	r2, [pc, #276]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004070:	4293      	cmp	r3, r2
 8004072:	d10f      	bne.n	8004094 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8004074:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004078:	f7ff fed3 	bl	8003e22 <LL_ADC_IsEnabled>
 800407c:	4604      	mov	r4, r0
 800407e:	4841      	ldr	r0, [pc, #260]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004080:	f7ff fecf 	bl	8003e22 <LL_ADC_IsEnabled>
 8004084:	4603      	mov	r3, r0
 8004086:	4323      	orrs	r3, r4
 8004088:	2b00      	cmp	r3, #0
 800408a:	bf0c      	ite	eq
 800408c:	2301      	moveq	r3, #1
 800408e:	2300      	movne	r3, #0
 8004090:	b2db      	uxtb	r3, r3
 8004092:	e012      	b.n	80040ba <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8004094:	483c      	ldr	r0, [pc, #240]	; (8004188 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8004096:	f7ff fec4 	bl	8003e22 <LL_ADC_IsEnabled>
 800409a:	4604      	mov	r4, r0
 800409c:	483b      	ldr	r0, [pc, #236]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 800409e:	f7ff fec0 	bl	8003e22 <LL_ADC_IsEnabled>
 80040a2:	4603      	mov	r3, r0
 80040a4:	431c      	orrs	r4, r3
 80040a6:	483c      	ldr	r0, [pc, #240]	; (8004198 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 80040a8:	f7ff febb 	bl	8003e22 <LL_ADC_IsEnabled>
 80040ac:	4603      	mov	r3, r0
 80040ae:	4323      	orrs	r3, r4
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	bf0c      	ite	eq
 80040b4:	2301      	moveq	r3, #1
 80040b6:	2300      	movne	r3, #0
 80040b8:	b2db      	uxtb	r3, r3
 80040ba:	2b00      	cmp	r3, #0
 80040bc:	d056      	beq.n	800416c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 80040be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040c0:	689b      	ldr	r3, [r3, #8]
 80040c2:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 80040c6:	f023 030f 	bic.w	r3, r3, #15
 80040ca:	683a      	ldr	r2, [r7, #0]
 80040cc:	6811      	ldr	r1, [r2, #0]
 80040ce:	683a      	ldr	r2, [r7, #0]
 80040d0:	6892      	ldr	r2, [r2, #8]
 80040d2:	430a      	orrs	r2, r1
 80040d4:	431a      	orrs	r2, r3
 80040d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040d8:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80040da:	e047      	b.n	800416c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 80040dc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040de:	689b      	ldr	r3, [r3, #8]
 80040e0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80040e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80040e6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80040f0:	d004      	beq.n	80040fc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	681b      	ldr	r3, [r3, #0]
 80040f6:	4a23      	ldr	r2, [pc, #140]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d10f      	bne.n	800411c <HAL_ADCEx_MultiModeConfigChannel+0x190>
 80040fc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8004100:	f7ff fe8f 	bl	8003e22 <LL_ADC_IsEnabled>
 8004104:	4604      	mov	r4, r0
 8004106:	481f      	ldr	r0, [pc, #124]	; (8004184 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8004108:	f7ff fe8b 	bl	8003e22 <LL_ADC_IsEnabled>
 800410c:	4603      	mov	r3, r0
 800410e:	4323      	orrs	r3, r4
 8004110:	2b00      	cmp	r3, #0
 8004112:	bf0c      	ite	eq
 8004114:	2301      	moveq	r3, #1
 8004116:	2300      	movne	r3, #0
 8004118:	b2db      	uxtb	r3, r3
 800411a:	e012      	b.n	8004142 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 800411c:	481a      	ldr	r0, [pc, #104]	; (8004188 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 800411e:	f7ff fe80 	bl	8003e22 <LL_ADC_IsEnabled>
 8004122:	4604      	mov	r4, r0
 8004124:	4819      	ldr	r0, [pc, #100]	; (800418c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8004126:	f7ff fe7c 	bl	8003e22 <LL_ADC_IsEnabled>
 800412a:	4603      	mov	r3, r0
 800412c:	431c      	orrs	r4, r3
 800412e:	481a      	ldr	r0, [pc, #104]	; (8004198 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8004130:	f7ff fe77 	bl	8003e22 <LL_ADC_IsEnabled>
 8004134:	4603      	mov	r3, r0
 8004136:	4323      	orrs	r3, r4
 8004138:	2b00      	cmp	r3, #0
 800413a:	bf0c      	ite	eq
 800413c:	2301      	moveq	r3, #1
 800413e:	2300      	movne	r3, #0
 8004140:	b2db      	uxtb	r3, r3
 8004142:	2b00      	cmp	r3, #0
 8004144:	d012      	beq.n	800416c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8004146:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004148:	689b      	ldr	r3, [r3, #8]
 800414a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 800414e:	f023 030f 	bic.w	r3, r3, #15
 8004152:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8004154:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8004156:	e009      	b.n	800416c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800415c:	f043 0220 	orr.w	r2, r3, #32
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8004164:	2301      	movs	r3, #1
 8004166:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800416a:	e000      	b.n	800416e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 800416c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8004176:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800417a:	4618      	mov	r0, r3
 800417c:	3784      	adds	r7, #132	; 0x84
 800417e:	46bd      	mov	sp, r7
 8004180:	bd90      	pop	{r4, r7, pc}
 8004182:	bf00      	nop
 8004184:	50000100 	.word	0x50000100
 8004188:	50000400 	.word	0x50000400
 800418c:	50000500 	.word	0x50000500
 8004190:	50000300 	.word	0x50000300
 8004194:	50000700 	.word	0x50000700
 8004198:	50000600 	.word	0x50000600

0800419c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800419c:	b480      	push	{r7}
 800419e:	b085      	sub	sp, #20
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	f003 0307 	and.w	r3, r3, #7
 80041aa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041ac:	4b0c      	ldr	r3, [pc, #48]	; (80041e0 <__NVIC_SetPriorityGrouping+0x44>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041b2:	68ba      	ldr	r2, [r7, #8]
 80041b4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041b8:	4013      	ands	r3, r2
 80041ba:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041c0:	68bb      	ldr	r3, [r7, #8]
 80041c2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041c4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041c8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041cc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041ce:	4a04      	ldr	r2, [pc, #16]	; (80041e0 <__NVIC_SetPriorityGrouping+0x44>)
 80041d0:	68bb      	ldr	r3, [r7, #8]
 80041d2:	60d3      	str	r3, [r2, #12]
}
 80041d4:	bf00      	nop
 80041d6:	3714      	adds	r7, #20
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr
 80041e0:	e000ed00 	.word	0xe000ed00

080041e4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041e4:	b480      	push	{r7}
 80041e6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041e8:	4b04      	ldr	r3, [pc, #16]	; (80041fc <__NVIC_GetPriorityGrouping+0x18>)
 80041ea:	68db      	ldr	r3, [r3, #12]
 80041ec:	0a1b      	lsrs	r3, r3, #8
 80041ee:	f003 0307 	and.w	r3, r3, #7
}
 80041f2:	4618      	mov	r0, r3
 80041f4:	46bd      	mov	sp, r7
 80041f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041fa:	4770      	bx	lr
 80041fc:	e000ed00 	.word	0xe000ed00

08004200 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004200:	b480      	push	{r7}
 8004202:	b083      	sub	sp, #12
 8004204:	af00      	add	r7, sp, #0
 8004206:	4603      	mov	r3, r0
 8004208:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800420a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800420e:	2b00      	cmp	r3, #0
 8004210:	db0b      	blt.n	800422a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004212:	79fb      	ldrb	r3, [r7, #7]
 8004214:	f003 021f 	and.w	r2, r3, #31
 8004218:	4907      	ldr	r1, [pc, #28]	; (8004238 <__NVIC_EnableIRQ+0x38>)
 800421a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	2001      	movs	r0, #1
 8004222:	fa00 f202 	lsl.w	r2, r0, r2
 8004226:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800422a:	bf00      	nop
 800422c:	370c      	adds	r7, #12
 800422e:	46bd      	mov	sp, r7
 8004230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004234:	4770      	bx	lr
 8004236:	bf00      	nop
 8004238:	e000e100 	.word	0xe000e100

0800423c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800423c:	b480      	push	{r7}
 800423e:	b083      	sub	sp, #12
 8004240:	af00      	add	r7, sp, #0
 8004242:	4603      	mov	r3, r0
 8004244:	6039      	str	r1, [r7, #0]
 8004246:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004248:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800424c:	2b00      	cmp	r3, #0
 800424e:	db0a      	blt.n	8004266 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	b2da      	uxtb	r2, r3
 8004254:	490c      	ldr	r1, [pc, #48]	; (8004288 <__NVIC_SetPriority+0x4c>)
 8004256:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800425a:	0112      	lsls	r2, r2, #4
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	440b      	add	r3, r1
 8004260:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004264:	e00a      	b.n	800427c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	b2da      	uxtb	r2, r3
 800426a:	4908      	ldr	r1, [pc, #32]	; (800428c <__NVIC_SetPriority+0x50>)
 800426c:	79fb      	ldrb	r3, [r7, #7]
 800426e:	f003 030f 	and.w	r3, r3, #15
 8004272:	3b04      	subs	r3, #4
 8004274:	0112      	lsls	r2, r2, #4
 8004276:	b2d2      	uxtb	r2, r2
 8004278:	440b      	add	r3, r1
 800427a:	761a      	strb	r2, [r3, #24]
}
 800427c:	bf00      	nop
 800427e:	370c      	adds	r7, #12
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	e000e100 	.word	0xe000e100
 800428c:	e000ed00 	.word	0xe000ed00

08004290 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004290:	b480      	push	{r7}
 8004292:	b089      	sub	sp, #36	; 0x24
 8004294:	af00      	add	r7, sp, #0
 8004296:	60f8      	str	r0, [r7, #12]
 8004298:	60b9      	str	r1, [r7, #8]
 800429a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800429c:	68fb      	ldr	r3, [r7, #12]
 800429e:	f003 0307 	and.w	r3, r3, #7
 80042a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80042a4:	69fb      	ldr	r3, [r7, #28]
 80042a6:	f1c3 0307 	rsb	r3, r3, #7
 80042aa:	2b04      	cmp	r3, #4
 80042ac:	bf28      	it	cs
 80042ae:	2304      	movcs	r3, #4
 80042b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3304      	adds	r3, #4
 80042b6:	2b06      	cmp	r3, #6
 80042b8:	d902      	bls.n	80042c0 <NVIC_EncodePriority+0x30>
 80042ba:	69fb      	ldr	r3, [r7, #28]
 80042bc:	3b03      	subs	r3, #3
 80042be:	e000      	b.n	80042c2 <NVIC_EncodePriority+0x32>
 80042c0:	2300      	movs	r3, #0
 80042c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042c4:	f04f 32ff 	mov.w	r2, #4294967295
 80042c8:	69bb      	ldr	r3, [r7, #24]
 80042ca:	fa02 f303 	lsl.w	r3, r2, r3
 80042ce:	43da      	mvns	r2, r3
 80042d0:	68bb      	ldr	r3, [r7, #8]
 80042d2:	401a      	ands	r2, r3
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042d8:	f04f 31ff 	mov.w	r1, #4294967295
 80042dc:	697b      	ldr	r3, [r7, #20]
 80042de:	fa01 f303 	lsl.w	r3, r1, r3
 80042e2:	43d9      	mvns	r1, r3
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e8:	4313      	orrs	r3, r2
         );
}
 80042ea:	4618      	mov	r0, r3
 80042ec:	3724      	adds	r7, #36	; 0x24
 80042ee:	46bd      	mov	sp, r7
 80042f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f4:	4770      	bx	lr

080042f6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80042f6:	b580      	push	{r7, lr}
 80042f8:	b082      	sub	sp, #8
 80042fa:	af00      	add	r7, sp, #0
 80042fc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80042fe:	6878      	ldr	r0, [r7, #4]
 8004300:	f7ff ff4c 	bl	800419c <__NVIC_SetPriorityGrouping>
}
 8004304:	bf00      	nop
 8004306:	3708      	adds	r7, #8
 8004308:	46bd      	mov	sp, r7
 800430a:	bd80      	pop	{r7, pc}

0800430c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800430c:	b580      	push	{r7, lr}
 800430e:	b086      	sub	sp, #24
 8004310:	af00      	add	r7, sp, #0
 8004312:	4603      	mov	r3, r0
 8004314:	60b9      	str	r1, [r7, #8]
 8004316:	607a      	str	r2, [r7, #4]
 8004318:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800431a:	f7ff ff63 	bl	80041e4 <__NVIC_GetPriorityGrouping>
 800431e:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004320:	687a      	ldr	r2, [r7, #4]
 8004322:	68b9      	ldr	r1, [r7, #8]
 8004324:	6978      	ldr	r0, [r7, #20]
 8004326:	f7ff ffb3 	bl	8004290 <NVIC_EncodePriority>
 800432a:	4602      	mov	r2, r0
 800432c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004330:	4611      	mov	r1, r2
 8004332:	4618      	mov	r0, r3
 8004334:	f7ff ff82 	bl	800423c <__NVIC_SetPriority>
}
 8004338:	bf00      	nop
 800433a:	3718      	adds	r7, #24
 800433c:	46bd      	mov	sp, r7
 800433e:	bd80      	pop	{r7, pc}

08004340 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b082      	sub	sp, #8
 8004344:	af00      	add	r7, sp, #0
 8004346:	4603      	mov	r3, r0
 8004348:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800434a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800434e:	4618      	mov	r0, r3
 8004350:	f7ff ff56 	bl	8004200 <__NVIC_EnableIRQ>
}
 8004354:	bf00      	nop
 8004356:	3708      	adds	r7, #8
 8004358:	46bd      	mov	sp, r7
 800435a:	bd80      	pop	{r7, pc}

0800435c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800435c:	b580      	push	{r7, lr}
 800435e:	b084      	sub	sp, #16
 8004360:	af00      	add	r7, sp, #0
 8004362:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2b00      	cmp	r3, #0
 8004368:	d101      	bne.n	800436e <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800436a:	2301      	movs	r3, #1
 800436c:	e08d      	b.n	800448a <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	461a      	mov	r2, r3
 8004374:	4b47      	ldr	r3, [pc, #284]	; (8004494 <HAL_DMA_Init+0x138>)
 8004376:	429a      	cmp	r2, r3
 8004378:	d80f      	bhi.n	800439a <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	461a      	mov	r2, r3
 8004380:	4b45      	ldr	r3, [pc, #276]	; (8004498 <HAL_DMA_Init+0x13c>)
 8004382:	4413      	add	r3, r2
 8004384:	4a45      	ldr	r2, [pc, #276]	; (800449c <HAL_DMA_Init+0x140>)
 8004386:	fba2 2303 	umull	r2, r3, r2, r3
 800438a:	091b      	lsrs	r3, r3, #4
 800438c:	009a      	lsls	r2, r3, #2
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	4a42      	ldr	r2, [pc, #264]	; (80044a0 <HAL_DMA_Init+0x144>)
 8004396:	641a      	str	r2, [r3, #64]	; 0x40
 8004398:	e00e      	b.n	80043b8 <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	461a      	mov	r2, r3
 80043a0:	4b40      	ldr	r3, [pc, #256]	; (80044a4 <HAL_DMA_Init+0x148>)
 80043a2:	4413      	add	r3, r2
 80043a4:	4a3d      	ldr	r2, [pc, #244]	; (800449c <HAL_DMA_Init+0x140>)
 80043a6:	fba2 2303 	umull	r2, r3, r2, r3
 80043aa:	091b      	lsrs	r3, r3, #4
 80043ac:	009a      	lsls	r2, r3, #2
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	4a3c      	ldr	r2, [pc, #240]	; (80044a8 <HAL_DMA_Init+0x14c>)
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	2202      	movs	r2, #2
 80043bc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80043ce:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80043d2:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 80043dc:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	691b      	ldr	r3, [r3, #16]
 80043e2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80043e8:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	699b      	ldr	r3, [r3, #24]
 80043ee:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80043f4:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 80043fc:	68fa      	ldr	r2, [r7, #12]
 80043fe:	4313      	orrs	r3, r2
 8004400:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	68fa      	ldr	r2, [r7, #12]
 8004408:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800440a:	6878      	ldr	r0, [r7, #4]
 800440c:	f000 fa76 	bl	80048fc <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004418:	d102      	bne.n	8004420 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2200      	movs	r2, #0
 800441e:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	685a      	ldr	r2, [r3, #4]
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004428:	b2d2      	uxtb	r2, r2
 800442a:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004430:	687a      	ldr	r2, [r7, #4]
 8004432:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004434:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	685b      	ldr	r3, [r3, #4]
 800443a:	2b00      	cmp	r3, #0
 800443c:	d010      	beq.n	8004460 <HAL_DMA_Init+0x104>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	685b      	ldr	r3, [r3, #4]
 8004442:	2b04      	cmp	r3, #4
 8004444:	d80c      	bhi.n	8004460 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 8004446:	6878      	ldr	r0, [r7, #4]
 8004448:	f000 fa96 	bl	8004978 <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004450:	2200      	movs	r2, #0
 8004452:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004458:	687a      	ldr	r2, [r7, #4]
 800445a:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800445c:	605a      	str	r2, [r3, #4]
 800445e:	e008      	b.n	8004472 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	2200      	movs	r2, #0
 8004464:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2200      	movs	r2, #0
 800446a:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2200      	movs	r2, #0
 8004470:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	2201      	movs	r2, #1
 800447c:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2200      	movs	r2, #0
 8004484:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 8004488:	2300      	movs	r3, #0
}
 800448a:	4618      	mov	r0, r3
 800448c:	3710      	adds	r7, #16
 800448e:	46bd      	mov	sp, r7
 8004490:	bd80      	pop	{r7, pc}
 8004492:	bf00      	nop
 8004494:	40020407 	.word	0x40020407
 8004498:	bffdfff8 	.word	0xbffdfff8
 800449c:	cccccccd 	.word	0xcccccccd
 80044a0:	40020000 	.word	0x40020000
 80044a4:	bffdfbf8 	.word	0xbffdfbf8
 80044a8:	40020400 	.word	0x40020400

080044ac <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80044ac:	b580      	push	{r7, lr}
 80044ae:	b086      	sub	sp, #24
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	60f8      	str	r0, [r7, #12]
 80044b4:	60b9      	str	r1, [r7, #8]
 80044b6:	607a      	str	r2, [r7, #4]
 80044b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80044ba:	2300      	movs	r3, #0
 80044bc:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80044c4:	2b01      	cmp	r3, #1
 80044c6:	d101      	bne.n	80044cc <HAL_DMA_Start_IT+0x20>
 80044c8:	2302      	movs	r3, #2
 80044ca:	e066      	b.n	800459a <HAL_DMA_Start_IT+0xee>
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	2201      	movs	r2, #1
 80044d0:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80044da:	b2db      	uxtb	r3, r3
 80044dc:	2b01      	cmp	r3, #1
 80044de:	d155      	bne.n	800458c <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	2202      	movs	r2, #2
 80044e4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	2200      	movs	r2, #0
 80044ec:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	681b      	ldr	r3, [r3, #0]
 80044f2:	681a      	ldr	r2, [r3, #0]
 80044f4:	68fb      	ldr	r3, [r7, #12]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	f022 0201 	bic.w	r2, r2, #1
 80044fc:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80044fe:	683b      	ldr	r3, [r7, #0]
 8004500:	687a      	ldr	r2, [r7, #4]
 8004502:	68b9      	ldr	r1, [r7, #8]
 8004504:	68f8      	ldr	r0, [r7, #12]
 8004506:	f000 f9bb 	bl	8004880 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800450e:	2b00      	cmp	r3, #0
 8004510:	d008      	beq.n	8004524 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	681a      	ldr	r2, [r3, #0]
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f042 020e 	orr.w	r2, r2, #14
 8004520:	601a      	str	r2, [r3, #0]
 8004522:	e00f      	b.n	8004544 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681a      	ldr	r2, [r3, #0]
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	681b      	ldr	r3, [r3, #0]
 800452e:	f022 0204 	bic.w	r2, r2, #4
 8004532:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	681a      	ldr	r2, [r3, #0]
 800453a:	68fb      	ldr	r3, [r7, #12]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	f042 020a 	orr.w	r2, r2, #10
 8004542:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004548:	681b      	ldr	r3, [r3, #0]
 800454a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800454e:	2b00      	cmp	r3, #0
 8004550:	d007      	beq.n	8004562 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004552:	68fb      	ldr	r3, [r7, #12]
 8004554:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004556:	681a      	ldr	r2, [r3, #0]
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800455c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004560:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004566:	2b00      	cmp	r3, #0
 8004568:	d007      	beq.n	800457a <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800456e:	681a      	ldr	r2, [r3, #0]
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004574:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004578:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	681a      	ldr	r2, [r3, #0]
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	681b      	ldr	r3, [r3, #0]
 8004584:	f042 0201 	orr.w	r2, r2, #1
 8004588:	601a      	str	r2, [r3, #0]
 800458a:	e005      	b.n	8004598 <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	2200      	movs	r2, #0
 8004590:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 8004594:	2302      	movs	r3, #2
 8004596:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 8004598:	7dfb      	ldrb	r3, [r7, #23]
}
 800459a:	4618      	mov	r0, r3
 800459c:	3718      	adds	r7, #24
 800459e:	46bd      	mov	sp, r7
 80045a0:	bd80      	pop	{r7, pc}

080045a2 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80045aa:	2300      	movs	r3, #0
 80045ac:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80045b4:	b2db      	uxtb	r3, r3
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d005      	beq.n	80045c6 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2204      	movs	r2, #4
 80045be:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80045c0:	2301      	movs	r3, #1
 80045c2:	73fb      	strb	r3, [r7, #15]
 80045c4:	e037      	b.n	8004636 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	681a      	ldr	r2, [r3, #0]
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	f022 020e 	bic.w	r2, r2, #14
 80045d4:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045da:	681a      	ldr	r2, [r3, #0]
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80045e0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80045e4:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	681a      	ldr	r2, [r3, #0]
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	f022 0201 	bic.w	r2, r2, #1
 80045f4:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045fa:	f003 021f 	and.w	r2, r3, #31
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004602:	2101      	movs	r1, #1
 8004604:	fa01 f202 	lsl.w	r2, r1, r2
 8004608:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800460e:	687a      	ldr	r2, [r7, #4]
 8004610:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004612:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004618:	2b00      	cmp	r3, #0
 800461a:	d00c      	beq.n	8004636 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004620:	681a      	ldr	r2, [r3, #0]
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004626:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800462a:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004630:	687a      	ldr	r2, [r7, #4]
 8004632:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004634:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2201      	movs	r2, #1
 800463a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 800463e:	687b      	ldr	r3, [r7, #4]
 8004640:	2200      	movs	r2, #0
 8004642:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8004646:	7bfb      	ldrb	r3, [r7, #15]
}
 8004648:	4618      	mov	r0, r3
 800464a:	3714      	adds	r7, #20
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004654:	b580      	push	{r7, lr}
 8004656:	b084      	sub	sp, #16
 8004658:	af00      	add	r7, sp, #0
 800465a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800465c:	2300      	movs	r3, #0
 800465e:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8004666:	b2db      	uxtb	r3, r3
 8004668:	2b02      	cmp	r3, #2
 800466a:	d00d      	beq.n	8004688 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	2204      	movs	r2, #4
 8004670:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	2201      	movs	r2, #1
 8004676:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2200      	movs	r2, #0
 800467e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8004682:	2301      	movs	r3, #1
 8004684:	73fb      	strb	r3, [r7, #15]
 8004686:	e047      	b.n	8004718 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	681a      	ldr	r2, [r3, #0]
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	f022 020e 	bic.w	r2, r2, #14
 8004696:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	681a      	ldr	r2, [r3, #0]
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	f022 0201 	bic.w	r2, r2, #1
 80046a6:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046b2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046b6:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046bc:	f003 021f 	and.w	r2, r3, #31
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046c4:	2101      	movs	r1, #1
 80046c6:	fa01 f202 	lsl.w	r2, r1, r2
 80046ca:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046d0:	687a      	ldr	r2, [r7, #4]
 80046d2:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046d4:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046da:	2b00      	cmp	r3, #0
 80046dc:	d00c      	beq.n	80046f8 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e2:	681a      	ldr	r2, [r3, #0]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046e8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80046ec:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046f2:	687a      	ldr	r2, [r7, #4]
 80046f4:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046f6:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	2201      	movs	r2, #1
 80046fc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	2200      	movs	r2, #0
 8004704:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800470c:	2b00      	cmp	r3, #0
 800470e:	d003      	beq.n	8004718 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004714:	6878      	ldr	r0, [r7, #4]
 8004716:	4798      	blx	r3
    }
  }
  return status;
 8004718:	7bfb      	ldrb	r3, [r7, #15]
}
 800471a:	4618      	mov	r0, r3
 800471c:	3710      	adds	r7, #16
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	b084      	sub	sp, #16
 8004726:	af00      	add	r7, sp, #0
 8004728:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800473e:	f003 031f 	and.w	r3, r3, #31
 8004742:	2204      	movs	r2, #4
 8004744:	409a      	lsls	r2, r3
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	4013      	ands	r3, r2
 800474a:	2b00      	cmp	r3, #0
 800474c:	d026      	beq.n	800479c <HAL_DMA_IRQHandler+0x7a>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	f003 0304 	and.w	r3, r3, #4
 8004754:	2b00      	cmp	r3, #0
 8004756:	d021      	beq.n	800479c <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	f003 0320 	and.w	r3, r3, #32
 8004762:	2b00      	cmp	r3, #0
 8004764:	d107      	bne.n	8004776 <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	681a      	ldr	r2, [r3, #0]
 800476c:	687b      	ldr	r3, [r7, #4]
 800476e:	681b      	ldr	r3, [r3, #0]
 8004770:	f022 0204 	bic.w	r2, r2, #4
 8004774:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800477a:	f003 021f 	and.w	r2, r3, #31
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004782:	2104      	movs	r1, #4
 8004784:	fa01 f202 	lsl.w	r2, r1, r2
 8004788:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800478e:	2b00      	cmp	r3, #0
 8004790:	d071      	beq.n	8004876 <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004796:	6878      	ldr	r0, [r7, #4]
 8004798:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 800479a:	e06c      	b.n	8004876 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047a0:	f003 031f 	and.w	r3, r3, #31
 80047a4:	2202      	movs	r2, #2
 80047a6:	409a      	lsls	r2, r3
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	4013      	ands	r3, r2
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d02e      	beq.n	800480e <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80047b0:	68bb      	ldr	r3, [r7, #8]
 80047b2:	f003 0302 	and.w	r3, r3, #2
 80047b6:	2b00      	cmp	r3, #0
 80047b8:	d029      	beq.n	800480e <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f003 0320 	and.w	r3, r3, #32
 80047c4:	2b00      	cmp	r3, #0
 80047c6:	d10b      	bne.n	80047e0 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	681a      	ldr	r2, [r3, #0]
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	f022 020a 	bic.w	r2, r2, #10
 80047d6:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	2201      	movs	r2, #1
 80047dc:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80047e4:	f003 021f 	and.w	r2, r3, #31
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047ec:	2102      	movs	r1, #2
 80047ee:	fa01 f202 	lsl.w	r2, r1, r2
 80047f2:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	2200      	movs	r2, #0
 80047f8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004800:	2b00      	cmp	r3, #0
 8004802:	d038      	beq.n	8004876 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004808:	6878      	ldr	r0, [r7, #4]
 800480a:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 800480c:	e033      	b.n	8004876 <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004812:	f003 031f 	and.w	r3, r3, #31
 8004816:	2208      	movs	r2, #8
 8004818:	409a      	lsls	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	4013      	ands	r3, r2
 800481e:	2b00      	cmp	r3, #0
 8004820:	d02a      	beq.n	8004878 <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f003 0308 	and.w	r3, r3, #8
 8004828:	2b00      	cmp	r3, #0
 800482a:	d025      	beq.n	8004878 <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	681a      	ldr	r2, [r3, #0]
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	f022 020e 	bic.w	r2, r2, #14
 800483a:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004840:	f003 021f 	and.w	r2, r3, #31
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004848:	2101      	movs	r1, #1
 800484a:	fa01 f202 	lsl.w	r2, r1, r2
 800484e:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	2201      	movs	r2, #1
 8004854:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004856:	687b      	ldr	r3, [r7, #4]
 8004858:	2201      	movs	r2, #1
 800485a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	2200      	movs	r2, #0
 8004862:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800486a:	2b00      	cmp	r3, #0
 800486c:	d004      	beq.n	8004878 <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004872:	6878      	ldr	r0, [r7, #4]
 8004874:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 8004876:	bf00      	nop
 8004878:	bf00      	nop
}
 800487a:	3710      	adds	r7, #16
 800487c:	46bd      	mov	sp, r7
 800487e:	bd80      	pop	{r7, pc}

08004880 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	60f8      	str	r0, [r7, #12]
 8004888:	60b9      	str	r1, [r7, #8]
 800488a:	607a      	str	r2, [r7, #4]
 800488c:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004892:	68fa      	ldr	r2, [r7, #12]
 8004894:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004896:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800489c:	2b00      	cmp	r3, #0
 800489e:	d004      	beq.n	80048aa <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80048a0:	68fb      	ldr	r3, [r7, #12]
 80048a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80048a4:	68fa      	ldr	r2, [r7, #12]
 80048a6:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80048a8:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ae:	f003 021f 	and.w	r2, r3, #31
 80048b2:	68fb      	ldr	r3, [r7, #12]
 80048b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048b6:	2101      	movs	r1, #1
 80048b8:	fa01 f202 	lsl.w	r2, r1, r2
 80048bc:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	683a      	ldr	r2, [r7, #0]
 80048c4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	689b      	ldr	r3, [r3, #8]
 80048ca:	2b10      	cmp	r3, #16
 80048cc:	d108      	bne.n	80048e0 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	687a      	ldr	r2, [r7, #4]
 80048d4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68ba      	ldr	r2, [r7, #8]
 80048dc:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 80048de:	e007      	b.n	80048f0 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 80048e0:	68fb      	ldr	r3, [r7, #12]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	68ba      	ldr	r2, [r7, #8]
 80048e6:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	687a      	ldr	r2, [r7, #4]
 80048ee:	60da      	str	r2, [r3, #12]
}
 80048f0:	bf00      	nop
 80048f2:	3714      	adds	r7, #20
 80048f4:	46bd      	mov	sp, r7
 80048f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fa:	4770      	bx	lr

080048fc <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b087      	sub	sp, #28
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	461a      	mov	r2, r3
 800490a:	4b16      	ldr	r3, [pc, #88]	; (8004964 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 800490c:	429a      	cmp	r2, r3
 800490e:	d802      	bhi.n	8004916 <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004910:	4b15      	ldr	r3, [pc, #84]	; (8004968 <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004912:	617b      	str	r3, [r7, #20]
 8004914:	e001      	b.n	800491a <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 8004916:	4b15      	ldr	r3, [pc, #84]	; (800496c <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 8004918:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800491a:	697b      	ldr	r3, [r7, #20]
 800491c:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	681b      	ldr	r3, [r3, #0]
 8004922:	b2db      	uxtb	r3, r3
 8004924:	3b08      	subs	r3, #8
 8004926:	4a12      	ldr	r2, [pc, #72]	; (8004970 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 8004928:	fba2 2303 	umull	r2, r3, r2, r3
 800492c:	091b      	lsrs	r3, r3, #4
 800492e:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004934:	089b      	lsrs	r3, r3, #2
 8004936:	009a      	lsls	r2, r3, #2
 8004938:	693b      	ldr	r3, [r7, #16]
 800493a:	4413      	add	r3, r2
 800493c:	461a      	mov	r2, r3
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a0b      	ldr	r2, [pc, #44]	; (8004974 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 8004946:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	f003 031f 	and.w	r3, r3, #31
 800494e:	2201      	movs	r2, #1
 8004950:	409a      	lsls	r2, r3
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004956:	bf00      	nop
 8004958:	371c      	adds	r7, #28
 800495a:	46bd      	mov	sp, r7
 800495c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004960:	4770      	bx	lr
 8004962:	bf00      	nop
 8004964:	40020407 	.word	0x40020407
 8004968:	40020800 	.word	0x40020800
 800496c:	40020820 	.word	0x40020820
 8004970:	cccccccd 	.word	0xcccccccd
 8004974:	40020880 	.word	0x40020880

08004978 <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004978:	b480      	push	{r7}
 800497a:	b085      	sub	sp, #20
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	685b      	ldr	r3, [r3, #4]
 8004984:	b2db      	uxtb	r3, r3
 8004986:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 8004988:	68fa      	ldr	r2, [r7, #12]
 800498a:	4b0b      	ldr	r3, [pc, #44]	; (80049b8 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 800498c:	4413      	add	r3, r2
 800498e:	009b      	lsls	r3, r3, #2
 8004990:	461a      	mov	r2, r3
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a08      	ldr	r2, [pc, #32]	; (80049bc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 800499a:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	3b01      	subs	r3, #1
 80049a0:	f003 031f 	and.w	r3, r3, #31
 80049a4:	2201      	movs	r2, #1
 80049a6:	409a      	lsls	r2, r3
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80049ac:	bf00      	nop
 80049ae:	3714      	adds	r7, #20
 80049b0:	46bd      	mov	sp, r7
 80049b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b6:	4770      	bx	lr
 80049b8:	1000823f 	.word	0x1000823f
 80049bc:	40020940 	.word	0x40020940

080049c0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80049c0:	b480      	push	{r7}
 80049c2:	b087      	sub	sp, #28
 80049c4:	af00      	add	r7, sp, #0
 80049c6:	6078      	str	r0, [r7, #4]
 80049c8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80049ca:	2300      	movs	r3, #0
 80049cc:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80049ce:	e15a      	b.n	8004c86 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681a      	ldr	r2, [r3, #0]
 80049d4:	2101      	movs	r1, #1
 80049d6:	697b      	ldr	r3, [r7, #20]
 80049d8:	fa01 f303 	lsl.w	r3, r1, r3
 80049dc:	4013      	ands	r3, r2
 80049de:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80049e0:	68fb      	ldr	r3, [r7, #12]
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	f000 814c 	beq.w	8004c80 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049e8:	683b      	ldr	r3, [r7, #0]
 80049ea:	685b      	ldr	r3, [r3, #4]
 80049ec:	f003 0303 	and.w	r3, r3, #3
 80049f0:	2b01      	cmp	r3, #1
 80049f2:	d005      	beq.n	8004a00 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80049f4:	683b      	ldr	r3, [r7, #0]
 80049f6:	685b      	ldr	r3, [r3, #4]
 80049f8:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 80049fc:	2b02      	cmp	r3, #2
 80049fe:	d130      	bne.n	8004a62 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	689b      	ldr	r3, [r3, #8]
 8004a04:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8004a06:	697b      	ldr	r3, [r7, #20]
 8004a08:	005b      	lsls	r3, r3, #1
 8004a0a:	2203      	movs	r2, #3
 8004a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8004a10:	43db      	mvns	r3, r3
 8004a12:	693a      	ldr	r2, [r7, #16]
 8004a14:	4013      	ands	r3, r2
 8004a16:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	68da      	ldr	r2, [r3, #12]
 8004a1c:	697b      	ldr	r3, [r7, #20]
 8004a1e:	005b      	lsls	r3, r3, #1
 8004a20:	fa02 f303 	lsl.w	r3, r2, r3
 8004a24:	693a      	ldr	r2, [r7, #16]
 8004a26:	4313      	orrs	r3, r2
 8004a28:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	693a      	ldr	r2, [r7, #16]
 8004a2e:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8004a36:	2201      	movs	r2, #1
 8004a38:	697b      	ldr	r3, [r7, #20]
 8004a3a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	693a      	ldr	r2, [r7, #16]
 8004a42:	4013      	ands	r3, r2
 8004a44:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	091b      	lsrs	r3, r3, #4
 8004a4c:	f003 0201 	and.w	r2, r3, #1
 8004a50:	697b      	ldr	r3, [r7, #20]
 8004a52:	fa02 f303 	lsl.w	r3, r2, r3
 8004a56:	693a      	ldr	r2, [r7, #16]
 8004a58:	4313      	orrs	r3, r2
 8004a5a:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	693a      	ldr	r2, [r7, #16]
 8004a60:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004a62:	683b      	ldr	r3, [r7, #0]
 8004a64:	685b      	ldr	r3, [r3, #4]
 8004a66:	f003 0303 	and.w	r3, r3, #3
 8004a6a:	2b03      	cmp	r3, #3
 8004a6c:	d017      	beq.n	8004a9e <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	68db      	ldr	r3, [r3, #12]
 8004a72:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004a74:	697b      	ldr	r3, [r7, #20]
 8004a76:	005b      	lsls	r3, r3, #1
 8004a78:	2203      	movs	r2, #3
 8004a7a:	fa02 f303 	lsl.w	r3, r2, r3
 8004a7e:	43db      	mvns	r3, r3
 8004a80:	693a      	ldr	r2, [r7, #16]
 8004a82:	4013      	ands	r3, r2
 8004a84:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004a86:	683b      	ldr	r3, [r7, #0]
 8004a88:	689a      	ldr	r2, [r3, #8]
 8004a8a:	697b      	ldr	r3, [r7, #20]
 8004a8c:	005b      	lsls	r3, r3, #1
 8004a8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004a92:	693a      	ldr	r2, [r7, #16]
 8004a94:	4313      	orrs	r3, r2
 8004a96:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	693a      	ldr	r2, [r7, #16]
 8004a9c:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004a9e:	683b      	ldr	r3, [r7, #0]
 8004aa0:	685b      	ldr	r3, [r3, #4]
 8004aa2:	f003 0303 	and.w	r3, r3, #3
 8004aa6:	2b02      	cmp	r3, #2
 8004aa8:	d123      	bne.n	8004af2 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004aaa:	697b      	ldr	r3, [r7, #20]
 8004aac:	08da      	lsrs	r2, r3, #3
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	3208      	adds	r2, #8
 8004ab2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004ab6:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8004ab8:	697b      	ldr	r3, [r7, #20]
 8004aba:	f003 0307 	and.w	r3, r3, #7
 8004abe:	009b      	lsls	r3, r3, #2
 8004ac0:	220f      	movs	r2, #15
 8004ac2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ac6:	43db      	mvns	r3, r3
 8004ac8:	693a      	ldr	r2, [r7, #16]
 8004aca:	4013      	ands	r3, r2
 8004acc:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8004ace:	683b      	ldr	r3, [r7, #0]
 8004ad0:	691a      	ldr	r2, [r3, #16]
 8004ad2:	697b      	ldr	r3, [r7, #20]
 8004ad4:	f003 0307 	and.w	r3, r3, #7
 8004ad8:	009b      	lsls	r3, r3, #2
 8004ada:	fa02 f303 	lsl.w	r3, r2, r3
 8004ade:	693a      	ldr	r2, [r7, #16]
 8004ae0:	4313      	orrs	r3, r2
 8004ae2:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004ae4:	697b      	ldr	r3, [r7, #20]
 8004ae6:	08da      	lsrs	r2, r3, #3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	3208      	adds	r2, #8
 8004aec:	6939      	ldr	r1, [r7, #16]
 8004aee:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8004af8:	697b      	ldr	r3, [r7, #20]
 8004afa:	005b      	lsls	r3, r3, #1
 8004afc:	2203      	movs	r2, #3
 8004afe:	fa02 f303 	lsl.w	r3, r2, r3
 8004b02:	43db      	mvns	r3, r3
 8004b04:	693a      	ldr	r2, [r7, #16]
 8004b06:	4013      	ands	r3, r2
 8004b08:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004b0a:	683b      	ldr	r3, [r7, #0]
 8004b0c:	685b      	ldr	r3, [r3, #4]
 8004b0e:	f003 0203 	and.w	r2, r3, #3
 8004b12:	697b      	ldr	r3, [r7, #20]
 8004b14:	005b      	lsls	r3, r3, #1
 8004b16:	fa02 f303 	lsl.w	r3, r2, r3
 8004b1a:	693a      	ldr	r2, [r7, #16]
 8004b1c:	4313      	orrs	r3, r2
 8004b1e:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	693a      	ldr	r2, [r7, #16]
 8004b24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8004b26:	683b      	ldr	r3, [r7, #0]
 8004b28:	685b      	ldr	r3, [r3, #4]
 8004b2a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	f000 80a6 	beq.w	8004c80 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004b34:	4b5b      	ldr	r3, [pc, #364]	; (8004ca4 <HAL_GPIO_Init+0x2e4>)
 8004b36:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b38:	4a5a      	ldr	r2, [pc, #360]	; (8004ca4 <HAL_GPIO_Init+0x2e4>)
 8004b3a:	f043 0301 	orr.w	r3, r3, #1
 8004b3e:	6613      	str	r3, [r2, #96]	; 0x60
 8004b40:	4b58      	ldr	r3, [pc, #352]	; (8004ca4 <HAL_GPIO_Init+0x2e4>)
 8004b42:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004b44:	f003 0301 	and.w	r3, r3, #1
 8004b48:	60bb      	str	r3, [r7, #8]
 8004b4a:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004b4c:	4a56      	ldr	r2, [pc, #344]	; (8004ca8 <HAL_GPIO_Init+0x2e8>)
 8004b4e:	697b      	ldr	r3, [r7, #20]
 8004b50:	089b      	lsrs	r3, r3, #2
 8004b52:	3302      	adds	r3, #2
 8004b54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004b58:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8004b5a:	697b      	ldr	r3, [r7, #20]
 8004b5c:	f003 0303 	and.w	r3, r3, #3
 8004b60:	009b      	lsls	r3, r3, #2
 8004b62:	220f      	movs	r2, #15
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	693a      	ldr	r2, [r7, #16]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8004b76:	d01f      	beq.n	8004bb8 <HAL_GPIO_Init+0x1f8>
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	4a4c      	ldr	r2, [pc, #304]	; (8004cac <HAL_GPIO_Init+0x2ec>)
 8004b7c:	4293      	cmp	r3, r2
 8004b7e:	d019      	beq.n	8004bb4 <HAL_GPIO_Init+0x1f4>
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	4a4b      	ldr	r2, [pc, #300]	; (8004cb0 <HAL_GPIO_Init+0x2f0>)
 8004b84:	4293      	cmp	r3, r2
 8004b86:	d013      	beq.n	8004bb0 <HAL_GPIO_Init+0x1f0>
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	4a4a      	ldr	r2, [pc, #296]	; (8004cb4 <HAL_GPIO_Init+0x2f4>)
 8004b8c:	4293      	cmp	r3, r2
 8004b8e:	d00d      	beq.n	8004bac <HAL_GPIO_Init+0x1ec>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	4a49      	ldr	r2, [pc, #292]	; (8004cb8 <HAL_GPIO_Init+0x2f8>)
 8004b94:	4293      	cmp	r3, r2
 8004b96:	d007      	beq.n	8004ba8 <HAL_GPIO_Init+0x1e8>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	4a48      	ldr	r2, [pc, #288]	; (8004cbc <HAL_GPIO_Init+0x2fc>)
 8004b9c:	4293      	cmp	r3, r2
 8004b9e:	d101      	bne.n	8004ba4 <HAL_GPIO_Init+0x1e4>
 8004ba0:	2305      	movs	r3, #5
 8004ba2:	e00a      	b.n	8004bba <HAL_GPIO_Init+0x1fa>
 8004ba4:	2306      	movs	r3, #6
 8004ba6:	e008      	b.n	8004bba <HAL_GPIO_Init+0x1fa>
 8004ba8:	2304      	movs	r3, #4
 8004baa:	e006      	b.n	8004bba <HAL_GPIO_Init+0x1fa>
 8004bac:	2303      	movs	r3, #3
 8004bae:	e004      	b.n	8004bba <HAL_GPIO_Init+0x1fa>
 8004bb0:	2302      	movs	r3, #2
 8004bb2:	e002      	b.n	8004bba <HAL_GPIO_Init+0x1fa>
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	e000      	b.n	8004bba <HAL_GPIO_Init+0x1fa>
 8004bb8:	2300      	movs	r3, #0
 8004bba:	697a      	ldr	r2, [r7, #20]
 8004bbc:	f002 0203 	and.w	r2, r2, #3
 8004bc0:	0092      	lsls	r2, r2, #2
 8004bc2:	4093      	lsls	r3, r2
 8004bc4:	693a      	ldr	r2, [r7, #16]
 8004bc6:	4313      	orrs	r3, r2
 8004bc8:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004bca:	4937      	ldr	r1, [pc, #220]	; (8004ca8 <HAL_GPIO_Init+0x2e8>)
 8004bcc:	697b      	ldr	r3, [r7, #20]
 8004bce:	089b      	lsrs	r3, r3, #2
 8004bd0:	3302      	adds	r3, #2
 8004bd2:	693a      	ldr	r2, [r7, #16]
 8004bd4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8004bd8:	4b39      	ldr	r3, [pc, #228]	; (8004cc0 <HAL_GPIO_Init+0x300>)
 8004bda:	689b      	ldr	r3, [r3, #8]
 8004bdc:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004bde:	68fb      	ldr	r3, [r7, #12]
 8004be0:	43db      	mvns	r3, r3
 8004be2:	693a      	ldr	r2, [r7, #16]
 8004be4:	4013      	ands	r3, r2
 8004be6:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004be8:	683b      	ldr	r3, [r7, #0]
 8004bea:	685b      	ldr	r3, [r3, #4]
 8004bec:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d003      	beq.n	8004bfc <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004bf4:	693a      	ldr	r2, [r7, #16]
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	4313      	orrs	r3, r2
 8004bfa:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004bfc:	4a30      	ldr	r2, [pc, #192]	; (8004cc0 <HAL_GPIO_Init+0x300>)
 8004bfe:	693b      	ldr	r3, [r7, #16]
 8004c00:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004c02:	4b2f      	ldr	r3, [pc, #188]	; (8004cc0 <HAL_GPIO_Init+0x300>)
 8004c04:	68db      	ldr	r3, [r3, #12]
 8004c06:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	43db      	mvns	r3, r3
 8004c0c:	693a      	ldr	r2, [r7, #16]
 8004c0e:	4013      	ands	r3, r2
 8004c10:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004c12:	683b      	ldr	r3, [r7, #0]
 8004c14:	685b      	ldr	r3, [r3, #4]
 8004c16:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d003      	beq.n	8004c26 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004c1e:	693a      	ldr	r2, [r7, #16]
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	4313      	orrs	r3, r2
 8004c24:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004c26:	4a26      	ldr	r2, [pc, #152]	; (8004cc0 <HAL_GPIO_Init+0x300>)
 8004c28:	693b      	ldr	r3, [r7, #16]
 8004c2a:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004c2c:	4b24      	ldr	r3, [pc, #144]	; (8004cc0 <HAL_GPIO_Init+0x300>)
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	43db      	mvns	r3, r3
 8004c36:	693a      	ldr	r2, [r7, #16]
 8004c38:	4013      	ands	r3, r2
 8004c3a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004c3c:	683b      	ldr	r3, [r7, #0]
 8004c3e:	685b      	ldr	r3, [r3, #4]
 8004c40:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	d003      	beq.n	8004c50 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004c48:	693a      	ldr	r2, [r7, #16]
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	4313      	orrs	r3, r2
 8004c4e:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004c50:	4a1b      	ldr	r2, [pc, #108]	; (8004cc0 <HAL_GPIO_Init+0x300>)
 8004c52:	693b      	ldr	r3, [r7, #16]
 8004c54:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004c56:	4b1a      	ldr	r3, [pc, #104]	; (8004cc0 <HAL_GPIO_Init+0x300>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	43db      	mvns	r3, r3
 8004c60:	693a      	ldr	r2, [r7, #16]
 8004c62:	4013      	ands	r3, r2
 8004c64:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004c66:	683b      	ldr	r3, [r7, #0]
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d003      	beq.n	8004c7a <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004c72:	693a      	ldr	r2, [r7, #16]
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004c7a:	4a11      	ldr	r2, [pc, #68]	; (8004cc0 <HAL_GPIO_Init+0x300>)
 8004c7c:	693b      	ldr	r3, [r7, #16]
 8004c7e:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	3301      	adds	r3, #1
 8004c84:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004c86:	683b      	ldr	r3, [r7, #0]
 8004c88:	681a      	ldr	r2, [r3, #0]
 8004c8a:	697b      	ldr	r3, [r7, #20]
 8004c8c:	fa22 f303 	lsr.w	r3, r2, r3
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	f47f ae9d 	bne.w	80049d0 <HAL_GPIO_Init+0x10>
  }
}
 8004c96:	bf00      	nop
 8004c98:	bf00      	nop
 8004c9a:	371c      	adds	r7, #28
 8004c9c:	46bd      	mov	sp, r7
 8004c9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ca2:	4770      	bx	lr
 8004ca4:	40021000 	.word	0x40021000
 8004ca8:	40010000 	.word	0x40010000
 8004cac:	48000400 	.word	0x48000400
 8004cb0:	48000800 	.word	0x48000800
 8004cb4:	48000c00 	.word	0x48000c00
 8004cb8:	48001000 	.word	0x48001000
 8004cbc:	48001400 	.word	0x48001400
 8004cc0:	40010400 	.word	0x40010400

08004cc4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b083      	sub	sp, #12
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	807b      	strh	r3, [r7, #2]
 8004cd0:	4613      	mov	r3, r2
 8004cd2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004cd4:	787b      	ldrb	r3, [r7, #1]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d003      	beq.n	8004ce2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004cda:	887a      	ldrh	r2, [r7, #2]
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004ce0:	e002      	b.n	8004ce8 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004ce2:	887a      	ldrh	r2, [r7, #2]
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004ce8:	bf00      	nop
 8004cea:	370c      	adds	r7, #12
 8004cec:	46bd      	mov	sp, r7
 8004cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cf2:	4770      	bx	lr

08004cf4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004cf4:	b580      	push	{r7, lr}
 8004cf6:	b082      	sub	sp, #8
 8004cf8:	af00      	add	r7, sp, #0
 8004cfa:	4603      	mov	r3, r0
 8004cfc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004cfe:	4b08      	ldr	r3, [pc, #32]	; (8004d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d00:	695a      	ldr	r2, [r3, #20]
 8004d02:	88fb      	ldrh	r3, [r7, #6]
 8004d04:	4013      	ands	r3, r2
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d006      	beq.n	8004d18 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004d0a:	4a05      	ldr	r2, [pc, #20]	; (8004d20 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004d0c:	88fb      	ldrh	r3, [r7, #6]
 8004d0e:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004d10:	88fb      	ldrh	r3, [r7, #6]
 8004d12:	4618      	mov	r0, r3
 8004d14:	f000 f806 	bl	8004d24 <HAL_GPIO_EXTI_Callback>
  }
}
 8004d18:	bf00      	nop
 8004d1a:	3708      	adds	r7, #8
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	40010400 	.word	0x40010400

08004d24 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004d24:	b480      	push	{r7}
 8004d26:	b083      	sub	sp, #12
 8004d28:	af00      	add	r7, sp, #0
 8004d2a:	4603      	mov	r3, r0
 8004d2c:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004d2e:	bf00      	nop
 8004d30:	370c      	adds	r7, #12
 8004d32:	46bd      	mov	sp, r7
 8004d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d38:	4770      	bx	lr
	...

08004d3c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004d3c:	b480      	push	{r7}
 8004d3e:	b085      	sub	sp, #20
 8004d40:	af00      	add	r7, sp, #0
 8004d42:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	2b00      	cmp	r3, #0
 8004d48:	d141      	bne.n	8004dce <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004d4a:	4b4b      	ldr	r3, [pc, #300]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004d52:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d56:	d131      	bne.n	8004dbc <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004d58:	4b47      	ldr	r3, [pc, #284]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d5a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004d5e:	4a46      	ldr	r2, [pc, #280]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d60:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d64:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004d68:	4b43      	ldr	r3, [pc, #268]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004d70:	4a41      	ldr	r2, [pc, #260]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d72:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004d76:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004d78:	4b40      	ldr	r3, [pc, #256]	; (8004e7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	2232      	movs	r2, #50	; 0x32
 8004d7e:	fb02 f303 	mul.w	r3, r2, r3
 8004d82:	4a3f      	ldr	r2, [pc, #252]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004d84:	fba2 2303 	umull	r2, r3, r2, r3
 8004d88:	0c9b      	lsrs	r3, r3, #18
 8004d8a:	3301      	adds	r3, #1
 8004d8c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d8e:	e002      	b.n	8004d96 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	3b01      	subs	r3, #1
 8004d94:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004d96:	4b38      	ldr	r3, [pc, #224]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004d98:	695b      	ldr	r3, [r3, #20]
 8004d9a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004d9e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004da2:	d102      	bne.n	8004daa <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d1f2      	bne.n	8004d90 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004daa:	4b33      	ldr	r3, [pc, #204]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004db2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004db6:	d158      	bne.n	8004e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004db8:	2303      	movs	r3, #3
 8004dba:	e057      	b.n	8004e6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004dbc:	4b2e      	ldr	r3, [pc, #184]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dbe:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dc2:	4a2d      	ldr	r2, [pc, #180]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dc4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004dc8:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004dcc:	e04d      	b.n	8004e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004dd4:	d141      	bne.n	8004e5a <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004dd6:	4b28      	ldr	r3, [pc, #160]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dd8:	681b      	ldr	r3, [r3, #0]
 8004dda:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004dde:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004de2:	d131      	bne.n	8004e48 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004de4:	4b24      	ldr	r3, [pc, #144]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004de6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004dea:	4a23      	ldr	r2, [pc, #140]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004df0:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004df4:	4b20      	ldr	r3, [pc, #128]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004dfc:	4a1e      	ldr	r2, [pc, #120]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004dfe:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004e02:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004e04:	4b1d      	ldr	r3, [pc, #116]	; (8004e7c <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	2232      	movs	r2, #50	; 0x32
 8004e0a:	fb02 f303 	mul.w	r3, r2, r3
 8004e0e:	4a1c      	ldr	r2, [pc, #112]	; (8004e80 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004e10:	fba2 2303 	umull	r2, r3, r2, r3
 8004e14:	0c9b      	lsrs	r3, r3, #18
 8004e16:	3301      	adds	r3, #1
 8004e18:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e1a:	e002      	b.n	8004e22 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	3b01      	subs	r3, #1
 8004e20:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004e22:	4b15      	ldr	r3, [pc, #84]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e24:	695b      	ldr	r3, [r3, #20]
 8004e26:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e2e:	d102      	bne.n	8004e36 <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d1f2      	bne.n	8004e1c <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004e36:	4b10      	ldr	r3, [pc, #64]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e38:	695b      	ldr	r3, [r3, #20]
 8004e3a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e3e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e42:	d112      	bne.n	8004e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004e44:	2303      	movs	r3, #3
 8004e46:	e011      	b.n	8004e6c <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004e48:	4b0b      	ldr	r3, [pc, #44]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e4a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004e4e:	4a0a      	ldr	r2, [pc, #40]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e50:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e54:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004e58:	e007      	b.n	8004e6a <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004e5a:	4b07      	ldr	r3, [pc, #28]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e5c:	681b      	ldr	r3, [r3, #0]
 8004e5e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004e62:	4a05      	ldr	r2, [pc, #20]	; (8004e78 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004e64:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e68:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004e6a:	2300      	movs	r3, #0
}
 8004e6c:	4618      	mov	r0, r3
 8004e6e:	3714      	adds	r7, #20
 8004e70:	46bd      	mov	sp, r7
 8004e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e76:	4770      	bx	lr
 8004e78:	40007000 	.word	0x40007000
 8004e7c:	20000000 	.word	0x20000000
 8004e80:	431bde83 	.word	0x431bde83

08004e84 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004e84:	b480      	push	{r7}
 8004e86:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004e88:	4b05      	ldr	r3, [pc, #20]	; (8004ea0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e8a:	689b      	ldr	r3, [r3, #8]
 8004e8c:	4a04      	ldr	r2, [pc, #16]	; (8004ea0 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004e8e:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e92:	6093      	str	r3, [r2, #8]
}
 8004e94:	bf00      	nop
 8004e96:	46bd      	mov	sp, r7
 8004e98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9c:	4770      	bx	lr
 8004e9e:	bf00      	nop
 8004ea0:	40007000 	.word	0x40007000

08004ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea4:	b580      	push	{r7, lr}
 8004ea6:	b088      	sub	sp, #32
 8004ea8:	af00      	add	r7, sp, #0
 8004eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d101      	bne.n	8004eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eb2:	2301      	movs	r3, #1
 8004eb4:	e306      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eb6:	687b      	ldr	r3, [r7, #4]
 8004eb8:	681b      	ldr	r3, [r3, #0]
 8004eba:	f003 0301 	and.w	r3, r3, #1
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d075      	beq.n	8004fae <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ec2:	4b97      	ldr	r3, [pc, #604]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004ec4:	689b      	ldr	r3, [r3, #8]
 8004ec6:	f003 030c 	and.w	r3, r3, #12
 8004eca:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004ecc:	4b94      	ldr	r3, [pc, #592]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004ece:	68db      	ldr	r3, [r3, #12]
 8004ed0:	f003 0303 	and.w	r3, r3, #3
 8004ed4:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004ed6:	69bb      	ldr	r3, [r7, #24]
 8004ed8:	2b0c      	cmp	r3, #12
 8004eda:	d102      	bne.n	8004ee2 <HAL_RCC_OscConfig+0x3e>
 8004edc:	697b      	ldr	r3, [r7, #20]
 8004ede:	2b03      	cmp	r3, #3
 8004ee0:	d002      	beq.n	8004ee8 <HAL_RCC_OscConfig+0x44>
 8004ee2:	69bb      	ldr	r3, [r7, #24]
 8004ee4:	2b08      	cmp	r3, #8
 8004ee6:	d10b      	bne.n	8004f00 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ee8:	4b8d      	ldr	r3, [pc, #564]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef0:	2b00      	cmp	r3, #0
 8004ef2:	d05b      	beq.n	8004fac <HAL_RCC_OscConfig+0x108>
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	685b      	ldr	r3, [r3, #4]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d157      	bne.n	8004fac <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004efc:	2301      	movs	r3, #1
 8004efe:	e2e1      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f08:	d106      	bne.n	8004f18 <HAL_RCC_OscConfig+0x74>
 8004f0a:	4b85      	ldr	r3, [pc, #532]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	4a84      	ldr	r2, [pc, #528]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004f10:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f14:	6013      	str	r3, [r2, #0]
 8004f16:	e01d      	b.n	8004f54 <HAL_RCC_OscConfig+0xb0>
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	685b      	ldr	r3, [r3, #4]
 8004f1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f20:	d10c      	bne.n	8004f3c <HAL_RCC_OscConfig+0x98>
 8004f22:	4b7f      	ldr	r3, [pc, #508]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	4a7e      	ldr	r2, [pc, #504]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004f28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f2c:	6013      	str	r3, [r2, #0]
 8004f2e:	4b7c      	ldr	r3, [pc, #496]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4a7b      	ldr	r2, [pc, #492]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004f34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f38:	6013      	str	r3, [r2, #0]
 8004f3a:	e00b      	b.n	8004f54 <HAL_RCC_OscConfig+0xb0>
 8004f3c:	4b78      	ldr	r3, [pc, #480]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	4a77      	ldr	r2, [pc, #476]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004f42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f46:	6013      	str	r3, [r2, #0]
 8004f48:	4b75      	ldr	r3, [pc, #468]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a74      	ldr	r2, [pc, #464]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004f4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	685b      	ldr	r3, [r3, #4]
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	d013      	beq.n	8004f84 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f5c:	f7fd fcac 	bl	80028b8 <HAL_GetTick>
 8004f60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f62:	e008      	b.n	8004f76 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f64:	f7fd fca8 	bl	80028b8 <HAL_GetTick>
 8004f68:	4602      	mov	r2, r0
 8004f6a:	693b      	ldr	r3, [r7, #16]
 8004f6c:	1ad3      	subs	r3, r2, r3
 8004f6e:	2b64      	cmp	r3, #100	; 0x64
 8004f70:	d901      	bls.n	8004f76 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f72:	2303      	movs	r3, #3
 8004f74:	e2a6      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004f76:	4b6a      	ldr	r3, [pc, #424]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004f78:	681b      	ldr	r3, [r3, #0]
 8004f7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d0f0      	beq.n	8004f64 <HAL_RCC_OscConfig+0xc0>
 8004f82:	e014      	b.n	8004fae <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f84:	f7fd fc98 	bl	80028b8 <HAL_GetTick>
 8004f88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f8a:	e008      	b.n	8004f9e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004f8c:	f7fd fc94 	bl	80028b8 <HAL_GetTick>
 8004f90:	4602      	mov	r2, r0
 8004f92:	693b      	ldr	r3, [r7, #16]
 8004f94:	1ad3      	subs	r3, r2, r3
 8004f96:	2b64      	cmp	r3, #100	; 0x64
 8004f98:	d901      	bls.n	8004f9e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f9a:	2303      	movs	r3, #3
 8004f9c:	e292      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004f9e:	4b60      	ldr	r3, [pc, #384]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d1f0      	bne.n	8004f8c <HAL_RCC_OscConfig+0xe8>
 8004faa:	e000      	b.n	8004fae <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fae:	687b      	ldr	r3, [r7, #4]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f003 0302 	and.w	r3, r3, #2
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d075      	beq.n	80050a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004fba:	4b59      	ldr	r3, [pc, #356]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004fbc:	689b      	ldr	r3, [r3, #8]
 8004fbe:	f003 030c 	and.w	r3, r3, #12
 8004fc2:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004fc4:	4b56      	ldr	r3, [pc, #344]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004fc6:	68db      	ldr	r3, [r3, #12]
 8004fc8:	f003 0303 	and.w	r3, r3, #3
 8004fcc:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b0c      	cmp	r3, #12
 8004fd2:	d102      	bne.n	8004fda <HAL_RCC_OscConfig+0x136>
 8004fd4:	697b      	ldr	r3, [r7, #20]
 8004fd6:	2b02      	cmp	r3, #2
 8004fd8:	d002      	beq.n	8004fe0 <HAL_RCC_OscConfig+0x13c>
 8004fda:	69bb      	ldr	r3, [r7, #24]
 8004fdc:	2b04      	cmp	r3, #4
 8004fde:	d11f      	bne.n	8005020 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004fe0:	4b4f      	ldr	r3, [pc, #316]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004fe2:	681b      	ldr	r3, [r3, #0]
 8004fe4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe8:	2b00      	cmp	r3, #0
 8004fea:	d005      	beq.n	8004ff8 <HAL_RCC_OscConfig+0x154>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	68db      	ldr	r3, [r3, #12]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d101      	bne.n	8004ff8 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004ff4:	2301      	movs	r3, #1
 8004ff6:	e265      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ff8:	4b49      	ldr	r3, [pc, #292]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8004ffa:	685b      	ldr	r3, [r3, #4]
 8004ffc:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	691b      	ldr	r3, [r3, #16]
 8005004:	061b      	lsls	r3, r3, #24
 8005006:	4946      	ldr	r1, [pc, #280]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8005008:	4313      	orrs	r3, r2
 800500a:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 800500c:	4b45      	ldr	r3, [pc, #276]	; (8005124 <HAL_RCC_OscConfig+0x280>)
 800500e:	681b      	ldr	r3, [r3, #0]
 8005010:	4618      	mov	r0, r3
 8005012:	f7fc fc41 	bl	8001898 <HAL_InitTick>
 8005016:	4603      	mov	r3, r0
 8005018:	2b00      	cmp	r3, #0
 800501a:	d043      	beq.n	80050a4 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 800501c:	2301      	movs	r3, #1
 800501e:	e251      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	68db      	ldr	r3, [r3, #12]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d023      	beq.n	8005070 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005028:	4b3d      	ldr	r3, [pc, #244]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a3c      	ldr	r2, [pc, #240]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 800502e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005032:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005034:	f7fd fc40 	bl	80028b8 <HAL_GetTick>
 8005038:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800503a:	e008      	b.n	800504e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800503c:	f7fd fc3c 	bl	80028b8 <HAL_GetTick>
 8005040:	4602      	mov	r2, r0
 8005042:	693b      	ldr	r3, [r7, #16]
 8005044:	1ad3      	subs	r3, r2, r3
 8005046:	2b02      	cmp	r3, #2
 8005048:	d901      	bls.n	800504e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800504a:	2303      	movs	r3, #3
 800504c:	e23a      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800504e:	4b34      	ldr	r3, [pc, #208]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8005050:	681b      	ldr	r3, [r3, #0]
 8005052:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005056:	2b00      	cmp	r3, #0
 8005058:	d0f0      	beq.n	800503c <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800505a:	4b31      	ldr	r3, [pc, #196]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 800505c:	685b      	ldr	r3, [r3, #4]
 800505e:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	691b      	ldr	r3, [r3, #16]
 8005066:	061b      	lsls	r3, r3, #24
 8005068:	492d      	ldr	r1, [pc, #180]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 800506a:	4313      	orrs	r3, r2
 800506c:	604b      	str	r3, [r1, #4]
 800506e:	e01a      	b.n	80050a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005070:	4b2b      	ldr	r3, [pc, #172]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8005072:	681b      	ldr	r3, [r3, #0]
 8005074:	4a2a      	ldr	r2, [pc, #168]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8005076:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800507a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800507c:	f7fd fc1c 	bl	80028b8 <HAL_GetTick>
 8005080:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005082:	e008      	b.n	8005096 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005084:	f7fd fc18 	bl	80028b8 <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e216      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8005096:	4b22      	ldr	r3, [pc, #136]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1f0      	bne.n	8005084 <HAL_RCC_OscConfig+0x1e0>
 80050a2:	e000      	b.n	80050a6 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80050a4:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f003 0308 	and.w	r3, r3, #8
 80050ae:	2b00      	cmp	r3, #0
 80050b0:	d041      	beq.n	8005136 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	695b      	ldr	r3, [r3, #20]
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d01c      	beq.n	80050f4 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80050ba:	4b19      	ldr	r3, [pc, #100]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 80050bc:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050c0:	4a17      	ldr	r2, [pc, #92]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 80050c2:	f043 0301 	orr.w	r3, r3, #1
 80050c6:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050ca:	f7fd fbf5 	bl	80028b8 <HAL_GetTick>
 80050ce:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050d0:	e008      	b.n	80050e4 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80050d2:	f7fd fbf1 	bl	80028b8 <HAL_GetTick>
 80050d6:	4602      	mov	r2, r0
 80050d8:	693b      	ldr	r3, [r7, #16]
 80050da:	1ad3      	subs	r3, r2, r3
 80050dc:	2b02      	cmp	r3, #2
 80050de:	d901      	bls.n	80050e4 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80050e0:	2303      	movs	r3, #3
 80050e2:	e1ef      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80050e4:	4b0e      	ldr	r3, [pc, #56]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 80050e6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050ea:	f003 0302 	and.w	r3, r3, #2
 80050ee:	2b00      	cmp	r3, #0
 80050f0:	d0ef      	beq.n	80050d2 <HAL_RCC_OscConfig+0x22e>
 80050f2:	e020      	b.n	8005136 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050f4:	4b0a      	ldr	r3, [pc, #40]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 80050f6:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80050fa:	4a09      	ldr	r2, [pc, #36]	; (8005120 <HAL_RCC_OscConfig+0x27c>)
 80050fc:	f023 0301 	bic.w	r3, r3, #1
 8005100:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005104:	f7fd fbd8 	bl	80028b8 <HAL_GetTick>
 8005108:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 800510a:	e00d      	b.n	8005128 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800510c:	f7fd fbd4 	bl	80028b8 <HAL_GetTick>
 8005110:	4602      	mov	r2, r0
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	1ad3      	subs	r3, r2, r3
 8005116:	2b02      	cmp	r3, #2
 8005118:	d906      	bls.n	8005128 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 800511a:	2303      	movs	r3, #3
 800511c:	e1d2      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
 800511e:	bf00      	nop
 8005120:	40021000 	.word	0x40021000
 8005124:	200000c8 	.word	0x200000c8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8005128:	4b8c      	ldr	r3, [pc, #560]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 800512a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d1ea      	bne.n	800510c <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	f003 0304 	and.w	r3, r3, #4
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 80a6 	beq.w	8005290 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005144:	2300      	movs	r3, #0
 8005146:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8005148:	4b84      	ldr	r3, [pc, #528]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 800514a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800514c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005150:	2b00      	cmp	r3, #0
 8005152:	d101      	bne.n	8005158 <HAL_RCC_OscConfig+0x2b4>
 8005154:	2301      	movs	r3, #1
 8005156:	e000      	b.n	800515a <HAL_RCC_OscConfig+0x2b6>
 8005158:	2300      	movs	r3, #0
 800515a:	2b00      	cmp	r3, #0
 800515c:	d00d      	beq.n	800517a <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800515e:	4b7f      	ldr	r3, [pc, #508]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 8005160:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005162:	4a7e      	ldr	r2, [pc, #504]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 8005164:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005168:	6593      	str	r3, [r2, #88]	; 0x58
 800516a:	4b7c      	ldr	r3, [pc, #496]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 800516c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800516e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8005176:	2301      	movs	r3, #1
 8005178:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800517a:	4b79      	ldr	r3, [pc, #484]	; (8005360 <HAL_RCC_OscConfig+0x4bc>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005182:	2b00      	cmp	r3, #0
 8005184:	d118      	bne.n	80051b8 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8005186:	4b76      	ldr	r3, [pc, #472]	; (8005360 <HAL_RCC_OscConfig+0x4bc>)
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	4a75      	ldr	r2, [pc, #468]	; (8005360 <HAL_RCC_OscConfig+0x4bc>)
 800518c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005190:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005192:	f7fd fb91 	bl	80028b8 <HAL_GetTick>
 8005196:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8005198:	e008      	b.n	80051ac <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800519a:	f7fd fb8d 	bl	80028b8 <HAL_GetTick>
 800519e:	4602      	mov	r2, r0
 80051a0:	693b      	ldr	r3, [r7, #16]
 80051a2:	1ad3      	subs	r3, r2, r3
 80051a4:	2b02      	cmp	r3, #2
 80051a6:	d901      	bls.n	80051ac <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 80051a8:	2303      	movs	r3, #3
 80051aa:	e18b      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80051ac:	4b6c      	ldr	r3, [pc, #432]	; (8005360 <HAL_RCC_OscConfig+0x4bc>)
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d0f0      	beq.n	800519a <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	689b      	ldr	r3, [r3, #8]
 80051bc:	2b01      	cmp	r3, #1
 80051be:	d108      	bne.n	80051d2 <HAL_RCC_OscConfig+0x32e>
 80051c0:	4b66      	ldr	r3, [pc, #408]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 80051c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051c6:	4a65      	ldr	r2, [pc, #404]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 80051c8:	f043 0301 	orr.w	r3, r3, #1
 80051cc:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051d0:	e024      	b.n	800521c <HAL_RCC_OscConfig+0x378>
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	2b05      	cmp	r3, #5
 80051d8:	d110      	bne.n	80051fc <HAL_RCC_OscConfig+0x358>
 80051da:	4b60      	ldr	r3, [pc, #384]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 80051dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051e0:	4a5e      	ldr	r2, [pc, #376]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 80051e2:	f043 0304 	orr.w	r3, r3, #4
 80051e6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051ea:	4b5c      	ldr	r3, [pc, #368]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 80051ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80051f0:	4a5a      	ldr	r2, [pc, #360]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 80051f2:	f043 0301 	orr.w	r3, r3, #1
 80051f6:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80051fa:	e00f      	b.n	800521c <HAL_RCC_OscConfig+0x378>
 80051fc:	4b57      	ldr	r3, [pc, #348]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 80051fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005202:	4a56      	ldr	r2, [pc, #344]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 8005204:	f023 0301 	bic.w	r3, r3, #1
 8005208:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800520c:	4b53      	ldr	r3, [pc, #332]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 800520e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005212:	4a52      	ldr	r2, [pc, #328]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 8005214:	f023 0304 	bic.w	r3, r3, #4
 8005218:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	2b00      	cmp	r3, #0
 8005222:	d016      	beq.n	8005252 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005224:	f7fd fb48 	bl	80028b8 <HAL_GetTick>
 8005228:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800522a:	e00a      	b.n	8005242 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800522c:	f7fd fb44 	bl	80028b8 <HAL_GetTick>
 8005230:	4602      	mov	r2, r0
 8005232:	693b      	ldr	r3, [r7, #16]
 8005234:	1ad3      	subs	r3, r2, r3
 8005236:	f241 3288 	movw	r2, #5000	; 0x1388
 800523a:	4293      	cmp	r3, r2
 800523c:	d901      	bls.n	8005242 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800523e:	2303      	movs	r3, #3
 8005240:	e140      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005242:	4b46      	ldr	r3, [pc, #280]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 8005244:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005248:	f003 0302 	and.w	r3, r3, #2
 800524c:	2b00      	cmp	r3, #0
 800524e:	d0ed      	beq.n	800522c <HAL_RCC_OscConfig+0x388>
 8005250:	e015      	b.n	800527e <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005252:	f7fd fb31 	bl	80028b8 <HAL_GetTick>
 8005256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005258:	e00a      	b.n	8005270 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800525a:	f7fd fb2d 	bl	80028b8 <HAL_GetTick>
 800525e:	4602      	mov	r2, r0
 8005260:	693b      	ldr	r3, [r7, #16]
 8005262:	1ad3      	subs	r3, r2, r3
 8005264:	f241 3288 	movw	r2, #5000	; 0x1388
 8005268:	4293      	cmp	r3, r2
 800526a:	d901      	bls.n	8005270 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 800526c:	2303      	movs	r3, #3
 800526e:	e129      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005270:	4b3a      	ldr	r3, [pc, #232]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 8005272:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005276:	f003 0302 	and.w	r3, r3, #2
 800527a:	2b00      	cmp	r3, #0
 800527c:	d1ed      	bne.n	800525a <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800527e:	7ffb      	ldrb	r3, [r7, #31]
 8005280:	2b01      	cmp	r3, #1
 8005282:	d105      	bne.n	8005290 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005284:	4b35      	ldr	r3, [pc, #212]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 8005286:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005288:	4a34      	ldr	r2, [pc, #208]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 800528a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800528e:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f003 0320 	and.w	r3, r3, #32
 8005298:	2b00      	cmp	r3, #0
 800529a:	d03c      	beq.n	8005316 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	699b      	ldr	r3, [r3, #24]
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d01c      	beq.n	80052de <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80052a4:	4b2d      	ldr	r3, [pc, #180]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 80052a6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052aa:	4a2c      	ldr	r2, [pc, #176]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 80052ac:	f043 0301 	orr.w	r3, r3, #1
 80052b0:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052b4:	f7fd fb00 	bl	80028b8 <HAL_GetTick>
 80052b8:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052ba:	e008      	b.n	80052ce <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052bc:	f7fd fafc 	bl	80028b8 <HAL_GetTick>
 80052c0:	4602      	mov	r2, r0
 80052c2:	693b      	ldr	r3, [r7, #16]
 80052c4:	1ad3      	subs	r3, r2, r3
 80052c6:	2b02      	cmp	r3, #2
 80052c8:	d901      	bls.n	80052ce <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80052ca:	2303      	movs	r3, #3
 80052cc:	e0fa      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80052ce:	4b23      	ldr	r3, [pc, #140]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 80052d0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052d4:	f003 0302 	and.w	r3, r3, #2
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0ef      	beq.n	80052bc <HAL_RCC_OscConfig+0x418>
 80052dc:	e01b      	b.n	8005316 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80052de:	4b1f      	ldr	r3, [pc, #124]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 80052e0:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80052e4:	4a1d      	ldr	r2, [pc, #116]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 80052e6:	f023 0301 	bic.w	r3, r3, #1
 80052ea:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80052ee:	f7fd fae3 	bl	80028b8 <HAL_GetTick>
 80052f2:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80052f4:	e008      	b.n	8005308 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80052f6:	f7fd fadf 	bl	80028b8 <HAL_GetTick>
 80052fa:	4602      	mov	r2, r0
 80052fc:	693b      	ldr	r3, [r7, #16]
 80052fe:	1ad3      	subs	r3, r2, r3
 8005300:	2b02      	cmp	r3, #2
 8005302:	d901      	bls.n	8005308 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005304:	2303      	movs	r3, #3
 8005306:	e0dd      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005308:	4b14      	ldr	r3, [pc, #80]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 800530a:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d1ef      	bne.n	80052f6 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	69db      	ldr	r3, [r3, #28]
 800531a:	2b00      	cmp	r3, #0
 800531c:	f000 80d1 	beq.w	80054c2 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005320:	4b0e      	ldr	r3, [pc, #56]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f003 030c 	and.w	r3, r3, #12
 8005328:	2b0c      	cmp	r3, #12
 800532a:	f000 808b 	beq.w	8005444 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	69db      	ldr	r3, [r3, #28]
 8005332:	2b02      	cmp	r3, #2
 8005334:	d15e      	bne.n	80053f4 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005336:	4b09      	ldr	r3, [pc, #36]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	4a08      	ldr	r2, [pc, #32]	; (800535c <HAL_RCC_OscConfig+0x4b8>)
 800533c:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005340:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005342:	f7fd fab9 	bl	80028b8 <HAL_GetTick>
 8005346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005348:	e00c      	b.n	8005364 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800534a:	f7fd fab5 	bl	80028b8 <HAL_GetTick>
 800534e:	4602      	mov	r2, r0
 8005350:	693b      	ldr	r3, [r7, #16]
 8005352:	1ad3      	subs	r3, r2, r3
 8005354:	2b02      	cmp	r3, #2
 8005356:	d905      	bls.n	8005364 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8005358:	2303      	movs	r3, #3
 800535a:	e0b3      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
 800535c:	40021000 	.word	0x40021000
 8005360:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005364:	4b59      	ldr	r3, [pc, #356]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536c:	2b00      	cmp	r3, #0
 800536e:	d1ec      	bne.n	800534a <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005370:	4b56      	ldr	r3, [pc, #344]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	4b56      	ldr	r3, [pc, #344]	; (80054d0 <HAL_RCC_OscConfig+0x62c>)
 8005376:	4013      	ands	r3, r2
 8005378:	687a      	ldr	r2, [r7, #4]
 800537a:	6a11      	ldr	r1, [r2, #32]
 800537c:	687a      	ldr	r2, [r7, #4]
 800537e:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005380:	3a01      	subs	r2, #1
 8005382:	0112      	lsls	r2, r2, #4
 8005384:	4311      	orrs	r1, r2
 8005386:	687a      	ldr	r2, [r7, #4]
 8005388:	6a92      	ldr	r2, [r2, #40]	; 0x28
 800538a:	0212      	lsls	r2, r2, #8
 800538c:	4311      	orrs	r1, r2
 800538e:	687a      	ldr	r2, [r7, #4]
 8005390:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8005392:	0852      	lsrs	r2, r2, #1
 8005394:	3a01      	subs	r2, #1
 8005396:	0552      	lsls	r2, r2, #21
 8005398:	4311      	orrs	r1, r2
 800539a:	687a      	ldr	r2, [r7, #4]
 800539c:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800539e:	0852      	lsrs	r2, r2, #1
 80053a0:	3a01      	subs	r2, #1
 80053a2:	0652      	lsls	r2, r2, #25
 80053a4:	4311      	orrs	r1, r2
 80053a6:	687a      	ldr	r2, [r7, #4]
 80053a8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80053aa:	06d2      	lsls	r2, r2, #27
 80053ac:	430a      	orrs	r2, r1
 80053ae:	4947      	ldr	r1, [pc, #284]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 80053b0:	4313      	orrs	r3, r2
 80053b2:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80053b4:	4b45      	ldr	r3, [pc, #276]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 80053b6:	681b      	ldr	r3, [r3, #0]
 80053b8:	4a44      	ldr	r2, [pc, #272]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 80053ba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053be:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80053c0:	4b42      	ldr	r3, [pc, #264]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 80053c2:	68db      	ldr	r3, [r3, #12]
 80053c4:	4a41      	ldr	r2, [pc, #260]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 80053c6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80053ca:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053cc:	f7fd fa74 	bl	80028b8 <HAL_GetTick>
 80053d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053d2:	e008      	b.n	80053e6 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80053d4:	f7fd fa70 	bl	80028b8 <HAL_GetTick>
 80053d8:	4602      	mov	r2, r0
 80053da:	693b      	ldr	r3, [r7, #16]
 80053dc:	1ad3      	subs	r3, r2, r3
 80053de:	2b02      	cmp	r3, #2
 80053e0:	d901      	bls.n	80053e6 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80053e2:	2303      	movs	r3, #3
 80053e4:	e06e      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80053e6:	4b39      	ldr	r3, [pc, #228]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d0f0      	beq.n	80053d4 <HAL_RCC_OscConfig+0x530>
 80053f2:	e066      	b.n	80054c2 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80053f4:	4b35      	ldr	r3, [pc, #212]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a34      	ldr	r2, [pc, #208]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 80053fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053fe:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005400:	4b32      	ldr	r3, [pc, #200]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 8005402:	68db      	ldr	r3, [r3, #12]
 8005404:	4a31      	ldr	r2, [pc, #196]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 8005406:	f023 0303 	bic.w	r3, r3, #3
 800540a:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 800540c:	4b2f      	ldr	r3, [pc, #188]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 800540e:	68db      	ldr	r3, [r3, #12]
 8005410:	4a2e      	ldr	r2, [pc, #184]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 8005412:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 8005416:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800541a:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800541c:	f7fd fa4c 	bl	80028b8 <HAL_GetTick>
 8005420:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005422:	e008      	b.n	8005436 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005424:	f7fd fa48 	bl	80028b8 <HAL_GetTick>
 8005428:	4602      	mov	r2, r0
 800542a:	693b      	ldr	r3, [r7, #16]
 800542c:	1ad3      	subs	r3, r2, r3
 800542e:	2b02      	cmp	r3, #2
 8005430:	d901      	bls.n	8005436 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005432:	2303      	movs	r3, #3
 8005434:	e046      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005436:	4b25      	ldr	r3, [pc, #148]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d1f0      	bne.n	8005424 <HAL_RCC_OscConfig+0x580>
 8005442:	e03e      	b.n	80054c2 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005444:	687b      	ldr	r3, [r7, #4]
 8005446:	69db      	ldr	r3, [r3, #28]
 8005448:	2b01      	cmp	r3, #1
 800544a:	d101      	bne.n	8005450 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 800544c:	2301      	movs	r3, #1
 800544e:	e039      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005450:	4b1e      	ldr	r3, [pc, #120]	; (80054cc <HAL_RCC_OscConfig+0x628>)
 8005452:	68db      	ldr	r3, [r3, #12]
 8005454:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f003 0203 	and.w	r2, r3, #3
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	6a1b      	ldr	r3, [r3, #32]
 8005460:	429a      	cmp	r2, r3
 8005462:	d12c      	bne.n	80054be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005464:	697b      	ldr	r3, [r7, #20]
 8005466:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	3b01      	subs	r3, #1
 8005470:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005472:	429a      	cmp	r2, r3
 8005474:	d123      	bne.n	80054be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005476:	697b      	ldr	r3, [r7, #20]
 8005478:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005480:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005482:	429a      	cmp	r2, r3
 8005484:	d11b      	bne.n	80054be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8005486:	697b      	ldr	r3, [r7, #20]
 8005488:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005490:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8005492:	429a      	cmp	r2, r3
 8005494:	d113      	bne.n	80054be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8005496:	697b      	ldr	r3, [r7, #20]
 8005498:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	085b      	lsrs	r3, r3, #1
 80054a2:	3b01      	subs	r3, #1
 80054a4:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d109      	bne.n	80054be <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80054aa:	697b      	ldr	r3, [r7, #20]
 80054ac:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80054b4:	085b      	lsrs	r3, r3, #1
 80054b6:	3b01      	subs	r3, #1
 80054b8:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80054ba:	429a      	cmp	r2, r3
 80054bc:	d001      	beq.n	80054c2 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80054be:	2301      	movs	r3, #1
 80054c0:	e000      	b.n	80054c4 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80054c2:	2300      	movs	r3, #0
}
 80054c4:	4618      	mov	r0, r3
 80054c6:	3720      	adds	r7, #32
 80054c8:	46bd      	mov	sp, r7
 80054ca:	bd80      	pop	{r7, pc}
 80054cc:	40021000 	.word	0x40021000
 80054d0:	019f800c 	.word	0x019f800c

080054d4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80054d4:	b580      	push	{r7, lr}
 80054d6:	b086      	sub	sp, #24
 80054d8:	af00      	add	r7, sp, #0
 80054da:	6078      	str	r0, [r7, #4]
 80054dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80054de:	2300      	movs	r3, #0
 80054e0:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	2b00      	cmp	r3, #0
 80054e6:	d101      	bne.n	80054ec <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80054e8:	2301      	movs	r3, #1
 80054ea:	e11e      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80054ec:	4b91      	ldr	r3, [pc, #580]	; (8005734 <HAL_RCC_ClockConfig+0x260>)
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	f003 030f 	and.w	r3, r3, #15
 80054f4:	683a      	ldr	r2, [r7, #0]
 80054f6:	429a      	cmp	r2, r3
 80054f8:	d910      	bls.n	800551c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054fa:	4b8e      	ldr	r3, [pc, #568]	; (8005734 <HAL_RCC_ClockConfig+0x260>)
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	f023 020f 	bic.w	r2, r3, #15
 8005502:	498c      	ldr	r1, [pc, #560]	; (8005734 <HAL_RCC_ClockConfig+0x260>)
 8005504:	683b      	ldr	r3, [r7, #0]
 8005506:	4313      	orrs	r3, r2
 8005508:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800550a:	4b8a      	ldr	r3, [pc, #552]	; (8005734 <HAL_RCC_ClockConfig+0x260>)
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	f003 030f 	and.w	r3, r3, #15
 8005512:	683a      	ldr	r2, [r7, #0]
 8005514:	429a      	cmp	r2, r3
 8005516:	d001      	beq.n	800551c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8005518:	2301      	movs	r3, #1
 800551a:	e106      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f003 0301 	and.w	r3, r3, #1
 8005524:	2b00      	cmp	r3, #0
 8005526:	d073      	beq.n	8005610 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	685b      	ldr	r3, [r3, #4]
 800552c:	2b03      	cmp	r3, #3
 800552e:	d129      	bne.n	8005584 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005530:	4b81      	ldr	r3, [pc, #516]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005538:	2b00      	cmp	r3, #0
 800553a:	d101      	bne.n	8005540 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 800553c:	2301      	movs	r3, #1
 800553e:	e0f4      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005540:	f000 f9d0 	bl	80058e4 <RCC_GetSysClockFreqFromPLLSource>
 8005544:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	4a7c      	ldr	r2, [pc, #496]	; (800573c <HAL_RCC_ClockConfig+0x268>)
 800554a:	4293      	cmp	r3, r2
 800554c:	d93f      	bls.n	80055ce <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 800554e:	4b7a      	ldr	r3, [pc, #488]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005550:	689b      	ldr	r3, [r3, #8]
 8005552:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d009      	beq.n	800556e <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	681b      	ldr	r3, [r3, #0]
 800555e:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005562:	2b00      	cmp	r3, #0
 8005564:	d033      	beq.n	80055ce <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800556a:	2b00      	cmp	r3, #0
 800556c:	d12f      	bne.n	80055ce <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 800556e:	4b72      	ldr	r3, [pc, #456]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005570:	689b      	ldr	r3, [r3, #8]
 8005572:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005576:	4a70      	ldr	r2, [pc, #448]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005578:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800557c:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 800557e:	2380      	movs	r3, #128	; 0x80
 8005580:	617b      	str	r3, [r7, #20]
 8005582:	e024      	b.n	80055ce <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	685b      	ldr	r3, [r3, #4]
 8005588:	2b02      	cmp	r3, #2
 800558a:	d107      	bne.n	800559c <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800558c:	4b6a      	ldr	r3, [pc, #424]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005594:	2b00      	cmp	r3, #0
 8005596:	d109      	bne.n	80055ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8005598:	2301      	movs	r3, #1
 800559a:	e0c6      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800559c:	4b66      	ldr	r3, [pc, #408]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d101      	bne.n	80055ac <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80055a8:	2301      	movs	r3, #1
 80055aa:	e0be      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80055ac:	f000 f8ce 	bl	800574c <HAL_RCC_GetSysClockFreq>
 80055b0:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80055b2:	693b      	ldr	r3, [r7, #16]
 80055b4:	4a61      	ldr	r2, [pc, #388]	; (800573c <HAL_RCC_ClockConfig+0x268>)
 80055b6:	4293      	cmp	r3, r2
 80055b8:	d909      	bls.n	80055ce <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80055ba:	4b5f      	ldr	r3, [pc, #380]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 80055bc:	689b      	ldr	r3, [r3, #8]
 80055be:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80055c2:	4a5d      	ldr	r2, [pc, #372]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 80055c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80055c8:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80055ca:	2380      	movs	r3, #128	; 0x80
 80055cc:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80055ce:	4b5a      	ldr	r3, [pc, #360]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 80055d0:	689b      	ldr	r3, [r3, #8]
 80055d2:	f023 0203 	bic.w	r2, r3, #3
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	4957      	ldr	r1, [pc, #348]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 80055dc:	4313      	orrs	r3, r2
 80055de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80055e0:	f7fd f96a 	bl	80028b8 <HAL_GetTick>
 80055e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055e6:	e00a      	b.n	80055fe <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80055e8:	f7fd f966 	bl	80028b8 <HAL_GetTick>
 80055ec:	4602      	mov	r2, r0
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	1ad3      	subs	r3, r2, r3
 80055f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80055f6:	4293      	cmp	r3, r2
 80055f8:	d901      	bls.n	80055fe <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 80055fa:	2303      	movs	r3, #3
 80055fc:	e095      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80055fe:	4b4e      	ldr	r3, [pc, #312]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005600:	689b      	ldr	r3, [r3, #8]
 8005602:	f003 020c 	and.w	r2, r3, #12
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	429a      	cmp	r2, r3
 800560e:	d1eb      	bne.n	80055e8 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f003 0302 	and.w	r3, r3, #2
 8005618:	2b00      	cmp	r3, #0
 800561a:	d023      	beq.n	8005664 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 0304 	and.w	r3, r3, #4
 8005624:	2b00      	cmp	r3, #0
 8005626:	d005      	beq.n	8005634 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005628:	4b43      	ldr	r3, [pc, #268]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	4a42      	ldr	r2, [pc, #264]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 800562e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005632:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f003 0308 	and.w	r3, r3, #8
 800563c:	2b00      	cmp	r3, #0
 800563e:	d007      	beq.n	8005650 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005640:	4b3d      	ldr	r3, [pc, #244]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005642:	689b      	ldr	r3, [r3, #8]
 8005644:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8005648:	4a3b      	ldr	r2, [pc, #236]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 800564a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800564e:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005650:	4b39      	ldr	r3, [pc, #228]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005652:	689b      	ldr	r3, [r3, #8]
 8005654:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	689b      	ldr	r3, [r3, #8]
 800565c:	4936      	ldr	r1, [pc, #216]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 800565e:	4313      	orrs	r3, r2
 8005660:	608b      	str	r3, [r1, #8]
 8005662:	e008      	b.n	8005676 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005664:	697b      	ldr	r3, [r7, #20]
 8005666:	2b80      	cmp	r3, #128	; 0x80
 8005668:	d105      	bne.n	8005676 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800566a:	4b33      	ldr	r3, [pc, #204]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	4a32      	ldr	r2, [pc, #200]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005670:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005674:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005676:	4b2f      	ldr	r3, [pc, #188]	; (8005734 <HAL_RCC_ClockConfig+0x260>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 030f 	and.w	r3, r3, #15
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d21d      	bcs.n	80056c0 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005684:	4b2b      	ldr	r3, [pc, #172]	; (8005734 <HAL_RCC_ClockConfig+0x260>)
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	f023 020f 	bic.w	r2, r3, #15
 800568c:	4929      	ldr	r1, [pc, #164]	; (8005734 <HAL_RCC_ClockConfig+0x260>)
 800568e:	683b      	ldr	r3, [r7, #0]
 8005690:	4313      	orrs	r3, r2
 8005692:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8005694:	f7fd f910 	bl	80028b8 <HAL_GetTick>
 8005698:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 800569a:	e00a      	b.n	80056b2 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800569c:	f7fd f90c 	bl	80028b8 <HAL_GetTick>
 80056a0:	4602      	mov	r2, r0
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	1ad3      	subs	r3, r2, r3
 80056a6:	f241 3288 	movw	r2, #5000	; 0x1388
 80056aa:	4293      	cmp	r3, r2
 80056ac:	d901      	bls.n	80056b2 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80056ae:	2303      	movs	r3, #3
 80056b0:	e03b      	b.n	800572a <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80056b2:	4b20      	ldr	r3, [pc, #128]	; (8005734 <HAL_RCC_ClockConfig+0x260>)
 80056b4:	681b      	ldr	r3, [r3, #0]
 80056b6:	f003 030f 	and.w	r3, r3, #15
 80056ba:	683a      	ldr	r2, [r7, #0]
 80056bc:	429a      	cmp	r2, r3
 80056be:	d1ed      	bne.n	800569c <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80056c0:	687b      	ldr	r3, [r7, #4]
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f003 0304 	and.w	r3, r3, #4
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d008      	beq.n	80056de <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80056cc:	4b1a      	ldr	r3, [pc, #104]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	68db      	ldr	r3, [r3, #12]
 80056d8:	4917      	ldr	r1, [pc, #92]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 80056da:	4313      	orrs	r3, r2
 80056dc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f003 0308 	and.w	r3, r3, #8
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d009      	beq.n	80056fe <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056ea:	4b13      	ldr	r3, [pc, #76]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 80056ec:	689b      	ldr	r3, [r3, #8]
 80056ee:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	00db      	lsls	r3, r3, #3
 80056f8:	490f      	ldr	r1, [pc, #60]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 80056fa:	4313      	orrs	r3, r2
 80056fc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80056fe:	f000 f825 	bl	800574c <HAL_RCC_GetSysClockFreq>
 8005702:	4602      	mov	r2, r0
 8005704:	4b0c      	ldr	r3, [pc, #48]	; (8005738 <HAL_RCC_ClockConfig+0x264>)
 8005706:	689b      	ldr	r3, [r3, #8]
 8005708:	091b      	lsrs	r3, r3, #4
 800570a:	f003 030f 	and.w	r3, r3, #15
 800570e:	490c      	ldr	r1, [pc, #48]	; (8005740 <HAL_RCC_ClockConfig+0x26c>)
 8005710:	5ccb      	ldrb	r3, [r1, r3]
 8005712:	f003 031f 	and.w	r3, r3, #31
 8005716:	fa22 f303 	lsr.w	r3, r2, r3
 800571a:	4a0a      	ldr	r2, [pc, #40]	; (8005744 <HAL_RCC_ClockConfig+0x270>)
 800571c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 800571e:	4b0a      	ldr	r3, [pc, #40]	; (8005748 <HAL_RCC_ClockConfig+0x274>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	4618      	mov	r0, r3
 8005724:	f7fc f8b8 	bl	8001898 <HAL_InitTick>
 8005728:	4603      	mov	r3, r0
}
 800572a:	4618      	mov	r0, r3
 800572c:	3718      	adds	r7, #24
 800572e:	46bd      	mov	sp, r7
 8005730:	bd80      	pop	{r7, pc}
 8005732:	bf00      	nop
 8005734:	40022000 	.word	0x40022000
 8005738:	40021000 	.word	0x40021000
 800573c:	04c4b400 	.word	0x04c4b400
 8005740:	0800cd04 	.word	0x0800cd04
 8005744:	20000000 	.word	0x20000000
 8005748:	200000c8 	.word	0x200000c8

0800574c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005752:	4b2c      	ldr	r3, [pc, #176]	; (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 030c 	and.w	r3, r3, #12
 800575a:	2b04      	cmp	r3, #4
 800575c:	d102      	bne.n	8005764 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 800575e:	4b2a      	ldr	r3, [pc, #168]	; (8005808 <HAL_RCC_GetSysClockFreq+0xbc>)
 8005760:	613b      	str	r3, [r7, #16]
 8005762:	e047      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005764:	4b27      	ldr	r3, [pc, #156]	; (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005766:	689b      	ldr	r3, [r3, #8]
 8005768:	f003 030c 	and.w	r3, r3, #12
 800576c:	2b08      	cmp	r3, #8
 800576e:	d102      	bne.n	8005776 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005770:	4b26      	ldr	r3, [pc, #152]	; (800580c <HAL_RCC_GetSysClockFreq+0xc0>)
 8005772:	613b      	str	r3, [r7, #16]
 8005774:	e03e      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8005776:	4b23      	ldr	r3, [pc, #140]	; (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005778:	689b      	ldr	r3, [r3, #8]
 800577a:	f003 030c 	and.w	r3, r3, #12
 800577e:	2b0c      	cmp	r3, #12
 8005780:	d136      	bne.n	80057f0 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8005782:	4b20      	ldr	r3, [pc, #128]	; (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005784:	68db      	ldr	r3, [r3, #12]
 8005786:	f003 0303 	and.w	r3, r3, #3
 800578a:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800578c:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	091b      	lsrs	r3, r3, #4
 8005792:	f003 030f 	and.w	r3, r3, #15
 8005796:	3301      	adds	r3, #1
 8005798:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 800579a:	68fb      	ldr	r3, [r7, #12]
 800579c:	2b03      	cmp	r3, #3
 800579e:	d10c      	bne.n	80057ba <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057a0:	4a1a      	ldr	r2, [pc, #104]	; (800580c <HAL_RCC_GetSysClockFreq+0xc0>)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	fbb2 f3f3 	udiv	r3, r2, r3
 80057a8:	4a16      	ldr	r2, [pc, #88]	; (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057aa:	68d2      	ldr	r2, [r2, #12]
 80057ac:	0a12      	lsrs	r2, r2, #8
 80057ae:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057b2:	fb02 f303 	mul.w	r3, r2, r3
 80057b6:	617b      	str	r3, [r7, #20]
      break;
 80057b8:	e00c      	b.n	80057d4 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80057ba:	4a13      	ldr	r2, [pc, #76]	; (8005808 <HAL_RCC_GetSysClockFreq+0xbc>)
 80057bc:	68bb      	ldr	r3, [r7, #8]
 80057be:	fbb2 f3f3 	udiv	r3, r2, r3
 80057c2:	4a10      	ldr	r2, [pc, #64]	; (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057c4:	68d2      	ldr	r2, [r2, #12]
 80057c6:	0a12      	lsrs	r2, r2, #8
 80057c8:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80057cc:	fb02 f303 	mul.w	r3, r2, r3
 80057d0:	617b      	str	r3, [r7, #20]
      break;
 80057d2:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80057d4:	4b0b      	ldr	r3, [pc, #44]	; (8005804 <HAL_RCC_GetSysClockFreq+0xb8>)
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	0e5b      	lsrs	r3, r3, #25
 80057da:	f003 0303 	and.w	r3, r3, #3
 80057de:	3301      	adds	r3, #1
 80057e0:	005b      	lsls	r3, r3, #1
 80057e2:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 80057e4:	697a      	ldr	r2, [r7, #20]
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	fbb2 f3f3 	udiv	r3, r2, r3
 80057ec:	613b      	str	r3, [r7, #16]
 80057ee:	e001      	b.n	80057f4 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 80057f0:	2300      	movs	r3, #0
 80057f2:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 80057f4:	693b      	ldr	r3, [r7, #16]
}
 80057f6:	4618      	mov	r0, r3
 80057f8:	371c      	adds	r7, #28
 80057fa:	46bd      	mov	sp, r7
 80057fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005800:	4770      	bx	lr
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000
 8005808:	00f42400 	.word	0x00f42400
 800580c:	016e3600 	.word	0x016e3600

08005810 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005810:	b480      	push	{r7}
 8005812:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005814:	4b03      	ldr	r3, [pc, #12]	; (8005824 <HAL_RCC_GetHCLKFreq+0x14>)
 8005816:	681b      	ldr	r3, [r3, #0]
}
 8005818:	4618      	mov	r0, r3
 800581a:	46bd      	mov	sp, r7
 800581c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005820:	4770      	bx	lr
 8005822:	bf00      	nop
 8005824:	20000000 	.word	0x20000000

08005828 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005828:	b580      	push	{r7, lr}
 800582a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 800582c:	f7ff fff0 	bl	8005810 <HAL_RCC_GetHCLKFreq>
 8005830:	4602      	mov	r2, r0
 8005832:	4b06      	ldr	r3, [pc, #24]	; (800584c <HAL_RCC_GetPCLK1Freq+0x24>)
 8005834:	689b      	ldr	r3, [r3, #8]
 8005836:	0a1b      	lsrs	r3, r3, #8
 8005838:	f003 0307 	and.w	r3, r3, #7
 800583c:	4904      	ldr	r1, [pc, #16]	; (8005850 <HAL_RCC_GetPCLK1Freq+0x28>)
 800583e:	5ccb      	ldrb	r3, [r1, r3]
 8005840:	f003 031f 	and.w	r3, r3, #31
 8005844:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005848:	4618      	mov	r0, r3
 800584a:	bd80      	pop	{r7, pc}
 800584c:	40021000 	.word	0x40021000
 8005850:	0800cd14 	.word	0x0800cd14

08005854 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8005858:	f7ff ffda 	bl	8005810 <HAL_RCC_GetHCLKFreq>
 800585c:	4602      	mov	r2, r0
 800585e:	4b06      	ldr	r3, [pc, #24]	; (8005878 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005860:	689b      	ldr	r3, [r3, #8]
 8005862:	0adb      	lsrs	r3, r3, #11
 8005864:	f003 0307 	and.w	r3, r3, #7
 8005868:	4904      	ldr	r1, [pc, #16]	; (800587c <HAL_RCC_GetPCLK2Freq+0x28>)
 800586a:	5ccb      	ldrb	r3, [r1, r3]
 800586c:	f003 031f 	and.w	r3, r3, #31
 8005870:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005874:	4618      	mov	r0, r3
 8005876:	bd80      	pop	{r7, pc}
 8005878:	40021000 	.word	0x40021000
 800587c:	0800cd14 	.word	0x0800cd14

08005880 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8005880:	b480      	push	{r7}
 8005882:	b083      	sub	sp, #12
 8005884:	af00      	add	r7, sp, #0
 8005886:	6078      	str	r0, [r7, #4]
 8005888:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	220f      	movs	r2, #15
 800588e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8005890:	4b12      	ldr	r3, [pc, #72]	; (80058dc <HAL_RCC_GetClockConfig+0x5c>)
 8005892:	689b      	ldr	r3, [r3, #8]
 8005894:	f003 0203 	and.w	r2, r3, #3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 800589c:	4b0f      	ldr	r3, [pc, #60]	; (80058dc <HAL_RCC_GetClockConfig+0x5c>)
 800589e:	689b      	ldr	r3, [r3, #8]
 80058a0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80058a8:	4b0c      	ldr	r3, [pc, #48]	; (80058dc <HAL_RCC_GetClockConfig+0x5c>)
 80058aa:	689b      	ldr	r3, [r3, #8]
 80058ac:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80058b4:	4b09      	ldr	r3, [pc, #36]	; (80058dc <HAL_RCC_GetClockConfig+0x5c>)
 80058b6:	689b      	ldr	r3, [r3, #8]
 80058b8:	08db      	lsrs	r3, r3, #3
 80058ba:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80058c2:	4b07      	ldr	r3, [pc, #28]	; (80058e0 <HAL_RCC_GetClockConfig+0x60>)
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f003 020f 	and.w	r2, r3, #15
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	601a      	str	r2, [r3, #0]
}
 80058ce:	bf00      	nop
 80058d0:	370c      	adds	r7, #12
 80058d2:	46bd      	mov	sp, r7
 80058d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058d8:	4770      	bx	lr
 80058da:	bf00      	nop
 80058dc:	40021000 	.word	0x40021000
 80058e0:	40022000 	.word	0x40022000

080058e4 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b087      	sub	sp, #28
 80058e8:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80058ea:	4b1e      	ldr	r3, [pc, #120]	; (8005964 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058ec:	68db      	ldr	r3, [r3, #12]
 80058ee:	f003 0303 	and.w	r3, r3, #3
 80058f2:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80058f4:	4b1b      	ldr	r3, [pc, #108]	; (8005964 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 80058f6:	68db      	ldr	r3, [r3, #12]
 80058f8:	091b      	lsrs	r3, r3, #4
 80058fa:	f003 030f 	and.w	r3, r3, #15
 80058fe:	3301      	adds	r3, #1
 8005900:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005902:	693b      	ldr	r3, [r7, #16]
 8005904:	2b03      	cmp	r3, #3
 8005906:	d10c      	bne.n	8005922 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005908:	4a17      	ldr	r2, [pc, #92]	; (8005968 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800590a:	68fb      	ldr	r3, [r7, #12]
 800590c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005910:	4a14      	ldr	r2, [pc, #80]	; (8005964 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005912:	68d2      	ldr	r2, [r2, #12]
 8005914:	0a12      	lsrs	r2, r2, #8
 8005916:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800591a:	fb02 f303 	mul.w	r3, r2, r3
 800591e:	617b      	str	r3, [r7, #20]
    break;
 8005920:	e00c      	b.n	800593c <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005922:	4a12      	ldr	r2, [pc, #72]	; (800596c <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	fbb2 f3f3 	udiv	r3, r2, r3
 800592a:	4a0e      	ldr	r2, [pc, #56]	; (8005964 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800592c:	68d2      	ldr	r2, [r2, #12]
 800592e:	0a12      	lsrs	r2, r2, #8
 8005930:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005934:	fb02 f303 	mul.w	r3, r2, r3
 8005938:	617b      	str	r3, [r7, #20]
    break;
 800593a:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 800593c:	4b09      	ldr	r3, [pc, #36]	; (8005964 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	0e5b      	lsrs	r3, r3, #25
 8005942:	f003 0303 	and.w	r3, r3, #3
 8005946:	3301      	adds	r3, #1
 8005948:	005b      	lsls	r3, r3, #1
 800594a:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 800594c:	697a      	ldr	r2, [r7, #20]
 800594e:	68bb      	ldr	r3, [r7, #8]
 8005950:	fbb2 f3f3 	udiv	r3, r2, r3
 8005954:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8005956:	687b      	ldr	r3, [r7, #4]
}
 8005958:	4618      	mov	r0, r3
 800595a:	371c      	adds	r7, #28
 800595c:	46bd      	mov	sp, r7
 800595e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005962:	4770      	bx	lr
 8005964:	40021000 	.word	0x40021000
 8005968:	016e3600 	.word	0x016e3600
 800596c:	00f42400 	.word	0x00f42400

08005970 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005970:	b580      	push	{r7, lr}
 8005972:	b086      	sub	sp, #24
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8005978:	2300      	movs	r3, #0
 800597a:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 800597c:	2300      	movs	r3, #0
 800597e:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	681b      	ldr	r3, [r3, #0]
 8005984:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8005988:	2b00      	cmp	r3, #0
 800598a:	f000 8098 	beq.w	8005abe <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 800598e:	2300      	movs	r3, #0
 8005990:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005992:	4b43      	ldr	r3, [pc, #268]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005994:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005996:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800599a:	2b00      	cmp	r3, #0
 800599c:	d10d      	bne.n	80059ba <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800599e:	4b40      	ldr	r3, [pc, #256]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059a2:	4a3f      	ldr	r2, [pc, #252]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80059a8:	6593      	str	r3, [r2, #88]	; 0x58
 80059aa:	4b3d      	ldr	r3, [pc, #244]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80059b2:	60bb      	str	r3, [r7, #8]
 80059b4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80059b6:	2301      	movs	r3, #1
 80059b8:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80059ba:	4b3a      	ldr	r3, [pc, #232]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	4a39      	ldr	r2, [pc, #228]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059c4:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80059c6:	f7fc ff77 	bl	80028b8 <HAL_GetTick>
 80059ca:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059cc:	e009      	b.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80059ce:	f7fc ff73 	bl	80028b8 <HAL_GetTick>
 80059d2:	4602      	mov	r2, r0
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	1ad3      	subs	r3, r2, r3
 80059d8:	2b02      	cmp	r3, #2
 80059da:	d902      	bls.n	80059e2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 80059dc:	2303      	movs	r3, #3
 80059de:	74fb      	strb	r3, [r7, #19]
        break;
 80059e0:	e005      	b.n	80059ee <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80059e2:	4b30      	ldr	r3, [pc, #192]	; (8005aa4 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80059e4:	681b      	ldr	r3, [r3, #0]
 80059e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059ea:	2b00      	cmp	r3, #0
 80059ec:	d0ef      	beq.n	80059ce <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 80059ee:	7cfb      	ldrb	r3, [r7, #19]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d159      	bne.n	8005aa8 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 80059f4:	4b2a      	ldr	r3, [pc, #168]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80059f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80059fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80059fe:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005a00:	697b      	ldr	r3, [r7, #20]
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d01e      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a0a:	697a      	ldr	r2, [r7, #20]
 8005a0c:	429a      	cmp	r2, r3
 8005a0e:	d019      	beq.n	8005a44 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005a10:	4b23      	ldr	r3, [pc, #140]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a12:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a1a:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005a1c:	4b20      	ldr	r3, [pc, #128]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a1e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a22:	4a1f      	ldr	r2, [pc, #124]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a24:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005a28:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005a2c:	4b1c      	ldr	r3, [pc, #112]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a2e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a32:	4a1b      	ldr	r2, [pc, #108]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005a38:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005a3c:	4a18      	ldr	r2, [pc, #96]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a3e:	697b      	ldr	r3, [r7, #20]
 8005a40:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005a44:	697b      	ldr	r3, [r7, #20]
 8005a46:	f003 0301 	and.w	r3, r3, #1
 8005a4a:	2b00      	cmp	r3, #0
 8005a4c:	d016      	beq.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005a4e:	f7fc ff33 	bl	80028b8 <HAL_GetTick>
 8005a52:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a54:	e00b      	b.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005a56:	f7fc ff2f 	bl	80028b8 <HAL_GetTick>
 8005a5a:	4602      	mov	r2, r0
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	1ad3      	subs	r3, r2, r3
 8005a60:	f241 3288 	movw	r2, #5000	; 0x1388
 8005a64:	4293      	cmp	r3, r2
 8005a66:	d902      	bls.n	8005a6e <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8005a68:	2303      	movs	r3, #3
 8005a6a:	74fb      	strb	r3, [r7, #19]
            break;
 8005a6c:	e006      	b.n	8005a7c <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005a6e:	4b0c      	ldr	r3, [pc, #48]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a74:	f003 0302 	and.w	r3, r3, #2
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d0ec      	beq.n	8005a56 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8005a7c:	7cfb      	ldrb	r3, [r7, #19]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10b      	bne.n	8005a9a <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8005a82:	4b07      	ldr	r3, [pc, #28]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a84:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005a88:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a90:	4903      	ldr	r1, [pc, #12]	; (8005aa0 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005a92:	4313      	orrs	r3, r2
 8005a94:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8005a98:	e008      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8005a9a:	7cfb      	ldrb	r3, [r7, #19]
 8005a9c:	74bb      	strb	r3, [r7, #18]
 8005a9e:	e005      	b.n	8005aac <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8005aa0:	40021000 	.word	0x40021000
 8005aa4:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005aa8:	7cfb      	ldrb	r3, [r7, #19]
 8005aaa:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005aac:	7c7b      	ldrb	r3, [r7, #17]
 8005aae:	2b01      	cmp	r3, #1
 8005ab0:	d105      	bne.n	8005abe <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ab2:	4ba7      	ldr	r3, [pc, #668]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005ab6:	4aa6      	ldr	r2, [pc, #664]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ab8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005abc:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f003 0301 	and.w	r3, r3, #1
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d00a      	beq.n	8005ae0 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8005aca:	4ba1      	ldr	r3, [pc, #644]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005acc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ad0:	f023 0203 	bic.w	r2, r3, #3
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	685b      	ldr	r3, [r3, #4]
 8005ad8:	499d      	ldr	r1, [pc, #628]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ada:	4313      	orrs	r3, r2
 8005adc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	f003 0302 	and.w	r3, r3, #2
 8005ae8:	2b00      	cmp	r3, #0
 8005aea:	d00a      	beq.n	8005b02 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005aec:	4b98      	ldr	r3, [pc, #608]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aee:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005af2:	f023 020c 	bic.w	r2, r3, #12
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	689b      	ldr	r3, [r3, #8]
 8005afa:	4995      	ldr	r1, [pc, #596]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005afc:	4313      	orrs	r3, r2
 8005afe:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	f003 0304 	and.w	r3, r3, #4
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d00a      	beq.n	8005b24 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005b0e:	4b90      	ldr	r3, [pc, #576]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b14:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	68db      	ldr	r3, [r3, #12]
 8005b1c:	498c      	ldr	r1, [pc, #560]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	681b      	ldr	r3, [r3, #0]
 8005b28:	f003 0308 	and.w	r3, r3, #8
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d00a      	beq.n	8005b46 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005b30:	4b87      	ldr	r3, [pc, #540]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b36:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	691b      	ldr	r3, [r3, #16]
 8005b3e:	4984      	ldr	r1, [pc, #528]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b40:	4313      	orrs	r3, r2
 8005b42:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f003 0310 	and.w	r3, r3, #16
 8005b4e:	2b00      	cmp	r3, #0
 8005b50:	d00a      	beq.n	8005b68 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005b52:	4b7f      	ldr	r3, [pc, #508]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b54:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b58:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	695b      	ldr	r3, [r3, #20]
 8005b60:	497b      	ldr	r1, [pc, #492]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b62:	4313      	orrs	r3, r2
 8005b64:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f003 0320 	and.w	r3, r3, #32
 8005b70:	2b00      	cmp	r3, #0
 8005b72:	d00a      	beq.n	8005b8a <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005b74:	4b76      	ldr	r3, [pc, #472]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b76:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b7a:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	699b      	ldr	r3, [r3, #24]
 8005b82:	4973      	ldr	r1, [pc, #460]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b84:	4313      	orrs	r3, r2
 8005b86:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005b92:	2b00      	cmp	r3, #0
 8005b94:	d00a      	beq.n	8005bac <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8005b96:	4b6e      	ldr	r3, [pc, #440]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b9c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	69db      	ldr	r3, [r3, #28]
 8005ba4:	496a      	ldr	r1, [pc, #424]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ba6:	4313      	orrs	r3, r2
 8005ba8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	681b      	ldr	r3, [r3, #0]
 8005bb0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005bb4:	2b00      	cmp	r3, #0
 8005bb6:	d00a      	beq.n	8005bce <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8005bb8:	4b65      	ldr	r3, [pc, #404]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bbe:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	6a1b      	ldr	r3, [r3, #32]
 8005bc6:	4962      	ldr	r1, [pc, #392]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bc8:	4313      	orrs	r3, r2
 8005bca:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d00a      	beq.n	8005bf0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8005bda:	4b5d      	ldr	r3, [pc, #372]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bdc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005be0:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005be8:	4959      	ldr	r1, [pc, #356]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bea:	4313      	orrs	r3, r2
 8005bec:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005bf8:	2b00      	cmp	r3, #0
 8005bfa:	d00a      	beq.n	8005c12 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005bfc:	4b54      	ldr	r3, [pc, #336]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005bfe:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005c02:	f023 0203 	bic.w	r2, r3, #3
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c0a:	4951      	ldr	r1, [pc, #324]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c0c:	4313      	orrs	r3, r2
 8005c0e:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005c12:	687b      	ldr	r3, [r7, #4]
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c1a:	2b00      	cmp	r3, #0
 8005c1c:	d00a      	beq.n	8005c34 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005c1e:	4b4c      	ldr	r3, [pc, #304]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c20:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c24:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c2c:	4948      	ldr	r1, [pc, #288]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c2e:	4313      	orrs	r3, r2
 8005c30:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	681b      	ldr	r3, [r3, #0]
 8005c38:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d015      	beq.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005c40:	4b43      	ldr	r3, [pc, #268]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c46:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c4e:	4940      	ldr	r1, [pc, #256]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c50:	4313      	orrs	r3, r2
 8005c52:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c5a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005c5e:	d105      	bne.n	8005c6c <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c60:	4b3b      	ldr	r3, [pc, #236]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c62:	68db      	ldr	r3, [r3, #12]
 8005c64:	4a3a      	ldr	r2, [pc, #232]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c66:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c6a:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c74:	2b00      	cmp	r3, #0
 8005c76:	d015      	beq.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005c78:	4b35      	ldr	r3, [pc, #212]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005c7e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005c82:	687b      	ldr	r3, [r7, #4]
 8005c84:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c86:	4932      	ldr	r1, [pc, #200]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c88:	4313      	orrs	r3, r2
 8005c8a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005c92:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005c96:	d105      	bne.n	8005ca4 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c98:	4b2d      	ldr	r3, [pc, #180]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9a:	68db      	ldr	r3, [r3, #12]
 8005c9c:	4a2c      	ldr	r2, [pc, #176]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005c9e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ca2:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d015      	beq.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005cb0:	4b27      	ldr	r3, [pc, #156]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cb6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cbe:	4924      	ldr	r1, [pc, #144]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cc0:	4313      	orrs	r3, r2
 8005cc2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005cca:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005cce:	d105      	bne.n	8005cdc <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005cd0:	4b1f      	ldr	r3, [pc, #124]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd2:	68db      	ldr	r3, [r3, #12]
 8005cd4:	4a1e      	ldr	r2, [pc, #120]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cd6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005cda:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d015      	beq.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005ce8:	4b19      	ldr	r3, [pc, #100]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005cee:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005cf6:	4916      	ldr	r1, [pc, #88]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005cf8:	4313      	orrs	r3, r2
 8005cfa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d02:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d06:	d105      	bne.n	8005d14 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d08:	4b11      	ldr	r3, [pc, #68]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0a:	68db      	ldr	r3, [r3, #12]
 8005d0c:	4a10      	ldr	r2, [pc, #64]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d0e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d12:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d019      	beq.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005d20:	4b0b      	ldr	r3, [pc, #44]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d26:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d2e:	4908      	ldr	r1, [pc, #32]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d30:	4313      	orrs	r3, r2
 8005d32:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3a:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d3e:	d109      	bne.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005d40:	4b03      	ldr	r3, [pc, #12]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d42:	68db      	ldr	r3, [r3, #12]
 8005d44:	4a02      	ldr	r2, [pc, #8]	; (8005d50 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005d46:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d4a:	60d3      	str	r3, [r2, #12]
 8005d4c:	e002      	b.n	8005d54 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005d4e:	bf00      	nop
 8005d50:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005d5c:	2b00      	cmp	r3, #0
 8005d5e:	d015      	beq.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005d60:	4b29      	ldr	r3, [pc, #164]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d62:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d66:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d6e:	4926      	ldr	r1, [pc, #152]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d70:	4313      	orrs	r3, r2
 8005d72:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005d7a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005d7e:	d105      	bne.n	8005d8c <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005d80:	4b21      	ldr	r3, [pc, #132]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d82:	68db      	ldr	r3, [r3, #12]
 8005d84:	4a20      	ldr	r2, [pc, #128]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d86:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d8a:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	681b      	ldr	r3, [r3, #0]
 8005d90:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d015      	beq.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005d98:	4b1b      	ldr	r3, [pc, #108]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005d9e:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005da2:	687b      	ldr	r3, [r7, #4]
 8005da4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005da6:	4918      	ldr	r1, [pc, #96]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005da8:	4313      	orrs	r3, r2
 8005daa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005db2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005db6:	d105      	bne.n	8005dc4 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005db8:	4b13      	ldr	r3, [pc, #76]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dba:	68db      	ldr	r3, [r3, #12]
 8005dbc:	4a12      	ldr	r2, [pc, #72]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dbe:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005dc2:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d015      	beq.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005dd0:	4b0d      	ldr	r3, [pc, #52]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005dd2:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005dd6:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dde:	490a      	ldr	r1, [pc, #40]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005de0:	4313      	orrs	r3, r2
 8005de2:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005dea:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005dee:	d105      	bne.n	8005dfc <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005df0:	4b05      	ldr	r3, [pc, #20]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005df2:	68db      	ldr	r3, [r3, #12]
 8005df4:	4a04      	ldr	r2, [pc, #16]	; (8005e08 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005df6:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005dfa:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005dfc:	7cbb      	ldrb	r3, [r7, #18]
}
 8005dfe:	4618      	mov	r0, r3
 8005e00:	3718      	adds	r7, #24
 8005e02:	46bd      	mov	sp, r7
 8005e04:	bd80      	pop	{r7, pc}
 8005e06:	bf00      	nop
 8005e08:	40021000 	.word	0x40021000

08005e0c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005e0c:	b580      	push	{r7, lr}
 8005e0e:	b082      	sub	sp, #8
 8005e10:	af00      	add	r7, sp, #0
 8005e12:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	d101      	bne.n	8005e1e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005e1a:	2301      	movs	r3, #1
 8005e1c:	e049      	b.n	8005eb2 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e24:	b2db      	uxtb	r3, r3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d106      	bne.n	8005e38 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f7fc f8c8 	bl	8001fc8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2202      	movs	r2, #2
 8005e3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681a      	ldr	r2, [r3, #0]
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	3304      	adds	r3, #4
 8005e48:	4619      	mov	r1, r3
 8005e4a:	4610      	mov	r0, r2
 8005e4c:	f000 ffba 	bl	8006dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	2201      	movs	r2, #1
 8005e8c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	2201      	movs	r2, #1
 8005e94:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	2201      	movs	r2, #1
 8005e9c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2201      	movs	r2, #1
 8005ea4:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	2201      	movs	r2, #1
 8005eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005eb0:	2300      	movs	r3, #0
}
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	3708      	adds	r7, #8
 8005eb6:	46bd      	mov	sp, r7
 8005eb8:	bd80      	pop	{r7, pc}
	...

08005ebc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005ebc:	b480      	push	{r7}
 8005ebe:	b085      	sub	sp, #20
 8005ec0:	af00      	add	r7, sp, #0
 8005ec2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eca:	b2db      	uxtb	r3, r3
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d001      	beq.n	8005ed4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e054      	b.n	8005f7e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	2202      	movs	r2, #2
 8005ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	681b      	ldr	r3, [r3, #0]
 8005ee0:	68da      	ldr	r2, [r3, #12]
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	f042 0201 	orr.w	r2, r2, #1
 8005eea:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	4a26      	ldr	r2, [pc, #152]	; (8005f8c <HAL_TIM_Base_Start_IT+0xd0>)
 8005ef2:	4293      	cmp	r3, r2
 8005ef4:	d022      	beq.n	8005f3c <HAL_TIM_Base_Start_IT+0x80>
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	681b      	ldr	r3, [r3, #0]
 8005efa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005efe:	d01d      	beq.n	8005f3c <HAL_TIM_Base_Start_IT+0x80>
 8005f00:	687b      	ldr	r3, [r7, #4]
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	4a22      	ldr	r2, [pc, #136]	; (8005f90 <HAL_TIM_Base_Start_IT+0xd4>)
 8005f06:	4293      	cmp	r3, r2
 8005f08:	d018      	beq.n	8005f3c <HAL_TIM_Base_Start_IT+0x80>
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	4a21      	ldr	r2, [pc, #132]	; (8005f94 <HAL_TIM_Base_Start_IT+0xd8>)
 8005f10:	4293      	cmp	r3, r2
 8005f12:	d013      	beq.n	8005f3c <HAL_TIM_Base_Start_IT+0x80>
 8005f14:	687b      	ldr	r3, [r7, #4]
 8005f16:	681b      	ldr	r3, [r3, #0]
 8005f18:	4a1f      	ldr	r2, [pc, #124]	; (8005f98 <HAL_TIM_Base_Start_IT+0xdc>)
 8005f1a:	4293      	cmp	r3, r2
 8005f1c:	d00e      	beq.n	8005f3c <HAL_TIM_Base_Start_IT+0x80>
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	681b      	ldr	r3, [r3, #0]
 8005f22:	4a1e      	ldr	r2, [pc, #120]	; (8005f9c <HAL_TIM_Base_Start_IT+0xe0>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d009      	beq.n	8005f3c <HAL_TIM_Base_Start_IT+0x80>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1c      	ldr	r2, [pc, #112]	; (8005fa0 <HAL_TIM_Base_Start_IT+0xe4>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d004      	beq.n	8005f3c <HAL_TIM_Base_Start_IT+0x80>
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	681b      	ldr	r3, [r3, #0]
 8005f36:	4a1b      	ldr	r2, [pc, #108]	; (8005fa4 <HAL_TIM_Base_Start_IT+0xe8>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d115      	bne.n	8005f68 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	689a      	ldr	r2, [r3, #8]
 8005f42:	4b19      	ldr	r3, [pc, #100]	; (8005fa8 <HAL_TIM_Base_Start_IT+0xec>)
 8005f44:	4013      	ands	r3, r2
 8005f46:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f48:	68fb      	ldr	r3, [r7, #12]
 8005f4a:	2b06      	cmp	r3, #6
 8005f4c:	d015      	beq.n	8005f7a <HAL_TIM_Base_Start_IT+0xbe>
 8005f4e:	68fb      	ldr	r3, [r7, #12]
 8005f50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005f54:	d011      	beq.n	8005f7a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	681b      	ldr	r3, [r3, #0]
 8005f5a:	681a      	ldr	r2, [r3, #0]
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	f042 0201 	orr.w	r2, r2, #1
 8005f64:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f66:	e008      	b.n	8005f7a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	681b      	ldr	r3, [r3, #0]
 8005f6c:	681a      	ldr	r2, [r3, #0]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	681b      	ldr	r3, [r3, #0]
 8005f72:	f042 0201 	orr.w	r2, r2, #1
 8005f76:	601a      	str	r2, [r3, #0]
 8005f78:	e000      	b.n	8005f7c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005f7a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005f7c:	2300      	movs	r3, #0
}
 8005f7e:	4618      	mov	r0, r3
 8005f80:	3714      	adds	r7, #20
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40012c00 	.word	0x40012c00
 8005f90:	40000400 	.word	0x40000400
 8005f94:	40000800 	.word	0x40000800
 8005f98:	40000c00 	.word	0x40000c00
 8005f9c:	40013400 	.word	0x40013400
 8005fa0:	40014000 	.word	0x40014000
 8005fa4:	40015000 	.word	0x40015000
 8005fa8:	00010007 	.word	0x00010007

08005fac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005fac:	b580      	push	{r7, lr}
 8005fae:	b082      	sub	sp, #8
 8005fb0:	af00      	add	r7, sp, #0
 8005fb2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d101      	bne.n	8005fbe <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005fba:	2301      	movs	r3, #1
 8005fbc:	e049      	b.n	8006052 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005fc4:	b2db      	uxtb	r3, r3
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d106      	bne.n	8005fd8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005fd2:	6878      	ldr	r0, [r7, #4]
 8005fd4:	f7fb ff70 	bl	8001eb8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005fd8:	687b      	ldr	r3, [r7, #4]
 8005fda:	2202      	movs	r2, #2
 8005fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681a      	ldr	r2, [r3, #0]
 8005fe4:	687b      	ldr	r3, [r7, #4]
 8005fe6:	3304      	adds	r3, #4
 8005fe8:	4619      	mov	r1, r3
 8005fea:	4610      	mov	r0, r2
 8005fec:	f000 feea 	bl	8006dc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	2201      	movs	r2, #1
 8005ff4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	2201      	movs	r2, #1
 8005ffc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	2201      	movs	r2, #1
 8006004:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	2201      	movs	r2, #1
 800600c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2201      	movs	r2, #1
 800601c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	2201      	movs	r2, #1
 800602c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	2201      	movs	r2, #1
 8006034:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006038:	687b      	ldr	r3, [r7, #4]
 800603a:	2201      	movs	r2, #1
 800603c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	2201      	movs	r2, #1
 8006044:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	2201      	movs	r2, #1
 800604c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006050:	2300      	movs	r3, #0
}
 8006052:	4618      	mov	r0, r3
 8006054:	3708      	adds	r7, #8
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}
	...

0800605c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	b084      	sub	sp, #16
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8006066:	683b      	ldr	r3, [r7, #0]
 8006068:	2b00      	cmp	r3, #0
 800606a:	d109      	bne.n	8006080 <HAL_TIM_PWM_Start+0x24>
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006072:	b2db      	uxtb	r3, r3
 8006074:	2b01      	cmp	r3, #1
 8006076:	bf14      	ite	ne
 8006078:	2301      	movne	r3, #1
 800607a:	2300      	moveq	r3, #0
 800607c:	b2db      	uxtb	r3, r3
 800607e:	e03c      	b.n	80060fa <HAL_TIM_PWM_Start+0x9e>
 8006080:	683b      	ldr	r3, [r7, #0]
 8006082:	2b04      	cmp	r3, #4
 8006084:	d109      	bne.n	800609a <HAL_TIM_PWM_Start+0x3e>
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800608c:	b2db      	uxtb	r3, r3
 800608e:	2b01      	cmp	r3, #1
 8006090:	bf14      	ite	ne
 8006092:	2301      	movne	r3, #1
 8006094:	2300      	moveq	r3, #0
 8006096:	b2db      	uxtb	r3, r3
 8006098:	e02f      	b.n	80060fa <HAL_TIM_PWM_Start+0x9e>
 800609a:	683b      	ldr	r3, [r7, #0]
 800609c:	2b08      	cmp	r3, #8
 800609e:	d109      	bne.n	80060b4 <HAL_TIM_PWM_Start+0x58>
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80060a6:	b2db      	uxtb	r3, r3
 80060a8:	2b01      	cmp	r3, #1
 80060aa:	bf14      	ite	ne
 80060ac:	2301      	movne	r3, #1
 80060ae:	2300      	moveq	r3, #0
 80060b0:	b2db      	uxtb	r3, r3
 80060b2:	e022      	b.n	80060fa <HAL_TIM_PWM_Start+0x9e>
 80060b4:	683b      	ldr	r3, [r7, #0]
 80060b6:	2b0c      	cmp	r3, #12
 80060b8:	d109      	bne.n	80060ce <HAL_TIM_PWM_Start+0x72>
 80060ba:	687b      	ldr	r3, [r7, #4]
 80060bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80060c0:	b2db      	uxtb	r3, r3
 80060c2:	2b01      	cmp	r3, #1
 80060c4:	bf14      	ite	ne
 80060c6:	2301      	movne	r3, #1
 80060c8:	2300      	moveq	r3, #0
 80060ca:	b2db      	uxtb	r3, r3
 80060cc:	e015      	b.n	80060fa <HAL_TIM_PWM_Start+0x9e>
 80060ce:	683b      	ldr	r3, [r7, #0]
 80060d0:	2b10      	cmp	r3, #16
 80060d2:	d109      	bne.n	80060e8 <HAL_TIM_PWM_Start+0x8c>
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80060da:	b2db      	uxtb	r3, r3
 80060dc:	2b01      	cmp	r3, #1
 80060de:	bf14      	ite	ne
 80060e0:	2301      	movne	r3, #1
 80060e2:	2300      	moveq	r3, #0
 80060e4:	b2db      	uxtb	r3, r3
 80060e6:	e008      	b.n	80060fa <HAL_TIM_PWM_Start+0x9e>
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80060ee:	b2db      	uxtb	r3, r3
 80060f0:	2b01      	cmp	r3, #1
 80060f2:	bf14      	ite	ne
 80060f4:	2301      	movne	r3, #1
 80060f6:	2300      	moveq	r3, #0
 80060f8:	b2db      	uxtb	r3, r3
 80060fa:	2b00      	cmp	r3, #0
 80060fc:	d001      	beq.n	8006102 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80060fe:	2301      	movs	r3, #1
 8006100:	e0a6      	b.n	8006250 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	2b00      	cmp	r3, #0
 8006106:	d104      	bne.n	8006112 <HAL_TIM_PWM_Start+0xb6>
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2202      	movs	r2, #2
 800610c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006110:	e023      	b.n	800615a <HAL_TIM_PWM_Start+0xfe>
 8006112:	683b      	ldr	r3, [r7, #0]
 8006114:	2b04      	cmp	r3, #4
 8006116:	d104      	bne.n	8006122 <HAL_TIM_PWM_Start+0xc6>
 8006118:	687b      	ldr	r3, [r7, #4]
 800611a:	2202      	movs	r2, #2
 800611c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006120:	e01b      	b.n	800615a <HAL_TIM_PWM_Start+0xfe>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	2b08      	cmp	r3, #8
 8006126:	d104      	bne.n	8006132 <HAL_TIM_PWM_Start+0xd6>
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	2202      	movs	r2, #2
 800612c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006130:	e013      	b.n	800615a <HAL_TIM_PWM_Start+0xfe>
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	2b0c      	cmp	r3, #12
 8006136:	d104      	bne.n	8006142 <HAL_TIM_PWM_Start+0xe6>
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	2202      	movs	r2, #2
 800613c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8006140:	e00b      	b.n	800615a <HAL_TIM_PWM_Start+0xfe>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b10      	cmp	r3, #16
 8006146:	d104      	bne.n	8006152 <HAL_TIM_PWM_Start+0xf6>
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	2202      	movs	r2, #2
 800614c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006150:	e003      	b.n	800615a <HAL_TIM_PWM_Start+0xfe>
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	2202      	movs	r2, #2
 8006156:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800615a:	687b      	ldr	r3, [r7, #4]
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	2201      	movs	r2, #1
 8006160:	6839      	ldr	r1, [r7, #0]
 8006162:	4618      	mov	r0, r3
 8006164:	f001 fa9c 	bl	80076a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	4a3a      	ldr	r2, [pc, #232]	; (8006258 <HAL_TIM_PWM_Start+0x1fc>)
 800616e:	4293      	cmp	r3, r2
 8006170:	d018      	beq.n	80061a4 <HAL_TIM_PWM_Start+0x148>
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	681b      	ldr	r3, [r3, #0]
 8006176:	4a39      	ldr	r2, [pc, #228]	; (800625c <HAL_TIM_PWM_Start+0x200>)
 8006178:	4293      	cmp	r3, r2
 800617a:	d013      	beq.n	80061a4 <HAL_TIM_PWM_Start+0x148>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	4a37      	ldr	r2, [pc, #220]	; (8006260 <HAL_TIM_PWM_Start+0x204>)
 8006182:	4293      	cmp	r3, r2
 8006184:	d00e      	beq.n	80061a4 <HAL_TIM_PWM_Start+0x148>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	4a36      	ldr	r2, [pc, #216]	; (8006264 <HAL_TIM_PWM_Start+0x208>)
 800618c:	4293      	cmp	r3, r2
 800618e:	d009      	beq.n	80061a4 <HAL_TIM_PWM_Start+0x148>
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	681b      	ldr	r3, [r3, #0]
 8006194:	4a34      	ldr	r2, [pc, #208]	; (8006268 <HAL_TIM_PWM_Start+0x20c>)
 8006196:	4293      	cmp	r3, r2
 8006198:	d004      	beq.n	80061a4 <HAL_TIM_PWM_Start+0x148>
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	4a33      	ldr	r2, [pc, #204]	; (800626c <HAL_TIM_PWM_Start+0x210>)
 80061a0:	4293      	cmp	r3, r2
 80061a2:	d101      	bne.n	80061a8 <HAL_TIM_PWM_Start+0x14c>
 80061a4:	2301      	movs	r3, #1
 80061a6:	e000      	b.n	80061aa <HAL_TIM_PWM_Start+0x14e>
 80061a8:	2300      	movs	r3, #0
 80061aa:	2b00      	cmp	r3, #0
 80061ac:	d007      	beq.n	80061be <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80061bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	4a25      	ldr	r2, [pc, #148]	; (8006258 <HAL_TIM_PWM_Start+0x1fc>)
 80061c4:	4293      	cmp	r3, r2
 80061c6:	d022      	beq.n	800620e <HAL_TIM_PWM_Start+0x1b2>
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061d0:	d01d      	beq.n	800620e <HAL_TIM_PWM_Start+0x1b2>
 80061d2:	687b      	ldr	r3, [r7, #4]
 80061d4:	681b      	ldr	r3, [r3, #0]
 80061d6:	4a26      	ldr	r2, [pc, #152]	; (8006270 <HAL_TIM_PWM_Start+0x214>)
 80061d8:	4293      	cmp	r3, r2
 80061da:	d018      	beq.n	800620e <HAL_TIM_PWM_Start+0x1b2>
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	4a24      	ldr	r2, [pc, #144]	; (8006274 <HAL_TIM_PWM_Start+0x218>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d013      	beq.n	800620e <HAL_TIM_PWM_Start+0x1b2>
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4a23      	ldr	r2, [pc, #140]	; (8006278 <HAL_TIM_PWM_Start+0x21c>)
 80061ec:	4293      	cmp	r3, r2
 80061ee:	d00e      	beq.n	800620e <HAL_TIM_PWM_Start+0x1b2>
 80061f0:	687b      	ldr	r3, [r7, #4]
 80061f2:	681b      	ldr	r3, [r3, #0]
 80061f4:	4a19      	ldr	r2, [pc, #100]	; (800625c <HAL_TIM_PWM_Start+0x200>)
 80061f6:	4293      	cmp	r3, r2
 80061f8:	d009      	beq.n	800620e <HAL_TIM_PWM_Start+0x1b2>
 80061fa:	687b      	ldr	r3, [r7, #4]
 80061fc:	681b      	ldr	r3, [r3, #0]
 80061fe:	4a18      	ldr	r2, [pc, #96]	; (8006260 <HAL_TIM_PWM_Start+0x204>)
 8006200:	4293      	cmp	r3, r2
 8006202:	d004      	beq.n	800620e <HAL_TIM_PWM_Start+0x1b2>
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681b      	ldr	r3, [r3, #0]
 8006208:	4a18      	ldr	r2, [pc, #96]	; (800626c <HAL_TIM_PWM_Start+0x210>)
 800620a:	4293      	cmp	r3, r2
 800620c:	d115      	bne.n	800623a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	681b      	ldr	r3, [r3, #0]
 8006212:	689a      	ldr	r2, [r3, #8]
 8006214:	4b19      	ldr	r3, [pc, #100]	; (800627c <HAL_TIM_PWM_Start+0x220>)
 8006216:	4013      	ands	r3, r2
 8006218:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	2b06      	cmp	r3, #6
 800621e:	d015      	beq.n	800624c <HAL_TIM_PWM_Start+0x1f0>
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006226:	d011      	beq.n	800624c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	681b      	ldr	r3, [r3, #0]
 800622c:	681a      	ldr	r2, [r3, #0]
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	681b      	ldr	r3, [r3, #0]
 8006232:	f042 0201 	orr.w	r2, r2, #1
 8006236:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006238:	e008      	b.n	800624c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	681a      	ldr	r2, [r3, #0]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	f042 0201 	orr.w	r2, r2, #1
 8006248:	601a      	str	r2, [r3, #0]
 800624a:	e000      	b.n	800624e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800624c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800624e:	2300      	movs	r3, #0
}
 8006250:	4618      	mov	r0, r3
 8006252:	3710      	adds	r7, #16
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}
 8006258:	40012c00 	.word	0x40012c00
 800625c:	40013400 	.word	0x40013400
 8006260:	40014000 	.word	0x40014000
 8006264:	40014400 	.word	0x40014400
 8006268:	40014800 	.word	0x40014800
 800626c:	40015000 	.word	0x40015000
 8006270:	40000400 	.word	0x40000400
 8006274:	40000800 	.word	0x40000800
 8006278:	40000c00 	.word	0x40000c00
 800627c:	00010007 	.word	0x00010007

08006280 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006280:	b580      	push	{r7, lr}
 8006282:	b082      	sub	sp, #8
 8006284:	af00      	add	r7, sp, #0
 8006286:	6078      	str	r0, [r7, #4]
 8006288:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	2200      	movs	r2, #0
 8006290:	6839      	ldr	r1, [r7, #0]
 8006292:	4618      	mov	r0, r3
 8006294:	f001 fa04 	bl	80076a0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	4a40      	ldr	r2, [pc, #256]	; (80063a0 <HAL_TIM_PWM_Stop+0x120>)
 800629e:	4293      	cmp	r3, r2
 80062a0:	d018      	beq.n	80062d4 <HAL_TIM_PWM_Stop+0x54>
 80062a2:	687b      	ldr	r3, [r7, #4]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	4a3f      	ldr	r2, [pc, #252]	; (80063a4 <HAL_TIM_PWM_Stop+0x124>)
 80062a8:	4293      	cmp	r3, r2
 80062aa:	d013      	beq.n	80062d4 <HAL_TIM_PWM_Stop+0x54>
 80062ac:	687b      	ldr	r3, [r7, #4]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	4a3d      	ldr	r2, [pc, #244]	; (80063a8 <HAL_TIM_PWM_Stop+0x128>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d00e      	beq.n	80062d4 <HAL_TIM_PWM_Stop+0x54>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	4a3c      	ldr	r2, [pc, #240]	; (80063ac <HAL_TIM_PWM_Stop+0x12c>)
 80062bc:	4293      	cmp	r3, r2
 80062be:	d009      	beq.n	80062d4 <HAL_TIM_PWM_Stop+0x54>
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	4a3a      	ldr	r2, [pc, #232]	; (80063b0 <HAL_TIM_PWM_Stop+0x130>)
 80062c6:	4293      	cmp	r3, r2
 80062c8:	d004      	beq.n	80062d4 <HAL_TIM_PWM_Stop+0x54>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	4a39      	ldr	r2, [pc, #228]	; (80063b4 <HAL_TIM_PWM_Stop+0x134>)
 80062d0:	4293      	cmp	r3, r2
 80062d2:	d101      	bne.n	80062d8 <HAL_TIM_PWM_Stop+0x58>
 80062d4:	2301      	movs	r3, #1
 80062d6:	e000      	b.n	80062da <HAL_TIM_PWM_Stop+0x5a>
 80062d8:	2300      	movs	r3, #0
 80062da:	2b00      	cmp	r3, #0
 80062dc:	d017      	beq.n	800630e <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	6a1a      	ldr	r2, [r3, #32]
 80062e4:	f241 1311 	movw	r3, #4369	; 0x1111
 80062e8:	4013      	ands	r3, r2
 80062ea:	2b00      	cmp	r3, #0
 80062ec:	d10f      	bne.n	800630e <HAL_TIM_PWM_Stop+0x8e>
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	6a1a      	ldr	r2, [r3, #32]
 80062f4:	f244 4344 	movw	r3, #17476	; 0x4444
 80062f8:	4013      	ands	r3, r2
 80062fa:	2b00      	cmp	r3, #0
 80062fc:	d107      	bne.n	800630e <HAL_TIM_PWM_Stop+0x8e>
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800630c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	6a1a      	ldr	r2, [r3, #32]
 8006314:	f241 1311 	movw	r3, #4369	; 0x1111
 8006318:	4013      	ands	r3, r2
 800631a:	2b00      	cmp	r3, #0
 800631c:	d10f      	bne.n	800633e <HAL_TIM_PWM_Stop+0xbe>
 800631e:	687b      	ldr	r3, [r7, #4]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6a1a      	ldr	r2, [r3, #32]
 8006324:	f244 4344 	movw	r3, #17476	; 0x4444
 8006328:	4013      	ands	r3, r2
 800632a:	2b00      	cmp	r3, #0
 800632c:	d107      	bne.n	800633e <HAL_TIM_PWM_Stop+0xbe>
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	681a      	ldr	r2, [r3, #0]
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	f022 0201 	bic.w	r2, r2, #1
 800633c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800633e:	683b      	ldr	r3, [r7, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d104      	bne.n	800634e <HAL_TIM_PWM_Stop+0xce>
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2201      	movs	r2, #1
 8006348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800634c:	e023      	b.n	8006396 <HAL_TIM_PWM_Stop+0x116>
 800634e:	683b      	ldr	r3, [r7, #0]
 8006350:	2b04      	cmp	r3, #4
 8006352:	d104      	bne.n	800635e <HAL_TIM_PWM_Stop+0xde>
 8006354:	687b      	ldr	r3, [r7, #4]
 8006356:	2201      	movs	r2, #1
 8006358:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800635c:	e01b      	b.n	8006396 <HAL_TIM_PWM_Stop+0x116>
 800635e:	683b      	ldr	r3, [r7, #0]
 8006360:	2b08      	cmp	r3, #8
 8006362:	d104      	bne.n	800636e <HAL_TIM_PWM_Stop+0xee>
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800636c:	e013      	b.n	8006396 <HAL_TIM_PWM_Stop+0x116>
 800636e:	683b      	ldr	r3, [r7, #0]
 8006370:	2b0c      	cmp	r3, #12
 8006372:	d104      	bne.n	800637e <HAL_TIM_PWM_Stop+0xfe>
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	2201      	movs	r2, #1
 8006378:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800637c:	e00b      	b.n	8006396 <HAL_TIM_PWM_Stop+0x116>
 800637e:	683b      	ldr	r3, [r7, #0]
 8006380:	2b10      	cmp	r3, #16
 8006382:	d104      	bne.n	800638e <HAL_TIM_PWM_Stop+0x10e>
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	2201      	movs	r2, #1
 8006388:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800638c:	e003      	b.n	8006396 <HAL_TIM_PWM_Stop+0x116>
 800638e:	687b      	ldr	r3, [r7, #4]
 8006390:	2201      	movs	r2, #1
 8006392:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 8006396:	2300      	movs	r3, #0
}
 8006398:	4618      	mov	r0, r3
 800639a:	3708      	adds	r7, #8
 800639c:	46bd      	mov	sp, r7
 800639e:	bd80      	pop	{r7, pc}
 80063a0:	40012c00 	.word	0x40012c00
 80063a4:	40013400 	.word	0x40013400
 80063a8:	40014000 	.word	0x40014000
 80063ac:	40014400 	.word	0x40014400
 80063b0:	40014800 	.word	0x40014800
 80063b4:	40015000 	.word	0x40015000

080063b8 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80063b8:	b580      	push	{r7, lr}
 80063ba:	b086      	sub	sp, #24
 80063bc:	af00      	add	r7, sp, #0
 80063be:	6078      	str	r0, [r7, #4]
 80063c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	2b00      	cmp	r3, #0
 80063c6:	d101      	bne.n	80063cc <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80063c8:	2301      	movs	r3, #1
 80063ca:	e097      	b.n	80064fc <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063d2:	b2db      	uxtb	r3, r3
 80063d4:	2b00      	cmp	r3, #0
 80063d6:	d106      	bne.n	80063e6 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	2200      	movs	r2, #0
 80063dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f7fb fd8f 	bl	8001f04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	2202      	movs	r2, #2
 80063ea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	681b      	ldr	r3, [r3, #0]
 80063f2:	689b      	ldr	r3, [r3, #8]
 80063f4:	687a      	ldr	r2, [r7, #4]
 80063f6:	6812      	ldr	r2, [r2, #0]
 80063f8:	f423 33a0 	bic.w	r3, r3, #81920	; 0x14000
 80063fc:	f023 0307 	bic.w	r3, r3, #7
 8006400:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681a      	ldr	r2, [r3, #0]
 8006406:	687b      	ldr	r3, [r7, #4]
 8006408:	3304      	adds	r3, #4
 800640a:	4619      	mov	r1, r3
 800640c:	4610      	mov	r0, r2
 800640e:	f000 fcd9 	bl	8006dc4 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	681b      	ldr	r3, [r3, #0]
 8006416:	689b      	ldr	r3, [r3, #8]
 8006418:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	699b      	ldr	r3, [r3, #24]
 8006420:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	6a1b      	ldr	r3, [r3, #32]
 8006428:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800642a:	683b      	ldr	r3, [r7, #0]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	697a      	ldr	r2, [r7, #20]
 8006430:	4313      	orrs	r3, r2
 8006432:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006434:	693b      	ldr	r3, [r7, #16]
 8006436:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800643a:	f023 0303 	bic.w	r3, r3, #3
 800643e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006440:	683b      	ldr	r3, [r7, #0]
 8006442:	689a      	ldr	r2, [r3, #8]
 8006444:	683b      	ldr	r3, [r7, #0]
 8006446:	699b      	ldr	r3, [r3, #24]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	4313      	orrs	r3, r2
 800644c:	693a      	ldr	r2, [r7, #16]
 800644e:	4313      	orrs	r3, r2
 8006450:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006452:	693b      	ldr	r3, [r7, #16]
 8006454:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006458:	f023 030c 	bic.w	r3, r3, #12
 800645c:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006464:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006468:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800646a:	683b      	ldr	r3, [r7, #0]
 800646c:	68da      	ldr	r2, [r3, #12]
 800646e:	683b      	ldr	r3, [r7, #0]
 8006470:	69db      	ldr	r3, [r3, #28]
 8006472:	021b      	lsls	r3, r3, #8
 8006474:	4313      	orrs	r3, r2
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4313      	orrs	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800647c:	683b      	ldr	r3, [r7, #0]
 800647e:	691b      	ldr	r3, [r3, #16]
 8006480:	011a      	lsls	r2, r3, #4
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	6a1b      	ldr	r3, [r3, #32]
 8006486:	031b      	lsls	r3, r3, #12
 8006488:	4313      	orrs	r3, r2
 800648a:	693a      	ldr	r2, [r7, #16]
 800648c:	4313      	orrs	r3, r2
 800648e:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006496:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800649e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80064a0:	683b      	ldr	r3, [r7, #0]
 80064a2:	685a      	ldr	r2, [r3, #4]
 80064a4:	683b      	ldr	r3, [r7, #0]
 80064a6:	695b      	ldr	r3, [r3, #20]
 80064a8:	011b      	lsls	r3, r3, #4
 80064aa:	4313      	orrs	r3, r2
 80064ac:	68fa      	ldr	r2, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	697a      	ldr	r2, [r7, #20]
 80064b8:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	693a      	ldr	r2, [r7, #16]
 80064c0:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80064c2:	687b      	ldr	r3, [r7, #4]
 80064c4:	681b      	ldr	r3, [r3, #0]
 80064c6:	68fa      	ldr	r2, [r7, #12]
 80064c8:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	2201      	movs	r2, #1
 80064ce:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	2201      	movs	r2, #1
 80064d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2201      	movs	r2, #1
 80064de:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2201      	movs	r2, #1
 80064e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2201      	movs	r2, #1
 80064ee:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2201      	movs	r2, #1
 80064f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064fa:	2300      	movs	r3, #0
}
 80064fc:	4618      	mov	r0, r3
 80064fe:	3718      	adds	r7, #24
 8006500:	46bd      	mov	sp, r7
 8006502:	bd80      	pop	{r7, pc}

08006504 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006504:	b580      	push	{r7, lr}
 8006506:	b084      	sub	sp, #16
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]
 800650c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800650e:	687b      	ldr	r3, [r7, #4]
 8006510:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006514:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800651c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006524:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800652c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	2b00      	cmp	r3, #0
 8006532:	d110      	bne.n	8006556 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006534:	7bfb      	ldrb	r3, [r7, #15]
 8006536:	2b01      	cmp	r3, #1
 8006538:	d102      	bne.n	8006540 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 800653a:	7b7b      	ldrb	r3, [r7, #13]
 800653c:	2b01      	cmp	r3, #1
 800653e:	d001      	beq.n	8006544 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006540:	2301      	movs	r3, #1
 8006542:	e069      	b.n	8006618 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	2202      	movs	r2, #2
 8006548:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	2202      	movs	r2, #2
 8006550:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006554:	e031      	b.n	80065ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	2b04      	cmp	r3, #4
 800655a:	d110      	bne.n	800657e <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800655c:	7bbb      	ldrb	r3, [r7, #14]
 800655e:	2b01      	cmp	r3, #1
 8006560:	d102      	bne.n	8006568 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006562:	7b3b      	ldrb	r3, [r7, #12]
 8006564:	2b01      	cmp	r3, #1
 8006566:	d001      	beq.n	800656c <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006568:	2301      	movs	r3, #1
 800656a:	e055      	b.n	8006618 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2202      	movs	r2, #2
 8006570:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800657c:	e01d      	b.n	80065ba <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800657e:	7bfb      	ldrb	r3, [r7, #15]
 8006580:	2b01      	cmp	r3, #1
 8006582:	d108      	bne.n	8006596 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006584:	7bbb      	ldrb	r3, [r7, #14]
 8006586:	2b01      	cmp	r3, #1
 8006588:	d105      	bne.n	8006596 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800658a:	7b7b      	ldrb	r3, [r7, #13]
 800658c:	2b01      	cmp	r3, #1
 800658e:	d102      	bne.n	8006596 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006590:	7b3b      	ldrb	r3, [r7, #12]
 8006592:	2b01      	cmp	r3, #1
 8006594:	d001      	beq.n	800659a <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006596:	2301      	movs	r3, #1
 8006598:	e03e      	b.n	8006618 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	2202      	movs	r2, #2
 800659e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	2202      	movs	r2, #2
 80065a6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	2202      	movs	r2, #2
 80065ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	2202      	movs	r2, #2
 80065b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80065ba:	683b      	ldr	r3, [r7, #0]
 80065bc:	2b00      	cmp	r3, #0
 80065be:	d003      	beq.n	80065c8 <HAL_TIM_Encoder_Start+0xc4>
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	2b04      	cmp	r3, #4
 80065c4:	d008      	beq.n	80065d8 <HAL_TIM_Encoder_Start+0xd4>
 80065c6:	e00f      	b.n	80065e8 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2201      	movs	r2, #1
 80065ce:	2100      	movs	r1, #0
 80065d0:	4618      	mov	r0, r3
 80065d2:	f001 f865 	bl	80076a0 <TIM_CCxChannelCmd>
      break;
 80065d6:	e016      	b.n	8006606 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	2201      	movs	r2, #1
 80065de:	2104      	movs	r1, #4
 80065e0:	4618      	mov	r0, r3
 80065e2:	f001 f85d 	bl	80076a0 <TIM_CCxChannelCmd>
      break;
 80065e6:	e00e      	b.n	8006606 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	681b      	ldr	r3, [r3, #0]
 80065ec:	2201      	movs	r2, #1
 80065ee:	2100      	movs	r1, #0
 80065f0:	4618      	mov	r0, r3
 80065f2:	f001 f855 	bl	80076a0 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	2201      	movs	r2, #1
 80065fc:	2104      	movs	r1, #4
 80065fe:	4618      	mov	r0, r3
 8006600:	f001 f84e 	bl	80076a0 <TIM_CCxChannelCmd>
      break;
 8006604:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0201 	orr.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006616:	2300      	movs	r3, #0
}
 8006618:	4618      	mov	r0, r3
 800661a:	3710      	adds	r7, #16
 800661c:	46bd      	mov	sp, r7
 800661e:	bd80      	pop	{r7, pc}

08006620 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006620:	b580      	push	{r7, lr}
 8006622:	b082      	sub	sp, #8
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	691b      	ldr	r3, [r3, #16]
 800662e:	f003 0302 	and.w	r3, r3, #2
 8006632:	2b02      	cmp	r3, #2
 8006634:	d122      	bne.n	800667c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	68db      	ldr	r3, [r3, #12]
 800663c:	f003 0302 	and.w	r3, r3, #2
 8006640:	2b02      	cmp	r3, #2
 8006642:	d11b      	bne.n	800667c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	681b      	ldr	r3, [r3, #0]
 8006648:	f06f 0202 	mvn.w	r2, #2
 800664c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	2201      	movs	r2, #1
 8006652:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	699b      	ldr	r3, [r3, #24]
 800665a:	f003 0303 	and.w	r3, r3, #3
 800665e:	2b00      	cmp	r3, #0
 8006660:	d003      	beq.n	800666a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006662:	6878      	ldr	r0, [r7, #4]
 8006664:	f000 fb90 	bl	8006d88 <HAL_TIM_IC_CaptureCallback>
 8006668:	e005      	b.n	8006676 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800666a:	6878      	ldr	r0, [r7, #4]
 800666c:	f000 fb82 	bl	8006d74 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006670:	6878      	ldr	r0, [r7, #4]
 8006672:	f000 fb93 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	691b      	ldr	r3, [r3, #16]
 8006682:	f003 0304 	and.w	r3, r3, #4
 8006686:	2b04      	cmp	r3, #4
 8006688:	d122      	bne.n	80066d0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	68db      	ldr	r3, [r3, #12]
 8006690:	f003 0304 	and.w	r3, r3, #4
 8006694:	2b04      	cmp	r3, #4
 8006696:	d11b      	bne.n	80066d0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f06f 0204 	mvn.w	r2, #4
 80066a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	2202      	movs	r2, #2
 80066a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	699b      	ldr	r3, [r3, #24]
 80066ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80066b2:	2b00      	cmp	r3, #0
 80066b4:	d003      	beq.n	80066be <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80066b6:	6878      	ldr	r0, [r7, #4]
 80066b8:	f000 fb66 	bl	8006d88 <HAL_TIM_IC_CaptureCallback>
 80066bc:	e005      	b.n	80066ca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f000 fb58 	bl	8006d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80066c4:	6878      	ldr	r0, [r7, #4]
 80066c6:	f000 fb69 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80066ca:	687b      	ldr	r3, [r7, #4]
 80066cc:	2200      	movs	r2, #0
 80066ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	f003 0308 	and.w	r3, r3, #8
 80066da:	2b08      	cmp	r3, #8
 80066dc:	d122      	bne.n	8006724 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	68db      	ldr	r3, [r3, #12]
 80066e4:	f003 0308 	and.w	r3, r3, #8
 80066e8:	2b08      	cmp	r3, #8
 80066ea:	d11b      	bne.n	8006724 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f06f 0208 	mvn.w	r2, #8
 80066f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	2204      	movs	r2, #4
 80066fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80066fc:	687b      	ldr	r3, [r7, #4]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	69db      	ldr	r3, [r3, #28]
 8006702:	f003 0303 	and.w	r3, r3, #3
 8006706:	2b00      	cmp	r3, #0
 8006708:	d003      	beq.n	8006712 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800670a:	6878      	ldr	r0, [r7, #4]
 800670c:	f000 fb3c 	bl	8006d88 <HAL_TIM_IC_CaptureCallback>
 8006710:	e005      	b.n	800671e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006712:	6878      	ldr	r0, [r7, #4]
 8006714:	f000 fb2e 	bl	8006d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006718:	6878      	ldr	r0, [r7, #4]
 800671a:	f000 fb3f 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2200      	movs	r2, #0
 8006722:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006724:	687b      	ldr	r3, [r7, #4]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	691b      	ldr	r3, [r3, #16]
 800672a:	f003 0310 	and.w	r3, r3, #16
 800672e:	2b10      	cmp	r3, #16
 8006730:	d122      	bne.n	8006778 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006732:	687b      	ldr	r3, [r7, #4]
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	68db      	ldr	r3, [r3, #12]
 8006738:	f003 0310 	and.w	r3, r3, #16
 800673c:	2b10      	cmp	r3, #16
 800673e:	d11b      	bne.n	8006778 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	f06f 0210 	mvn.w	r2, #16
 8006748:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	2208      	movs	r2, #8
 800674e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	69db      	ldr	r3, [r3, #28]
 8006756:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800675a:	2b00      	cmp	r3, #0
 800675c:	d003      	beq.n	8006766 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800675e:	6878      	ldr	r0, [r7, #4]
 8006760:	f000 fb12 	bl	8006d88 <HAL_TIM_IC_CaptureCallback>
 8006764:	e005      	b.n	8006772 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006766:	6878      	ldr	r0, [r7, #4]
 8006768:	f000 fb04 	bl	8006d74 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800676c:	6878      	ldr	r0, [r7, #4]
 800676e:	f000 fb15 	bl	8006d9c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2200      	movs	r2, #0
 8006776:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	681b      	ldr	r3, [r3, #0]
 800677c:	691b      	ldr	r3, [r3, #16]
 800677e:	f003 0301 	and.w	r3, r3, #1
 8006782:	2b01      	cmp	r3, #1
 8006784:	d10e      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006786:	687b      	ldr	r3, [r7, #4]
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	68db      	ldr	r3, [r3, #12]
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b01      	cmp	r3, #1
 8006792:	d107      	bne.n	80067a4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	f06f 0201 	mvn.w	r2, #1
 800679c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800679e:	6878      	ldr	r0, [r7, #4]
 80067a0:	f7fb f802 	bl	80017a8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80067a4:	687b      	ldr	r3, [r7, #4]
 80067a6:	681b      	ldr	r3, [r3, #0]
 80067a8:	691b      	ldr	r3, [r3, #16]
 80067aa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ae:	2b80      	cmp	r3, #128	; 0x80
 80067b0:	d10e      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067b2:	687b      	ldr	r3, [r7, #4]
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	68db      	ldr	r3, [r3, #12]
 80067b8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067bc:	2b80      	cmp	r3, #128	; 0x80
 80067be:	d107      	bne.n	80067d0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80067c0:	687b      	ldr	r3, [r7, #4]
 80067c2:	681b      	ldr	r3, [r3, #0]
 80067c4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80067c8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f001 fa00 	bl	8007bd0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	691b      	ldr	r3, [r3, #16]
 80067d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067da:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80067de:	d10e      	bne.n	80067fe <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80067ea:	2b80      	cmp	r3, #128	; 0x80
 80067ec:	d107      	bne.n	80067fe <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80067f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80067f8:	6878      	ldr	r0, [r7, #4]
 80067fa:	f001 f9f3 	bl	8007be4 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006808:	2b40      	cmp	r3, #64	; 0x40
 800680a:	d10e      	bne.n	800682a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68db      	ldr	r3, [r3, #12]
 8006812:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006816:	2b40      	cmp	r3, #64	; 0x40
 8006818:	d107      	bne.n	800682a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006822:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006824:	6878      	ldr	r0, [r7, #4]
 8006826:	f000 fac3 	bl	8006db0 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	691b      	ldr	r3, [r3, #16]
 8006830:	f003 0320 	and.w	r3, r3, #32
 8006834:	2b20      	cmp	r3, #32
 8006836:	d10e      	bne.n	8006856 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006838:	687b      	ldr	r3, [r7, #4]
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	f003 0320 	and.w	r3, r3, #32
 8006842:	2b20      	cmp	r3, #32
 8006844:	d107      	bne.n	8006856 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006846:	687b      	ldr	r3, [r7, #4]
 8006848:	681b      	ldr	r3, [r3, #0]
 800684a:	f06f 0220 	mvn.w	r2, #32
 800684e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f001 f9b3 	bl	8007bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	691b      	ldr	r3, [r3, #16]
 800685c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006860:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006864:	d10f      	bne.n	8006886 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	68db      	ldr	r3, [r3, #12]
 800686c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006870:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006874:	d107      	bne.n	8006886 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	681b      	ldr	r3, [r3, #0]
 800687a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800687e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006880:	6878      	ldr	r0, [r7, #4]
 8006882:	f001 f9b9 	bl	8007bf8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	691b      	ldr	r3, [r3, #16]
 800688c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006890:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006894:	d10f      	bne.n	80068b6 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	68db      	ldr	r3, [r3, #12]
 800689c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80068a0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80068a4:	d107      	bne.n	80068b6 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80068ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 80068b0:	6878      	ldr	r0, [r7, #4]
 80068b2:	f001 f9ab 	bl	8007c0c <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	691b      	ldr	r3, [r3, #16]
 80068bc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068c4:	d10f      	bne.n	80068e6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	68db      	ldr	r3, [r3, #12]
 80068cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80068d4:	d107      	bne.n	80068e6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	681b      	ldr	r3, [r3, #0]
 80068da:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80068de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80068e0:	6878      	ldr	r0, [r7, #4]
 80068e2:	f001 f99d 	bl	8007c20 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	681b      	ldr	r3, [r3, #0]
 80068ea:	691b      	ldr	r3, [r3, #16]
 80068ec:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80068f0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80068f4:	d10f      	bne.n	8006916 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	681b      	ldr	r3, [r3, #0]
 80068fa:	68db      	ldr	r3, [r3, #12]
 80068fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006900:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8006904:	d107      	bne.n	8006916 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 800690e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8006910:	6878      	ldr	r0, [r7, #4]
 8006912:	f001 f98f 	bl	8007c34 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006916:	bf00      	nop
 8006918:	3708      	adds	r7, #8
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
	...

08006920 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006920:	b580      	push	{r7, lr}
 8006922:	b086      	sub	sp, #24
 8006924:	af00      	add	r7, sp, #0
 8006926:	60f8      	str	r0, [r7, #12]
 8006928:	60b9      	str	r1, [r7, #8]
 800692a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800692c:	2300      	movs	r3, #0
 800692e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006936:	2b01      	cmp	r3, #1
 8006938:	d101      	bne.n	800693e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800693a:	2302      	movs	r3, #2
 800693c:	e0ff      	b.n	8006b3e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800693e:	68fb      	ldr	r3, [r7, #12]
 8006940:	2201      	movs	r2, #1
 8006942:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	2b14      	cmp	r3, #20
 800694a:	f200 80f0 	bhi.w	8006b2e <HAL_TIM_PWM_ConfigChannel+0x20e>
 800694e:	a201      	add	r2, pc, #4	; (adr r2, 8006954 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006950:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006954:	080069a9 	.word	0x080069a9
 8006958:	08006b2f 	.word	0x08006b2f
 800695c:	08006b2f 	.word	0x08006b2f
 8006960:	08006b2f 	.word	0x08006b2f
 8006964:	080069e9 	.word	0x080069e9
 8006968:	08006b2f 	.word	0x08006b2f
 800696c:	08006b2f 	.word	0x08006b2f
 8006970:	08006b2f 	.word	0x08006b2f
 8006974:	08006a2b 	.word	0x08006a2b
 8006978:	08006b2f 	.word	0x08006b2f
 800697c:	08006b2f 	.word	0x08006b2f
 8006980:	08006b2f 	.word	0x08006b2f
 8006984:	08006a6b 	.word	0x08006a6b
 8006988:	08006b2f 	.word	0x08006b2f
 800698c:	08006b2f 	.word	0x08006b2f
 8006990:	08006b2f 	.word	0x08006b2f
 8006994:	08006aad 	.word	0x08006aad
 8006998:	08006b2f 	.word	0x08006b2f
 800699c:	08006b2f 	.word	0x08006b2f
 80069a0:	08006b2f 	.word	0x08006b2f
 80069a4:	08006aed 	.word	0x08006aed
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80069a8:	68fb      	ldr	r3, [r7, #12]
 80069aa:	681b      	ldr	r3, [r3, #0]
 80069ac:	68b9      	ldr	r1, [r7, #8]
 80069ae:	4618      	mov	r0, r3
 80069b0:	f000 fab0 	bl	8006f14 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80069b4:	68fb      	ldr	r3, [r7, #12]
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	699a      	ldr	r2, [r3, #24]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f042 0208 	orr.w	r2, r2, #8
 80069c2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	681b      	ldr	r3, [r3, #0]
 80069c8:	699a      	ldr	r2, [r3, #24]
 80069ca:	68fb      	ldr	r3, [r7, #12]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f022 0204 	bic.w	r2, r2, #4
 80069d2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	681b      	ldr	r3, [r3, #0]
 80069d8:	6999      	ldr	r1, [r3, #24]
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	691a      	ldr	r2, [r3, #16]
 80069de:	68fb      	ldr	r3, [r7, #12]
 80069e0:	681b      	ldr	r3, [r3, #0]
 80069e2:	430a      	orrs	r2, r1
 80069e4:	619a      	str	r2, [r3, #24]
      break;
 80069e6:	e0a5      	b.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	68b9      	ldr	r1, [r7, #8]
 80069ee:	4618      	mov	r0, r3
 80069f0:	f000 fb2a 	bl	8007048 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	699a      	ldr	r2, [r3, #24]
 80069fa:	68fb      	ldr	r3, [r7, #12]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a02:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006a04:	68fb      	ldr	r3, [r7, #12]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	699a      	ldr	r2, [r3, #24]
 8006a0a:	68fb      	ldr	r3, [r7, #12]
 8006a0c:	681b      	ldr	r3, [r3, #0]
 8006a0e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a12:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	6999      	ldr	r1, [r3, #24]
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	021a      	lsls	r2, r3, #8
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	681b      	ldr	r3, [r3, #0]
 8006a24:	430a      	orrs	r2, r1
 8006a26:	619a      	str	r2, [r3, #24]
      break;
 8006a28:	e084      	b.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006a2a:	68fb      	ldr	r3, [r7, #12]
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	68b9      	ldr	r1, [r7, #8]
 8006a30:	4618      	mov	r0, r3
 8006a32:	f000 fb9d 	bl	8007170 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006a36:	68fb      	ldr	r3, [r7, #12]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	69da      	ldr	r2, [r3, #28]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	f042 0208 	orr.w	r2, r2, #8
 8006a44:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	69da      	ldr	r2, [r3, #28]
 8006a4c:	68fb      	ldr	r3, [r7, #12]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f022 0204 	bic.w	r2, r2, #4
 8006a54:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006a56:	68fb      	ldr	r3, [r7, #12]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	69d9      	ldr	r1, [r3, #28]
 8006a5c:	68bb      	ldr	r3, [r7, #8]
 8006a5e:	691a      	ldr	r2, [r3, #16]
 8006a60:	68fb      	ldr	r3, [r7, #12]
 8006a62:	681b      	ldr	r3, [r3, #0]
 8006a64:	430a      	orrs	r2, r1
 8006a66:	61da      	str	r2, [r3, #28]
      break;
 8006a68:	e064      	b.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	681b      	ldr	r3, [r3, #0]
 8006a6e:	68b9      	ldr	r1, [r7, #8]
 8006a70:	4618      	mov	r0, r3
 8006a72:	f000 fc0f 	bl	8007294 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006a76:	68fb      	ldr	r3, [r7, #12]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	69da      	ldr	r2, [r3, #28]
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	681b      	ldr	r3, [r3, #0]
 8006a80:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006a84:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	69da      	ldr	r2, [r3, #28]
 8006a8c:	68fb      	ldr	r3, [r7, #12]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006a94:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	69d9      	ldr	r1, [r3, #28]
 8006a9c:	68bb      	ldr	r3, [r7, #8]
 8006a9e:	691b      	ldr	r3, [r3, #16]
 8006aa0:	021a      	lsls	r2, r3, #8
 8006aa2:	68fb      	ldr	r3, [r7, #12]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	430a      	orrs	r2, r1
 8006aa8:	61da      	str	r2, [r3, #28]
      break;
 8006aaa:	e043      	b.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8006aac:	68fb      	ldr	r3, [r7, #12]
 8006aae:	681b      	ldr	r3, [r3, #0]
 8006ab0:	68b9      	ldr	r1, [r7, #8]
 8006ab2:	4618      	mov	r0, r3
 8006ab4:	f000 fc82 	bl	80073bc <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006abe:	68fb      	ldr	r3, [r7, #12]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	f042 0208 	orr.w	r2, r2, #8
 8006ac6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006ac8:	68fb      	ldr	r3, [r7, #12]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006ace:	68fb      	ldr	r3, [r7, #12]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	f022 0204 	bic.w	r2, r2, #4
 8006ad6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8006ad8:	68fb      	ldr	r3, [r7, #12]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006ade:	68bb      	ldr	r3, [r7, #8]
 8006ae0:	691a      	ldr	r2, [r3, #16]
 8006ae2:	68fb      	ldr	r3, [r7, #12]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	430a      	orrs	r2, r1
 8006ae8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006aea:	e023      	b.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8006aec:	68fb      	ldr	r3, [r7, #12]
 8006aee:	681b      	ldr	r3, [r3, #0]
 8006af0:	68b9      	ldr	r1, [r7, #8]
 8006af2:	4618      	mov	r0, r3
 8006af4:	f000 fccc 	bl	8007490 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006afe:	68fb      	ldr	r3, [r7, #12]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006b06:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	681b      	ldr	r3, [r3, #0]
 8006b12:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006b16:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8006b18:	68fb      	ldr	r3, [r7, #12]
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	691b      	ldr	r3, [r3, #16]
 8006b22:	021a      	lsls	r2, r3, #8
 8006b24:	68fb      	ldr	r3, [r7, #12]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	430a      	orrs	r2, r1
 8006b2a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8006b2c:	e002      	b.n	8006b34 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	75fb      	strb	r3, [r7, #23]
      break;
 8006b32:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	2200      	movs	r2, #0
 8006b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006b3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006b3e:	4618      	mov	r0, r3
 8006b40:	3718      	adds	r7, #24
 8006b42:	46bd      	mov	sp, r7
 8006b44:	bd80      	pop	{r7, pc}
 8006b46:	bf00      	nop

08006b48 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006b48:	b580      	push	{r7, lr}
 8006b4a:	b084      	sub	sp, #16
 8006b4c:	af00      	add	r7, sp, #0
 8006b4e:	6078      	str	r0, [r7, #4]
 8006b50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006b52:	2300      	movs	r3, #0
 8006b54:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006b5c:	2b01      	cmp	r3, #1
 8006b5e:	d101      	bne.n	8006b64 <HAL_TIM_ConfigClockSource+0x1c>
 8006b60:	2302      	movs	r3, #2
 8006b62:	e0f6      	b.n	8006d52 <HAL_TIM_ConfigClockSource+0x20a>
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	2201      	movs	r2, #1
 8006b68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	2202      	movs	r2, #2
 8006b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	689b      	ldr	r3, [r3, #8]
 8006b7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006b7c:	68bb      	ldr	r3, [r7, #8]
 8006b7e:	f423 1344 	bic.w	r3, r3, #3211264	; 0x310000
 8006b82:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006b86:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006b8e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006b90:	687b      	ldr	r3, [r7, #4]
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	68ba      	ldr	r2, [r7, #8]
 8006b96:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	4a6f      	ldr	r2, [pc, #444]	; (8006d5c <HAL_TIM_ConfigClockSource+0x214>)
 8006b9e:	4293      	cmp	r3, r2
 8006ba0:	f000 80c1 	beq.w	8006d26 <HAL_TIM_ConfigClockSource+0x1de>
 8006ba4:	4a6d      	ldr	r2, [pc, #436]	; (8006d5c <HAL_TIM_ConfigClockSource+0x214>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	f200 80c6 	bhi.w	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bac:	4a6c      	ldr	r2, [pc, #432]	; (8006d60 <HAL_TIM_ConfigClockSource+0x218>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	f000 80b9 	beq.w	8006d26 <HAL_TIM_ConfigClockSource+0x1de>
 8006bb4:	4a6a      	ldr	r2, [pc, #424]	; (8006d60 <HAL_TIM_ConfigClockSource+0x218>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	f200 80be 	bhi.w	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bbc:	4a69      	ldr	r2, [pc, #420]	; (8006d64 <HAL_TIM_ConfigClockSource+0x21c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	f000 80b1 	beq.w	8006d26 <HAL_TIM_ConfigClockSource+0x1de>
 8006bc4:	4a67      	ldr	r2, [pc, #412]	; (8006d64 <HAL_TIM_ConfigClockSource+0x21c>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	f200 80b6 	bhi.w	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bcc:	4a66      	ldr	r2, [pc, #408]	; (8006d68 <HAL_TIM_ConfigClockSource+0x220>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	f000 80a9 	beq.w	8006d26 <HAL_TIM_ConfigClockSource+0x1de>
 8006bd4:	4a64      	ldr	r2, [pc, #400]	; (8006d68 <HAL_TIM_ConfigClockSource+0x220>)
 8006bd6:	4293      	cmp	r3, r2
 8006bd8:	f200 80ae 	bhi.w	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bdc:	4a63      	ldr	r2, [pc, #396]	; (8006d6c <HAL_TIM_ConfigClockSource+0x224>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	f000 80a1 	beq.w	8006d26 <HAL_TIM_ConfigClockSource+0x1de>
 8006be4:	4a61      	ldr	r2, [pc, #388]	; (8006d6c <HAL_TIM_ConfigClockSource+0x224>)
 8006be6:	4293      	cmp	r3, r2
 8006be8:	f200 80a6 	bhi.w	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bec:	4a60      	ldr	r2, [pc, #384]	; (8006d70 <HAL_TIM_ConfigClockSource+0x228>)
 8006bee:	4293      	cmp	r3, r2
 8006bf0:	f000 8099 	beq.w	8006d26 <HAL_TIM_ConfigClockSource+0x1de>
 8006bf4:	4a5e      	ldr	r2, [pc, #376]	; (8006d70 <HAL_TIM_ConfigClockSource+0x228>)
 8006bf6:	4293      	cmp	r3, r2
 8006bf8:	f200 809e 	bhi.w	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006bfc:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c00:	f000 8091 	beq.w	8006d26 <HAL_TIM_ConfigClockSource+0x1de>
 8006c04:	f1b3 1f10 	cmp.w	r3, #1048592	; 0x100010
 8006c08:	f200 8096 	bhi.w	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c0c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c10:	f000 8089 	beq.w	8006d26 <HAL_TIM_ConfigClockSource+0x1de>
 8006c14:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006c18:	f200 808e 	bhi.w	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c1c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c20:	d03e      	beq.n	8006ca0 <HAL_TIM_ConfigClockSource+0x158>
 8006c22:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006c26:	f200 8087 	bhi.w	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c2e:	f000 8086 	beq.w	8006d3e <HAL_TIM_ConfigClockSource+0x1f6>
 8006c32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006c36:	d87f      	bhi.n	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c38:	2b70      	cmp	r3, #112	; 0x70
 8006c3a:	d01a      	beq.n	8006c72 <HAL_TIM_ConfigClockSource+0x12a>
 8006c3c:	2b70      	cmp	r3, #112	; 0x70
 8006c3e:	d87b      	bhi.n	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c40:	2b60      	cmp	r3, #96	; 0x60
 8006c42:	d050      	beq.n	8006ce6 <HAL_TIM_ConfigClockSource+0x19e>
 8006c44:	2b60      	cmp	r3, #96	; 0x60
 8006c46:	d877      	bhi.n	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c48:	2b50      	cmp	r3, #80	; 0x50
 8006c4a:	d03c      	beq.n	8006cc6 <HAL_TIM_ConfigClockSource+0x17e>
 8006c4c:	2b50      	cmp	r3, #80	; 0x50
 8006c4e:	d873      	bhi.n	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c50:	2b40      	cmp	r3, #64	; 0x40
 8006c52:	d058      	beq.n	8006d06 <HAL_TIM_ConfigClockSource+0x1be>
 8006c54:	2b40      	cmp	r3, #64	; 0x40
 8006c56:	d86f      	bhi.n	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c58:	2b30      	cmp	r3, #48	; 0x30
 8006c5a:	d064      	beq.n	8006d26 <HAL_TIM_ConfigClockSource+0x1de>
 8006c5c:	2b30      	cmp	r3, #48	; 0x30
 8006c5e:	d86b      	bhi.n	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c60:	2b20      	cmp	r3, #32
 8006c62:	d060      	beq.n	8006d26 <HAL_TIM_ConfigClockSource+0x1de>
 8006c64:	2b20      	cmp	r3, #32
 8006c66:	d867      	bhi.n	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
 8006c68:	2b00      	cmp	r3, #0
 8006c6a:	d05c      	beq.n	8006d26 <HAL_TIM_ConfigClockSource+0x1de>
 8006c6c:	2b10      	cmp	r3, #16
 8006c6e:	d05a      	beq.n	8006d26 <HAL_TIM_ConfigClockSource+0x1de>
 8006c70:	e062      	b.n	8006d38 <HAL_TIM_ConfigClockSource+0x1f0>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006c72:	687b      	ldr	r3, [r7, #4]
 8006c74:	6818      	ldr	r0, [r3, #0]
 8006c76:	683b      	ldr	r3, [r7, #0]
 8006c78:	6899      	ldr	r1, [r3, #8]
 8006c7a:	683b      	ldr	r3, [r7, #0]
 8006c7c:	685a      	ldr	r2, [r3, #4]
 8006c7e:	683b      	ldr	r3, [r7, #0]
 8006c80:	68db      	ldr	r3, [r3, #12]
 8006c82:	f000 fced 	bl	8007660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006c8e:	68bb      	ldr	r3, [r7, #8]
 8006c90:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006c94:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68ba      	ldr	r2, [r7, #8]
 8006c9c:	609a      	str	r2, [r3, #8]
      break;
 8006c9e:	e04f      	b.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f8>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006ca0:	687b      	ldr	r3, [r7, #4]
 8006ca2:	6818      	ldr	r0, [r3, #0]
 8006ca4:	683b      	ldr	r3, [r7, #0]
 8006ca6:	6899      	ldr	r1, [r3, #8]
 8006ca8:	683b      	ldr	r3, [r7, #0]
 8006caa:	685a      	ldr	r2, [r3, #4]
 8006cac:	683b      	ldr	r3, [r7, #0]
 8006cae:	68db      	ldr	r3, [r3, #12]
 8006cb0:	f000 fcd6 	bl	8007660 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	689a      	ldr	r2, [r3, #8]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006cc2:	609a      	str	r2, [r3, #8]
      break;
 8006cc4:	e03c      	b.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	6818      	ldr	r0, [r3, #0]
 8006cca:	683b      	ldr	r3, [r7, #0]
 8006ccc:	6859      	ldr	r1, [r3, #4]
 8006cce:	683b      	ldr	r3, [r7, #0]
 8006cd0:	68db      	ldr	r3, [r3, #12]
 8006cd2:	461a      	mov	r2, r3
 8006cd4:	f000 fc48 	bl	8007568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	2150      	movs	r1, #80	; 0x50
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f000 fca1 	bl	8007626 <TIM_ITRx_SetConfig>
      break;
 8006ce4:	e02c      	b.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	6818      	ldr	r0, [r3, #0]
 8006cea:	683b      	ldr	r3, [r7, #0]
 8006cec:	6859      	ldr	r1, [r3, #4]
 8006cee:	683b      	ldr	r3, [r7, #0]
 8006cf0:	68db      	ldr	r3, [r3, #12]
 8006cf2:	461a      	mov	r2, r3
 8006cf4:	f000 fc67 	bl	80075c6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2160      	movs	r1, #96	; 0x60
 8006cfe:	4618      	mov	r0, r3
 8006d00:	f000 fc91 	bl	8007626 <TIM_ITRx_SetConfig>
      break;
 8006d04:	e01c      	b.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f8>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	6818      	ldr	r0, [r3, #0]
 8006d0a:	683b      	ldr	r3, [r7, #0]
 8006d0c:	6859      	ldr	r1, [r3, #4]
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	68db      	ldr	r3, [r3, #12]
 8006d12:	461a      	mov	r2, r3
 8006d14:	f000 fc28 	bl	8007568 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	681b      	ldr	r3, [r3, #0]
 8006d1c:	2140      	movs	r1, #64	; 0x40
 8006d1e:	4618      	mov	r0, r3
 8006d20:	f000 fc81 	bl	8007626 <TIM_ITRx_SetConfig>
      break;
 8006d24:	e00c      	b.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f8>
    case TIM_CLOCKSOURCE_ITR11:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_INSTANCE((htim->Instance), sClockSourceConfig->ClockSource));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	681a      	ldr	r2, [r3, #0]
 8006d2a:	683b      	ldr	r3, [r7, #0]
 8006d2c:	681b      	ldr	r3, [r3, #0]
 8006d2e:	4619      	mov	r1, r3
 8006d30:	4610      	mov	r0, r2
 8006d32:	f000 fc78 	bl	8007626 <TIM_ITRx_SetConfig>
      break;
 8006d36:	e003      	b.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f8>
    }

    default:
      status = HAL_ERROR;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	73fb      	strb	r3, [r7, #15]
      break;
 8006d3c:	e000      	b.n	8006d40 <HAL_TIM_ConfigClockSource+0x1f8>
      break;
 8006d3e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d50:	7bfb      	ldrb	r3, [r7, #15]
}
 8006d52:	4618      	mov	r0, r3
 8006d54:	3710      	adds	r7, #16
 8006d56:	46bd      	mov	sp, r7
 8006d58:	bd80      	pop	{r7, pc}
 8006d5a:	bf00      	nop
 8006d5c:	00100070 	.word	0x00100070
 8006d60:	00100060 	.word	0x00100060
 8006d64:	00100050 	.word	0x00100050
 8006d68:	00100040 	.word	0x00100040
 8006d6c:	00100030 	.word	0x00100030
 8006d70:	00100020 	.word	0x00100020

08006d74 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006d74:	b480      	push	{r7}
 8006d76:	b083      	sub	sp, #12
 8006d78:	af00      	add	r7, sp, #0
 8006d7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006d7c:	bf00      	nop
 8006d7e:	370c      	adds	r7, #12
 8006d80:	46bd      	mov	sp, r7
 8006d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d86:	4770      	bx	lr

08006d88 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8006d88:	b480      	push	{r7}
 8006d8a:	b083      	sub	sp, #12
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006d90:	bf00      	nop
 8006d92:	370c      	adds	r7, #12
 8006d94:	46bd      	mov	sp, r7
 8006d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9a:	4770      	bx	lr

08006d9c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006d9c:	b480      	push	{r7}
 8006d9e:	b083      	sub	sp, #12
 8006da0:	af00      	add	r7, sp, #0
 8006da2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006da4:	bf00      	nop
 8006da6:	370c      	adds	r7, #12
 8006da8:	46bd      	mov	sp, r7
 8006daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dae:	4770      	bx	lr

08006db0 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006db0:	b480      	push	{r7}
 8006db2:	b083      	sub	sp, #12
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006db8:	bf00      	nop
 8006dba:	370c      	adds	r7, #12
 8006dbc:	46bd      	mov	sp, r7
 8006dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dc2:	4770      	bx	lr

08006dc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006dc4:	b480      	push	{r7}
 8006dc6:	b085      	sub	sp, #20
 8006dc8:	af00      	add	r7, sp, #0
 8006dca:	6078      	str	r0, [r7, #4]
 8006dcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	4a46      	ldr	r2, [pc, #280]	; (8006ef0 <TIM_Base_SetConfig+0x12c>)
 8006dd8:	4293      	cmp	r3, r2
 8006dda:	d017      	beq.n	8006e0c <TIM_Base_SetConfig+0x48>
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006de2:	d013      	beq.n	8006e0c <TIM_Base_SetConfig+0x48>
 8006de4:	687b      	ldr	r3, [r7, #4]
 8006de6:	4a43      	ldr	r2, [pc, #268]	; (8006ef4 <TIM_Base_SetConfig+0x130>)
 8006de8:	4293      	cmp	r3, r2
 8006dea:	d00f      	beq.n	8006e0c <TIM_Base_SetConfig+0x48>
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	4a42      	ldr	r2, [pc, #264]	; (8006ef8 <TIM_Base_SetConfig+0x134>)
 8006df0:	4293      	cmp	r3, r2
 8006df2:	d00b      	beq.n	8006e0c <TIM_Base_SetConfig+0x48>
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	4a41      	ldr	r2, [pc, #260]	; (8006efc <TIM_Base_SetConfig+0x138>)
 8006df8:	4293      	cmp	r3, r2
 8006dfa:	d007      	beq.n	8006e0c <TIM_Base_SetConfig+0x48>
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	4a40      	ldr	r2, [pc, #256]	; (8006f00 <TIM_Base_SetConfig+0x13c>)
 8006e00:	4293      	cmp	r3, r2
 8006e02:	d003      	beq.n	8006e0c <TIM_Base_SetConfig+0x48>
 8006e04:	687b      	ldr	r3, [r7, #4]
 8006e06:	4a3f      	ldr	r2, [pc, #252]	; (8006f04 <TIM_Base_SetConfig+0x140>)
 8006e08:	4293      	cmp	r3, r2
 8006e0a:	d108      	bne.n	8006e1e <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006e12:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006e14:	683b      	ldr	r3, [r7, #0]
 8006e16:	685b      	ldr	r3, [r3, #4]
 8006e18:	68fa      	ldr	r2, [r7, #12]
 8006e1a:	4313      	orrs	r3, r2
 8006e1c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	4a33      	ldr	r2, [pc, #204]	; (8006ef0 <TIM_Base_SetConfig+0x12c>)
 8006e22:	4293      	cmp	r3, r2
 8006e24:	d023      	beq.n	8006e6e <TIM_Base_SetConfig+0xaa>
 8006e26:	687b      	ldr	r3, [r7, #4]
 8006e28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006e2c:	d01f      	beq.n	8006e6e <TIM_Base_SetConfig+0xaa>
 8006e2e:	687b      	ldr	r3, [r7, #4]
 8006e30:	4a30      	ldr	r2, [pc, #192]	; (8006ef4 <TIM_Base_SetConfig+0x130>)
 8006e32:	4293      	cmp	r3, r2
 8006e34:	d01b      	beq.n	8006e6e <TIM_Base_SetConfig+0xaa>
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	4a2f      	ldr	r2, [pc, #188]	; (8006ef8 <TIM_Base_SetConfig+0x134>)
 8006e3a:	4293      	cmp	r3, r2
 8006e3c:	d017      	beq.n	8006e6e <TIM_Base_SetConfig+0xaa>
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	4a2e      	ldr	r2, [pc, #184]	; (8006efc <TIM_Base_SetConfig+0x138>)
 8006e42:	4293      	cmp	r3, r2
 8006e44:	d013      	beq.n	8006e6e <TIM_Base_SetConfig+0xaa>
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	4a2d      	ldr	r2, [pc, #180]	; (8006f00 <TIM_Base_SetConfig+0x13c>)
 8006e4a:	4293      	cmp	r3, r2
 8006e4c:	d00f      	beq.n	8006e6e <TIM_Base_SetConfig+0xaa>
 8006e4e:	687b      	ldr	r3, [r7, #4]
 8006e50:	4a2d      	ldr	r2, [pc, #180]	; (8006f08 <TIM_Base_SetConfig+0x144>)
 8006e52:	4293      	cmp	r3, r2
 8006e54:	d00b      	beq.n	8006e6e <TIM_Base_SetConfig+0xaa>
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	4a2c      	ldr	r2, [pc, #176]	; (8006f0c <TIM_Base_SetConfig+0x148>)
 8006e5a:	4293      	cmp	r3, r2
 8006e5c:	d007      	beq.n	8006e6e <TIM_Base_SetConfig+0xaa>
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	4a2b      	ldr	r2, [pc, #172]	; (8006f10 <TIM_Base_SetConfig+0x14c>)
 8006e62:	4293      	cmp	r3, r2
 8006e64:	d003      	beq.n	8006e6e <TIM_Base_SetConfig+0xaa>
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	4a26      	ldr	r2, [pc, #152]	; (8006f04 <TIM_Base_SetConfig+0x140>)
 8006e6a:	4293      	cmp	r3, r2
 8006e6c:	d108      	bne.n	8006e80 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e74:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006e76:	683b      	ldr	r3, [r7, #0]
 8006e78:	68db      	ldr	r3, [r3, #12]
 8006e7a:	68fa      	ldr	r2, [r7, #12]
 8006e7c:	4313      	orrs	r3, r2
 8006e7e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006e86:	683b      	ldr	r3, [r7, #0]
 8006e88:	695b      	ldr	r3, [r3, #20]
 8006e8a:	4313      	orrs	r3, r2
 8006e8c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006e8e:	687b      	ldr	r3, [r7, #4]
 8006e90:	68fa      	ldr	r2, [r7, #12]
 8006e92:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006e94:	683b      	ldr	r3, [r7, #0]
 8006e96:	689a      	ldr	r2, [r3, #8]
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006e9c:	683b      	ldr	r3, [r7, #0]
 8006e9e:	681a      	ldr	r2, [r3, #0]
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006ea4:	687b      	ldr	r3, [r7, #4]
 8006ea6:	4a12      	ldr	r2, [pc, #72]	; (8006ef0 <TIM_Base_SetConfig+0x12c>)
 8006ea8:	4293      	cmp	r3, r2
 8006eaa:	d013      	beq.n	8006ed4 <TIM_Base_SetConfig+0x110>
 8006eac:	687b      	ldr	r3, [r7, #4]
 8006eae:	4a14      	ldr	r2, [pc, #80]	; (8006f00 <TIM_Base_SetConfig+0x13c>)
 8006eb0:	4293      	cmp	r3, r2
 8006eb2:	d00f      	beq.n	8006ed4 <TIM_Base_SetConfig+0x110>
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	4a14      	ldr	r2, [pc, #80]	; (8006f08 <TIM_Base_SetConfig+0x144>)
 8006eb8:	4293      	cmp	r3, r2
 8006eba:	d00b      	beq.n	8006ed4 <TIM_Base_SetConfig+0x110>
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	4a13      	ldr	r2, [pc, #76]	; (8006f0c <TIM_Base_SetConfig+0x148>)
 8006ec0:	4293      	cmp	r3, r2
 8006ec2:	d007      	beq.n	8006ed4 <TIM_Base_SetConfig+0x110>
 8006ec4:	687b      	ldr	r3, [r7, #4]
 8006ec6:	4a12      	ldr	r2, [pc, #72]	; (8006f10 <TIM_Base_SetConfig+0x14c>)
 8006ec8:	4293      	cmp	r3, r2
 8006eca:	d003      	beq.n	8006ed4 <TIM_Base_SetConfig+0x110>
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	4a0d      	ldr	r2, [pc, #52]	; (8006f04 <TIM_Base_SetConfig+0x140>)
 8006ed0:	4293      	cmp	r3, r2
 8006ed2:	d103      	bne.n	8006edc <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006ed4:	683b      	ldr	r3, [r7, #0]
 8006ed6:	691a      	ldr	r2, [r3, #16]
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	2201      	movs	r2, #1
 8006ee0:	615a      	str	r2, [r3, #20]
}
 8006ee2:	bf00      	nop
 8006ee4:	3714      	adds	r7, #20
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eec:	4770      	bx	lr
 8006eee:	bf00      	nop
 8006ef0:	40012c00 	.word	0x40012c00
 8006ef4:	40000400 	.word	0x40000400
 8006ef8:	40000800 	.word	0x40000800
 8006efc:	40000c00 	.word	0x40000c00
 8006f00:	40013400 	.word	0x40013400
 8006f04:	40015000 	.word	0x40015000
 8006f08:	40014000 	.word	0x40014000
 8006f0c:	40014400 	.word	0x40014400
 8006f10:	40014800 	.word	0x40014800

08006f14 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006f14:	b480      	push	{r7}
 8006f16:	b087      	sub	sp, #28
 8006f18:	af00      	add	r7, sp, #0
 8006f1a:	6078      	str	r0, [r7, #4]
 8006f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	6a1b      	ldr	r3, [r3, #32]
 8006f22:	f023 0201 	bic.w	r2, r3, #1
 8006f26:	687b      	ldr	r3, [r7, #4]
 8006f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	6a1b      	ldr	r3, [r3, #32]
 8006f2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	685b      	ldr	r3, [r3, #4]
 8006f34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006f36:	687b      	ldr	r3, [r7, #4]
 8006f38:	699b      	ldr	r3, [r3, #24]
 8006f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006f42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006f46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006f48:	68fb      	ldr	r3, [r7, #12]
 8006f4a:	f023 0303 	bic.w	r3, r3, #3
 8006f4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006f50:	683b      	ldr	r3, [r7, #0]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68fa      	ldr	r2, [r7, #12]
 8006f56:	4313      	orrs	r3, r2
 8006f58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006f5a:	697b      	ldr	r3, [r7, #20]
 8006f5c:	f023 0302 	bic.w	r3, r3, #2
 8006f60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	689b      	ldr	r3, [r3, #8]
 8006f66:	697a      	ldr	r2, [r7, #20]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	4a30      	ldr	r2, [pc, #192]	; (8007030 <TIM_OC1_SetConfig+0x11c>)
 8006f70:	4293      	cmp	r3, r2
 8006f72:	d013      	beq.n	8006f9c <TIM_OC1_SetConfig+0x88>
 8006f74:	687b      	ldr	r3, [r7, #4]
 8006f76:	4a2f      	ldr	r2, [pc, #188]	; (8007034 <TIM_OC1_SetConfig+0x120>)
 8006f78:	4293      	cmp	r3, r2
 8006f7a:	d00f      	beq.n	8006f9c <TIM_OC1_SetConfig+0x88>
 8006f7c:	687b      	ldr	r3, [r7, #4]
 8006f7e:	4a2e      	ldr	r2, [pc, #184]	; (8007038 <TIM_OC1_SetConfig+0x124>)
 8006f80:	4293      	cmp	r3, r2
 8006f82:	d00b      	beq.n	8006f9c <TIM_OC1_SetConfig+0x88>
 8006f84:	687b      	ldr	r3, [r7, #4]
 8006f86:	4a2d      	ldr	r2, [pc, #180]	; (800703c <TIM_OC1_SetConfig+0x128>)
 8006f88:	4293      	cmp	r3, r2
 8006f8a:	d007      	beq.n	8006f9c <TIM_OC1_SetConfig+0x88>
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	4a2c      	ldr	r2, [pc, #176]	; (8007040 <TIM_OC1_SetConfig+0x12c>)
 8006f90:	4293      	cmp	r3, r2
 8006f92:	d003      	beq.n	8006f9c <TIM_OC1_SetConfig+0x88>
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	4a2b      	ldr	r2, [pc, #172]	; (8007044 <TIM_OC1_SetConfig+0x130>)
 8006f98:	4293      	cmp	r3, r2
 8006f9a:	d10c      	bne.n	8006fb6 <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006f9c:	697b      	ldr	r3, [r7, #20]
 8006f9e:	f023 0308 	bic.w	r3, r3, #8
 8006fa2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006fa4:	683b      	ldr	r3, [r7, #0]
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	697a      	ldr	r2, [r7, #20]
 8006faa:	4313      	orrs	r3, r2
 8006fac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006fae:	697b      	ldr	r3, [r7, #20]
 8006fb0:	f023 0304 	bic.w	r3, r3, #4
 8006fb4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	4a1d      	ldr	r2, [pc, #116]	; (8007030 <TIM_OC1_SetConfig+0x11c>)
 8006fba:	4293      	cmp	r3, r2
 8006fbc:	d013      	beq.n	8006fe6 <TIM_OC1_SetConfig+0xd2>
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	4a1c      	ldr	r2, [pc, #112]	; (8007034 <TIM_OC1_SetConfig+0x120>)
 8006fc2:	4293      	cmp	r3, r2
 8006fc4:	d00f      	beq.n	8006fe6 <TIM_OC1_SetConfig+0xd2>
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	4a1b      	ldr	r2, [pc, #108]	; (8007038 <TIM_OC1_SetConfig+0x124>)
 8006fca:	4293      	cmp	r3, r2
 8006fcc:	d00b      	beq.n	8006fe6 <TIM_OC1_SetConfig+0xd2>
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	4a1a      	ldr	r2, [pc, #104]	; (800703c <TIM_OC1_SetConfig+0x128>)
 8006fd2:	4293      	cmp	r3, r2
 8006fd4:	d007      	beq.n	8006fe6 <TIM_OC1_SetConfig+0xd2>
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	4a19      	ldr	r2, [pc, #100]	; (8007040 <TIM_OC1_SetConfig+0x12c>)
 8006fda:	4293      	cmp	r3, r2
 8006fdc:	d003      	beq.n	8006fe6 <TIM_OC1_SetConfig+0xd2>
 8006fde:	687b      	ldr	r3, [r7, #4]
 8006fe0:	4a18      	ldr	r2, [pc, #96]	; (8007044 <TIM_OC1_SetConfig+0x130>)
 8006fe2:	4293      	cmp	r3, r2
 8006fe4:	d111      	bne.n	800700a <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006fe6:	693b      	ldr	r3, [r7, #16]
 8006fe8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006fec:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006fee:	693b      	ldr	r3, [r7, #16]
 8006ff0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ff4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006ff6:	683b      	ldr	r3, [r7, #0]
 8006ff8:	695b      	ldr	r3, [r3, #20]
 8006ffa:	693a      	ldr	r2, [r7, #16]
 8006ffc:	4313      	orrs	r3, r2
 8006ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	699b      	ldr	r3, [r3, #24]
 8007004:	693a      	ldr	r2, [r7, #16]
 8007006:	4313      	orrs	r3, r2
 8007008:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	693a      	ldr	r2, [r7, #16]
 800700e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	68fa      	ldr	r2, [r7, #12]
 8007014:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007016:	683b      	ldr	r3, [r7, #0]
 8007018:	685a      	ldr	r2, [r3, #4]
 800701a:	687b      	ldr	r3, [r7, #4]
 800701c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	697a      	ldr	r2, [r7, #20]
 8007022:	621a      	str	r2, [r3, #32]
}
 8007024:	bf00      	nop
 8007026:	371c      	adds	r7, #28
 8007028:	46bd      	mov	sp, r7
 800702a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800702e:	4770      	bx	lr
 8007030:	40012c00 	.word	0x40012c00
 8007034:	40013400 	.word	0x40013400
 8007038:	40014000 	.word	0x40014000
 800703c:	40014400 	.word	0x40014400
 8007040:	40014800 	.word	0x40014800
 8007044:	40015000 	.word	0x40015000

08007048 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007048:	b480      	push	{r7}
 800704a:	b087      	sub	sp, #28
 800704c:	af00      	add	r7, sp, #0
 800704e:	6078      	str	r0, [r7, #4]
 8007050:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	6a1b      	ldr	r3, [r3, #32]
 8007056:	f023 0210 	bic.w	r2, r3, #16
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	6a1b      	ldr	r3, [r3, #32]
 8007062:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	685b      	ldr	r3, [r3, #4]
 8007068:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	699b      	ldr	r3, [r3, #24]
 800706e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8007076:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800707a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800707c:	68fb      	ldr	r3, [r7, #12]
 800707e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007082:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007084:	683b      	ldr	r3, [r7, #0]
 8007086:	681b      	ldr	r3, [r3, #0]
 8007088:	021b      	lsls	r3, r3, #8
 800708a:	68fa      	ldr	r2, [r7, #12]
 800708c:	4313      	orrs	r3, r2
 800708e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007090:	697b      	ldr	r3, [r7, #20]
 8007092:	f023 0320 	bic.w	r3, r3, #32
 8007096:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007098:	683b      	ldr	r3, [r7, #0]
 800709a:	689b      	ldr	r3, [r3, #8]
 800709c:	011b      	lsls	r3, r3, #4
 800709e:	697a      	ldr	r2, [r7, #20]
 80070a0:	4313      	orrs	r3, r2
 80070a2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	4a2c      	ldr	r2, [pc, #176]	; (8007158 <TIM_OC2_SetConfig+0x110>)
 80070a8:	4293      	cmp	r3, r2
 80070aa:	d007      	beq.n	80070bc <TIM_OC2_SetConfig+0x74>
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	4a2b      	ldr	r2, [pc, #172]	; (800715c <TIM_OC2_SetConfig+0x114>)
 80070b0:	4293      	cmp	r3, r2
 80070b2:	d003      	beq.n	80070bc <TIM_OC2_SetConfig+0x74>
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	4a2a      	ldr	r2, [pc, #168]	; (8007160 <TIM_OC2_SetConfig+0x118>)
 80070b8:	4293      	cmp	r3, r2
 80070ba:	d10d      	bne.n	80070d8 <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80070bc:	697b      	ldr	r3, [r7, #20]
 80070be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80070c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	68db      	ldr	r3, [r3, #12]
 80070c8:	011b      	lsls	r3, r3, #4
 80070ca:	697a      	ldr	r2, [r7, #20]
 80070cc:	4313      	orrs	r3, r2
 80070ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80070d0:	697b      	ldr	r3, [r7, #20]
 80070d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80070d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a1f      	ldr	r2, [pc, #124]	; (8007158 <TIM_OC2_SetConfig+0x110>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d013      	beq.n	8007108 <TIM_OC2_SetConfig+0xc0>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a1e      	ldr	r2, [pc, #120]	; (800715c <TIM_OC2_SetConfig+0x114>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d00f      	beq.n	8007108 <TIM_OC2_SetConfig+0xc0>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a1e      	ldr	r2, [pc, #120]	; (8007164 <TIM_OC2_SetConfig+0x11c>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d00b      	beq.n	8007108 <TIM_OC2_SetConfig+0xc0>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a1d      	ldr	r2, [pc, #116]	; (8007168 <TIM_OC2_SetConfig+0x120>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d007      	beq.n	8007108 <TIM_OC2_SetConfig+0xc0>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	4a1c      	ldr	r2, [pc, #112]	; (800716c <TIM_OC2_SetConfig+0x124>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d003      	beq.n	8007108 <TIM_OC2_SetConfig+0xc0>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	4a17      	ldr	r2, [pc, #92]	; (8007160 <TIM_OC2_SetConfig+0x118>)
 8007104:	4293      	cmp	r3, r2
 8007106:	d113      	bne.n	8007130 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007108:	693b      	ldr	r3, [r7, #16]
 800710a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800710e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007110:	693b      	ldr	r3, [r7, #16]
 8007112:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007116:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007118:	683b      	ldr	r3, [r7, #0]
 800711a:	695b      	ldr	r3, [r3, #20]
 800711c:	009b      	lsls	r3, r3, #2
 800711e:	693a      	ldr	r2, [r7, #16]
 8007120:	4313      	orrs	r3, r2
 8007122:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007124:	683b      	ldr	r3, [r7, #0]
 8007126:	699b      	ldr	r3, [r3, #24]
 8007128:	009b      	lsls	r3, r3, #2
 800712a:	693a      	ldr	r2, [r7, #16]
 800712c:	4313      	orrs	r3, r2
 800712e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	693a      	ldr	r2, [r7, #16]
 8007134:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	68fa      	ldr	r2, [r7, #12]
 800713a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800713c:	683b      	ldr	r3, [r7, #0]
 800713e:	685a      	ldr	r2, [r3, #4]
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	697a      	ldr	r2, [r7, #20]
 8007148:	621a      	str	r2, [r3, #32]
}
 800714a:	bf00      	nop
 800714c:	371c      	adds	r7, #28
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40012c00 	.word	0x40012c00
 800715c:	40013400 	.word	0x40013400
 8007160:	40015000 	.word	0x40015000
 8007164:	40014000 	.word	0x40014000
 8007168:	40014400 	.word	0x40014400
 800716c:	40014800 	.word	0x40014800

08007170 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007170:	b480      	push	{r7}
 8007172:	b087      	sub	sp, #28
 8007174:	af00      	add	r7, sp, #0
 8007176:	6078      	str	r0, [r7, #4]
 8007178:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	6a1b      	ldr	r3, [r3, #32]
 800717e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007186:	687b      	ldr	r3, [r7, #4]
 8007188:	6a1b      	ldr	r3, [r3, #32]
 800718a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	685b      	ldr	r3, [r3, #4]
 8007190:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007192:	687b      	ldr	r3, [r7, #4]
 8007194:	69db      	ldr	r3, [r3, #28]
 8007196:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007198:	68fb      	ldr	r3, [r7, #12]
 800719a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800719e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071a2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	f023 0303 	bic.w	r3, r3, #3
 80071aa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80071ac:	683b      	ldr	r3, [r7, #0]
 80071ae:	681b      	ldr	r3, [r3, #0]
 80071b0:	68fa      	ldr	r2, [r7, #12]
 80071b2:	4313      	orrs	r3, r2
 80071b4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80071b6:	697b      	ldr	r3, [r7, #20]
 80071b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80071bc:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80071be:	683b      	ldr	r3, [r7, #0]
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	021b      	lsls	r3, r3, #8
 80071c4:	697a      	ldr	r2, [r7, #20]
 80071c6:	4313      	orrs	r3, r2
 80071c8:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	4a2b      	ldr	r2, [pc, #172]	; (800727c <TIM_OC3_SetConfig+0x10c>)
 80071ce:	4293      	cmp	r3, r2
 80071d0:	d007      	beq.n	80071e2 <TIM_OC3_SetConfig+0x72>
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	4a2a      	ldr	r2, [pc, #168]	; (8007280 <TIM_OC3_SetConfig+0x110>)
 80071d6:	4293      	cmp	r3, r2
 80071d8:	d003      	beq.n	80071e2 <TIM_OC3_SetConfig+0x72>
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a29      	ldr	r2, [pc, #164]	; (8007284 <TIM_OC3_SetConfig+0x114>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d10d      	bne.n	80071fe <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80071e2:	697b      	ldr	r3, [r7, #20]
 80071e4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80071e8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80071ea:	683b      	ldr	r3, [r7, #0]
 80071ec:	68db      	ldr	r3, [r3, #12]
 80071ee:	021b      	lsls	r3, r3, #8
 80071f0:	697a      	ldr	r2, [r7, #20]
 80071f2:	4313      	orrs	r3, r2
 80071f4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80071f6:	697b      	ldr	r3, [r7, #20]
 80071f8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80071fc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	4a1e      	ldr	r2, [pc, #120]	; (800727c <TIM_OC3_SetConfig+0x10c>)
 8007202:	4293      	cmp	r3, r2
 8007204:	d013      	beq.n	800722e <TIM_OC3_SetConfig+0xbe>
 8007206:	687b      	ldr	r3, [r7, #4]
 8007208:	4a1d      	ldr	r2, [pc, #116]	; (8007280 <TIM_OC3_SetConfig+0x110>)
 800720a:	4293      	cmp	r3, r2
 800720c:	d00f      	beq.n	800722e <TIM_OC3_SetConfig+0xbe>
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	4a1d      	ldr	r2, [pc, #116]	; (8007288 <TIM_OC3_SetConfig+0x118>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00b      	beq.n	800722e <TIM_OC3_SetConfig+0xbe>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	4a1c      	ldr	r2, [pc, #112]	; (800728c <TIM_OC3_SetConfig+0x11c>)
 800721a:	4293      	cmp	r3, r2
 800721c:	d007      	beq.n	800722e <TIM_OC3_SetConfig+0xbe>
 800721e:	687b      	ldr	r3, [r7, #4]
 8007220:	4a1b      	ldr	r2, [pc, #108]	; (8007290 <TIM_OC3_SetConfig+0x120>)
 8007222:	4293      	cmp	r3, r2
 8007224:	d003      	beq.n	800722e <TIM_OC3_SetConfig+0xbe>
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	4a16      	ldr	r2, [pc, #88]	; (8007284 <TIM_OC3_SetConfig+0x114>)
 800722a:	4293      	cmp	r3, r2
 800722c:	d113      	bne.n	8007256 <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800722e:	693b      	ldr	r3, [r7, #16]
 8007230:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007234:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007236:	693b      	ldr	r3, [r7, #16]
 8007238:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800723c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800723e:	683b      	ldr	r3, [r7, #0]
 8007240:	695b      	ldr	r3, [r3, #20]
 8007242:	011b      	lsls	r3, r3, #4
 8007244:	693a      	ldr	r2, [r7, #16]
 8007246:	4313      	orrs	r3, r2
 8007248:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800724a:	683b      	ldr	r3, [r7, #0]
 800724c:	699b      	ldr	r3, [r3, #24]
 800724e:	011b      	lsls	r3, r3, #4
 8007250:	693a      	ldr	r2, [r7, #16]
 8007252:	4313      	orrs	r3, r2
 8007254:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007256:	687b      	ldr	r3, [r7, #4]
 8007258:	693a      	ldr	r2, [r7, #16]
 800725a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	68fa      	ldr	r2, [r7, #12]
 8007260:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	685a      	ldr	r2, [r3, #4]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800726a:	687b      	ldr	r3, [r7, #4]
 800726c:	697a      	ldr	r2, [r7, #20]
 800726e:	621a      	str	r2, [r3, #32]
}
 8007270:	bf00      	nop
 8007272:	371c      	adds	r7, #28
 8007274:	46bd      	mov	sp, r7
 8007276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727a:	4770      	bx	lr
 800727c:	40012c00 	.word	0x40012c00
 8007280:	40013400 	.word	0x40013400
 8007284:	40015000 	.word	0x40015000
 8007288:	40014000 	.word	0x40014000
 800728c:	40014400 	.word	0x40014400
 8007290:	40014800 	.word	0x40014800

08007294 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007294:	b480      	push	{r7}
 8007296:	b087      	sub	sp, #28
 8007298:	af00      	add	r7, sp, #0
 800729a:	6078      	str	r0, [r7, #4]
 800729c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	6a1b      	ldr	r3, [r3, #32]
 80072a2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	6a1b      	ldr	r3, [r3, #32]
 80072ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	685b      	ldr	r3, [r3, #4]
 80072b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	69db      	ldr	r3, [r3, #28]
 80072ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80072c2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80072c8:	68fb      	ldr	r3, [r7, #12]
 80072ca:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ce:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072d0:	683b      	ldr	r3, [r7, #0]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	021b      	lsls	r3, r3, #8
 80072d6:	68fa      	ldr	r2, [r7, #12]
 80072d8:	4313      	orrs	r3, r2
 80072da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80072dc:	697b      	ldr	r3, [r7, #20]
 80072de:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80072e2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80072e4:	683b      	ldr	r3, [r7, #0]
 80072e6:	689b      	ldr	r3, [r3, #8]
 80072e8:	031b      	lsls	r3, r3, #12
 80072ea:	697a      	ldr	r2, [r7, #20]
 80072ec:	4313      	orrs	r3, r2
 80072ee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	4a2c      	ldr	r2, [pc, #176]	; (80073a4 <TIM_OC4_SetConfig+0x110>)
 80072f4:	4293      	cmp	r3, r2
 80072f6:	d007      	beq.n	8007308 <TIM_OC4_SetConfig+0x74>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	4a2b      	ldr	r2, [pc, #172]	; (80073a8 <TIM_OC4_SetConfig+0x114>)
 80072fc:	4293      	cmp	r3, r2
 80072fe:	d003      	beq.n	8007308 <TIM_OC4_SetConfig+0x74>
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	4a2a      	ldr	r2, [pc, #168]	; (80073ac <TIM_OC4_SetConfig+0x118>)
 8007304:	4293      	cmp	r3, r2
 8007306:	d10d      	bne.n	8007324 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8007308:	697b      	ldr	r3, [r7, #20]
 800730a:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800730e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	68db      	ldr	r3, [r3, #12]
 8007314:	031b      	lsls	r3, r3, #12
 8007316:	697a      	ldr	r2, [r7, #20]
 8007318:	4313      	orrs	r3, r2
 800731a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007322:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007324:	687b      	ldr	r3, [r7, #4]
 8007326:	4a1f      	ldr	r2, [pc, #124]	; (80073a4 <TIM_OC4_SetConfig+0x110>)
 8007328:	4293      	cmp	r3, r2
 800732a:	d013      	beq.n	8007354 <TIM_OC4_SetConfig+0xc0>
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	4a1e      	ldr	r2, [pc, #120]	; (80073a8 <TIM_OC4_SetConfig+0x114>)
 8007330:	4293      	cmp	r3, r2
 8007332:	d00f      	beq.n	8007354 <TIM_OC4_SetConfig+0xc0>
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a1e      	ldr	r2, [pc, #120]	; (80073b0 <TIM_OC4_SetConfig+0x11c>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d00b      	beq.n	8007354 <TIM_OC4_SetConfig+0xc0>
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	4a1d      	ldr	r2, [pc, #116]	; (80073b4 <TIM_OC4_SetConfig+0x120>)
 8007340:	4293      	cmp	r3, r2
 8007342:	d007      	beq.n	8007354 <TIM_OC4_SetConfig+0xc0>
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	4a1c      	ldr	r2, [pc, #112]	; (80073b8 <TIM_OC4_SetConfig+0x124>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d003      	beq.n	8007354 <TIM_OC4_SetConfig+0xc0>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4a17      	ldr	r2, [pc, #92]	; (80073ac <TIM_OC4_SetConfig+0x118>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d113      	bne.n	800737c <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007354:	693b      	ldr	r3, [r7, #16]
 8007356:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800735a:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 800735c:	693b      	ldr	r3, [r7, #16]
 800735e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007362:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	695b      	ldr	r3, [r3, #20]
 8007368:	019b      	lsls	r3, r3, #6
 800736a:	693a      	ldr	r2, [r7, #16]
 800736c:	4313      	orrs	r3, r2
 800736e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	699b      	ldr	r3, [r3, #24]
 8007374:	019b      	lsls	r3, r3, #6
 8007376:	693a      	ldr	r2, [r7, #16]
 8007378:	4313      	orrs	r3, r2
 800737a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	693a      	ldr	r2, [r7, #16]
 8007380:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007382:	687b      	ldr	r3, [r7, #4]
 8007384:	68fa      	ldr	r2, [r7, #12]
 8007386:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	685a      	ldr	r2, [r3, #4]
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	697a      	ldr	r2, [r7, #20]
 8007394:	621a      	str	r2, [r3, #32]
}
 8007396:	bf00      	nop
 8007398:	371c      	adds	r7, #28
 800739a:	46bd      	mov	sp, r7
 800739c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a0:	4770      	bx	lr
 80073a2:	bf00      	nop
 80073a4:	40012c00 	.word	0x40012c00
 80073a8:	40013400 	.word	0x40013400
 80073ac:	40015000 	.word	0x40015000
 80073b0:	40014000 	.word	0x40014000
 80073b4:	40014400 	.word	0x40014400
 80073b8:	40014800 	.word	0x40014800

080073bc <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80073bc:	b480      	push	{r7}
 80073be:	b087      	sub	sp, #28
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
 80073c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	6a1b      	ldr	r3, [r3, #32]
 80073ca:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	6a1b      	ldr	r3, [r3, #32]
 80073d6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	685b      	ldr	r3, [r3, #4]
 80073dc:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80073e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 80073e4:	68fb      	ldr	r3, [r7, #12]
 80073e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80073ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	68fa      	ldr	r2, [r7, #12]
 80073f6:	4313      	orrs	r3, r2
 80073f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 80073fa:	693b      	ldr	r3, [r7, #16]
 80073fc:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8007400:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8007402:	683b      	ldr	r3, [r7, #0]
 8007404:	689b      	ldr	r3, [r3, #8]
 8007406:	041b      	lsls	r3, r3, #16
 8007408:	693a      	ldr	r2, [r7, #16]
 800740a:	4313      	orrs	r3, r2
 800740c:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	4a19      	ldr	r2, [pc, #100]	; (8007478 <TIM_OC5_SetConfig+0xbc>)
 8007412:	4293      	cmp	r3, r2
 8007414:	d013      	beq.n	800743e <TIM_OC5_SetConfig+0x82>
 8007416:	687b      	ldr	r3, [r7, #4]
 8007418:	4a18      	ldr	r2, [pc, #96]	; (800747c <TIM_OC5_SetConfig+0xc0>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d00f      	beq.n	800743e <TIM_OC5_SetConfig+0x82>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	4a17      	ldr	r2, [pc, #92]	; (8007480 <TIM_OC5_SetConfig+0xc4>)
 8007422:	4293      	cmp	r3, r2
 8007424:	d00b      	beq.n	800743e <TIM_OC5_SetConfig+0x82>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	4a16      	ldr	r2, [pc, #88]	; (8007484 <TIM_OC5_SetConfig+0xc8>)
 800742a:	4293      	cmp	r3, r2
 800742c:	d007      	beq.n	800743e <TIM_OC5_SetConfig+0x82>
 800742e:	687b      	ldr	r3, [r7, #4]
 8007430:	4a15      	ldr	r2, [pc, #84]	; (8007488 <TIM_OC5_SetConfig+0xcc>)
 8007432:	4293      	cmp	r3, r2
 8007434:	d003      	beq.n	800743e <TIM_OC5_SetConfig+0x82>
 8007436:	687b      	ldr	r3, [r7, #4]
 8007438:	4a14      	ldr	r2, [pc, #80]	; (800748c <TIM_OC5_SetConfig+0xd0>)
 800743a:	4293      	cmp	r3, r2
 800743c:	d109      	bne.n	8007452 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007444:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	695b      	ldr	r3, [r3, #20]
 800744a:	021b      	lsls	r3, r3, #8
 800744c:	697a      	ldr	r2, [r7, #20]
 800744e:	4313      	orrs	r3, r2
 8007450:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	697a      	ldr	r2, [r7, #20]
 8007456:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8007458:	687b      	ldr	r3, [r7, #4]
 800745a:	68fa      	ldr	r2, [r7, #12]
 800745c:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 800745e:	683b      	ldr	r3, [r7, #0]
 8007460:	685a      	ldr	r2, [r3, #4]
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	693a      	ldr	r2, [r7, #16]
 800746a:	621a      	str	r2, [r3, #32]
}
 800746c:	bf00      	nop
 800746e:	371c      	adds	r7, #28
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr
 8007478:	40012c00 	.word	0x40012c00
 800747c:	40013400 	.word	0x40013400
 8007480:	40014000 	.word	0x40014000
 8007484:	40014400 	.word	0x40014400
 8007488:	40014800 	.word	0x40014800
 800748c:	40015000 	.word	0x40015000

08007490 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8007490:	b480      	push	{r7}
 8007492:	b087      	sub	sp, #28
 8007494:	af00      	add	r7, sp, #0
 8007496:	6078      	str	r0, [r7, #4]
 8007498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 800749a:	687b      	ldr	r3, [r7, #4]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80074a2:	687b      	ldr	r3, [r7, #4]
 80074a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a1b      	ldr	r3, [r3, #32]
 80074aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074ac:	687b      	ldr	r3, [r7, #4]
 80074ae:	685b      	ldr	r3, [r3, #4]
 80074b0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80074b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80074b8:	68fb      	ldr	r3, [r7, #12]
 80074ba:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80074be:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074c4:	683b      	ldr	r3, [r7, #0]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	021b      	lsls	r3, r3, #8
 80074ca:	68fa      	ldr	r2, [r7, #12]
 80074cc:	4313      	orrs	r3, r2
 80074ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80074d0:	693b      	ldr	r3, [r7, #16]
 80074d2:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80074d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	051b      	lsls	r3, r3, #20
 80074de:	693a      	ldr	r2, [r7, #16]
 80074e0:	4313      	orrs	r3, r2
 80074e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	4a1a      	ldr	r2, [pc, #104]	; (8007550 <TIM_OC6_SetConfig+0xc0>)
 80074e8:	4293      	cmp	r3, r2
 80074ea:	d013      	beq.n	8007514 <TIM_OC6_SetConfig+0x84>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	4a19      	ldr	r2, [pc, #100]	; (8007554 <TIM_OC6_SetConfig+0xc4>)
 80074f0:	4293      	cmp	r3, r2
 80074f2:	d00f      	beq.n	8007514 <TIM_OC6_SetConfig+0x84>
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	4a18      	ldr	r2, [pc, #96]	; (8007558 <TIM_OC6_SetConfig+0xc8>)
 80074f8:	4293      	cmp	r3, r2
 80074fa:	d00b      	beq.n	8007514 <TIM_OC6_SetConfig+0x84>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	4a17      	ldr	r2, [pc, #92]	; (800755c <TIM_OC6_SetConfig+0xcc>)
 8007500:	4293      	cmp	r3, r2
 8007502:	d007      	beq.n	8007514 <TIM_OC6_SetConfig+0x84>
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a16      	ldr	r2, [pc, #88]	; (8007560 <TIM_OC6_SetConfig+0xd0>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d003      	beq.n	8007514 <TIM_OC6_SetConfig+0x84>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a15      	ldr	r2, [pc, #84]	; (8007564 <TIM_OC6_SetConfig+0xd4>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d109      	bne.n	8007528 <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800751a:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	029b      	lsls	r3, r3, #10
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	40012c00 	.word	0x40012c00
 8007554:	40013400 	.word	0x40013400
 8007558:	40014000 	.word	0x40014000
 800755c:	40014400 	.word	0x40014400
 8007560:	40014800 	.word	0x40014800
 8007564:	40015000 	.word	0x40015000

08007568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007568:	b480      	push	{r7}
 800756a:	b087      	sub	sp, #28
 800756c:	af00      	add	r7, sp, #0
 800756e:	60f8      	str	r0, [r7, #12]
 8007570:	60b9      	str	r1, [r7, #8]
 8007572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	6a1b      	ldr	r3, [r3, #32]
 8007578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	6a1b      	ldr	r3, [r3, #32]
 800757e:	f023 0201 	bic.w	r2, r3, #1
 8007582:	68fb      	ldr	r3, [r7, #12]
 8007584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007586:	68fb      	ldr	r3, [r7, #12]
 8007588:	699b      	ldr	r3, [r3, #24]
 800758a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800758c:	693b      	ldr	r3, [r7, #16]
 800758e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	011b      	lsls	r3, r3, #4
 8007598:	693a      	ldr	r2, [r7, #16]
 800759a:	4313      	orrs	r3, r2
 800759c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800759e:	697b      	ldr	r3, [r7, #20]
 80075a0:	f023 030a 	bic.w	r3, r3, #10
 80075a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	4313      	orrs	r3, r2
 80075ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	693a      	ldr	r2, [r7, #16]
 80075b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	697a      	ldr	r2, [r7, #20]
 80075b8:	621a      	str	r2, [r3, #32]
}
 80075ba:	bf00      	nop
 80075bc:	371c      	adds	r7, #28
 80075be:	46bd      	mov	sp, r7
 80075c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c4:	4770      	bx	lr

080075c6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075c6:	b480      	push	{r7}
 80075c8:	b087      	sub	sp, #28
 80075ca:	af00      	add	r7, sp, #0
 80075cc:	60f8      	str	r0, [r7, #12]
 80075ce:	60b9      	str	r1, [r7, #8]
 80075d0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	6a1b      	ldr	r3, [r3, #32]
 80075d6:	f023 0210 	bic.w	r2, r3, #16
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	699b      	ldr	r3, [r3, #24]
 80075e2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	6a1b      	ldr	r3, [r3, #32]
 80075e8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075f0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	031b      	lsls	r3, r3, #12
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	4313      	orrs	r3, r2
 80075fa:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075fc:	693b      	ldr	r3, [r7, #16]
 80075fe:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007602:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007604:	68bb      	ldr	r3, [r7, #8]
 8007606:	011b      	lsls	r3, r3, #4
 8007608:	693a      	ldr	r2, [r7, #16]
 800760a:	4313      	orrs	r3, r2
 800760c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800760e:	68fb      	ldr	r3, [r7, #12]
 8007610:	697a      	ldr	r2, [r7, #20]
 8007612:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007614:	68fb      	ldr	r3, [r7, #12]
 8007616:	693a      	ldr	r2, [r7, #16]
 8007618:	621a      	str	r2, [r3, #32]
}
 800761a:	bf00      	nop
 800761c:	371c      	adds	r7, #28
 800761e:	46bd      	mov	sp, r7
 8007620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007624:	4770      	bx	lr

08007626 <TIM_ITRx_SetConfig>:
  *       (*)  Value not defined in all devices.
  *
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007626:	b480      	push	{r7}
 8007628:	b085      	sub	sp, #20
 800762a:	af00      	add	r7, sp, #0
 800762c:	6078      	str	r0, [r7, #4]
 800762e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007630:	687b      	ldr	r3, [r7, #4]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007636:	68fb      	ldr	r3, [r7, #12]
 8007638:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 800763c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007640:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007642:	683a      	ldr	r2, [r7, #0]
 8007644:	68fb      	ldr	r3, [r7, #12]
 8007646:	4313      	orrs	r3, r2
 8007648:	f043 0307 	orr.w	r3, r3, #7
 800764c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	68fa      	ldr	r2, [r7, #12]
 8007652:	609a      	str	r2, [r3, #8]
}
 8007654:	bf00      	nop
 8007656:	3714      	adds	r7, #20
 8007658:	46bd      	mov	sp, r7
 800765a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765e:	4770      	bx	lr

08007660 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007660:	b480      	push	{r7}
 8007662:	b087      	sub	sp, #28
 8007664:	af00      	add	r7, sp, #0
 8007666:	60f8      	str	r0, [r7, #12]
 8007668:	60b9      	str	r1, [r7, #8]
 800766a:	607a      	str	r2, [r7, #4]
 800766c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	689b      	ldr	r3, [r3, #8]
 8007672:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007674:	697b      	ldr	r3, [r7, #20]
 8007676:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800767a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800767c:	683b      	ldr	r3, [r7, #0]
 800767e:	021a      	lsls	r2, r3, #8
 8007680:	687b      	ldr	r3, [r7, #4]
 8007682:	431a      	orrs	r2, r3
 8007684:	68bb      	ldr	r3, [r7, #8]
 8007686:	4313      	orrs	r3, r2
 8007688:	697a      	ldr	r2, [r7, #20]
 800768a:	4313      	orrs	r3, r2
 800768c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	697a      	ldr	r2, [r7, #20]
 8007692:	609a      	str	r2, [r3, #8]
}
 8007694:	bf00      	nop
 8007696:	371c      	adds	r7, #28
 8007698:	46bd      	mov	sp, r7
 800769a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769e:	4770      	bx	lr

080076a0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076a0:	b480      	push	{r7}
 80076a2:	b087      	sub	sp, #28
 80076a4:	af00      	add	r7, sp, #0
 80076a6:	60f8      	str	r0, [r7, #12]
 80076a8:	60b9      	str	r1, [r7, #8]
 80076aa:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076ac:	68bb      	ldr	r3, [r7, #8]
 80076ae:	f003 031f 	and.w	r3, r3, #31
 80076b2:	2201      	movs	r2, #1
 80076b4:	fa02 f303 	lsl.w	r3, r2, r3
 80076b8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	6a1a      	ldr	r2, [r3, #32]
 80076be:	697b      	ldr	r3, [r7, #20]
 80076c0:	43db      	mvns	r3, r3
 80076c2:	401a      	ands	r2, r3
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076c8:	68fb      	ldr	r3, [r7, #12]
 80076ca:	6a1a      	ldr	r2, [r3, #32]
 80076cc:	68bb      	ldr	r3, [r7, #8]
 80076ce:	f003 031f 	and.w	r3, r3, #31
 80076d2:	6879      	ldr	r1, [r7, #4]
 80076d4:	fa01 f303 	lsl.w	r3, r1, r3
 80076d8:	431a      	orrs	r2, r3
 80076da:	68fb      	ldr	r3, [r7, #12]
 80076dc:	621a      	str	r2, [r3, #32]
}
 80076de:	bf00      	nop
 80076e0:	371c      	adds	r7, #28
 80076e2:	46bd      	mov	sp, r7
 80076e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e8:	4770      	bx	lr
	...

080076ec <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80076ec:	b580      	push	{r7, lr}
 80076ee:	b084      	sub	sp, #16
 80076f0:	af00      	add	r7, sp, #0
 80076f2:	6078      	str	r0, [r7, #4]
 80076f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80076f6:	683b      	ldr	r3, [r7, #0]
 80076f8:	2b00      	cmp	r3, #0
 80076fa:	d109      	bne.n	8007710 <HAL_TIMEx_PWMN_Start+0x24>
 80076fc:	687b      	ldr	r3, [r7, #4]
 80076fe:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007702:	b2db      	uxtb	r3, r3
 8007704:	2b01      	cmp	r3, #1
 8007706:	bf14      	ite	ne
 8007708:	2301      	movne	r3, #1
 800770a:	2300      	moveq	r3, #0
 800770c:	b2db      	uxtb	r3, r3
 800770e:	e022      	b.n	8007756 <HAL_TIMEx_PWMN_Start+0x6a>
 8007710:	683b      	ldr	r3, [r7, #0]
 8007712:	2b04      	cmp	r3, #4
 8007714:	d109      	bne.n	800772a <HAL_TIMEx_PWMN_Start+0x3e>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800771c:	b2db      	uxtb	r3, r3
 800771e:	2b01      	cmp	r3, #1
 8007720:	bf14      	ite	ne
 8007722:	2301      	movne	r3, #1
 8007724:	2300      	moveq	r3, #0
 8007726:	b2db      	uxtb	r3, r3
 8007728:	e015      	b.n	8007756 <HAL_TIMEx_PWMN_Start+0x6a>
 800772a:	683b      	ldr	r3, [r7, #0]
 800772c:	2b08      	cmp	r3, #8
 800772e:	d109      	bne.n	8007744 <HAL_TIMEx_PWMN_Start+0x58>
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8007736:	b2db      	uxtb	r3, r3
 8007738:	2b01      	cmp	r3, #1
 800773a:	bf14      	ite	ne
 800773c:	2301      	movne	r3, #1
 800773e:	2300      	moveq	r3, #0
 8007740:	b2db      	uxtb	r3, r3
 8007742:	e008      	b.n	8007756 <HAL_TIMEx_PWMN_Start+0x6a>
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800774a:	b2db      	uxtb	r3, r3
 800774c:	2b01      	cmp	r3, #1
 800774e:	bf14      	ite	ne
 8007750:	2301      	movne	r3, #1
 8007752:	2300      	moveq	r3, #0
 8007754:	b2db      	uxtb	r3, r3
 8007756:	2b00      	cmp	r3, #0
 8007758:	d001      	beq.n	800775e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800775a:	2301      	movs	r3, #1
 800775c:	e073      	b.n	8007846 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800775e:	683b      	ldr	r3, [r7, #0]
 8007760:	2b00      	cmp	r3, #0
 8007762:	d104      	bne.n	800776e <HAL_TIMEx_PWMN_Start+0x82>
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	2202      	movs	r2, #2
 8007768:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800776c:	e013      	b.n	8007796 <HAL_TIMEx_PWMN_Start+0xaa>
 800776e:	683b      	ldr	r3, [r7, #0]
 8007770:	2b04      	cmp	r3, #4
 8007772:	d104      	bne.n	800777e <HAL_TIMEx_PWMN_Start+0x92>
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2202      	movs	r2, #2
 8007778:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800777c:	e00b      	b.n	8007796 <HAL_TIMEx_PWMN_Start+0xaa>
 800777e:	683b      	ldr	r3, [r7, #0]
 8007780:	2b08      	cmp	r3, #8
 8007782:	d104      	bne.n	800778e <HAL_TIMEx_PWMN_Start+0xa2>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2202      	movs	r2, #2
 8007788:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800778c:	e003      	b.n	8007796 <HAL_TIMEx_PWMN_Start+0xaa>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	2202      	movs	r2, #2
 8007792:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007796:	687b      	ldr	r3, [r7, #4]
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	2204      	movs	r2, #4
 800779c:	6839      	ldr	r1, [r7, #0]
 800779e:	4618      	mov	r0, r3
 80077a0:	f000 fa52 	bl	8007c48 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	681b      	ldr	r3, [r3, #0]
 80077a8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80077aa:	687b      	ldr	r3, [r7, #4]
 80077ac:	681b      	ldr	r3, [r3, #0]
 80077ae:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80077b2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80077b4:	687b      	ldr	r3, [r7, #4]
 80077b6:	681b      	ldr	r3, [r3, #0]
 80077b8:	4a25      	ldr	r2, [pc, #148]	; (8007850 <HAL_TIMEx_PWMN_Start+0x164>)
 80077ba:	4293      	cmp	r3, r2
 80077bc:	d022      	beq.n	8007804 <HAL_TIMEx_PWMN_Start+0x118>
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	681b      	ldr	r3, [r3, #0]
 80077c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80077c6:	d01d      	beq.n	8007804 <HAL_TIMEx_PWMN_Start+0x118>
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	4a21      	ldr	r2, [pc, #132]	; (8007854 <HAL_TIMEx_PWMN_Start+0x168>)
 80077ce:	4293      	cmp	r3, r2
 80077d0:	d018      	beq.n	8007804 <HAL_TIMEx_PWMN_Start+0x118>
 80077d2:	687b      	ldr	r3, [r7, #4]
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a20      	ldr	r2, [pc, #128]	; (8007858 <HAL_TIMEx_PWMN_Start+0x16c>)
 80077d8:	4293      	cmp	r3, r2
 80077da:	d013      	beq.n	8007804 <HAL_TIMEx_PWMN_Start+0x118>
 80077dc:	687b      	ldr	r3, [r7, #4]
 80077de:	681b      	ldr	r3, [r3, #0]
 80077e0:	4a1e      	ldr	r2, [pc, #120]	; (800785c <HAL_TIMEx_PWMN_Start+0x170>)
 80077e2:	4293      	cmp	r3, r2
 80077e4:	d00e      	beq.n	8007804 <HAL_TIMEx_PWMN_Start+0x118>
 80077e6:	687b      	ldr	r3, [r7, #4]
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a1d      	ldr	r2, [pc, #116]	; (8007860 <HAL_TIMEx_PWMN_Start+0x174>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d009      	beq.n	8007804 <HAL_TIMEx_PWMN_Start+0x118>
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	681b      	ldr	r3, [r3, #0]
 80077f4:	4a1b      	ldr	r2, [pc, #108]	; (8007864 <HAL_TIMEx_PWMN_Start+0x178>)
 80077f6:	4293      	cmp	r3, r2
 80077f8:	d004      	beq.n	8007804 <HAL_TIMEx_PWMN_Start+0x118>
 80077fa:	687b      	ldr	r3, [r7, #4]
 80077fc:	681b      	ldr	r3, [r3, #0]
 80077fe:	4a1a      	ldr	r2, [pc, #104]	; (8007868 <HAL_TIMEx_PWMN_Start+0x17c>)
 8007800:	4293      	cmp	r3, r2
 8007802:	d115      	bne.n	8007830 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	689a      	ldr	r2, [r3, #8]
 800780a:	4b18      	ldr	r3, [pc, #96]	; (800786c <HAL_TIMEx_PWMN_Start+0x180>)
 800780c:	4013      	ands	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2b06      	cmp	r3, #6
 8007814:	d015      	beq.n	8007842 <HAL_TIMEx_PWMN_Start+0x156>
 8007816:	68fb      	ldr	r3, [r7, #12]
 8007818:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800781c:	d011      	beq.n	8007842 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800781e:	687b      	ldr	r3, [r7, #4]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	681a      	ldr	r2, [r3, #0]
 8007824:	687b      	ldr	r3, [r7, #4]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	f042 0201 	orr.w	r2, r2, #1
 800782c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800782e:	e008      	b.n	8007842 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	681a      	ldr	r2, [r3, #0]
 8007836:	687b      	ldr	r3, [r7, #4]
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	f042 0201 	orr.w	r2, r2, #1
 800783e:	601a      	str	r2, [r3, #0]
 8007840:	e000      	b.n	8007844 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007842:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	3710      	adds	r7, #16
 800784a:	46bd      	mov	sp, r7
 800784c:	bd80      	pop	{r7, pc}
 800784e:	bf00      	nop
 8007850:	40012c00 	.word	0x40012c00
 8007854:	40000400 	.word	0x40000400
 8007858:	40000800 	.word	0x40000800
 800785c:	40000c00 	.word	0x40000c00
 8007860:	40013400 	.word	0x40013400
 8007864:	40014000 	.word	0x40014000
 8007868:	40015000 	.word	0x40015000
 800786c:	00010007 	.word	0x00010007

08007870 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	b082      	sub	sp, #8
 8007874:	af00      	add	r7, sp, #0
 8007876:	6078      	str	r0, [r7, #4]
 8007878:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800787a:	687b      	ldr	r3, [r7, #4]
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	2200      	movs	r2, #0
 8007880:	6839      	ldr	r1, [r7, #0]
 8007882:	4618      	mov	r0, r3
 8007884:	f000 f9e0 	bl	8007c48 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007888:	687b      	ldr	r3, [r7, #4]
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	6a1a      	ldr	r2, [r3, #32]
 800788e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007892:	4013      	ands	r3, r2
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10f      	bne.n	80078b8 <HAL_TIMEx_PWMN_Stop+0x48>
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	6a1a      	ldr	r2, [r3, #32]
 800789e:	f244 4344 	movw	r3, #17476	; 0x4444
 80078a2:	4013      	ands	r3, r2
 80078a4:	2b00      	cmp	r3, #0
 80078a6:	d107      	bne.n	80078b8 <HAL_TIMEx_PWMN_Stop+0x48>
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80078b6:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6a1a      	ldr	r2, [r3, #32]
 80078be:	f241 1311 	movw	r3, #4369	; 0x1111
 80078c2:	4013      	ands	r3, r2
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d10f      	bne.n	80078e8 <HAL_TIMEx_PWMN_Stop+0x78>
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	6a1a      	ldr	r2, [r3, #32]
 80078ce:	f244 4344 	movw	r3, #17476	; 0x4444
 80078d2:	4013      	ands	r3, r2
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d107      	bne.n	80078e8 <HAL_TIMEx_PWMN_Stop+0x78>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	681a      	ldr	r2, [r3, #0]
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	681b      	ldr	r3, [r3, #0]
 80078e2:	f022 0201 	bic.w	r2, r2, #1
 80078e6:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80078e8:	683b      	ldr	r3, [r7, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d104      	bne.n	80078f8 <HAL_TIMEx_PWMN_Stop+0x88>
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2201      	movs	r2, #1
 80078f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80078f6:	e013      	b.n	8007920 <HAL_TIMEx_PWMN_Stop+0xb0>
 80078f8:	683b      	ldr	r3, [r7, #0]
 80078fa:	2b04      	cmp	r3, #4
 80078fc:	d104      	bne.n	8007908 <HAL_TIMEx_PWMN_Stop+0x98>
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	2201      	movs	r2, #1
 8007902:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007906:	e00b      	b.n	8007920 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007908:	683b      	ldr	r3, [r7, #0]
 800790a:	2b08      	cmp	r3, #8
 800790c:	d104      	bne.n	8007918 <HAL_TIMEx_PWMN_Stop+0xa8>
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	2201      	movs	r2, #1
 8007912:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8007916:	e003      	b.n	8007920 <HAL_TIMEx_PWMN_Stop+0xb0>
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	2201      	movs	r2, #1
 800791c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 8007920:	2300      	movs	r3, #0
}
 8007922:	4618      	mov	r0, r3
 8007924:	3708      	adds	r7, #8
 8007926:	46bd      	mov	sp, r7
 8007928:	bd80      	pop	{r7, pc}
	...

0800792c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800792c:	b480      	push	{r7}
 800792e:	b085      	sub	sp, #20
 8007930:	af00      	add	r7, sp, #0
 8007932:	6078      	str	r0, [r7, #4]
 8007934:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800793c:	2b01      	cmp	r3, #1
 800793e:	d101      	bne.n	8007944 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8007940:	2302      	movs	r3, #2
 8007942:	e074      	b.n	8007a2e <HAL_TIMEx_MasterConfigSynchronization+0x102>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	2201      	movs	r2, #1
 8007948:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	2202      	movs	r2, #2
 8007950:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007954:	687b      	ldr	r3, [r7, #4]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	689b      	ldr	r3, [r3, #8]
 8007962:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007964:	687b      	ldr	r3, [r7, #4]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	4a34      	ldr	r2, [pc, #208]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800796a:	4293      	cmp	r3, r2
 800796c:	d009      	beq.n	8007982 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800796e:	687b      	ldr	r3, [r7, #4]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	4a33      	ldr	r2, [pc, #204]	; (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007974:	4293      	cmp	r3, r2
 8007976:	d004      	beq.n	8007982 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007978:	687b      	ldr	r3, [r7, #4]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	4a31      	ldr	r2, [pc, #196]	; (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800797e:	4293      	cmp	r3, r2
 8007980:	d108      	bne.n	8007994 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007988:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800798a:	683b      	ldr	r3, [r7, #0]
 800798c:	685b      	ldr	r3, [r3, #4]
 800798e:	68fa      	ldr	r2, [r7, #12]
 8007990:	4313      	orrs	r3, r2
 8007992:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007994:	68fb      	ldr	r3, [r7, #12]
 8007996:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800799a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800799e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80079a0:	683b      	ldr	r3, [r7, #0]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	68fa      	ldr	r2, [r7, #12]
 80079a6:	4313      	orrs	r3, r2
 80079a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80079aa:	687b      	ldr	r3, [r7, #4]
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	68fa      	ldr	r2, [r7, #12]
 80079b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80079b2:	687b      	ldr	r3, [r7, #4]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a21      	ldr	r2, [pc, #132]	; (8007a3c <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80079b8:	4293      	cmp	r3, r2
 80079ba:	d022      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80079c4:	d01d      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	681b      	ldr	r3, [r3, #0]
 80079ca:	4a1f      	ldr	r2, [pc, #124]	; (8007a48 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 80079cc:	4293      	cmp	r3, r2
 80079ce:	d018      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	4a1d      	ldr	r2, [pc, #116]	; (8007a4c <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 80079d6:	4293      	cmp	r3, r2
 80079d8:	d013      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079da:	687b      	ldr	r3, [r7, #4]
 80079dc:	681b      	ldr	r3, [r3, #0]
 80079de:	4a1c      	ldr	r2, [pc, #112]	; (8007a50 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 80079e0:	4293      	cmp	r3, r2
 80079e2:	d00e      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	681b      	ldr	r3, [r3, #0]
 80079e8:	4a15      	ldr	r2, [pc, #84]	; (8007a40 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80079ea:	4293      	cmp	r3, r2
 80079ec:	d009      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	681b      	ldr	r3, [r3, #0]
 80079f2:	4a18      	ldr	r2, [pc, #96]	; (8007a54 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80079f4:	4293      	cmp	r3, r2
 80079f6:	d004      	beq.n	8007a02 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	4a11      	ldr	r2, [pc, #68]	; (8007a44 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80079fe:	4293      	cmp	r3, r2
 8007a00:	d10c      	bne.n	8007a1c <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8007a02:	68bb      	ldr	r3, [r7, #8]
 8007a04:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007a08:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007a0a:	683b      	ldr	r3, [r7, #0]
 8007a0c:	689b      	ldr	r3, [r3, #8]
 8007a0e:	68ba      	ldr	r2, [r7, #8]
 8007a10:	4313      	orrs	r3, r2
 8007a12:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	68ba      	ldr	r2, [r7, #8]
 8007a1a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2201      	movs	r2, #1
 8007a20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a2c:	2300      	movs	r3, #0
}
 8007a2e:	4618      	mov	r0, r3
 8007a30:	3714      	adds	r7, #20
 8007a32:	46bd      	mov	sp, r7
 8007a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	40012c00 	.word	0x40012c00
 8007a40:	40013400 	.word	0x40013400
 8007a44:	40015000 	.word	0x40015000
 8007a48:	40000400 	.word	0x40000400
 8007a4c:	40000800 	.word	0x40000800
 8007a50:	40000c00 	.word	0x40000c00
 8007a54:	40014000 	.word	0x40014000

08007a58 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007a58:	b480      	push	{r7}
 8007a5a:	b085      	sub	sp, #20
 8007a5c:	af00      	add	r7, sp, #0
 8007a5e:	6078      	str	r0, [r7, #4]
 8007a60:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007a62:	2300      	movs	r3, #0
 8007a64:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a6c:	2b01      	cmp	r3, #1
 8007a6e:	d101      	bne.n	8007a74 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007a70:	2302      	movs	r3, #2
 8007a72:	e096      	b.n	8007ba2 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	2201      	movs	r2, #1
 8007a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007a82:	683b      	ldr	r3, [r7, #0]
 8007a84:	68db      	ldr	r3, [r3, #12]
 8007a86:	4313      	orrs	r3, r2
 8007a88:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007a8a:	68fb      	ldr	r3, [r7, #12]
 8007a8c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007a90:	683b      	ldr	r3, [r7, #0]
 8007a92:	689b      	ldr	r3, [r3, #8]
 8007a94:	4313      	orrs	r3, r2
 8007a96:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007a98:	68fb      	ldr	r3, [r7, #12]
 8007a9a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007a9e:	683b      	ldr	r3, [r7, #0]
 8007aa0:	685b      	ldr	r3, [r3, #4]
 8007aa2:	4313      	orrs	r3, r2
 8007aa4:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007aa6:	68fb      	ldr	r3, [r7, #12]
 8007aa8:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007aac:	683b      	ldr	r3, [r7, #0]
 8007aae:	681b      	ldr	r3, [r3, #0]
 8007ab0:	4313      	orrs	r3, r2
 8007ab2:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007ab4:	68fb      	ldr	r3, [r7, #12]
 8007ab6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007aba:	683b      	ldr	r3, [r7, #0]
 8007abc:	691b      	ldr	r3, [r3, #16]
 8007abe:	4313      	orrs	r3, r2
 8007ac0:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007ac8:	683b      	ldr	r3, [r7, #0]
 8007aca:	695b      	ldr	r3, [r3, #20]
 8007acc:	4313      	orrs	r3, r2
 8007ace:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007ad6:	683b      	ldr	r3, [r7, #0]
 8007ad8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ada:	4313      	orrs	r3, r2
 8007adc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007ae4:	683b      	ldr	r3, [r7, #0]
 8007ae6:	699b      	ldr	r3, [r3, #24]
 8007ae8:	041b      	lsls	r3, r3, #16
 8007aea:	4313      	orrs	r3, r2
 8007aec:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	4a2f      	ldr	r2, [pc, #188]	; (8007bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007af4:	4293      	cmp	r3, r2
 8007af6:	d009      	beq.n	8007b0c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007af8:	687b      	ldr	r3, [r7, #4]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	4a2d      	ldr	r2, [pc, #180]	; (8007bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007afe:	4293      	cmp	r3, r2
 8007b00:	d004      	beq.n	8007b0c <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	4a2c      	ldr	r2, [pc, #176]	; (8007bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007b08:	4293      	cmp	r3, r2
 8007b0a:	d106      	bne.n	8007b1a <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8007b12:	683b      	ldr	r3, [r7, #0]
 8007b14:	69db      	ldr	r3, [r3, #28]
 8007b16:	4313      	orrs	r3, r2
 8007b18:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	4a24      	ldr	r2, [pc, #144]	; (8007bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007b20:	4293      	cmp	r3, r2
 8007b22:	d009      	beq.n	8007b38 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	681b      	ldr	r3, [r3, #0]
 8007b28:	4a22      	ldr	r2, [pc, #136]	; (8007bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007b2a:	4293      	cmp	r3, r2
 8007b2c:	d004      	beq.n	8007b38 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	4a21      	ldr	r2, [pc, #132]	; (8007bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007b34:	4293      	cmp	r3, r2
 8007b36:	d12b      	bne.n	8007b90 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8007b38:	68fb      	ldr	r3, [r7, #12]
 8007b3a:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b42:	051b      	lsls	r3, r3, #20
 8007b44:	4313      	orrs	r3, r2
 8007b46:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8007b4e:	683b      	ldr	r3, [r7, #0]
 8007b50:	6a1b      	ldr	r3, [r3, #32]
 8007b52:	4313      	orrs	r3, r2
 8007b54:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8007b5c:	683b      	ldr	r3, [r7, #0]
 8007b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b60:	4313      	orrs	r3, r2
 8007b62:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	4a11      	ldr	r2, [pc, #68]	; (8007bb0 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8007b6a:	4293      	cmp	r3, r2
 8007b6c:	d009      	beq.n	8007b82 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	4a10      	ldr	r2, [pc, #64]	; (8007bb4 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007b74:	4293      	cmp	r3, r2
 8007b76:	d004      	beq.n	8007b82 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	4a0e      	ldr	r2, [pc, #56]	; (8007bb8 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8007b7e:	4293      	cmp	r3, r2
 8007b80:	d106      	bne.n	8007b90 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007b88:	683b      	ldr	r3, [r7, #0]
 8007b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b8c:	4313      	orrs	r3, r2
 8007b8e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007b90:	687b      	ldr	r3, [r7, #4]
 8007b92:	681b      	ldr	r3, [r3, #0]
 8007b94:	68fa      	ldr	r2, [r7, #12]
 8007b96:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007b98:	687b      	ldr	r3, [r7, #4]
 8007b9a:	2200      	movs	r2, #0
 8007b9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007ba0:	2300      	movs	r3, #0
}
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	3714      	adds	r7, #20
 8007ba6:	46bd      	mov	sp, r7
 8007ba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bac:	4770      	bx	lr
 8007bae:	bf00      	nop
 8007bb0:	40012c00 	.word	0x40012c00
 8007bb4:	40013400 	.word	0x40013400
 8007bb8:	40015000 	.word	0x40015000

08007bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007bbc:	b480      	push	{r7}
 8007bbe:	b083      	sub	sp, #12
 8007bc0:	af00      	add	r7, sp, #0
 8007bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007bc4:	bf00      	nop
 8007bc6:	370c      	adds	r7, #12
 8007bc8:	46bd      	mov	sp, r7
 8007bca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bce:	4770      	bx	lr

08007bd0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b083      	sub	sp, #12
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007bd8:	bf00      	nop
 8007bda:	370c      	adds	r7, #12
 8007bdc:	46bd      	mov	sp, r7
 8007bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be2:	4770      	bx	lr

08007be4 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c20:	b480      	push	{r7}
 8007c22:	b083      	sub	sp, #12
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8007c28:	bf00      	nop
 8007c2a:	370c      	adds	r7, #12
 8007c2c:	46bd      	mov	sp, r7
 8007c2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c32:	4770      	bx	lr

08007c34 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8007c34:	b480      	push	{r7}
 8007c36:	b083      	sub	sp, #12
 8007c38:	af00      	add	r7, sp, #0
 8007c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8007c3c:	bf00      	nop
 8007c3e:	370c      	adds	r7, #12
 8007c40:	46bd      	mov	sp, r7
 8007c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c46:	4770      	bx	lr

08007c48 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8007c48:	b480      	push	{r7}
 8007c4a:	b087      	sub	sp, #28
 8007c4c:	af00      	add	r7, sp, #0
 8007c4e:	60f8      	str	r0, [r7, #12]
 8007c50:	60b9      	str	r1, [r7, #8]
 8007c52:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f003 031f 	and.w	r3, r3, #31
 8007c5a:	2204      	movs	r2, #4
 8007c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8007c60:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007c62:	68fb      	ldr	r3, [r7, #12]
 8007c64:	6a1a      	ldr	r2, [r3, #32]
 8007c66:	697b      	ldr	r3, [r7, #20]
 8007c68:	43db      	mvns	r3, r3
 8007c6a:	401a      	ands	r2, r3
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007c70:	68fb      	ldr	r3, [r7, #12]
 8007c72:	6a1a      	ldr	r2, [r3, #32]
 8007c74:	68bb      	ldr	r3, [r7, #8]
 8007c76:	f003 031f 	and.w	r3, r3, #31
 8007c7a:	6879      	ldr	r1, [r7, #4]
 8007c7c:	fa01 f303 	lsl.w	r3, r1, r3
 8007c80:	431a      	orrs	r2, r3
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	621a      	str	r2, [r3, #32]
}
 8007c86:	bf00      	nop
 8007c88:	371c      	adds	r7, #28
 8007c8a:	46bd      	mov	sp, r7
 8007c8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c90:	4770      	bx	lr

08007c92 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007c92:	b580      	push	{r7, lr}
 8007c94:	b082      	sub	sp, #8
 8007c96:	af00      	add	r7, sp, #0
 8007c98:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2b00      	cmp	r3, #0
 8007c9e:	d101      	bne.n	8007ca4 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007ca0:	2301      	movs	r3, #1
 8007ca2:	e042      	b.n	8007d2a <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d106      	bne.n	8007cbc <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007cb6:	6878      	ldr	r0, [r7, #4]
 8007cb8:	f7fa faac 	bl	8002214 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	2224      	movs	r2, #36	; 0x24
 8007cc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	681a      	ldr	r2, [r3, #0]
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	f022 0201 	bic.w	r2, r2, #1
 8007cd2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007cd4:	6878      	ldr	r0, [r7, #4]
 8007cd6:	f000 fc51 	bl	800857c <UART_SetConfig>
 8007cda:	4603      	mov	r3, r0
 8007cdc:	2b01      	cmp	r3, #1
 8007cde:	d101      	bne.n	8007ce4 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007ce0:	2301      	movs	r3, #1
 8007ce2:	e022      	b.n	8007d2a <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d002      	beq.n	8007cf2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8007cec:	6878      	ldr	r0, [r7, #4]
 8007cee:	f000 ff41 	bl	8008b74 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007cf2:	687b      	ldr	r3, [r7, #4]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	685a      	ldr	r2, [r3, #4]
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007d00:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	681b      	ldr	r3, [r3, #0]
 8007d06:	689a      	ldr	r2, [r3, #8]
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007d10:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681a      	ldr	r2, [r3, #0]
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f042 0201 	orr.w	r2, r2, #1
 8007d20:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8007d22:	6878      	ldr	r0, [r7, #4]
 8007d24:	f000 ffc8 	bl	8008cb8 <UART_CheckIdleState>
 8007d28:	4603      	mov	r3, r0
}
 8007d2a:	4618      	mov	r0, r3
 8007d2c:	3708      	adds	r7, #8
 8007d2e:	46bd      	mov	sp, r7
 8007d30:	bd80      	pop	{r7, pc}

08007d32 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007d32:	b580      	push	{r7, lr}
 8007d34:	b08a      	sub	sp, #40	; 0x28
 8007d36:	af02      	add	r7, sp, #8
 8007d38:	60f8      	str	r0, [r7, #12]
 8007d3a:	60b9      	str	r1, [r7, #8]
 8007d3c:	603b      	str	r3, [r7, #0]
 8007d3e:	4613      	mov	r3, r2
 8007d40:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8007d48:	2b20      	cmp	r3, #32
 8007d4a:	f040 8083 	bne.w	8007e54 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8007d4e:	68bb      	ldr	r3, [r7, #8]
 8007d50:	2b00      	cmp	r3, #0
 8007d52:	d002      	beq.n	8007d5a <HAL_UART_Transmit+0x28>
 8007d54:	88fb      	ldrh	r3, [r7, #6]
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d101      	bne.n	8007d5e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8007d5a:	2301      	movs	r3, #1
 8007d5c:	e07b      	b.n	8007e56 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8007d5e:	68fb      	ldr	r3, [r7, #12]
 8007d60:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007d64:	2b01      	cmp	r3, #1
 8007d66:	d101      	bne.n	8007d6c <HAL_UART_Transmit+0x3a>
 8007d68:	2302      	movs	r3, #2
 8007d6a:	e074      	b.n	8007e56 <HAL_UART_Transmit+0x124>
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	2201      	movs	r2, #1
 8007d70:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007d74:	68fb      	ldr	r3, [r7, #12]
 8007d76:	2200      	movs	r2, #0
 8007d78:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	2221      	movs	r2, #33	; 0x21
 8007d80:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007d84:	f7fa fd98 	bl	80028b8 <HAL_GetTick>
 8007d88:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8007d8a:	68fb      	ldr	r3, [r7, #12]
 8007d8c:	88fa      	ldrh	r2, [r7, #6]
 8007d8e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	88fa      	ldrh	r2, [r7, #6]
 8007d96:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007d9a:	68fb      	ldr	r3, [r7, #12]
 8007d9c:	689b      	ldr	r3, [r3, #8]
 8007d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007da2:	d108      	bne.n	8007db6 <HAL_UART_Transmit+0x84>
 8007da4:	68fb      	ldr	r3, [r7, #12]
 8007da6:	691b      	ldr	r3, [r3, #16]
 8007da8:	2b00      	cmp	r3, #0
 8007daa:	d104      	bne.n	8007db6 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8007dac:	2300      	movs	r3, #0
 8007dae:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007db0:	68bb      	ldr	r3, [r7, #8]
 8007db2:	61bb      	str	r3, [r7, #24]
 8007db4:	e003      	b.n	8007dbe <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007db6:	68bb      	ldr	r3, [r7, #8]
 8007db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007dba:	2300      	movs	r3, #0
 8007dbc:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007dc6:	e02c      	b.n	8007e22 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007dc8:	683b      	ldr	r3, [r7, #0]
 8007dca:	9300      	str	r3, [sp, #0]
 8007dcc:	697b      	ldr	r3, [r7, #20]
 8007dce:	2200      	movs	r2, #0
 8007dd0:	2180      	movs	r1, #128	; 0x80
 8007dd2:	68f8      	ldr	r0, [r7, #12]
 8007dd4:	f000 ffbb 	bl	8008d4e <UART_WaitOnFlagUntilTimeout>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d001      	beq.n	8007de2 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8007dde:	2303      	movs	r3, #3
 8007de0:	e039      	b.n	8007e56 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007de2:	69fb      	ldr	r3, [r7, #28]
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d10b      	bne.n	8007e00 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007de8:	69bb      	ldr	r3, [r7, #24]
 8007dea:	881b      	ldrh	r3, [r3, #0]
 8007dec:	461a      	mov	r2, r3
 8007dee:	68fb      	ldr	r3, [r7, #12]
 8007df0:	681b      	ldr	r3, [r3, #0]
 8007df2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007df6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8007df8:	69bb      	ldr	r3, [r7, #24]
 8007dfa:	3302      	adds	r3, #2
 8007dfc:	61bb      	str	r3, [r7, #24]
 8007dfe:	e007      	b.n	8007e10 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8007e00:	69fb      	ldr	r3, [r7, #28]
 8007e02:	781a      	ldrb	r2, [r3, #0]
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8007e0a:	69fb      	ldr	r3, [r7, #28]
 8007e0c:	3301      	adds	r3, #1
 8007e0e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e16:	b29b      	uxth	r3, r3
 8007e18:	3b01      	subs	r3, #1
 8007e1a:	b29a      	uxth	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8007e22:	68fb      	ldr	r3, [r7, #12]
 8007e24:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8007e28:	b29b      	uxth	r3, r3
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1cc      	bne.n	8007dc8 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007e2e:	683b      	ldr	r3, [r7, #0]
 8007e30:	9300      	str	r3, [sp, #0]
 8007e32:	697b      	ldr	r3, [r7, #20]
 8007e34:	2200      	movs	r2, #0
 8007e36:	2140      	movs	r1, #64	; 0x40
 8007e38:	68f8      	ldr	r0, [r7, #12]
 8007e3a:	f000 ff88 	bl	8008d4e <UART_WaitOnFlagUntilTimeout>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d001      	beq.n	8007e48 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8007e44:	2303      	movs	r3, #3
 8007e46:	e006      	b.n	8007e56 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	2220      	movs	r2, #32
 8007e4c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007e50:	2300      	movs	r3, #0
 8007e52:	e000      	b.n	8007e56 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007e54:	2302      	movs	r3, #2
  }
}
 8007e56:	4618      	mov	r0, r3
 8007e58:	3720      	adds	r7, #32
 8007e5a:	46bd      	mov	sp, r7
 8007e5c:	bd80      	pop	{r7, pc}
	...

08007e60 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007e60:	b580      	push	{r7, lr}
 8007e62:	b08a      	sub	sp, #40	; 0x28
 8007e64:	af00      	add	r7, sp, #0
 8007e66:	60f8      	str	r0, [r7, #12]
 8007e68:	60b9      	str	r1, [r7, #8]
 8007e6a:	4613      	mov	r3, r2
 8007e6c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007e6e:	68fb      	ldr	r3, [r7, #12]
 8007e70:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007e74:	2b20      	cmp	r3, #32
 8007e76:	d142      	bne.n	8007efe <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007e78:	68bb      	ldr	r3, [r7, #8]
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d002      	beq.n	8007e84 <HAL_UART_Receive_IT+0x24>
 8007e7e:	88fb      	ldrh	r3, [r7, #6]
 8007e80:	2b00      	cmp	r3, #0
 8007e82:	d101      	bne.n	8007e88 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007e84:	2301      	movs	r3, #1
 8007e86:	e03b      	b.n	8007f00 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007e88:	68fb      	ldr	r3, [r7, #12]
 8007e8a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007e8e:	2b01      	cmp	r3, #1
 8007e90:	d101      	bne.n	8007e96 <HAL_UART_Receive_IT+0x36>
 8007e92:	2302      	movs	r3, #2
 8007e94:	e034      	b.n	8007f00 <HAL_UART_Receive_IT+0xa0>
 8007e96:	68fb      	ldr	r3, [r7, #12]
 8007e98:	2201      	movs	r2, #1
 8007e9a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e9e:	68fb      	ldr	r3, [r7, #12]
 8007ea0:	2200      	movs	r2, #0
 8007ea2:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	4a17      	ldr	r2, [pc, #92]	; (8007f08 <HAL_UART_Receive_IT+0xa8>)
 8007eaa:	4293      	cmp	r3, r2
 8007eac:	d01f      	beq.n	8007eee <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8007eae:	68fb      	ldr	r3, [r7, #12]
 8007eb0:	681b      	ldr	r3, [r3, #0]
 8007eb2:	685b      	ldr	r3, [r3, #4]
 8007eb4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007eb8:	2b00      	cmp	r3, #0
 8007eba:	d018      	beq.n	8007eee <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ec2:	697b      	ldr	r3, [r7, #20]
 8007ec4:	e853 3f00 	ldrex	r3, [r3]
 8007ec8:	613b      	str	r3, [r7, #16]
   return(result);
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007ed0:	627b      	str	r3, [r7, #36]	; 0x24
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	461a      	mov	r2, r3
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eda:	623b      	str	r3, [r7, #32]
 8007edc:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ede:	69f9      	ldr	r1, [r7, #28]
 8007ee0:	6a3a      	ldr	r2, [r7, #32]
 8007ee2:	e841 2300 	strex	r3, r2, [r1]
 8007ee6:	61bb      	str	r3, [r7, #24]
   return(result);
 8007ee8:	69bb      	ldr	r3, [r7, #24]
 8007eea:	2b00      	cmp	r3, #0
 8007eec:	d1e6      	bne.n	8007ebc <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007eee:	88fb      	ldrh	r3, [r7, #6]
 8007ef0:	461a      	mov	r2, r3
 8007ef2:	68b9      	ldr	r1, [r7, #8]
 8007ef4:	68f8      	ldr	r0, [r7, #12]
 8007ef6:	f000 fff3 	bl	8008ee0 <UART_Start_Receive_IT>
 8007efa:	4603      	mov	r3, r0
 8007efc:	e000      	b.n	8007f00 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8007efe:	2302      	movs	r3, #2
  }
}
 8007f00:	4618      	mov	r0, r3
 8007f02:	3728      	adds	r7, #40	; 0x28
 8007f04:	46bd      	mov	sp, r7
 8007f06:	bd80      	pop	{r7, pc}
 8007f08:	40008000 	.word	0x40008000

08007f0c <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007f0c:	b580      	push	{r7, lr}
 8007f0e:	b0ba      	sub	sp, #232	; 0xe8
 8007f10:	af00      	add	r7, sp, #0
 8007f12:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	69db      	ldr	r3, [r3, #28]
 8007f1a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007f28:	687b      	ldr	r3, [r7, #4]
 8007f2a:	681b      	ldr	r3, [r3, #0]
 8007f2c:	689b      	ldr	r3, [r3, #8]
 8007f2e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8007f32:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8007f36:	f640 030f 	movw	r3, #2063	; 0x80f
 8007f3a:	4013      	ands	r3, r2
 8007f3c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8007f40:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d11b      	bne.n	8007f80 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f4c:	f003 0320 	and.w	r3, r3, #32
 8007f50:	2b00      	cmp	r3, #0
 8007f52:	d015      	beq.n	8007f80 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007f54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f58:	f003 0320 	and.w	r3, r3, #32
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d105      	bne.n	8007f6c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007f60:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f64:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d009      	beq.n	8007f80 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f70:	2b00      	cmp	r3, #0
 8007f72:	f000 82d6 	beq.w	8008522 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007f7a:	6878      	ldr	r0, [r7, #4]
 8007f7c:	4798      	blx	r3
      }
      return;
 8007f7e:	e2d0      	b.n	8008522 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007f80:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	f000 811f 	beq.w	80081c8 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007f8a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007f8e:	4b8b      	ldr	r3, [pc, #556]	; (80081bc <HAL_UART_IRQHandler+0x2b0>)
 8007f90:	4013      	ands	r3, r2
 8007f92:	2b00      	cmp	r3, #0
 8007f94:	d106      	bne.n	8007fa4 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007f96:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007f9a:	4b89      	ldr	r3, [pc, #548]	; (80081c0 <HAL_UART_IRQHandler+0x2b4>)
 8007f9c:	4013      	ands	r3, r2
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	f000 8112 	beq.w	80081c8 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007fa4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fa8:	f003 0301 	and.w	r3, r3, #1
 8007fac:	2b00      	cmp	r3, #0
 8007fae:	d011      	beq.n	8007fd4 <HAL_UART_IRQHandler+0xc8>
 8007fb0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007fb8:	2b00      	cmp	r3, #0
 8007fba:	d00b      	beq.n	8007fd4 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2201      	movs	r2, #1
 8007fc2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007fca:	f043 0201 	orr.w	r2, r3, #1
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007fd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fd8:	f003 0302 	and.w	r3, r3, #2
 8007fdc:	2b00      	cmp	r3, #0
 8007fde:	d011      	beq.n	8008004 <HAL_UART_IRQHandler+0xf8>
 8007fe0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007fe4:	f003 0301 	and.w	r3, r3, #1
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d00b      	beq.n	8008004 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2202      	movs	r2, #2
 8007ff2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ff4:	687b      	ldr	r3, [r7, #4]
 8007ff6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ffa:	f043 0204 	orr.w	r2, r3, #4
 8007ffe:	687b      	ldr	r3, [r7, #4]
 8008000:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8008004:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008008:	f003 0304 	and.w	r3, r3, #4
 800800c:	2b00      	cmp	r3, #0
 800800e:	d011      	beq.n	8008034 <HAL_UART_IRQHandler+0x128>
 8008010:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008014:	f003 0301 	and.w	r3, r3, #1
 8008018:	2b00      	cmp	r3, #0
 800801a:	d00b      	beq.n	8008034 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	2204      	movs	r2, #4
 8008022:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800802a:	f043 0202 	orr.w	r2, r3, #2
 800802e:	687b      	ldr	r3, [r7, #4]
 8008030:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8008034:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008038:	f003 0308 	and.w	r3, r3, #8
 800803c:	2b00      	cmp	r3, #0
 800803e:	d017      	beq.n	8008070 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008040:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008044:	f003 0320 	and.w	r3, r3, #32
 8008048:	2b00      	cmp	r3, #0
 800804a:	d105      	bne.n	8008058 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 800804c:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8008050:	4b5a      	ldr	r3, [pc, #360]	; (80081bc <HAL_UART_IRQHandler+0x2b0>)
 8008052:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8008054:	2b00      	cmp	r3, #0
 8008056:	d00b      	beq.n	8008070 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	681b      	ldr	r3, [r3, #0]
 800805c:	2208      	movs	r2, #8
 800805e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008066:	f043 0208 	orr.w	r2, r3, #8
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8008070:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008074:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008078:	2b00      	cmp	r3, #0
 800807a:	d012      	beq.n	80080a2 <HAL_UART_IRQHandler+0x196>
 800807c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008080:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8008084:	2b00      	cmp	r3, #0
 8008086:	d00c      	beq.n	80080a2 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	681b      	ldr	r3, [r3, #0]
 800808c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008090:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008098:	f043 0220 	orr.w	r2, r3, #32
 800809c:	687b      	ldr	r3, [r7, #4]
 800809e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080a8:	2b00      	cmp	r3, #0
 80080aa:	f000 823c 	beq.w	8008526 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80080ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b2:	f003 0320 	and.w	r3, r3, #32
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d013      	beq.n	80080e2 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 80080ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080be:	f003 0320 	and.w	r3, r3, #32
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d105      	bne.n	80080d2 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 80080c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80080ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80080ce:	2b00      	cmp	r3, #0
 80080d0:	d007      	beq.n	80080e2 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d003      	beq.n	80080e2 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80080de:	6878      	ldr	r0, [r7, #4]
 80080e0:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80080e8:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	681b      	ldr	r3, [r3, #0]
 80080f0:	689b      	ldr	r3, [r3, #8]
 80080f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080f6:	2b40      	cmp	r3, #64	; 0x40
 80080f8:	d005      	beq.n	8008106 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 80080fa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80080fe:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8008102:	2b00      	cmp	r3, #0
 8008104:	d04f      	beq.n	80081a6 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008106:	6878      	ldr	r0, [r7, #4]
 8008108:	f001 f814 	bl	8009134 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	689b      	ldr	r3, [r3, #8]
 8008112:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008116:	2b40      	cmp	r3, #64	; 0x40
 8008118:	d141      	bne.n	800819e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	3308      	adds	r3, #8
 8008120:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008124:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008128:	e853 3f00 	ldrex	r3, [r3]
 800812c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008130:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008134:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008138:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	3308      	adds	r3, #8
 8008142:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008146:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800814a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800814e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008152:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008156:	e841 2300 	strex	r3, r2, [r1]
 800815a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800815e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008162:	2b00      	cmp	r3, #0
 8008164:	d1d9      	bne.n	800811a <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800816a:	2b00      	cmp	r3, #0
 800816c:	d013      	beq.n	8008196 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8008172:	4a14      	ldr	r2, [pc, #80]	; (80081c4 <HAL_UART_IRQHandler+0x2b8>)
 8008174:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800817a:	4618      	mov	r0, r3
 800817c:	f7fc fa6a 	bl	8004654 <HAL_DMA_Abort_IT>
 8008180:	4603      	mov	r3, r0
 8008182:	2b00      	cmp	r3, #0
 8008184:	d017      	beq.n	80081b6 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800818a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800818c:	687a      	ldr	r2, [r7, #4]
 800818e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8008190:	4610      	mov	r0, r2
 8008192:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008194:	e00f      	b.n	80081b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008196:	6878      	ldr	r0, [r7, #4]
 8008198:	f000 f9da 	bl	8008550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800819c:	e00b      	b.n	80081b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800819e:	6878      	ldr	r0, [r7, #4]
 80081a0:	f000 f9d6 	bl	8008550 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081a4:	e007      	b.n	80081b6 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80081a6:	6878      	ldr	r0, [r7, #4]
 80081a8:	f000 f9d2 	bl	8008550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2200      	movs	r2, #0
 80081b0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 80081b4:	e1b7      	b.n	8008526 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081b6:	bf00      	nop
    return;
 80081b8:	e1b5      	b.n	8008526 <HAL_UART_IRQHandler+0x61a>
 80081ba:	bf00      	nop
 80081bc:	10000001 	.word	0x10000001
 80081c0:	04000120 	.word	0x04000120
 80081c4:	08009201 	.word	0x08009201

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80081cc:	2b01      	cmp	r3, #1
 80081ce:	f040 814a 	bne.w	8008466 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 80081d2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80081d6:	f003 0310 	and.w	r3, r3, #16
 80081da:	2b00      	cmp	r3, #0
 80081dc:	f000 8143 	beq.w	8008466 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 80081e0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80081e4:	f003 0310 	and.w	r3, r3, #16
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	f000 813c 	beq.w	8008466 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80081ee:	687b      	ldr	r3, [r7, #4]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	2210      	movs	r2, #16
 80081f4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	689b      	ldr	r3, [r3, #8]
 80081fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008200:	2b40      	cmp	r3, #64	; 0x40
 8008202:	f040 80b5 	bne.w	8008370 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	685b      	ldr	r3, [r3, #4]
 800820e:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008212:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008216:	2b00      	cmp	r3, #0
 8008218:	f000 8187 	beq.w	800852a <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008222:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008226:	429a      	cmp	r2, r3
 8008228:	f080 817f 	bcs.w	800852a <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008232:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681b      	ldr	r3, [r3, #0]
 800823e:	f003 0320 	and.w	r3, r3, #32
 8008242:	2b00      	cmp	r3, #0
 8008244:	f040 8086 	bne.w	8008354 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	681b      	ldr	r3, [r3, #0]
 800824c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008250:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008254:	e853 3f00 	ldrex	r3, [r3]
 8008258:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800825c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008260:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008264:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008268:	687b      	ldr	r3, [r7, #4]
 800826a:	681b      	ldr	r3, [r3, #0]
 800826c:	461a      	mov	r2, r3
 800826e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8008272:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8008276:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800827a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800827e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008282:	e841 2300 	strex	r3, r2, [r1]
 8008286:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800828a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800828e:	2b00      	cmp	r3, #0
 8008290:	d1da      	bne.n	8008248 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	3308      	adds	r3, #8
 8008298:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800829a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800829c:	e853 3f00 	ldrex	r3, [r3]
 80082a0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80082a2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80082a4:	f023 0301 	bic.w	r3, r3, #1
 80082a8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	3308      	adds	r3, #8
 80082b2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80082b6:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80082ba:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082bc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80082be:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80082c2:	e841 2300 	strex	r3, r2, [r1]
 80082c6:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80082c8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80082ca:	2b00      	cmp	r3, #0
 80082cc:	d1e1      	bne.n	8008292 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80082ce:	687b      	ldr	r3, [r7, #4]
 80082d0:	681b      	ldr	r3, [r3, #0]
 80082d2:	3308      	adds	r3, #8
 80082d4:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082d6:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80082d8:	e853 3f00 	ldrex	r3, [r3]
 80082dc:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 80082de:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80082e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80082e4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80082e8:	687b      	ldr	r3, [r7, #4]
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	3308      	adds	r3, #8
 80082ee:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 80082f2:	66fa      	str	r2, [r7, #108]	; 0x6c
 80082f4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80082f8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80082fa:	e841 2300 	strex	r3, r2, [r1]
 80082fe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008300:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008302:	2b00      	cmp	r3, #0
 8008304:	d1e3      	bne.n	80082ce <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	2220      	movs	r2, #32
 800830a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	2200      	movs	r2, #0
 8008312:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	681b      	ldr	r3, [r3, #0]
 8008318:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800831a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800831c:	e853 3f00 	ldrex	r3, [r3]
 8008320:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008322:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008324:	f023 0310 	bic.w	r3, r3, #16
 8008328:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	681b      	ldr	r3, [r3, #0]
 8008330:	461a      	mov	r2, r3
 8008332:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8008336:	65bb      	str	r3, [r7, #88]	; 0x58
 8008338:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800833a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800833c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800833e:	e841 2300 	strex	r3, r2, [r1]
 8008342:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008344:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008346:	2b00      	cmp	r3, #0
 8008348:	d1e4      	bne.n	8008314 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800834e:	4618      	mov	r0, r3
 8008350:	f7fc f927 	bl	80045a2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008360:	b29b      	uxth	r3, r3
 8008362:	1ad3      	subs	r3, r2, r3
 8008364:	b29b      	uxth	r3, r3
 8008366:	4619      	mov	r1, r3
 8008368:	6878      	ldr	r0, [r7, #4]
 800836a:	f000 f8fb 	bl	8008564 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800836e:	e0dc      	b.n	800852a <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800837c:	b29b      	uxth	r3, r3
 800837e:	1ad3      	subs	r3, r2, r3
 8008380:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008384:	687b      	ldr	r3, [r7, #4]
 8008386:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800838a:	b29b      	uxth	r3, r3
 800838c:	2b00      	cmp	r3, #0
 800838e:	f000 80ce 	beq.w	800852e <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8008392:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008396:	2b00      	cmp	r3, #0
 8008398:	f000 80c9 	beq.w	800852e <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800839c:	687b      	ldr	r3, [r7, #4]
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80083a4:	e853 3f00 	ldrex	r3, [r3]
 80083a8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80083aa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80083ac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80083b0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	681b      	ldr	r3, [r3, #0]
 80083b8:	461a      	mov	r2, r3
 80083ba:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 80083be:	647b      	str	r3, [r7, #68]	; 0x44
 80083c0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083c2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80083c4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80083c6:	e841 2300 	strex	r3, r2, [r1]
 80083ca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80083cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d1e4      	bne.n	800839c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80083d2:	687b      	ldr	r3, [r7, #4]
 80083d4:	681b      	ldr	r3, [r3, #0]
 80083d6:	3308      	adds	r3, #8
 80083d8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80083da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083dc:	e853 3f00 	ldrex	r3, [r3]
 80083e0:	623b      	str	r3, [r7, #32]
   return(result);
 80083e2:	6a3b      	ldr	r3, [r7, #32]
 80083e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80083e8:	f023 0301 	bic.w	r3, r3, #1
 80083ec:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	3308      	adds	r3, #8
 80083f6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80083fa:	633a      	str	r2, [r7, #48]	; 0x30
 80083fc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80083fe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008400:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008402:	e841 2300 	strex	r3, r2, [r1]
 8008406:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008408:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800840a:	2b00      	cmp	r3, #0
 800840c:	d1e1      	bne.n	80083d2 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2220      	movs	r2, #32
 8008412:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	2200      	movs	r2, #0
 800841a:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2200      	movs	r2, #0
 8008420:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	e853 3f00 	ldrex	r3, [r3]
 800842e:	60fb      	str	r3, [r7, #12]
   return(result);
 8008430:	68fb      	ldr	r3, [r7, #12]
 8008432:	f023 0310 	bic.w	r3, r3, #16
 8008436:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	681b      	ldr	r3, [r3, #0]
 800843e:	461a      	mov	r2, r3
 8008440:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8008444:	61fb      	str	r3, [r7, #28]
 8008446:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008448:	69b9      	ldr	r1, [r7, #24]
 800844a:	69fa      	ldr	r2, [r7, #28]
 800844c:	e841 2300 	strex	r3, r2, [r1]
 8008450:	617b      	str	r3, [r7, #20]
   return(result);
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	2b00      	cmp	r3, #0
 8008456:	d1e4      	bne.n	8008422 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008458:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800845c:	4619      	mov	r1, r3
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f880 	bl	8008564 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8008464:	e063      	b.n	800852e <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8008466:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800846a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800846e:	2b00      	cmp	r3, #0
 8008470:	d00e      	beq.n	8008490 <HAL_UART_IRQHandler+0x584>
 8008472:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008476:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800847a:	2b00      	cmp	r3, #0
 800847c:	d008      	beq.n	8008490 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	681b      	ldr	r3, [r3, #0]
 8008482:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8008486:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8008488:	6878      	ldr	r0, [r7, #4]
 800848a:	f001 fb57 	bl	8009b3c <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 800848e:	e051      	b.n	8008534 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8008490:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008494:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008498:	2b00      	cmp	r3, #0
 800849a:	d014      	beq.n	80084c6 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 800849c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084a4:	2b00      	cmp	r3, #0
 80084a6:	d105      	bne.n	80084b4 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 80084a8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80084ac:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	d008      	beq.n	80084c6 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084b8:	2b00      	cmp	r3, #0
 80084ba:	d03a      	beq.n	8008532 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80084c0:	6878      	ldr	r0, [r7, #4]
 80084c2:	4798      	blx	r3
    }
    return;
 80084c4:	e035      	b.n	8008532 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 80084c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ca:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ce:	2b00      	cmp	r3, #0
 80084d0:	d009      	beq.n	80084e6 <HAL_UART_IRQHandler+0x5da>
 80084d2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084da:	2b00      	cmp	r3, #0
 80084dc:	d003      	beq.n	80084e6 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 80084de:	6878      	ldr	r0, [r7, #4]
 80084e0:	f000 fea4 	bl	800922c <UART_EndTransmit_IT>
    return;
 80084e4:	e026      	b.n	8008534 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 80084e6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80084ea:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80084ee:	2b00      	cmp	r3, #0
 80084f0:	d009      	beq.n	8008506 <HAL_UART_IRQHandler+0x5fa>
 80084f2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80084f6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d003      	beq.n	8008506 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 80084fe:	6878      	ldr	r0, [r7, #4]
 8008500:	f001 fb30 	bl	8009b64 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008504:	e016      	b.n	8008534 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8008506:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800850a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800850e:	2b00      	cmp	r3, #0
 8008510:	d010      	beq.n	8008534 <HAL_UART_IRQHandler+0x628>
 8008512:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008516:	2b00      	cmp	r3, #0
 8008518:	da0c      	bge.n	8008534 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800851a:	6878      	ldr	r0, [r7, #4]
 800851c:	f001 fb18 	bl	8009b50 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8008520:	e008      	b.n	8008534 <HAL_UART_IRQHandler+0x628>
      return;
 8008522:	bf00      	nop
 8008524:	e006      	b.n	8008534 <HAL_UART_IRQHandler+0x628>
    return;
 8008526:	bf00      	nop
 8008528:	e004      	b.n	8008534 <HAL_UART_IRQHandler+0x628>
      return;
 800852a:	bf00      	nop
 800852c:	e002      	b.n	8008534 <HAL_UART_IRQHandler+0x628>
      return;
 800852e:	bf00      	nop
 8008530:	e000      	b.n	8008534 <HAL_UART_IRQHandler+0x628>
    return;
 8008532:	bf00      	nop
  }
}
 8008534:	37e8      	adds	r7, #232	; 0xe8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop

0800853c <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800853c:	b480      	push	{r7}
 800853e:	b083      	sub	sp, #12
 8008540:	af00      	add	r7, sp, #0
 8008542:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8008544:	bf00      	nop
 8008546:	370c      	adds	r7, #12
 8008548:	46bd      	mov	sp, r7
 800854a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854e:	4770      	bx	lr

08008550 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008550:	b480      	push	{r7}
 8008552:	b083      	sub	sp, #12
 8008554:	af00      	add	r7, sp, #0
 8008556:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008558:	bf00      	nop
 800855a:	370c      	adds	r7, #12
 800855c:	46bd      	mov	sp, r7
 800855e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008562:	4770      	bx	lr

08008564 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008564:	b480      	push	{r7}
 8008566:	b083      	sub	sp, #12
 8008568:	af00      	add	r7, sp, #0
 800856a:	6078      	str	r0, [r7, #4]
 800856c:	460b      	mov	r3, r1
 800856e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008570:	bf00      	nop
 8008572:	370c      	adds	r7, #12
 8008574:	46bd      	mov	sp, r7
 8008576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800857a:	4770      	bx	lr

0800857c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800857c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008580:	b08c      	sub	sp, #48	; 0x30
 8008582:	af00      	add	r7, sp, #0
 8008584:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008586:	2300      	movs	r3, #0
 8008588:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800858c:	697b      	ldr	r3, [r7, #20]
 800858e:	689a      	ldr	r2, [r3, #8]
 8008590:	697b      	ldr	r3, [r7, #20]
 8008592:	691b      	ldr	r3, [r3, #16]
 8008594:	431a      	orrs	r2, r3
 8008596:	697b      	ldr	r3, [r7, #20]
 8008598:	695b      	ldr	r3, [r3, #20]
 800859a:	431a      	orrs	r2, r3
 800859c:	697b      	ldr	r3, [r7, #20]
 800859e:	69db      	ldr	r3, [r3, #28]
 80085a0:	4313      	orrs	r3, r2
 80085a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 80085a4:	697b      	ldr	r3, [r7, #20]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	681a      	ldr	r2, [r3, #0]
 80085aa:	4baa      	ldr	r3, [pc, #680]	; (8008854 <UART_SetConfig+0x2d8>)
 80085ac:	4013      	ands	r3, r2
 80085ae:	697a      	ldr	r2, [r7, #20]
 80085b0:	6812      	ldr	r2, [r2, #0]
 80085b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085b4:	430b      	orrs	r3, r1
 80085b6:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085b8:	697b      	ldr	r3, [r7, #20]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	68da      	ldr	r2, [r3, #12]
 80085c6:	697b      	ldr	r3, [r7, #20]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	430a      	orrs	r2, r1
 80085cc:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 80085ce:	697b      	ldr	r3, [r7, #20]
 80085d0:	699b      	ldr	r3, [r3, #24]
 80085d2:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 80085d4:	697b      	ldr	r3, [r7, #20]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	4a9f      	ldr	r2, [pc, #636]	; (8008858 <UART_SetConfig+0x2dc>)
 80085da:	4293      	cmp	r3, r2
 80085dc:	d004      	beq.n	80085e8 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	6a1b      	ldr	r3, [r3, #32]
 80085e2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80085e4:	4313      	orrs	r3, r2
 80085e6:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 80085e8:	697b      	ldr	r3, [r7, #20]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	689b      	ldr	r3, [r3, #8]
 80085ee:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80085f2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80085f6:	697a      	ldr	r2, [r7, #20]
 80085f8:	6812      	ldr	r2, [r2, #0]
 80085fa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80085fc:	430b      	orrs	r3, r1
 80085fe:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8008600:	697b      	ldr	r3, [r7, #20]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008606:	f023 010f 	bic.w	r1, r3, #15
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800860e:	697b      	ldr	r3, [r7, #20]
 8008610:	681b      	ldr	r3, [r3, #0]
 8008612:	430a      	orrs	r2, r1
 8008614:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8008616:	697b      	ldr	r3, [r7, #20]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	4a90      	ldr	r2, [pc, #576]	; (800885c <UART_SetConfig+0x2e0>)
 800861c:	4293      	cmp	r3, r2
 800861e:	d125      	bne.n	800866c <UART_SetConfig+0xf0>
 8008620:	4b8f      	ldr	r3, [pc, #572]	; (8008860 <UART_SetConfig+0x2e4>)
 8008622:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008626:	f003 0303 	and.w	r3, r3, #3
 800862a:	2b03      	cmp	r3, #3
 800862c:	d81a      	bhi.n	8008664 <UART_SetConfig+0xe8>
 800862e:	a201      	add	r2, pc, #4	; (adr r2, 8008634 <UART_SetConfig+0xb8>)
 8008630:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008634:	08008645 	.word	0x08008645
 8008638:	08008655 	.word	0x08008655
 800863c:	0800864d 	.word	0x0800864d
 8008640:	0800865d 	.word	0x0800865d
 8008644:	2301      	movs	r3, #1
 8008646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800864a:	e116      	b.n	800887a <UART_SetConfig+0x2fe>
 800864c:	2302      	movs	r3, #2
 800864e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008652:	e112      	b.n	800887a <UART_SetConfig+0x2fe>
 8008654:	2304      	movs	r3, #4
 8008656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800865a:	e10e      	b.n	800887a <UART_SetConfig+0x2fe>
 800865c:	2308      	movs	r3, #8
 800865e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008662:	e10a      	b.n	800887a <UART_SetConfig+0x2fe>
 8008664:	2310      	movs	r3, #16
 8008666:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800866a:	e106      	b.n	800887a <UART_SetConfig+0x2fe>
 800866c:	697b      	ldr	r3, [r7, #20]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	4a7c      	ldr	r2, [pc, #496]	; (8008864 <UART_SetConfig+0x2e8>)
 8008672:	4293      	cmp	r3, r2
 8008674:	d138      	bne.n	80086e8 <UART_SetConfig+0x16c>
 8008676:	4b7a      	ldr	r3, [pc, #488]	; (8008860 <UART_SetConfig+0x2e4>)
 8008678:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800867c:	f003 030c 	and.w	r3, r3, #12
 8008680:	2b0c      	cmp	r3, #12
 8008682:	d82d      	bhi.n	80086e0 <UART_SetConfig+0x164>
 8008684:	a201      	add	r2, pc, #4	; (adr r2, 800868c <UART_SetConfig+0x110>)
 8008686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800868a:	bf00      	nop
 800868c:	080086c1 	.word	0x080086c1
 8008690:	080086e1 	.word	0x080086e1
 8008694:	080086e1 	.word	0x080086e1
 8008698:	080086e1 	.word	0x080086e1
 800869c:	080086d1 	.word	0x080086d1
 80086a0:	080086e1 	.word	0x080086e1
 80086a4:	080086e1 	.word	0x080086e1
 80086a8:	080086e1 	.word	0x080086e1
 80086ac:	080086c9 	.word	0x080086c9
 80086b0:	080086e1 	.word	0x080086e1
 80086b4:	080086e1 	.word	0x080086e1
 80086b8:	080086e1 	.word	0x080086e1
 80086bc:	080086d9 	.word	0x080086d9
 80086c0:	2300      	movs	r3, #0
 80086c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086c6:	e0d8      	b.n	800887a <UART_SetConfig+0x2fe>
 80086c8:	2302      	movs	r3, #2
 80086ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086ce:	e0d4      	b.n	800887a <UART_SetConfig+0x2fe>
 80086d0:	2304      	movs	r3, #4
 80086d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086d6:	e0d0      	b.n	800887a <UART_SetConfig+0x2fe>
 80086d8:	2308      	movs	r3, #8
 80086da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086de:	e0cc      	b.n	800887a <UART_SetConfig+0x2fe>
 80086e0:	2310      	movs	r3, #16
 80086e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80086e6:	e0c8      	b.n	800887a <UART_SetConfig+0x2fe>
 80086e8:	697b      	ldr	r3, [r7, #20]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a5e      	ldr	r2, [pc, #376]	; (8008868 <UART_SetConfig+0x2ec>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d125      	bne.n	800873e <UART_SetConfig+0x1c2>
 80086f2:	4b5b      	ldr	r3, [pc, #364]	; (8008860 <UART_SetConfig+0x2e4>)
 80086f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80086f8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80086fc:	2b30      	cmp	r3, #48	; 0x30
 80086fe:	d016      	beq.n	800872e <UART_SetConfig+0x1b2>
 8008700:	2b30      	cmp	r3, #48	; 0x30
 8008702:	d818      	bhi.n	8008736 <UART_SetConfig+0x1ba>
 8008704:	2b20      	cmp	r3, #32
 8008706:	d00a      	beq.n	800871e <UART_SetConfig+0x1a2>
 8008708:	2b20      	cmp	r3, #32
 800870a:	d814      	bhi.n	8008736 <UART_SetConfig+0x1ba>
 800870c:	2b00      	cmp	r3, #0
 800870e:	d002      	beq.n	8008716 <UART_SetConfig+0x19a>
 8008710:	2b10      	cmp	r3, #16
 8008712:	d008      	beq.n	8008726 <UART_SetConfig+0x1aa>
 8008714:	e00f      	b.n	8008736 <UART_SetConfig+0x1ba>
 8008716:	2300      	movs	r3, #0
 8008718:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800871c:	e0ad      	b.n	800887a <UART_SetConfig+0x2fe>
 800871e:	2302      	movs	r3, #2
 8008720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008724:	e0a9      	b.n	800887a <UART_SetConfig+0x2fe>
 8008726:	2304      	movs	r3, #4
 8008728:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800872c:	e0a5      	b.n	800887a <UART_SetConfig+0x2fe>
 800872e:	2308      	movs	r3, #8
 8008730:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008734:	e0a1      	b.n	800887a <UART_SetConfig+0x2fe>
 8008736:	2310      	movs	r3, #16
 8008738:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800873c:	e09d      	b.n	800887a <UART_SetConfig+0x2fe>
 800873e:	697b      	ldr	r3, [r7, #20]
 8008740:	681b      	ldr	r3, [r3, #0]
 8008742:	4a4a      	ldr	r2, [pc, #296]	; (800886c <UART_SetConfig+0x2f0>)
 8008744:	4293      	cmp	r3, r2
 8008746:	d125      	bne.n	8008794 <UART_SetConfig+0x218>
 8008748:	4b45      	ldr	r3, [pc, #276]	; (8008860 <UART_SetConfig+0x2e4>)
 800874a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800874e:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008752:	2bc0      	cmp	r3, #192	; 0xc0
 8008754:	d016      	beq.n	8008784 <UART_SetConfig+0x208>
 8008756:	2bc0      	cmp	r3, #192	; 0xc0
 8008758:	d818      	bhi.n	800878c <UART_SetConfig+0x210>
 800875a:	2b80      	cmp	r3, #128	; 0x80
 800875c:	d00a      	beq.n	8008774 <UART_SetConfig+0x1f8>
 800875e:	2b80      	cmp	r3, #128	; 0x80
 8008760:	d814      	bhi.n	800878c <UART_SetConfig+0x210>
 8008762:	2b00      	cmp	r3, #0
 8008764:	d002      	beq.n	800876c <UART_SetConfig+0x1f0>
 8008766:	2b40      	cmp	r3, #64	; 0x40
 8008768:	d008      	beq.n	800877c <UART_SetConfig+0x200>
 800876a:	e00f      	b.n	800878c <UART_SetConfig+0x210>
 800876c:	2300      	movs	r3, #0
 800876e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008772:	e082      	b.n	800887a <UART_SetConfig+0x2fe>
 8008774:	2302      	movs	r3, #2
 8008776:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800877a:	e07e      	b.n	800887a <UART_SetConfig+0x2fe>
 800877c:	2304      	movs	r3, #4
 800877e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008782:	e07a      	b.n	800887a <UART_SetConfig+0x2fe>
 8008784:	2308      	movs	r3, #8
 8008786:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800878a:	e076      	b.n	800887a <UART_SetConfig+0x2fe>
 800878c:	2310      	movs	r3, #16
 800878e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008792:	e072      	b.n	800887a <UART_SetConfig+0x2fe>
 8008794:	697b      	ldr	r3, [r7, #20]
 8008796:	681b      	ldr	r3, [r3, #0]
 8008798:	4a35      	ldr	r2, [pc, #212]	; (8008870 <UART_SetConfig+0x2f4>)
 800879a:	4293      	cmp	r3, r2
 800879c:	d12a      	bne.n	80087f4 <UART_SetConfig+0x278>
 800879e:	4b30      	ldr	r3, [pc, #192]	; (8008860 <UART_SetConfig+0x2e4>)
 80087a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80087a4:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80087a8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087ac:	d01a      	beq.n	80087e4 <UART_SetConfig+0x268>
 80087ae:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80087b2:	d81b      	bhi.n	80087ec <UART_SetConfig+0x270>
 80087b4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087b8:	d00c      	beq.n	80087d4 <UART_SetConfig+0x258>
 80087ba:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80087be:	d815      	bhi.n	80087ec <UART_SetConfig+0x270>
 80087c0:	2b00      	cmp	r3, #0
 80087c2:	d003      	beq.n	80087cc <UART_SetConfig+0x250>
 80087c4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80087c8:	d008      	beq.n	80087dc <UART_SetConfig+0x260>
 80087ca:	e00f      	b.n	80087ec <UART_SetConfig+0x270>
 80087cc:	2300      	movs	r3, #0
 80087ce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087d2:	e052      	b.n	800887a <UART_SetConfig+0x2fe>
 80087d4:	2302      	movs	r3, #2
 80087d6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087da:	e04e      	b.n	800887a <UART_SetConfig+0x2fe>
 80087dc:	2304      	movs	r3, #4
 80087de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087e2:	e04a      	b.n	800887a <UART_SetConfig+0x2fe>
 80087e4:	2308      	movs	r3, #8
 80087e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087ea:	e046      	b.n	800887a <UART_SetConfig+0x2fe>
 80087ec:	2310      	movs	r3, #16
 80087ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80087f2:	e042      	b.n	800887a <UART_SetConfig+0x2fe>
 80087f4:	697b      	ldr	r3, [r7, #20]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	4a17      	ldr	r2, [pc, #92]	; (8008858 <UART_SetConfig+0x2dc>)
 80087fa:	4293      	cmp	r3, r2
 80087fc:	d13a      	bne.n	8008874 <UART_SetConfig+0x2f8>
 80087fe:	4b18      	ldr	r3, [pc, #96]	; (8008860 <UART_SetConfig+0x2e4>)
 8008800:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008804:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8008808:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800880c:	d01a      	beq.n	8008844 <UART_SetConfig+0x2c8>
 800880e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8008812:	d81b      	bhi.n	800884c <UART_SetConfig+0x2d0>
 8008814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008818:	d00c      	beq.n	8008834 <UART_SetConfig+0x2b8>
 800881a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800881e:	d815      	bhi.n	800884c <UART_SetConfig+0x2d0>
 8008820:	2b00      	cmp	r3, #0
 8008822:	d003      	beq.n	800882c <UART_SetConfig+0x2b0>
 8008824:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008828:	d008      	beq.n	800883c <UART_SetConfig+0x2c0>
 800882a:	e00f      	b.n	800884c <UART_SetConfig+0x2d0>
 800882c:	2300      	movs	r3, #0
 800882e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008832:	e022      	b.n	800887a <UART_SetConfig+0x2fe>
 8008834:	2302      	movs	r3, #2
 8008836:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800883a:	e01e      	b.n	800887a <UART_SetConfig+0x2fe>
 800883c:	2304      	movs	r3, #4
 800883e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008842:	e01a      	b.n	800887a <UART_SetConfig+0x2fe>
 8008844:	2308      	movs	r3, #8
 8008846:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800884a:	e016      	b.n	800887a <UART_SetConfig+0x2fe>
 800884c:	2310      	movs	r3, #16
 800884e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008852:	e012      	b.n	800887a <UART_SetConfig+0x2fe>
 8008854:	cfff69f3 	.word	0xcfff69f3
 8008858:	40008000 	.word	0x40008000
 800885c:	40013800 	.word	0x40013800
 8008860:	40021000 	.word	0x40021000
 8008864:	40004400 	.word	0x40004400
 8008868:	40004800 	.word	0x40004800
 800886c:	40004c00 	.word	0x40004c00
 8008870:	40005000 	.word	0x40005000
 8008874:	2310      	movs	r3, #16
 8008876:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800887a:	697b      	ldr	r3, [r7, #20]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	4aae      	ldr	r2, [pc, #696]	; (8008b38 <UART_SetConfig+0x5bc>)
 8008880:	4293      	cmp	r3, r2
 8008882:	f040 8097 	bne.w	80089b4 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008886:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800888a:	2b08      	cmp	r3, #8
 800888c:	d823      	bhi.n	80088d6 <UART_SetConfig+0x35a>
 800888e:	a201      	add	r2, pc, #4	; (adr r2, 8008894 <UART_SetConfig+0x318>)
 8008890:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008894:	080088b9 	.word	0x080088b9
 8008898:	080088d7 	.word	0x080088d7
 800889c:	080088c1 	.word	0x080088c1
 80088a0:	080088d7 	.word	0x080088d7
 80088a4:	080088c7 	.word	0x080088c7
 80088a8:	080088d7 	.word	0x080088d7
 80088ac:	080088d7 	.word	0x080088d7
 80088b0:	080088d7 	.word	0x080088d7
 80088b4:	080088cf 	.word	0x080088cf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80088b8:	f7fc ffb6 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 80088bc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088be:	e010      	b.n	80088e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80088c0:	4b9e      	ldr	r3, [pc, #632]	; (8008b3c <UART_SetConfig+0x5c0>)
 80088c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088c4:	e00d      	b.n	80088e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80088c6:	f7fc ff41 	bl	800574c <HAL_RCC_GetSysClockFreq>
 80088ca:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80088cc:	e009      	b.n	80088e2 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80088ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80088d2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80088d4:	e005      	b.n	80088e2 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 80088d6:	2300      	movs	r3, #0
 80088d8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80088da:	2301      	movs	r3, #1
 80088dc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80088e0:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80088e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088e4:	2b00      	cmp	r3, #0
 80088e6:	f000 8130 	beq.w	8008b4a <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 80088ea:	697b      	ldr	r3, [r7, #20]
 80088ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80088ee:	4a94      	ldr	r2, [pc, #592]	; (8008b40 <UART_SetConfig+0x5c4>)
 80088f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80088f4:	461a      	mov	r2, r3
 80088f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088f8:	fbb3 f3f2 	udiv	r3, r3, r2
 80088fc:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80088fe:	697b      	ldr	r3, [r7, #20]
 8008900:	685a      	ldr	r2, [r3, #4]
 8008902:	4613      	mov	r3, r2
 8008904:	005b      	lsls	r3, r3, #1
 8008906:	4413      	add	r3, r2
 8008908:	69ba      	ldr	r2, [r7, #24]
 800890a:	429a      	cmp	r2, r3
 800890c:	d305      	bcc.n	800891a <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 800890e:	697b      	ldr	r3, [r7, #20]
 8008910:	685b      	ldr	r3, [r3, #4]
 8008912:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8008914:	69ba      	ldr	r2, [r7, #24]
 8008916:	429a      	cmp	r2, r3
 8008918:	d903      	bls.n	8008922 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800891a:	2301      	movs	r3, #1
 800891c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008920:	e113      	b.n	8008b4a <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008924:	2200      	movs	r2, #0
 8008926:	60bb      	str	r3, [r7, #8]
 8008928:	60fa      	str	r2, [r7, #12]
 800892a:	697b      	ldr	r3, [r7, #20]
 800892c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892e:	4a84      	ldr	r2, [pc, #528]	; (8008b40 <UART_SetConfig+0x5c4>)
 8008930:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008934:	b29b      	uxth	r3, r3
 8008936:	2200      	movs	r2, #0
 8008938:	603b      	str	r3, [r7, #0]
 800893a:	607a      	str	r2, [r7, #4]
 800893c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008940:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8008944:	f7f8 f9b8 	bl	8000cb8 <__aeabi_uldivmod>
 8008948:	4602      	mov	r2, r0
 800894a:	460b      	mov	r3, r1
 800894c:	4610      	mov	r0, r2
 800894e:	4619      	mov	r1, r3
 8008950:	f04f 0200 	mov.w	r2, #0
 8008954:	f04f 0300 	mov.w	r3, #0
 8008958:	020b      	lsls	r3, r1, #8
 800895a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800895e:	0202      	lsls	r2, r0, #8
 8008960:	6979      	ldr	r1, [r7, #20]
 8008962:	6849      	ldr	r1, [r1, #4]
 8008964:	0849      	lsrs	r1, r1, #1
 8008966:	2000      	movs	r0, #0
 8008968:	460c      	mov	r4, r1
 800896a:	4605      	mov	r5, r0
 800896c:	eb12 0804 	adds.w	r8, r2, r4
 8008970:	eb43 0905 	adc.w	r9, r3, r5
 8008974:	697b      	ldr	r3, [r7, #20]
 8008976:	685b      	ldr	r3, [r3, #4]
 8008978:	2200      	movs	r2, #0
 800897a:	469a      	mov	sl, r3
 800897c:	4693      	mov	fp, r2
 800897e:	4652      	mov	r2, sl
 8008980:	465b      	mov	r3, fp
 8008982:	4640      	mov	r0, r8
 8008984:	4649      	mov	r1, r9
 8008986:	f7f8 f997 	bl	8000cb8 <__aeabi_uldivmod>
 800898a:	4602      	mov	r2, r0
 800898c:	460b      	mov	r3, r1
 800898e:	4613      	mov	r3, r2
 8008990:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008992:	6a3b      	ldr	r3, [r7, #32]
 8008994:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008998:	d308      	bcc.n	80089ac <UART_SetConfig+0x430>
 800899a:	6a3b      	ldr	r3, [r7, #32]
 800899c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80089a0:	d204      	bcs.n	80089ac <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 80089a2:	697b      	ldr	r3, [r7, #20]
 80089a4:	681b      	ldr	r3, [r3, #0]
 80089a6:	6a3a      	ldr	r2, [r7, #32]
 80089a8:	60da      	str	r2, [r3, #12]
 80089aa:	e0ce      	b.n	8008b4a <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80089b2:	e0ca      	b.n	8008b4a <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80089b4:	697b      	ldr	r3, [r7, #20]
 80089b6:	69db      	ldr	r3, [r3, #28]
 80089b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80089bc:	d166      	bne.n	8008a8c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 80089be:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80089c2:	2b08      	cmp	r3, #8
 80089c4:	d827      	bhi.n	8008a16 <UART_SetConfig+0x49a>
 80089c6:	a201      	add	r2, pc, #4	; (adr r2, 80089cc <UART_SetConfig+0x450>)
 80089c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80089cc:	080089f1 	.word	0x080089f1
 80089d0:	080089f9 	.word	0x080089f9
 80089d4:	08008a01 	.word	0x08008a01
 80089d8:	08008a17 	.word	0x08008a17
 80089dc:	08008a07 	.word	0x08008a07
 80089e0:	08008a17 	.word	0x08008a17
 80089e4:	08008a17 	.word	0x08008a17
 80089e8:	08008a17 	.word	0x08008a17
 80089ec:	08008a0f 	.word	0x08008a0f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80089f0:	f7fc ff1a 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 80089f4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089f6:	e014      	b.n	8008a22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80089f8:	f7fc ff2c 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 80089fc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80089fe:	e010      	b.n	8008a22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008a00:	4b4e      	ldr	r3, [pc, #312]	; (8008b3c <UART_SetConfig+0x5c0>)
 8008a02:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a04:	e00d      	b.n	8008a22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008a06:	f7fc fea1 	bl	800574c <HAL_RCC_GetSysClockFreq>
 8008a0a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008a0c:	e009      	b.n	8008a22 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008a0e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008a12:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008a14:	e005      	b.n	8008a22 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 8008a16:	2300      	movs	r3, #0
 8008a18:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008a1a:	2301      	movs	r3, #1
 8008a1c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008a20:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8008a22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f000 8090 	beq.w	8008b4a <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008a2a:	697b      	ldr	r3, [r7, #20]
 8008a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008a2e:	4a44      	ldr	r2, [pc, #272]	; (8008b40 <UART_SetConfig+0x5c4>)
 8008a30:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008a34:	461a      	mov	r2, r3
 8008a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008a38:	fbb3 f3f2 	udiv	r3, r3, r2
 8008a3c:	005a      	lsls	r2, r3, #1
 8008a3e:	697b      	ldr	r3, [r7, #20]
 8008a40:	685b      	ldr	r3, [r3, #4]
 8008a42:	085b      	lsrs	r3, r3, #1
 8008a44:	441a      	add	r2, r3
 8008a46:	697b      	ldr	r3, [r7, #20]
 8008a48:	685b      	ldr	r3, [r3, #4]
 8008a4a:	fbb2 f3f3 	udiv	r3, r2, r3
 8008a4e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008a50:	6a3b      	ldr	r3, [r7, #32]
 8008a52:	2b0f      	cmp	r3, #15
 8008a54:	d916      	bls.n	8008a84 <UART_SetConfig+0x508>
 8008a56:	6a3b      	ldr	r3, [r7, #32]
 8008a58:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008a5c:	d212      	bcs.n	8008a84 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8008a5e:	6a3b      	ldr	r3, [r7, #32]
 8008a60:	b29b      	uxth	r3, r3
 8008a62:	f023 030f 	bic.w	r3, r3, #15
 8008a66:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008a68:	6a3b      	ldr	r3, [r7, #32]
 8008a6a:	085b      	lsrs	r3, r3, #1
 8008a6c:	b29b      	uxth	r3, r3
 8008a6e:	f003 0307 	and.w	r3, r3, #7
 8008a72:	b29a      	uxth	r2, r3
 8008a74:	8bfb      	ldrh	r3, [r7, #30]
 8008a76:	4313      	orrs	r3, r2
 8008a78:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 8008a7a:	697b      	ldr	r3, [r7, #20]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	8bfa      	ldrh	r2, [r7, #30]
 8008a80:	60da      	str	r2, [r3, #12]
 8008a82:	e062      	b.n	8008b4a <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008a84:	2301      	movs	r3, #1
 8008a86:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008a8a:	e05e      	b.n	8008b4a <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8008a8c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008a90:	2b08      	cmp	r3, #8
 8008a92:	d828      	bhi.n	8008ae6 <UART_SetConfig+0x56a>
 8008a94:	a201      	add	r2, pc, #4	; (adr r2, 8008a9c <UART_SetConfig+0x520>)
 8008a96:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a9a:	bf00      	nop
 8008a9c:	08008ac1 	.word	0x08008ac1
 8008aa0:	08008ac9 	.word	0x08008ac9
 8008aa4:	08008ad1 	.word	0x08008ad1
 8008aa8:	08008ae7 	.word	0x08008ae7
 8008aac:	08008ad7 	.word	0x08008ad7
 8008ab0:	08008ae7 	.word	0x08008ae7
 8008ab4:	08008ae7 	.word	0x08008ae7
 8008ab8:	08008ae7 	.word	0x08008ae7
 8008abc:	08008adf 	.word	0x08008adf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008ac0:	f7fc feb2 	bl	8005828 <HAL_RCC_GetPCLK1Freq>
 8008ac4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ac6:	e014      	b.n	8008af2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008ac8:	f7fc fec4 	bl	8005854 <HAL_RCC_GetPCLK2Freq>
 8008acc:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008ace:	e010      	b.n	8008af2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008ad0:	4b1a      	ldr	r3, [pc, #104]	; (8008b3c <UART_SetConfig+0x5c0>)
 8008ad2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ad4:	e00d      	b.n	8008af2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008ad6:	f7fc fe39 	bl	800574c <HAL_RCC_GetSysClockFreq>
 8008ada:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008adc:	e009      	b.n	8008af2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8008ade:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008ae2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008ae4:	e005      	b.n	8008af2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008ae6:	2300      	movs	r3, #0
 8008ae8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8008aea:	2301      	movs	r3, #1
 8008aec:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008af0:	bf00      	nop
    }

    if (pclk != 0U)
 8008af2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d028      	beq.n	8008b4a <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8008af8:	697b      	ldr	r3, [r7, #20]
 8008afa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008afc:	4a10      	ldr	r2, [pc, #64]	; (8008b40 <UART_SetConfig+0x5c4>)
 8008afe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8008b02:	461a      	mov	r2, r3
 8008b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b06:	fbb3 f2f2 	udiv	r2, r3, r2
 8008b0a:	697b      	ldr	r3, [r7, #20]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	085b      	lsrs	r3, r3, #1
 8008b10:	441a      	add	r2, r3
 8008b12:	697b      	ldr	r3, [r7, #20]
 8008b14:	685b      	ldr	r3, [r3, #4]
 8008b16:	fbb2 f3f3 	udiv	r3, r2, r3
 8008b1a:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008b1c:	6a3b      	ldr	r3, [r7, #32]
 8008b1e:	2b0f      	cmp	r3, #15
 8008b20:	d910      	bls.n	8008b44 <UART_SetConfig+0x5c8>
 8008b22:	6a3b      	ldr	r3, [r7, #32]
 8008b24:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008b28:	d20c      	bcs.n	8008b44 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8008b2a:	6a3b      	ldr	r3, [r7, #32]
 8008b2c:	b29a      	uxth	r2, r3
 8008b2e:	697b      	ldr	r3, [r7, #20]
 8008b30:	681b      	ldr	r3, [r3, #0]
 8008b32:	60da      	str	r2, [r3, #12]
 8008b34:	e009      	b.n	8008b4a <UART_SetConfig+0x5ce>
 8008b36:	bf00      	nop
 8008b38:	40008000 	.word	0x40008000
 8008b3c:	00f42400 	.word	0x00f42400
 8008b40:	0800cd1c 	.word	0x0800cd1c
      }
      else
      {
        ret = HAL_ERROR;
 8008b44:	2301      	movs	r3, #1
 8008b46:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8008b4a:	697b      	ldr	r3, [r7, #20]
 8008b4c:	2201      	movs	r2, #1
 8008b4e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008b52:	697b      	ldr	r3, [r7, #20]
 8008b54:	2201      	movs	r2, #1
 8008b56:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8008b5a:	697b      	ldr	r3, [r7, #20]
 8008b5c:	2200      	movs	r2, #0
 8008b5e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008b60:	697b      	ldr	r3, [r7, #20]
 8008b62:	2200      	movs	r2, #0
 8008b64:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008b66:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8008b6a:	4618      	mov	r0, r3
 8008b6c:	3730      	adds	r7, #48	; 0x30
 8008b6e:	46bd      	mov	sp, r7
 8008b70:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008b74 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008b80:	f003 0301 	and.w	r3, r3, #1
 8008b84:	2b00      	cmp	r3, #0
 8008b86:	d00a      	beq.n	8008b9e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008b88:	687b      	ldr	r3, [r7, #4]
 8008b8a:	681b      	ldr	r3, [r3, #0]
 8008b8c:	685b      	ldr	r3, [r3, #4]
 8008b8e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	430a      	orrs	r2, r1
 8008b9c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8008b9e:	687b      	ldr	r3, [r7, #4]
 8008ba0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008ba2:	f003 0302 	and.w	r3, r3, #2
 8008ba6:	2b00      	cmp	r3, #0
 8008ba8:	d00a      	beq.n	8008bc0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	685b      	ldr	r3, [r3, #4]
 8008bb0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008bb8:	687b      	ldr	r3, [r7, #4]
 8008bba:	681b      	ldr	r3, [r3, #0]
 8008bbc:	430a      	orrs	r2, r1
 8008bbe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008bc0:	687b      	ldr	r3, [r7, #4]
 8008bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008bc4:	f003 0304 	and.w	r3, r3, #4
 8008bc8:	2b00      	cmp	r3, #0
 8008bca:	d00a      	beq.n	8008be2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8008bcc:	687b      	ldr	r3, [r7, #4]
 8008bce:	681b      	ldr	r3, [r3, #0]
 8008bd0:	685b      	ldr	r3, [r3, #4]
 8008bd2:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	681b      	ldr	r3, [r3, #0]
 8008bde:	430a      	orrs	r2, r1
 8008be0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008be2:	687b      	ldr	r3, [r7, #4]
 8008be4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008be6:	f003 0308 	and.w	r3, r3, #8
 8008bea:	2b00      	cmp	r3, #0
 8008bec:	d00a      	beq.n	8008c04 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8008bee:	687b      	ldr	r3, [r7, #4]
 8008bf0:	681b      	ldr	r3, [r3, #0]
 8008bf2:	685b      	ldr	r3, [r3, #4]
 8008bf4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8008bf8:	687b      	ldr	r3, [r7, #4]
 8008bfa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8008bfc:	687b      	ldr	r3, [r7, #4]
 8008bfe:	681b      	ldr	r3, [r3, #0]
 8008c00:	430a      	orrs	r2, r1
 8008c02:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8008c04:	687b      	ldr	r3, [r7, #4]
 8008c06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c08:	f003 0310 	and.w	r3, r3, #16
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d00a      	beq.n	8008c26 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	681b      	ldr	r3, [r3, #0]
 8008c14:	689b      	ldr	r3, [r3, #8]
 8008c16:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	430a      	orrs	r2, r1
 8008c24:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c2a:	f003 0320 	and.w	r3, r3, #32
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d00a      	beq.n	8008c48 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	689b      	ldr	r3, [r3, #8]
 8008c38:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	430a      	orrs	r2, r1
 8008c46:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008c50:	2b00      	cmp	r3, #0
 8008c52:	d01a      	beq.n	8008c8a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008c54:	687b      	ldr	r3, [r7, #4]
 8008c56:	681b      	ldr	r3, [r3, #0]
 8008c58:	685b      	ldr	r3, [r3, #4]
 8008c5a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	681b      	ldr	r3, [r3, #0]
 8008c66:	430a      	orrs	r2, r1
 8008c68:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008c6e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008c72:	d10a      	bne.n	8008c8a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	681b      	ldr	r3, [r3, #0]
 8008c86:	430a      	orrs	r2, r1
 8008c88:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d00a      	beq.n	8008cac <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	685b      	ldr	r3, [r3, #4]
 8008c9c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	430a      	orrs	r2, r1
 8008caa:	605a      	str	r2, [r3, #4]
  }
}
 8008cac:	bf00      	nop
 8008cae:	370c      	adds	r7, #12
 8008cb0:	46bd      	mov	sp, r7
 8008cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cb6:	4770      	bx	lr

08008cb8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008cb8:	b580      	push	{r7, lr}
 8008cba:	b086      	sub	sp, #24
 8008cbc:	af02      	add	r7, sp, #8
 8008cbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	2200      	movs	r2, #0
 8008cc4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008cc8:	f7f9 fdf6 	bl	80028b8 <HAL_GetTick>
 8008ccc:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	681b      	ldr	r3, [r3, #0]
 8008cd4:	f003 0308 	and.w	r3, r3, #8
 8008cd8:	2b08      	cmp	r3, #8
 8008cda:	d10e      	bne.n	8008cfa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008cdc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008ce0:	9300      	str	r3, [sp, #0]
 8008ce2:	68fb      	ldr	r3, [r7, #12]
 8008ce4:	2200      	movs	r2, #0
 8008ce6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f82f 	bl	8008d4e <UART_WaitOnFlagUntilTimeout>
 8008cf0:	4603      	mov	r3, r0
 8008cf2:	2b00      	cmp	r3, #0
 8008cf4:	d001      	beq.n	8008cfa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008cf6:	2303      	movs	r3, #3
 8008cf8:	e025      	b.n	8008d46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	f003 0304 	and.w	r3, r3, #4
 8008d04:	2b04      	cmp	r3, #4
 8008d06:	d10e      	bne.n	8008d26 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8008d08:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008d0c:	9300      	str	r3, [sp, #0]
 8008d0e:	68fb      	ldr	r3, [r7, #12]
 8008d10:	2200      	movs	r2, #0
 8008d12:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8008d16:	6878      	ldr	r0, [r7, #4]
 8008d18:	f000 f819 	bl	8008d4e <UART_WaitOnFlagUntilTimeout>
 8008d1c:	4603      	mov	r3, r0
 8008d1e:	2b00      	cmp	r3, #0
 8008d20:	d001      	beq.n	8008d26 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8008d22:	2303      	movs	r3, #3
 8008d24:	e00f      	b.n	8008d46 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	2220      	movs	r2, #32
 8008d2a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	2220      	movs	r2, #32
 8008d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d36:	687b      	ldr	r3, [r7, #4]
 8008d38:	2200      	movs	r2, #0
 8008d3a:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3710      	adds	r7, #16
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	bd80      	pop	{r7, pc}

08008d4e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8008d4e:	b580      	push	{r7, lr}
 8008d50:	b09c      	sub	sp, #112	; 0x70
 8008d52:	af00      	add	r7, sp, #0
 8008d54:	60f8      	str	r0, [r7, #12]
 8008d56:	60b9      	str	r1, [r7, #8]
 8008d58:	603b      	str	r3, [r7, #0]
 8008d5a:	4613      	mov	r3, r2
 8008d5c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008d5e:	e0a9      	b.n	8008eb4 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008d60:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d62:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d66:	f000 80a5 	beq.w	8008eb4 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8008d6a:	f7f9 fda5 	bl	80028b8 <HAL_GetTick>
 8008d6e:	4602      	mov	r2, r0
 8008d70:	683b      	ldr	r3, [r7, #0]
 8008d72:	1ad3      	subs	r3, r2, r3
 8008d74:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008d76:	429a      	cmp	r2, r3
 8008d78:	d302      	bcc.n	8008d80 <UART_WaitOnFlagUntilTimeout+0x32>
 8008d7a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008d7c:	2b00      	cmp	r3, #0
 8008d7e:	d140      	bne.n	8008e02 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008d80:	68fb      	ldr	r3, [r7, #12]
 8008d82:	681b      	ldr	r3, [r3, #0]
 8008d84:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008d88:	e853 3f00 	ldrex	r3, [r3]
 8008d8c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008d8e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008d90:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008d94:	667b      	str	r3, [r7, #100]	; 0x64
 8008d96:	68fb      	ldr	r3, [r7, #12]
 8008d98:	681b      	ldr	r3, [r3, #0]
 8008d9a:	461a      	mov	r2, r3
 8008d9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008da0:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008da2:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008da4:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008da6:	e841 2300 	strex	r3, r2, [r1]
 8008daa:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008dac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008dae:	2b00      	cmp	r3, #0
 8008db0:	d1e6      	bne.n	8008d80 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	681b      	ldr	r3, [r3, #0]
 8008db6:	3308      	adds	r3, #8
 8008db8:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dba:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dbc:	e853 3f00 	ldrex	r3, [r3]
 8008dc0:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008dc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008dc4:	f023 0301 	bic.w	r3, r3, #1
 8008dc8:	663b      	str	r3, [r7, #96]	; 0x60
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3308      	adds	r3, #8
 8008dd0:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008dd2:	64ba      	str	r2, [r7, #72]	; 0x48
 8008dd4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dd6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008dd8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008dda:	e841 2300 	strex	r3, r2, [r1]
 8008dde:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008de0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d1e5      	bne.n	8008db2 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2220      	movs	r2, #32
 8008dea:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8008dee:	68fb      	ldr	r3, [r7, #12]
 8008df0:	2220      	movs	r2, #32
 8008df2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8008df6:	68fb      	ldr	r3, [r7, #12]
 8008df8:	2200      	movs	r2, #0
 8008dfa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8008dfe:	2303      	movs	r3, #3
 8008e00:	e069      	b.n	8008ed6 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	681b      	ldr	r3, [r3, #0]
 8008e08:	f003 0304 	and.w	r3, r3, #4
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d051      	beq.n	8008eb4 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8008e10:	68fb      	ldr	r3, [r7, #12]
 8008e12:	681b      	ldr	r3, [r3, #0]
 8008e14:	69db      	ldr	r3, [r3, #28]
 8008e16:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8008e1a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8008e1e:	d149      	bne.n	8008eb4 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8008e20:	68fb      	ldr	r3, [r7, #12]
 8008e22:	681b      	ldr	r3, [r3, #0]
 8008e24:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008e28:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008e32:	e853 3f00 	ldrex	r3, [r3]
 8008e36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008e38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008e3a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008e3e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008e40:	68fb      	ldr	r3, [r7, #12]
 8008e42:	681b      	ldr	r3, [r3, #0]
 8008e44:	461a      	mov	r2, r3
 8008e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e48:	637b      	str	r3, [r7, #52]	; 0x34
 8008e4a:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e4c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e4e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e50:	e841 2300 	strex	r3, r2, [r1]
 8008e54:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e56:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d1e6      	bne.n	8008e2a <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	681b      	ldr	r3, [r3, #0]
 8008e60:	3308      	adds	r3, #8
 8008e62:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e64:	697b      	ldr	r3, [r7, #20]
 8008e66:	e853 3f00 	ldrex	r3, [r3]
 8008e6a:	613b      	str	r3, [r7, #16]
   return(result);
 8008e6c:	693b      	ldr	r3, [r7, #16]
 8008e6e:	f023 0301 	bic.w	r3, r3, #1
 8008e72:	66bb      	str	r3, [r7, #104]	; 0x68
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	3308      	adds	r3, #8
 8008e7a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8008e7c:	623a      	str	r2, [r7, #32]
 8008e7e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e80:	69f9      	ldr	r1, [r7, #28]
 8008e82:	6a3a      	ldr	r2, [r7, #32]
 8008e84:	e841 2300 	strex	r3, r2, [r1]
 8008e88:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e8a:	69bb      	ldr	r3, [r7, #24]
 8008e8c:	2b00      	cmp	r3, #0
 8008e8e:	d1e5      	bne.n	8008e5c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008e90:	68fb      	ldr	r3, [r7, #12]
 8008e92:	2220      	movs	r2, #32
 8008e94:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	2220      	movs	r2, #32
 8008e9c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008ea0:	68fb      	ldr	r3, [r7, #12]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008ea8:	68fb      	ldr	r3, [r7, #12]
 8008eaa:	2200      	movs	r2, #0
 8008eac:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008eb0:	2303      	movs	r3, #3
 8008eb2:	e010      	b.n	8008ed6 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008eb4:	68fb      	ldr	r3, [r7, #12]
 8008eb6:	681b      	ldr	r3, [r3, #0]
 8008eb8:	69da      	ldr	r2, [r3, #28]
 8008eba:	68bb      	ldr	r3, [r7, #8]
 8008ebc:	4013      	ands	r3, r2
 8008ebe:	68ba      	ldr	r2, [r7, #8]
 8008ec0:	429a      	cmp	r2, r3
 8008ec2:	bf0c      	ite	eq
 8008ec4:	2301      	moveq	r3, #1
 8008ec6:	2300      	movne	r3, #0
 8008ec8:	b2db      	uxtb	r3, r3
 8008eca:	461a      	mov	r2, r3
 8008ecc:	79fb      	ldrb	r3, [r7, #7]
 8008ece:	429a      	cmp	r2, r3
 8008ed0:	f43f af46 	beq.w	8008d60 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008ed4:	2300      	movs	r3, #0
}
 8008ed6:	4618      	mov	r0, r3
 8008ed8:	3770      	adds	r7, #112	; 0x70
 8008eda:	46bd      	mov	sp, r7
 8008edc:	bd80      	pop	{r7, pc}
	...

08008ee0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008ee0:	b480      	push	{r7}
 8008ee2:	b0a3      	sub	sp, #140	; 0x8c
 8008ee4:	af00      	add	r7, sp, #0
 8008ee6:	60f8      	str	r0, [r7, #12]
 8008ee8:	60b9      	str	r1, [r7, #8]
 8008eea:	4613      	mov	r3, r2
 8008eec:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8008eee:	68fb      	ldr	r3, [r7, #12]
 8008ef0:	68ba      	ldr	r2, [r7, #8]
 8008ef2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	88fa      	ldrh	r2, [r7, #6]
 8008ef8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8008efc:	68fb      	ldr	r3, [r7, #12]
 8008efe:	88fa      	ldrh	r2, [r7, #6]
 8008f00:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8008f04:	68fb      	ldr	r3, [r7, #12]
 8008f06:	2200      	movs	r2, #0
 8008f08:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8008f0a:	68fb      	ldr	r3, [r7, #12]
 8008f0c:	689b      	ldr	r3, [r3, #8]
 8008f0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f12:	d10e      	bne.n	8008f32 <UART_Start_Receive_IT+0x52>
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	691b      	ldr	r3, [r3, #16]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d105      	bne.n	8008f28 <UART_Start_Receive_IT+0x48>
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8008f22:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f26:	e02d      	b.n	8008f84 <UART_Start_Receive_IT+0xa4>
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	22ff      	movs	r2, #255	; 0xff
 8008f2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f30:	e028      	b.n	8008f84 <UART_Start_Receive_IT+0xa4>
 8008f32:	68fb      	ldr	r3, [r7, #12]
 8008f34:	689b      	ldr	r3, [r3, #8]
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d10d      	bne.n	8008f56 <UART_Start_Receive_IT+0x76>
 8008f3a:	68fb      	ldr	r3, [r7, #12]
 8008f3c:	691b      	ldr	r3, [r3, #16]
 8008f3e:	2b00      	cmp	r3, #0
 8008f40:	d104      	bne.n	8008f4c <UART_Start_Receive_IT+0x6c>
 8008f42:	68fb      	ldr	r3, [r7, #12]
 8008f44:	22ff      	movs	r2, #255	; 0xff
 8008f46:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f4a:	e01b      	b.n	8008f84 <UART_Start_Receive_IT+0xa4>
 8008f4c:	68fb      	ldr	r3, [r7, #12]
 8008f4e:	227f      	movs	r2, #127	; 0x7f
 8008f50:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f54:	e016      	b.n	8008f84 <UART_Start_Receive_IT+0xa4>
 8008f56:	68fb      	ldr	r3, [r7, #12]
 8008f58:	689b      	ldr	r3, [r3, #8]
 8008f5a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008f5e:	d10d      	bne.n	8008f7c <UART_Start_Receive_IT+0x9c>
 8008f60:	68fb      	ldr	r3, [r7, #12]
 8008f62:	691b      	ldr	r3, [r3, #16]
 8008f64:	2b00      	cmp	r3, #0
 8008f66:	d104      	bne.n	8008f72 <UART_Start_Receive_IT+0x92>
 8008f68:	68fb      	ldr	r3, [r7, #12]
 8008f6a:	227f      	movs	r2, #127	; 0x7f
 8008f6c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f70:	e008      	b.n	8008f84 <UART_Start_Receive_IT+0xa4>
 8008f72:	68fb      	ldr	r3, [r7, #12]
 8008f74:	223f      	movs	r2, #63	; 0x3f
 8008f76:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008f7a:	e003      	b.n	8008f84 <UART_Start_Receive_IT+0xa4>
 8008f7c:	68fb      	ldr	r3, [r7, #12]
 8008f7e:	2200      	movs	r2, #0
 8008f80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	2200      	movs	r2, #0
 8008f88:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	2222      	movs	r2, #34	; 0x22
 8008f90:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f94:	68fb      	ldr	r3, [r7, #12]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	3308      	adds	r3, #8
 8008f9a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f9c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008f9e:	e853 3f00 	ldrex	r3, [r3]
 8008fa2:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008fa4:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008fa6:	f043 0301 	orr.w	r3, r3, #1
 8008faa:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008fae:	68fb      	ldr	r3, [r7, #12]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	3308      	adds	r3, #8
 8008fb4:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008fb8:	673a      	str	r2, [r7, #112]	; 0x70
 8008fba:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fbc:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008fbe:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008fc0:	e841 2300 	strex	r3, r2, [r1]
 8008fc4:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008fc6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008fc8:	2b00      	cmp	r3, #0
 8008fca:	d1e3      	bne.n	8008f94 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008fcc:	68fb      	ldr	r3, [r7, #12]
 8008fce:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008fd0:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008fd4:	d153      	bne.n	800907e <UART_Start_Receive_IT+0x19e>
 8008fd6:	68fb      	ldr	r3, [r7, #12]
 8008fd8:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008fdc:	88fa      	ldrh	r2, [r7, #6]
 8008fde:	429a      	cmp	r2, r3
 8008fe0:	d34d      	bcc.n	800907e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008fe2:	68fb      	ldr	r3, [r7, #12]
 8008fe4:	689b      	ldr	r3, [r3, #8]
 8008fe6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008fea:	d107      	bne.n	8008ffc <UART_Start_Receive_IT+0x11c>
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	691b      	ldr	r3, [r3, #16]
 8008ff0:	2b00      	cmp	r3, #0
 8008ff2:	d103      	bne.n	8008ffc <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008ff4:	68fb      	ldr	r3, [r7, #12]
 8008ff6:	4a4b      	ldr	r2, [pc, #300]	; (8009124 <UART_Start_Receive_IT+0x244>)
 8008ff8:	671a      	str	r2, [r3, #112]	; 0x70
 8008ffa:	e002      	b.n	8009002 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008ffc:	68fb      	ldr	r3, [r7, #12]
 8008ffe:	4a4a      	ldr	r2, [pc, #296]	; (8009128 <UART_Start_Receive_IT+0x248>)
 8009000:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8009002:	68fb      	ldr	r3, [r7, #12]
 8009004:	2200      	movs	r2, #0
 8009006:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800900a:	68fb      	ldr	r3, [r7, #12]
 800900c:	691b      	ldr	r3, [r3, #16]
 800900e:	2b00      	cmp	r3, #0
 8009010:	d01a      	beq.n	8009048 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009012:	68fb      	ldr	r3, [r7, #12]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009018:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800901a:	e853 3f00 	ldrex	r3, [r3]
 800901e:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8009020:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009022:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009026:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800902a:	68fb      	ldr	r3, [r7, #12]
 800902c:	681b      	ldr	r3, [r3, #0]
 800902e:	461a      	mov	r2, r3
 8009030:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009034:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009036:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009038:	6db9      	ldr	r1, [r7, #88]	; 0x58
 800903a:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 800903c:	e841 2300 	strex	r3, r2, [r1]
 8009040:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8009042:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8009044:	2b00      	cmp	r3, #0
 8009046:	d1e4      	bne.n	8009012 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009048:	68fb      	ldr	r3, [r7, #12]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	3308      	adds	r3, #8
 800904e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009050:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009052:	e853 3f00 	ldrex	r3, [r3]
 8009056:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009058:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800905a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800905e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009060:	68fb      	ldr	r3, [r7, #12]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	3308      	adds	r3, #8
 8009066:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8009068:	64ba      	str	r2, [r7, #72]	; 0x48
 800906a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800906c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800906e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009070:	e841 2300 	strex	r3, r2, [r1]
 8009074:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8009076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009078:	2b00      	cmp	r3, #0
 800907a:	d1e5      	bne.n	8009048 <UART_Start_Receive_IT+0x168>
 800907c:	e04a      	b.n	8009114 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800907e:	68fb      	ldr	r3, [r7, #12]
 8009080:	689b      	ldr	r3, [r3, #8]
 8009082:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009086:	d107      	bne.n	8009098 <UART_Start_Receive_IT+0x1b8>
 8009088:	68fb      	ldr	r3, [r7, #12]
 800908a:	691b      	ldr	r3, [r3, #16]
 800908c:	2b00      	cmp	r3, #0
 800908e:	d103      	bne.n	8009098 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8009090:	68fb      	ldr	r3, [r7, #12]
 8009092:	4a26      	ldr	r2, [pc, #152]	; (800912c <UART_Start_Receive_IT+0x24c>)
 8009094:	671a      	str	r2, [r3, #112]	; 0x70
 8009096:	e002      	b.n	800909e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	4a25      	ldr	r2, [pc, #148]	; (8009130 <UART_Start_Receive_IT+0x250>)
 800909c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 80090a6:	68fb      	ldr	r3, [r7, #12]
 80090a8:	691b      	ldr	r3, [r3, #16]
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d019      	beq.n	80090e2 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 80090ae:	68fb      	ldr	r3, [r7, #12]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090b4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80090b6:	e853 3f00 	ldrex	r3, [r3]
 80090ba:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80090bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80090be:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 80090c2:	677b      	str	r3, [r7, #116]	; 0x74
 80090c4:	68fb      	ldr	r3, [r7, #12]
 80090c6:	681b      	ldr	r3, [r3, #0]
 80090c8:	461a      	mov	r2, r3
 80090ca:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090cc:	637b      	str	r3, [r7, #52]	; 0x34
 80090ce:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80090d0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80090d2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80090d4:	e841 2300 	strex	r3, r2, [r1]
 80090d8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80090da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090dc:	2b00      	cmp	r3, #0
 80090de:	d1e6      	bne.n	80090ae <UART_Start_Receive_IT+0x1ce>
 80090e0:	e018      	b.n	8009114 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80090e2:	68fb      	ldr	r3, [r7, #12]
 80090e4:	681b      	ldr	r3, [r3, #0]
 80090e6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80090e8:	697b      	ldr	r3, [r7, #20]
 80090ea:	e853 3f00 	ldrex	r3, [r3]
 80090ee:	613b      	str	r3, [r7, #16]
   return(result);
 80090f0:	693b      	ldr	r3, [r7, #16]
 80090f2:	f043 0320 	orr.w	r3, r3, #32
 80090f6:	67bb      	str	r3, [r7, #120]	; 0x78
 80090f8:	68fb      	ldr	r3, [r7, #12]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	461a      	mov	r2, r3
 80090fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009100:	623b      	str	r3, [r7, #32]
 8009102:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009104:	69f9      	ldr	r1, [r7, #28]
 8009106:	6a3a      	ldr	r2, [r7, #32]
 8009108:	e841 2300 	strex	r3, r2, [r1]
 800910c:	61bb      	str	r3, [r7, #24]
   return(result);
 800910e:	69bb      	ldr	r3, [r7, #24]
 8009110:	2b00      	cmp	r3, #0
 8009112:	d1e6      	bne.n	80090e2 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8009114:	2300      	movs	r3, #0
}
 8009116:	4618      	mov	r0, r3
 8009118:	378c      	adds	r7, #140	; 0x8c
 800911a:	46bd      	mov	sp, r7
 800911c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009120:	4770      	bx	lr
 8009122:	bf00      	nop
 8009124:	0800983d 	.word	0x0800983d
 8009128:	08009545 	.word	0x08009545
 800912c:	080093e3 	.word	0x080093e3
 8009130:	08009283 	.word	0x08009283

08009134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009134:	b480      	push	{r7}
 8009136:	b095      	sub	sp, #84	; 0x54
 8009138:	af00      	add	r7, sp, #0
 800913a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800913c:	687b      	ldr	r3, [r7, #4]
 800913e:	681b      	ldr	r3, [r3, #0]
 8009140:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009142:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009144:	e853 3f00 	ldrex	r3, [r3]
 8009148:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800914a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009150:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009152:	687b      	ldr	r3, [r7, #4]
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	461a      	mov	r2, r3
 8009158:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800915a:	643b      	str	r3, [r7, #64]	; 0x40
 800915c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800915e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009160:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009162:	e841 2300 	strex	r3, r2, [r1]
 8009166:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009168:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800916a:	2b00      	cmp	r3, #0
 800916c:	d1e6      	bne.n	800913c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800916e:	687b      	ldr	r3, [r7, #4]
 8009170:	681b      	ldr	r3, [r3, #0]
 8009172:	3308      	adds	r3, #8
 8009174:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009176:	6a3b      	ldr	r3, [r7, #32]
 8009178:	e853 3f00 	ldrex	r3, [r3]
 800917c:	61fb      	str	r3, [r7, #28]
   return(result);
 800917e:	69fb      	ldr	r3, [r7, #28]
 8009180:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009184:	f023 0301 	bic.w	r3, r3, #1
 8009188:	64bb      	str	r3, [r7, #72]	; 0x48
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	3308      	adds	r3, #8
 8009190:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009192:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009194:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009196:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009198:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800919a:	e841 2300 	strex	r3, r2, [r1]
 800919e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80091a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80091a2:	2b00      	cmp	r3, #0
 80091a4:	d1e3      	bne.n	800916e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091aa:	2b01      	cmp	r3, #1
 80091ac:	d118      	bne.n	80091e0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	681b      	ldr	r3, [r3, #0]
 80091b2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091b4:	68fb      	ldr	r3, [r7, #12]
 80091b6:	e853 3f00 	ldrex	r3, [r3]
 80091ba:	60bb      	str	r3, [r7, #8]
   return(result);
 80091bc:	68bb      	ldr	r3, [r7, #8]
 80091be:	f023 0310 	bic.w	r3, r3, #16
 80091c2:	647b      	str	r3, [r7, #68]	; 0x44
 80091c4:	687b      	ldr	r3, [r7, #4]
 80091c6:	681b      	ldr	r3, [r3, #0]
 80091c8:	461a      	mov	r2, r3
 80091ca:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80091cc:	61bb      	str	r3, [r7, #24]
 80091ce:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091d0:	6979      	ldr	r1, [r7, #20]
 80091d2:	69ba      	ldr	r2, [r7, #24]
 80091d4:	e841 2300 	strex	r3, r2, [r1]
 80091d8:	613b      	str	r3, [r7, #16]
   return(result);
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	2b00      	cmp	r3, #0
 80091de:	d1e6      	bne.n	80091ae <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80091e0:	687b      	ldr	r3, [r7, #4]
 80091e2:	2220      	movs	r2, #32
 80091e4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091e8:	687b      	ldr	r3, [r7, #4]
 80091ea:	2200      	movs	r2, #0
 80091ec:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	2200      	movs	r2, #0
 80091f2:	671a      	str	r2, [r3, #112]	; 0x70
}
 80091f4:	bf00      	nop
 80091f6:	3754      	adds	r7, #84	; 0x54
 80091f8:	46bd      	mov	sp, r7
 80091fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80091fe:	4770      	bx	lr

08009200 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8009200:	b580      	push	{r7, lr}
 8009202:	b084      	sub	sp, #16
 8009204:	af00      	add	r7, sp, #0
 8009206:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800920c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800920e:	68fb      	ldr	r3, [r7, #12]
 8009210:	2200      	movs	r2, #0
 8009212:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8009216:	68fb      	ldr	r3, [r7, #12]
 8009218:	2200      	movs	r2, #0
 800921a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800921e:	68f8      	ldr	r0, [r7, #12]
 8009220:	f7ff f996 	bl	8008550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8009224:	bf00      	nop
 8009226:	3710      	adds	r7, #16
 8009228:	46bd      	mov	sp, r7
 800922a:	bd80      	pop	{r7, pc}

0800922c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800922c:	b580      	push	{r7, lr}
 800922e:	b088      	sub	sp, #32
 8009230:	af00      	add	r7, sp, #0
 8009232:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800923a:	68fb      	ldr	r3, [r7, #12]
 800923c:	e853 3f00 	ldrex	r3, [r3]
 8009240:	60bb      	str	r3, [r7, #8]
   return(result);
 8009242:	68bb      	ldr	r3, [r7, #8]
 8009244:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009248:	61fb      	str	r3, [r7, #28]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	461a      	mov	r2, r3
 8009250:	69fb      	ldr	r3, [r7, #28]
 8009252:	61bb      	str	r3, [r7, #24]
 8009254:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009256:	6979      	ldr	r1, [r7, #20]
 8009258:	69ba      	ldr	r2, [r7, #24]
 800925a:	e841 2300 	strex	r3, r2, [r1]
 800925e:	613b      	str	r3, [r7, #16]
   return(result);
 8009260:	693b      	ldr	r3, [r7, #16]
 8009262:	2b00      	cmp	r3, #0
 8009264:	d1e6      	bne.n	8009234 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	2220      	movs	r2, #32
 800926a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800926e:	687b      	ldr	r3, [r7, #4]
 8009270:	2200      	movs	r2, #0
 8009272:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009274:	6878      	ldr	r0, [r7, #4]
 8009276:	f7ff f961 	bl	800853c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800927a:	bf00      	nop
 800927c:	3720      	adds	r7, #32
 800927e:	46bd      	mov	sp, r7
 8009280:	bd80      	pop	{r7, pc}

08009282 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8009282:	b580      	push	{r7, lr}
 8009284:	b096      	sub	sp, #88	; 0x58
 8009286:	af00      	add	r7, sp, #0
 8009288:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800928a:	687b      	ldr	r3, [r7, #4]
 800928c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009290:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800929a:	2b22      	cmp	r3, #34	; 0x22
 800929c:	f040 8095 	bne.w	80093ca <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80092a0:	687b      	ldr	r3, [r7, #4]
 80092a2:	681b      	ldr	r3, [r3, #0]
 80092a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092a6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 80092aa:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 80092ae:	b2d9      	uxtb	r1, r3
 80092b0:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 80092b4:	b2da      	uxtb	r2, r3
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092ba:	400a      	ands	r2, r1
 80092bc:	b2d2      	uxtb	r2, r2
 80092be:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80092c4:	1c5a      	adds	r2, r3, #1
 80092c6:	687b      	ldr	r3, [r7, #4]
 80092c8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 80092ca:	687b      	ldr	r3, [r7, #4]
 80092cc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092d0:	b29b      	uxth	r3, r3
 80092d2:	3b01      	subs	r3, #1
 80092d4:	b29a      	uxth	r2, r3
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80092e2:	b29b      	uxth	r3, r3
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d178      	bne.n	80093da <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80092e8:	687b      	ldr	r3, [r7, #4]
 80092ea:	681b      	ldr	r3, [r3, #0]
 80092ec:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092f0:	e853 3f00 	ldrex	r3, [r3]
 80092f4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80092f6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092f8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80092fc:	653b      	str	r3, [r7, #80]	; 0x50
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	461a      	mov	r2, r3
 8009304:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009306:	647b      	str	r3, [r7, #68]	; 0x44
 8009308:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800930a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800930c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800930e:	e841 2300 	strex	r3, r2, [r1]
 8009312:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009314:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009316:	2b00      	cmp	r3, #0
 8009318:	d1e6      	bne.n	80092e8 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	3308      	adds	r3, #8
 8009320:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009322:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009324:	e853 3f00 	ldrex	r3, [r3]
 8009328:	623b      	str	r3, [r7, #32]
   return(result);
 800932a:	6a3b      	ldr	r3, [r7, #32]
 800932c:	f023 0301 	bic.w	r3, r3, #1
 8009330:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	3308      	adds	r3, #8
 8009338:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800933a:	633a      	str	r2, [r7, #48]	; 0x30
 800933c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800933e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009340:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009342:	e841 2300 	strex	r3, r2, [r1]
 8009346:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009348:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800934a:	2b00      	cmp	r3, #0
 800934c:	d1e5      	bne.n	800931a <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800934e:	687b      	ldr	r3, [r7, #4]
 8009350:	2220      	movs	r2, #32
 8009352:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8009356:	687b      	ldr	r3, [r7, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800935c:	687b      	ldr	r3, [r7, #4]
 800935e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009360:	2b01      	cmp	r3, #1
 8009362:	d12e      	bne.n	80093c2 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009364:	687b      	ldr	r3, [r7, #4]
 8009366:	2200      	movs	r2, #0
 8009368:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800936a:	687b      	ldr	r3, [r7, #4]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009370:	693b      	ldr	r3, [r7, #16]
 8009372:	e853 3f00 	ldrex	r3, [r3]
 8009376:	60fb      	str	r3, [r7, #12]
   return(result);
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	f023 0310 	bic.w	r3, r3, #16
 800937e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009380:	687b      	ldr	r3, [r7, #4]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	461a      	mov	r2, r3
 8009386:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009388:	61fb      	str	r3, [r7, #28]
 800938a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800938c:	69b9      	ldr	r1, [r7, #24]
 800938e:	69fa      	ldr	r2, [r7, #28]
 8009390:	e841 2300 	strex	r3, r2, [r1]
 8009394:	617b      	str	r3, [r7, #20]
   return(result);
 8009396:	697b      	ldr	r3, [r7, #20]
 8009398:	2b00      	cmp	r3, #0
 800939a:	d1e6      	bne.n	800936a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	69db      	ldr	r3, [r3, #28]
 80093a2:	f003 0310 	and.w	r3, r3, #16
 80093a6:	2b10      	cmp	r3, #16
 80093a8:	d103      	bne.n	80093b2 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	681b      	ldr	r3, [r3, #0]
 80093ae:	2210      	movs	r2, #16
 80093b0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80093b8:	4619      	mov	r1, r3
 80093ba:	6878      	ldr	r0, [r7, #4]
 80093bc:	f7ff f8d2 	bl	8008564 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80093c0:	e00b      	b.n	80093da <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 80093c2:	6878      	ldr	r0, [r7, #4]
 80093c4:	f7f9 fa0e 	bl	80027e4 <HAL_UART_RxCpltCallback>
}
 80093c8:	e007      	b.n	80093da <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80093ca:	687b      	ldr	r3, [r7, #4]
 80093cc:	681b      	ldr	r3, [r3, #0]
 80093ce:	699a      	ldr	r2, [r3, #24]
 80093d0:	687b      	ldr	r3, [r7, #4]
 80093d2:	681b      	ldr	r3, [r3, #0]
 80093d4:	f042 0208 	orr.w	r2, r2, #8
 80093d8:	619a      	str	r2, [r3, #24]
}
 80093da:	bf00      	nop
 80093dc:	3758      	adds	r7, #88	; 0x58
 80093de:	46bd      	mov	sp, r7
 80093e0:	bd80      	pop	{r7, pc}

080093e2 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80093e2:	b580      	push	{r7, lr}
 80093e4:	b096      	sub	sp, #88	; 0x58
 80093e6:	af00      	add	r7, sp, #0
 80093e8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80093f0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80093fa:	2b22      	cmp	r3, #34	; 0x22
 80093fc:	f040 8095 	bne.w	800952a <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	681b      	ldr	r3, [r3, #0]
 8009404:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009406:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800940e:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8009410:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8009414:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8009418:	4013      	ands	r3, r2
 800941a:	b29a      	uxth	r2, r3
 800941c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800941e:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009424:	1c9a      	adds	r2, r3, #2
 8009426:	687b      	ldr	r3, [r7, #4]
 8009428:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009430:	b29b      	uxth	r3, r3
 8009432:	3b01      	subs	r3, #1
 8009434:	b29a      	uxth	r2, r3
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009442:	b29b      	uxth	r3, r3
 8009444:	2b00      	cmp	r3, #0
 8009446:	d178      	bne.n	800953a <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	681b      	ldr	r3, [r3, #0]
 800944c:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009456:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800945c:	64fb      	str	r3, [r7, #76]	; 0x4c
 800945e:	687b      	ldr	r3, [r7, #4]
 8009460:	681b      	ldr	r3, [r3, #0]
 8009462:	461a      	mov	r2, r3
 8009464:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009466:	643b      	str	r3, [r7, #64]	; 0x40
 8009468:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800946c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800946e:	e841 2300 	strex	r3, r2, [r1]
 8009472:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009476:	2b00      	cmp	r3, #0
 8009478:	d1e6      	bne.n	8009448 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	681b      	ldr	r3, [r3, #0]
 800947e:	3308      	adds	r3, #8
 8009480:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009482:	6a3b      	ldr	r3, [r7, #32]
 8009484:	e853 3f00 	ldrex	r3, [r3]
 8009488:	61fb      	str	r3, [r7, #28]
   return(result);
 800948a:	69fb      	ldr	r3, [r7, #28]
 800948c:	f023 0301 	bic.w	r3, r3, #1
 8009490:	64bb      	str	r3, [r7, #72]	; 0x48
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3308      	adds	r3, #8
 8009498:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800949a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800949c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800949e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80094a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80094a2:	e841 2300 	strex	r3, r2, [r1]
 80094a6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80094a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d1e5      	bne.n	800947a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80094ae:	687b      	ldr	r3, [r7, #4]
 80094b0:	2220      	movs	r2, #32
 80094b2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2200      	movs	r2, #0
 80094ba:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094bc:	687b      	ldr	r3, [r7, #4]
 80094be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c0:	2b01      	cmp	r3, #1
 80094c2:	d12e      	bne.n	8009522 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	2200      	movs	r2, #0
 80094c8:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094ca:	687b      	ldr	r3, [r7, #4]
 80094cc:	681b      	ldr	r3, [r3, #0]
 80094ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d0:	68fb      	ldr	r3, [r7, #12]
 80094d2:	e853 3f00 	ldrex	r3, [r3]
 80094d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80094d8:	68bb      	ldr	r3, [r7, #8]
 80094da:	f023 0310 	bic.w	r3, r3, #16
 80094de:	647b      	str	r3, [r7, #68]	; 0x44
 80094e0:	687b      	ldr	r3, [r7, #4]
 80094e2:	681b      	ldr	r3, [r3, #0]
 80094e4:	461a      	mov	r2, r3
 80094e6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80094e8:	61bb      	str	r3, [r7, #24]
 80094ea:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	6979      	ldr	r1, [r7, #20]
 80094ee:	69ba      	ldr	r2, [r7, #24]
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	613b      	str	r3, [r7, #16]
   return(result);
 80094f6:	693b      	ldr	r3, [r7, #16]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e6      	bne.n	80094ca <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094fc:	687b      	ldr	r3, [r7, #4]
 80094fe:	681b      	ldr	r3, [r3, #0]
 8009500:	69db      	ldr	r3, [r3, #28]
 8009502:	f003 0310 	and.w	r3, r3, #16
 8009506:	2b10      	cmp	r3, #16
 8009508:	d103      	bne.n	8009512 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	681b      	ldr	r3, [r3, #0]
 800950e:	2210      	movs	r2, #16
 8009510:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009512:	687b      	ldr	r3, [r7, #4]
 8009514:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009518:	4619      	mov	r1, r3
 800951a:	6878      	ldr	r0, [r7, #4]
 800951c:	f7ff f822 	bl	8008564 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009520:	e00b      	b.n	800953a <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f7f9 f95e 	bl	80027e4 <HAL_UART_RxCpltCallback>
}
 8009528:	e007      	b.n	800953a <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800952a:	687b      	ldr	r3, [r7, #4]
 800952c:	681b      	ldr	r3, [r3, #0]
 800952e:	699a      	ldr	r2, [r3, #24]
 8009530:	687b      	ldr	r3, [r7, #4]
 8009532:	681b      	ldr	r3, [r3, #0]
 8009534:	f042 0208 	orr.w	r2, r2, #8
 8009538:	619a      	str	r2, [r3, #24]
}
 800953a:	bf00      	nop
 800953c:	3758      	adds	r7, #88	; 0x58
 800953e:	46bd      	mov	sp, r7
 8009540:	bd80      	pop	{r7, pc}
	...

08009544 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8009544:	b580      	push	{r7, lr}
 8009546:	b0a6      	sub	sp, #152	; 0x98
 8009548:	af00      	add	r7, sp, #0
 800954a:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 800954c:	687b      	ldr	r3, [r7, #4]
 800954e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009552:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009556:	687b      	ldr	r3, [r7, #4]
 8009558:	681b      	ldr	r3, [r3, #0]
 800955a:	69db      	ldr	r3, [r3, #28]
 800955c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	681b      	ldr	r3, [r3, #0]
 8009566:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800956a:	687b      	ldr	r3, [r7, #4]
 800956c:	681b      	ldr	r3, [r3, #0]
 800956e:	689b      	ldr	r3, [r3, #8]
 8009570:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009574:	687b      	ldr	r3, [r7, #4]
 8009576:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800957a:	2b22      	cmp	r3, #34	; 0x22
 800957c:	f040 814f 	bne.w	800981e <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009586:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800958a:	e0f6      	b.n	800977a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	681b      	ldr	r3, [r3, #0]
 8009590:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009592:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009596:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800959a:	b2d9      	uxtb	r1, r3
 800959c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 80095a0:	b2da      	uxtb	r2, r3
 80095a2:	687b      	ldr	r3, [r7, #4]
 80095a4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095a6:	400a      	ands	r2, r1
 80095a8:	b2d2      	uxtb	r2, r2
 80095aa:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 80095ac:	687b      	ldr	r3, [r7, #4]
 80095ae:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80095b0:	1c5a      	adds	r2, r3, #1
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80095bc:	b29b      	uxth	r3, r3
 80095be:	3b01      	subs	r3, #1
 80095c0:	b29a      	uxth	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	69db      	ldr	r3, [r3, #28]
 80095ce:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80095d2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095d6:	f003 0307 	and.w	r3, r3, #7
 80095da:	2b00      	cmp	r3, #0
 80095dc:	d053      	beq.n	8009686 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80095de:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80095e2:	f003 0301 	and.w	r3, r3, #1
 80095e6:	2b00      	cmp	r3, #0
 80095e8:	d011      	beq.n	800960e <UART_RxISR_8BIT_FIFOEN+0xca>
 80095ea:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80095ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80095f2:	2b00      	cmp	r3, #0
 80095f4:	d00b      	beq.n	800960e <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80095f6:	687b      	ldr	r3, [r7, #4]
 80095f8:	681b      	ldr	r3, [r3, #0]
 80095fa:	2201      	movs	r2, #1
 80095fc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80095fe:	687b      	ldr	r3, [r7, #4]
 8009600:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009604:	f043 0201 	orr.w	r2, r3, #1
 8009608:	687b      	ldr	r3, [r7, #4]
 800960a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800960e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009612:	f003 0302 	and.w	r3, r3, #2
 8009616:	2b00      	cmp	r3, #0
 8009618:	d011      	beq.n	800963e <UART_RxISR_8BIT_FIFOEN+0xfa>
 800961a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800961e:	f003 0301 	and.w	r3, r3, #1
 8009622:	2b00      	cmp	r3, #0
 8009624:	d00b      	beq.n	800963e <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009626:	687b      	ldr	r3, [r7, #4]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	2202      	movs	r2, #2
 800962c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800962e:	687b      	ldr	r3, [r7, #4]
 8009630:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009634:	f043 0204 	orr.w	r2, r3, #4
 8009638:	687b      	ldr	r3, [r7, #4]
 800963a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800963e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009642:	f003 0304 	and.w	r3, r3, #4
 8009646:	2b00      	cmp	r3, #0
 8009648:	d011      	beq.n	800966e <UART_RxISR_8BIT_FIFOEN+0x12a>
 800964a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800964e:	f003 0301 	and.w	r3, r3, #1
 8009652:	2b00      	cmp	r3, #0
 8009654:	d00b      	beq.n	800966e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	2204      	movs	r2, #4
 800965c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800965e:	687b      	ldr	r3, [r7, #4]
 8009660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009664:	f043 0202 	orr.w	r2, r3, #2
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009674:	2b00      	cmp	r3, #0
 8009676:	d006      	beq.n	8009686 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009678:	6878      	ldr	r0, [r7, #4]
 800967a:	f7fe ff69 	bl	8008550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800967e:	687b      	ldr	r3, [r7, #4]
 8009680:	2200      	movs	r2, #0
 8009682:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009686:	687b      	ldr	r3, [r7, #4]
 8009688:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800968c:	b29b      	uxth	r3, r3
 800968e:	2b00      	cmp	r3, #0
 8009690:	d173      	bne.n	800977a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009692:	687b      	ldr	r3, [r7, #4]
 8009694:	681b      	ldr	r3, [r3, #0]
 8009696:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009698:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800969a:	e853 3f00 	ldrex	r3, [r3]
 800969e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 80096a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80096a2:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80096a6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096aa:	687b      	ldr	r3, [r7, #4]
 80096ac:	681b      	ldr	r3, [r3, #0]
 80096ae:	461a      	mov	r2, r3
 80096b0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80096b4:	66bb      	str	r3, [r7, #104]	; 0x68
 80096b6:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096b8:	6e79      	ldr	r1, [r7, #100]	; 0x64
 80096ba:	6eba      	ldr	r2, [r7, #104]	; 0x68
 80096bc:	e841 2300 	strex	r3, r2, [r1]
 80096c0:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 80096c2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80096c4:	2b00      	cmp	r3, #0
 80096c6:	d1e4      	bne.n	8009692 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80096c8:	687b      	ldr	r3, [r7, #4]
 80096ca:	681b      	ldr	r3, [r3, #0]
 80096cc:	3308      	adds	r3, #8
 80096ce:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80096d2:	e853 3f00 	ldrex	r3, [r3]
 80096d6:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 80096d8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80096da:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80096de:	f023 0301 	bic.w	r3, r3, #1
 80096e2:	67fb      	str	r3, [r7, #124]	; 0x7c
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	3308      	adds	r3, #8
 80096ea:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80096ec:	657a      	str	r2, [r7, #84]	; 0x54
 80096ee:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096f0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80096f2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80096f4:	e841 2300 	strex	r3, r2, [r1]
 80096f8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80096fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80096fc:	2b00      	cmp	r3, #0
 80096fe:	d1e3      	bne.n	80096c8 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	2220      	movs	r2, #32
 8009704:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800970e:	687b      	ldr	r3, [r7, #4]
 8009710:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009712:	2b01      	cmp	r3, #1
 8009714:	d12e      	bne.n	8009774 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	681b      	ldr	r3, [r3, #0]
 8009720:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009722:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009724:	e853 3f00 	ldrex	r3, [r3]
 8009728:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800972a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800972c:	f023 0310 	bic.w	r3, r3, #16
 8009730:	67bb      	str	r3, [r7, #120]	; 0x78
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	681b      	ldr	r3, [r3, #0]
 8009736:	461a      	mov	r2, r3
 8009738:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800973a:	643b      	str	r3, [r7, #64]	; 0x40
 800973c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800973e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009740:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009742:	e841 2300 	strex	r3, r2, [r1]
 8009746:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009748:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800974a:	2b00      	cmp	r3, #0
 800974c:	d1e6      	bne.n	800971c <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	681b      	ldr	r3, [r3, #0]
 8009752:	69db      	ldr	r3, [r3, #28]
 8009754:	f003 0310 	and.w	r3, r3, #16
 8009758:	2b10      	cmp	r3, #16
 800975a:	d103      	bne.n	8009764 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	681b      	ldr	r3, [r3, #0]
 8009760:	2210      	movs	r2, #16
 8009762:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800976a:	4619      	mov	r1, r3
 800976c:	6878      	ldr	r0, [r7, #4]
 800976e:	f7fe fef9 	bl	8008564 <HAL_UARTEx_RxEventCallback>
 8009772:	e002      	b.n	800977a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009774:	6878      	ldr	r0, [r7, #4]
 8009776:	f7f9 f835 	bl	80027e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800977a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800977e:	2b00      	cmp	r3, #0
 8009780:	d006      	beq.n	8009790 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009782:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009786:	f003 0320 	and.w	r3, r3, #32
 800978a:	2b00      	cmp	r3, #0
 800978c:	f47f aefe 	bne.w	800958c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009796:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800979a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800979e:	2b00      	cmp	r3, #0
 80097a0:	d045      	beq.n	800982e <UART_RxISR_8BIT_FIFOEN+0x2ea>
 80097a2:	687b      	ldr	r3, [r7, #4]
 80097a4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80097a8:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 80097ac:	429a      	cmp	r2, r3
 80097ae:	d23e      	bcs.n	800982e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 80097b0:	687b      	ldr	r3, [r7, #4]
 80097b2:	681b      	ldr	r3, [r3, #0]
 80097b4:	3308      	adds	r3, #8
 80097b6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097b8:	6a3b      	ldr	r3, [r7, #32]
 80097ba:	e853 3f00 	ldrex	r3, [r3]
 80097be:	61fb      	str	r3, [r7, #28]
   return(result);
 80097c0:	69fb      	ldr	r3, [r7, #28]
 80097c2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80097c6:	673b      	str	r3, [r7, #112]	; 0x70
 80097c8:	687b      	ldr	r3, [r7, #4]
 80097ca:	681b      	ldr	r3, [r3, #0]
 80097cc:	3308      	adds	r3, #8
 80097ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80097d0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80097d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80097d4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80097d6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80097d8:	e841 2300 	strex	r3, r2, [r1]
 80097dc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80097de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80097e0:	2b00      	cmp	r3, #0
 80097e2:	d1e5      	bne.n	80097b0 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	4a14      	ldr	r2, [pc, #80]	; (8009838 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 80097e8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 80097ea:	687b      	ldr	r3, [r7, #4]
 80097ec:	681b      	ldr	r3, [r3, #0]
 80097ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80097f0:	68fb      	ldr	r3, [r7, #12]
 80097f2:	e853 3f00 	ldrex	r3, [r3]
 80097f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80097f8:	68bb      	ldr	r3, [r7, #8]
 80097fa:	f043 0320 	orr.w	r3, r3, #32
 80097fe:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	461a      	mov	r2, r3
 8009806:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009808:	61bb      	str	r3, [r7, #24]
 800980a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800980c:	6979      	ldr	r1, [r7, #20]
 800980e:	69ba      	ldr	r2, [r7, #24]
 8009810:	e841 2300 	strex	r3, r2, [r1]
 8009814:	613b      	str	r3, [r7, #16]
   return(result);
 8009816:	693b      	ldr	r3, [r7, #16]
 8009818:	2b00      	cmp	r3, #0
 800981a:	d1e6      	bne.n	80097ea <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800981c:	e007      	b.n	800982e <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800981e:	687b      	ldr	r3, [r7, #4]
 8009820:	681b      	ldr	r3, [r3, #0]
 8009822:	699a      	ldr	r2, [r3, #24]
 8009824:	687b      	ldr	r3, [r7, #4]
 8009826:	681b      	ldr	r3, [r3, #0]
 8009828:	f042 0208 	orr.w	r2, r2, #8
 800982c:	619a      	str	r2, [r3, #24]
}
 800982e:	bf00      	nop
 8009830:	3798      	adds	r7, #152	; 0x98
 8009832:	46bd      	mov	sp, r7
 8009834:	bd80      	pop	{r7, pc}
 8009836:	bf00      	nop
 8009838:	08009283 	.word	0x08009283

0800983c <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 800983c:	b580      	push	{r7, lr}
 800983e:	b0a8      	sub	sp, #160	; 0xa0
 8009840:	af00      	add	r7, sp, #0
 8009842:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 8009844:	687b      	ldr	r3, [r7, #4]
 8009846:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800984a:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	69db      	ldr	r3, [r3, #28]
 8009854:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009862:	687b      	ldr	r3, [r7, #4]
 8009864:	681b      	ldr	r3, [r3, #0]
 8009866:	689b      	ldr	r3, [r3, #8]
 8009868:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009872:	2b22      	cmp	r3, #34	; 0x22
 8009874:	f040 8153 	bne.w	8009b1e <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800987e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009882:	e0fa      	b.n	8009a7a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009884:	687b      	ldr	r3, [r7, #4]
 8009886:	681b      	ldr	r3, [r3, #0]
 8009888:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800988a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009892:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009896:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800989a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800989e:	4013      	ands	r3, r2
 80098a0:	b29a      	uxth	r2, r3
 80098a2:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80098a6:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098a8:	687b      	ldr	r3, [r7, #4]
 80098aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80098ac:	1c9a      	adds	r2, r3, #2
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80098b8:	b29b      	uxth	r3, r3
 80098ba:	3b01      	subs	r3, #1
 80098bc:	b29a      	uxth	r2, r3
 80098be:	687b      	ldr	r3, [r7, #4]
 80098c0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 80098c4:	687b      	ldr	r3, [r7, #4]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	69db      	ldr	r3, [r3, #28]
 80098ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 80098ce:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098d2:	f003 0307 	and.w	r3, r3, #7
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d053      	beq.n	8009982 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 80098da:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80098de:	f003 0301 	and.w	r3, r3, #1
 80098e2:	2b00      	cmp	r3, #0
 80098e4:	d011      	beq.n	800990a <UART_RxISR_16BIT_FIFOEN+0xce>
 80098e6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80098ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80098ee:	2b00      	cmp	r3, #0
 80098f0:	d00b      	beq.n	800990a <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80098f2:	687b      	ldr	r3, [r7, #4]
 80098f4:	681b      	ldr	r3, [r3, #0]
 80098f6:	2201      	movs	r2, #1
 80098f8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009900:	f043 0201 	orr.w	r2, r3, #1
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800990a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800990e:	f003 0302 	and.w	r3, r3, #2
 8009912:	2b00      	cmp	r3, #0
 8009914:	d011      	beq.n	800993a <UART_RxISR_16BIT_FIFOEN+0xfe>
 8009916:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800991a:	f003 0301 	and.w	r3, r3, #1
 800991e:	2b00      	cmp	r3, #0
 8009920:	d00b      	beq.n	800993a <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8009922:	687b      	ldr	r3, [r7, #4]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	2202      	movs	r2, #2
 8009928:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800992a:	687b      	ldr	r3, [r7, #4]
 800992c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009930:	f043 0204 	orr.w	r2, r3, #4
 8009934:	687b      	ldr	r3, [r7, #4]
 8009936:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800993a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800993e:	f003 0304 	and.w	r3, r3, #4
 8009942:	2b00      	cmp	r3, #0
 8009944:	d011      	beq.n	800996a <UART_RxISR_16BIT_FIFOEN+0x12e>
 8009946:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800994a:	f003 0301 	and.w	r3, r3, #1
 800994e:	2b00      	cmp	r3, #0
 8009950:	d00b      	beq.n	800996a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	2204      	movs	r2, #4
 8009958:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800995a:	687b      	ldr	r3, [r7, #4]
 800995c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009960:	f043 0202 	orr.w	r2, r3, #2
 8009964:	687b      	ldr	r3, [r7, #4]
 8009966:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009970:	2b00      	cmp	r3, #0
 8009972:	d006      	beq.n	8009982 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009974:	6878      	ldr	r0, [r7, #4]
 8009976:	f7fe fdeb 	bl	8008550 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800997a:	687b      	ldr	r3, [r7, #4]
 800997c:	2200      	movs	r2, #0
 800997e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009988:	b29b      	uxth	r3, r3
 800998a:	2b00      	cmp	r3, #0
 800998c:	d175      	bne.n	8009a7a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800998e:	687b      	ldr	r3, [r7, #4]
 8009990:	681b      	ldr	r3, [r3, #0]
 8009992:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009994:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009996:	e853 3f00 	ldrex	r3, [r3]
 800999a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800999c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800999e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80099a2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80099a6:	687b      	ldr	r3, [r7, #4]
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	461a      	mov	r2, r3
 80099ac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80099b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80099b2:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099b4:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80099b6:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80099b8:	e841 2300 	strex	r3, r2, [r1]
 80099bc:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80099be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80099c0:	2b00      	cmp	r3, #0
 80099c2:	d1e4      	bne.n	800998e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	3308      	adds	r3, #8
 80099ca:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80099ce:	e853 3f00 	ldrex	r3, [r3]
 80099d2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80099d4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80099d6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80099da:	f023 0301 	bic.w	r3, r3, #1
 80099de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	681b      	ldr	r3, [r3, #0]
 80099e6:	3308      	adds	r3, #8
 80099e8:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80099ec:	65ba      	str	r2, [r7, #88]	; 0x58
 80099ee:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80099f2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80099f4:	e841 2300 	strex	r3, r2, [r1]
 80099f8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80099fa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80099fc:	2b00      	cmp	r3, #0
 80099fe:	d1e1      	bne.n	80099c4 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8009a00:	687b      	ldr	r3, [r7, #4]
 8009a02:	2220      	movs	r2, #32
 8009a04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8009a12:	2b01      	cmp	r3, #1
 8009a14:	d12e      	bne.n	8009a74 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	2200      	movs	r2, #0
 8009a1a:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009a1c:	687b      	ldr	r3, [r7, #4]
 8009a1e:	681b      	ldr	r3, [r3, #0]
 8009a20:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009a22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009a24:	e853 3f00 	ldrex	r3, [r3]
 8009a28:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009a2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009a2c:	f023 0310 	bic.w	r3, r3, #16
 8009a30:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009a32:	687b      	ldr	r3, [r7, #4]
 8009a34:	681b      	ldr	r3, [r3, #0]
 8009a36:	461a      	mov	r2, r3
 8009a38:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8009a3a:	647b      	str	r3, [r7, #68]	; 0x44
 8009a3c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009a3e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009a40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009a42:	e841 2300 	strex	r3, r2, [r1]
 8009a46:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009a48:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8009a4a:	2b00      	cmp	r3, #0
 8009a4c:	d1e6      	bne.n	8009a1c <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8009a4e:	687b      	ldr	r3, [r7, #4]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	69db      	ldr	r3, [r3, #28]
 8009a54:	f003 0310 	and.w	r3, r3, #16
 8009a58:	2b10      	cmp	r3, #16
 8009a5a:	d103      	bne.n	8009a64 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	681b      	ldr	r3, [r3, #0]
 8009a60:	2210      	movs	r2, #16
 8009a62:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8009a6a:	4619      	mov	r1, r3
 8009a6c:	6878      	ldr	r0, [r7, #4]
 8009a6e:	f7fe fd79 	bl	8008564 <HAL_UARTEx_RxEventCallback>
 8009a72:	e002      	b.n	8009a7a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009a74:	6878      	ldr	r0, [r7, #4]
 8009a76:	f7f8 feb5 	bl	80027e4 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009a7a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 8009a7e:	2b00      	cmp	r3, #0
 8009a80:	d006      	beq.n	8009a90 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009a82:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009a86:	f003 0320 	and.w	r3, r3, #32
 8009a8a:	2b00      	cmp	r3, #0
 8009a8c:	f47f aefa 	bne.w	8009884 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009a96:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8009a9a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8009a9e:	2b00      	cmp	r3, #0
 8009aa0:	d045      	beq.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009aa2:	687b      	ldr	r3, [r7, #4]
 8009aa4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009aa8:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8009aac:	429a      	cmp	r2, r3
 8009aae:	d23e      	bcs.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	3308      	adds	r3, #8
 8009ab6:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009ab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aba:	e853 3f00 	ldrex	r3, [r3]
 8009abe:	623b      	str	r3, [r7, #32]
   return(result);
 8009ac0:	6a3b      	ldr	r3, [r7, #32]
 8009ac2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009ac6:	677b      	str	r3, [r7, #116]	; 0x74
 8009ac8:	687b      	ldr	r3, [r7, #4]
 8009aca:	681b      	ldr	r3, [r3, #0]
 8009acc:	3308      	adds	r3, #8
 8009ace:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009ad0:	633a      	str	r2, [r7, #48]	; 0x30
 8009ad2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009ad4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009ad6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009ad8:	e841 2300 	strex	r3, r2, [r1]
 8009adc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009ade:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d1e5      	bne.n	8009ab0 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009ae4:	687b      	ldr	r3, [r7, #4]
 8009ae6:	4a14      	ldr	r2, [pc, #80]	; (8009b38 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009ae8:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009af0:	693b      	ldr	r3, [r7, #16]
 8009af2:	e853 3f00 	ldrex	r3, [r3]
 8009af6:	60fb      	str	r3, [r7, #12]
   return(result);
 8009af8:	68fb      	ldr	r3, [r7, #12]
 8009afa:	f043 0320 	orr.w	r3, r3, #32
 8009afe:	673b      	str	r3, [r7, #112]	; 0x70
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	681b      	ldr	r3, [r3, #0]
 8009b04:	461a      	mov	r2, r3
 8009b06:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009b08:	61fb      	str	r3, [r7, #28]
 8009b0a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009b0c:	69b9      	ldr	r1, [r7, #24]
 8009b0e:	69fa      	ldr	r2, [r7, #28]
 8009b10:	e841 2300 	strex	r3, r2, [r1]
 8009b14:	617b      	str	r3, [r7, #20]
   return(result);
 8009b16:	697b      	ldr	r3, [r7, #20]
 8009b18:	2b00      	cmp	r3, #0
 8009b1a:	d1e6      	bne.n	8009aea <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8009b1c:	e007      	b.n	8009b2e <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8009b1e:	687b      	ldr	r3, [r7, #4]
 8009b20:	681b      	ldr	r3, [r3, #0]
 8009b22:	699a      	ldr	r2, [r3, #24]
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	f042 0208 	orr.w	r2, r2, #8
 8009b2c:	619a      	str	r2, [r3, #24]
}
 8009b2e:	bf00      	nop
 8009b30:	37a0      	adds	r7, #160	; 0xa0
 8009b32:	46bd      	mov	sp, r7
 8009b34:	bd80      	pop	{r7, pc}
 8009b36:	bf00      	nop
 8009b38:	080093e3 	.word	0x080093e3

08009b3c <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8009b3c:	b480      	push	{r7}
 8009b3e:	b083      	sub	sp, #12
 8009b40:	af00      	add	r7, sp, #0
 8009b42:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8009b44:	bf00      	nop
 8009b46:	370c      	adds	r7, #12
 8009b48:	46bd      	mov	sp, r7
 8009b4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b4e:	4770      	bx	lr

08009b50 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009b50:	b480      	push	{r7}
 8009b52:	b083      	sub	sp, #12
 8009b54:	af00      	add	r7, sp, #0
 8009b56:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009b58:	bf00      	nop
 8009b5a:	370c      	adds	r7, #12
 8009b5c:	46bd      	mov	sp, r7
 8009b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b62:	4770      	bx	lr

08009b64 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009b64:	b480      	push	{r7}
 8009b66:	b083      	sub	sp, #12
 8009b68:	af00      	add	r7, sp, #0
 8009b6a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8009b6c:	bf00      	nop
 8009b6e:	370c      	adds	r7, #12
 8009b70:	46bd      	mov	sp, r7
 8009b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b76:	4770      	bx	lr

08009b78 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009b78:	b480      	push	{r7}
 8009b7a:	b085      	sub	sp, #20
 8009b7c:	af00      	add	r7, sp, #0
 8009b7e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009b80:	687b      	ldr	r3, [r7, #4]
 8009b82:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009b86:	2b01      	cmp	r3, #1
 8009b88:	d101      	bne.n	8009b8e <HAL_UARTEx_DisableFifoMode+0x16>
 8009b8a:	2302      	movs	r3, #2
 8009b8c:	e027      	b.n	8009bde <HAL_UARTEx_DisableFifoMode+0x66>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	2201      	movs	r2, #1
 8009b92:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009b96:	687b      	ldr	r3, [r7, #4]
 8009b98:	2224      	movs	r2, #36	; 0x24
 8009b9a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009b9e:	687b      	ldr	r3, [r7, #4]
 8009ba0:	681b      	ldr	r3, [r3, #0]
 8009ba2:	681b      	ldr	r3, [r3, #0]
 8009ba4:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009ba6:	687b      	ldr	r3, [r7, #4]
 8009ba8:	681b      	ldr	r3, [r3, #0]
 8009baa:	681a      	ldr	r2, [r3, #0]
 8009bac:	687b      	ldr	r3, [r7, #4]
 8009bae:	681b      	ldr	r3, [r3, #0]
 8009bb0:	f022 0201 	bic.w	r2, r2, #1
 8009bb4:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8009bbc:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8009bbe:	687b      	ldr	r3, [r7, #4]
 8009bc0:	2200      	movs	r2, #0
 8009bc2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68fa      	ldr	r2, [r7, #12]
 8009bca:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009bcc:	687b      	ldr	r3, [r7, #4]
 8009bce:	2220      	movs	r2, #32
 8009bd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009bdc:	2300      	movs	r3, #0
}
 8009bde:	4618      	mov	r0, r3
 8009be0:	3714      	adds	r7, #20
 8009be2:	46bd      	mov	sp, r7
 8009be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be8:	4770      	bx	lr

08009bea <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009bea:	b580      	push	{r7, lr}
 8009bec:	b084      	sub	sp, #16
 8009bee:	af00      	add	r7, sp, #0
 8009bf0:	6078      	str	r0, [r7, #4]
 8009bf2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009bf4:	687b      	ldr	r3, [r7, #4]
 8009bf6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009bfa:	2b01      	cmp	r3, #1
 8009bfc:	d101      	bne.n	8009c02 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8009bfe:	2302      	movs	r3, #2
 8009c00:	e02d      	b.n	8009c5e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8009c02:	687b      	ldr	r3, [r7, #4]
 8009c04:	2201      	movs	r2, #1
 8009c06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2224      	movs	r2, #36	; 0x24
 8009c0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c12:	687b      	ldr	r3, [r7, #4]
 8009c14:	681b      	ldr	r3, [r3, #0]
 8009c16:	681b      	ldr	r3, [r3, #0]
 8009c18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c1a:	687b      	ldr	r3, [r7, #4]
 8009c1c:	681b      	ldr	r3, [r3, #0]
 8009c1e:	681a      	ldr	r2, [r3, #0]
 8009c20:	687b      	ldr	r3, [r7, #4]
 8009c22:	681b      	ldr	r3, [r3, #0]
 8009c24:	f022 0201 	bic.w	r2, r2, #1
 8009c28:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8009c2a:	687b      	ldr	r3, [r7, #4]
 8009c2c:	681b      	ldr	r3, [r3, #0]
 8009c2e:	689b      	ldr	r3, [r3, #8]
 8009c30:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8009c34:	687b      	ldr	r3, [r7, #4]
 8009c36:	681b      	ldr	r3, [r3, #0]
 8009c38:	683a      	ldr	r2, [r7, #0]
 8009c3a:	430a      	orrs	r2, r1
 8009c3c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009c3e:	6878      	ldr	r0, [r7, #4]
 8009c40:	f000 f850 	bl	8009ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009c44:	687b      	ldr	r3, [r7, #4]
 8009c46:	681b      	ldr	r3, [r3, #0]
 8009c48:	68fa      	ldr	r2, [r7, #12]
 8009c4a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009c4c:	687b      	ldr	r3, [r7, #4]
 8009c4e:	2220      	movs	r2, #32
 8009c50:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009c54:	687b      	ldr	r3, [r7, #4]
 8009c56:	2200      	movs	r2, #0
 8009c58:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009c5c:	2300      	movs	r3, #0
}
 8009c5e:	4618      	mov	r0, r3
 8009c60:	3710      	adds	r7, #16
 8009c62:	46bd      	mov	sp, r7
 8009c64:	bd80      	pop	{r7, pc}

08009c66 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009c66:	b580      	push	{r7, lr}
 8009c68:	b084      	sub	sp, #16
 8009c6a:	af00      	add	r7, sp, #0
 8009c6c:	6078      	str	r0, [r7, #4]
 8009c6e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009c70:	687b      	ldr	r3, [r7, #4]
 8009c72:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009c76:	2b01      	cmp	r3, #1
 8009c78:	d101      	bne.n	8009c7e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8009c7a:	2302      	movs	r3, #2
 8009c7c:	e02d      	b.n	8009cda <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8009c7e:	687b      	ldr	r3, [r7, #4]
 8009c80:	2201      	movs	r2, #1
 8009c82:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009c86:	687b      	ldr	r3, [r7, #4]
 8009c88:	2224      	movs	r2, #36	; 0x24
 8009c8a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8009c8e:	687b      	ldr	r3, [r7, #4]
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	681b      	ldr	r3, [r3, #0]
 8009c94:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	681b      	ldr	r3, [r3, #0]
 8009c9a:	681a      	ldr	r2, [r3, #0]
 8009c9c:	687b      	ldr	r3, [r7, #4]
 8009c9e:	681b      	ldr	r3, [r3, #0]
 8009ca0:	f022 0201 	bic.w	r2, r2, #1
 8009ca4:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	681b      	ldr	r3, [r3, #0]
 8009caa:	689b      	ldr	r3, [r3, #8]
 8009cac:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009cb0:	687b      	ldr	r3, [r7, #4]
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	683a      	ldr	r2, [r7, #0]
 8009cb6:	430a      	orrs	r2, r1
 8009cb8:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8009cba:	6878      	ldr	r0, [r7, #4]
 8009cbc:	f000 f812 	bl	8009ce4 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009cc0:	687b      	ldr	r3, [r7, #4]
 8009cc2:	681b      	ldr	r3, [r3, #0]
 8009cc4:	68fa      	ldr	r2, [r7, #12]
 8009cc6:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009cc8:	687b      	ldr	r3, [r7, #4]
 8009cca:	2220      	movs	r2, #32
 8009ccc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009cd0:	687b      	ldr	r3, [r7, #4]
 8009cd2:	2200      	movs	r2, #0
 8009cd4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009cd8:	2300      	movs	r3, #0
}
 8009cda:	4618      	mov	r0, r3
 8009cdc:	3710      	adds	r7, #16
 8009cde:	46bd      	mov	sp, r7
 8009ce0:	bd80      	pop	{r7, pc}
	...

08009ce4 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009ce4:	b480      	push	{r7}
 8009ce6:	b085      	sub	sp, #20
 8009ce8:	af00      	add	r7, sp, #0
 8009cea:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009cf0:	2b00      	cmp	r3, #0
 8009cf2:	d108      	bne.n	8009d06 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8009cf4:	687b      	ldr	r3, [r7, #4]
 8009cf6:	2201      	movs	r2, #1
 8009cf8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8009cfc:	687b      	ldr	r3, [r7, #4]
 8009cfe:	2201      	movs	r2, #1
 8009d00:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8009d04:	e031      	b.n	8009d6a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8009d06:	2308      	movs	r3, #8
 8009d08:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8009d0a:	2308      	movs	r3, #8
 8009d0c:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	681b      	ldr	r3, [r3, #0]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	0e5b      	lsrs	r3, r3, #25
 8009d16:	b2db      	uxtb	r3, r3
 8009d18:	f003 0307 	and.w	r3, r3, #7
 8009d1c:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8009d1e:	687b      	ldr	r3, [r7, #4]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	689b      	ldr	r3, [r3, #8]
 8009d24:	0f5b      	lsrs	r3, r3, #29
 8009d26:	b2db      	uxtb	r3, r3
 8009d28:	f003 0307 	and.w	r3, r3, #7
 8009d2c:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d2e:	7bbb      	ldrb	r3, [r7, #14]
 8009d30:	7b3a      	ldrb	r2, [r7, #12]
 8009d32:	4911      	ldr	r1, [pc, #68]	; (8009d78 <UARTEx_SetNbDataToProcess+0x94>)
 8009d34:	5c8a      	ldrb	r2, [r1, r2]
 8009d36:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8009d3a:	7b3a      	ldrb	r2, [r7, #12]
 8009d3c:	490f      	ldr	r1, [pc, #60]	; (8009d7c <UARTEx_SetNbDataToProcess+0x98>)
 8009d3e:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8009d40:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d44:	b29a      	uxth	r2, r3
 8009d46:	687b      	ldr	r3, [r7, #4]
 8009d48:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d4c:	7bfb      	ldrb	r3, [r7, #15]
 8009d4e:	7b7a      	ldrb	r2, [r7, #13]
 8009d50:	4909      	ldr	r1, [pc, #36]	; (8009d78 <UARTEx_SetNbDataToProcess+0x94>)
 8009d52:	5c8a      	ldrb	r2, [r1, r2]
 8009d54:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009d58:	7b7a      	ldrb	r2, [r7, #13]
 8009d5a:	4908      	ldr	r1, [pc, #32]	; (8009d7c <UARTEx_SetNbDataToProcess+0x98>)
 8009d5c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8009d5e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009d62:	b29a      	uxth	r2, r3
 8009d64:	687b      	ldr	r3, [r7, #4]
 8009d66:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8009d6a:	bf00      	nop
 8009d6c:	3714      	adds	r7, #20
 8009d6e:	46bd      	mov	sp, r7
 8009d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009d74:	4770      	bx	lr
 8009d76:	bf00      	nop
 8009d78:	0800cd34 	.word	0x0800cd34
 8009d7c:	0800cd3c 	.word	0x0800cd3c

08009d80 <atoi>:
 8009d80:	220a      	movs	r2, #10
 8009d82:	2100      	movs	r1, #0
 8009d84:	f000 b882 	b.w	8009e8c <strtol>

08009d88 <_strtol_l.constprop.0>:
 8009d88:	2b01      	cmp	r3, #1
 8009d8a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d8e:	d001      	beq.n	8009d94 <_strtol_l.constprop.0+0xc>
 8009d90:	2b24      	cmp	r3, #36	; 0x24
 8009d92:	d906      	bls.n	8009da2 <_strtol_l.constprop.0+0x1a>
 8009d94:	f000 fec0 	bl	800ab18 <__errno>
 8009d98:	2316      	movs	r3, #22
 8009d9a:	6003      	str	r3, [r0, #0]
 8009d9c:	2000      	movs	r0, #0
 8009d9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009da2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009e88 <_strtol_l.constprop.0+0x100>
 8009da6:	460d      	mov	r5, r1
 8009da8:	462e      	mov	r6, r5
 8009daa:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009dae:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009db2:	f017 0708 	ands.w	r7, r7, #8
 8009db6:	d1f7      	bne.n	8009da8 <_strtol_l.constprop.0+0x20>
 8009db8:	2c2d      	cmp	r4, #45	; 0x2d
 8009dba:	d132      	bne.n	8009e22 <_strtol_l.constprop.0+0x9a>
 8009dbc:	782c      	ldrb	r4, [r5, #0]
 8009dbe:	2701      	movs	r7, #1
 8009dc0:	1cb5      	adds	r5, r6, #2
 8009dc2:	2b00      	cmp	r3, #0
 8009dc4:	d05b      	beq.n	8009e7e <_strtol_l.constprop.0+0xf6>
 8009dc6:	2b10      	cmp	r3, #16
 8009dc8:	d109      	bne.n	8009dde <_strtol_l.constprop.0+0x56>
 8009dca:	2c30      	cmp	r4, #48	; 0x30
 8009dcc:	d107      	bne.n	8009dde <_strtol_l.constprop.0+0x56>
 8009dce:	782c      	ldrb	r4, [r5, #0]
 8009dd0:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009dd4:	2c58      	cmp	r4, #88	; 0x58
 8009dd6:	d14d      	bne.n	8009e74 <_strtol_l.constprop.0+0xec>
 8009dd8:	786c      	ldrb	r4, [r5, #1]
 8009dda:	2310      	movs	r3, #16
 8009ddc:	3502      	adds	r5, #2
 8009dde:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009de2:	f108 38ff 	add.w	r8, r8, #4294967295
 8009de6:	f04f 0e00 	mov.w	lr, #0
 8009dea:	fbb8 f9f3 	udiv	r9, r8, r3
 8009dee:	4676      	mov	r6, lr
 8009df0:	fb03 8a19 	mls	sl, r3, r9, r8
 8009df4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8009df8:	f1bc 0f09 	cmp.w	ip, #9
 8009dfc:	d816      	bhi.n	8009e2c <_strtol_l.constprop.0+0xa4>
 8009dfe:	4664      	mov	r4, ip
 8009e00:	42a3      	cmp	r3, r4
 8009e02:	dd24      	ble.n	8009e4e <_strtol_l.constprop.0+0xc6>
 8009e04:	f1be 3fff 	cmp.w	lr, #4294967295
 8009e08:	d008      	beq.n	8009e1c <_strtol_l.constprop.0+0x94>
 8009e0a:	45b1      	cmp	r9, r6
 8009e0c:	d31c      	bcc.n	8009e48 <_strtol_l.constprop.0+0xc0>
 8009e0e:	d101      	bne.n	8009e14 <_strtol_l.constprop.0+0x8c>
 8009e10:	45a2      	cmp	sl, r4
 8009e12:	db19      	blt.n	8009e48 <_strtol_l.constprop.0+0xc0>
 8009e14:	fb06 4603 	mla	r6, r6, r3, r4
 8009e18:	f04f 0e01 	mov.w	lr, #1
 8009e1c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009e20:	e7e8      	b.n	8009df4 <_strtol_l.constprop.0+0x6c>
 8009e22:	2c2b      	cmp	r4, #43	; 0x2b
 8009e24:	bf04      	itt	eq
 8009e26:	782c      	ldrbeq	r4, [r5, #0]
 8009e28:	1cb5      	addeq	r5, r6, #2
 8009e2a:	e7ca      	b.n	8009dc2 <_strtol_l.constprop.0+0x3a>
 8009e2c:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8009e30:	f1bc 0f19 	cmp.w	ip, #25
 8009e34:	d801      	bhi.n	8009e3a <_strtol_l.constprop.0+0xb2>
 8009e36:	3c37      	subs	r4, #55	; 0x37
 8009e38:	e7e2      	b.n	8009e00 <_strtol_l.constprop.0+0x78>
 8009e3a:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8009e3e:	f1bc 0f19 	cmp.w	ip, #25
 8009e42:	d804      	bhi.n	8009e4e <_strtol_l.constprop.0+0xc6>
 8009e44:	3c57      	subs	r4, #87	; 0x57
 8009e46:	e7db      	b.n	8009e00 <_strtol_l.constprop.0+0x78>
 8009e48:	f04f 3eff 	mov.w	lr, #4294967295
 8009e4c:	e7e6      	b.n	8009e1c <_strtol_l.constprop.0+0x94>
 8009e4e:	f1be 3fff 	cmp.w	lr, #4294967295
 8009e52:	d105      	bne.n	8009e60 <_strtol_l.constprop.0+0xd8>
 8009e54:	2322      	movs	r3, #34	; 0x22
 8009e56:	6003      	str	r3, [r0, #0]
 8009e58:	4646      	mov	r6, r8
 8009e5a:	b942      	cbnz	r2, 8009e6e <_strtol_l.constprop.0+0xe6>
 8009e5c:	4630      	mov	r0, r6
 8009e5e:	e79e      	b.n	8009d9e <_strtol_l.constprop.0+0x16>
 8009e60:	b107      	cbz	r7, 8009e64 <_strtol_l.constprop.0+0xdc>
 8009e62:	4276      	negs	r6, r6
 8009e64:	2a00      	cmp	r2, #0
 8009e66:	d0f9      	beq.n	8009e5c <_strtol_l.constprop.0+0xd4>
 8009e68:	f1be 0f00 	cmp.w	lr, #0
 8009e6c:	d000      	beq.n	8009e70 <_strtol_l.constprop.0+0xe8>
 8009e6e:	1e69      	subs	r1, r5, #1
 8009e70:	6011      	str	r1, [r2, #0]
 8009e72:	e7f3      	b.n	8009e5c <_strtol_l.constprop.0+0xd4>
 8009e74:	2430      	movs	r4, #48	; 0x30
 8009e76:	2b00      	cmp	r3, #0
 8009e78:	d1b1      	bne.n	8009dde <_strtol_l.constprop.0+0x56>
 8009e7a:	2308      	movs	r3, #8
 8009e7c:	e7af      	b.n	8009dde <_strtol_l.constprop.0+0x56>
 8009e7e:	2c30      	cmp	r4, #48	; 0x30
 8009e80:	d0a5      	beq.n	8009dce <_strtol_l.constprop.0+0x46>
 8009e82:	230a      	movs	r3, #10
 8009e84:	e7ab      	b.n	8009dde <_strtol_l.constprop.0+0x56>
 8009e86:	bf00      	nop
 8009e88:	0800cd45 	.word	0x0800cd45

08009e8c <strtol>:
 8009e8c:	4613      	mov	r3, r2
 8009e8e:	460a      	mov	r2, r1
 8009e90:	4601      	mov	r1, r0
 8009e92:	4802      	ldr	r0, [pc, #8]	; (8009e9c <strtol+0x10>)
 8009e94:	6800      	ldr	r0, [r0, #0]
 8009e96:	f7ff bf77 	b.w	8009d88 <_strtol_l.constprop.0>
 8009e9a:	bf00      	nop
 8009e9c:	20000128 	.word	0x20000128

08009ea0 <__cvt>:
 8009ea0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ea4:	ec55 4b10 	vmov	r4, r5, d0
 8009ea8:	2d00      	cmp	r5, #0
 8009eaa:	460e      	mov	r6, r1
 8009eac:	4619      	mov	r1, r3
 8009eae:	462b      	mov	r3, r5
 8009eb0:	bfbb      	ittet	lt
 8009eb2:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009eb6:	461d      	movlt	r5, r3
 8009eb8:	2300      	movge	r3, #0
 8009eba:	232d      	movlt	r3, #45	; 0x2d
 8009ebc:	700b      	strb	r3, [r1, #0]
 8009ebe:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009ec0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009ec4:	4691      	mov	r9, r2
 8009ec6:	f023 0820 	bic.w	r8, r3, #32
 8009eca:	bfbc      	itt	lt
 8009ecc:	4622      	movlt	r2, r4
 8009ece:	4614      	movlt	r4, r2
 8009ed0:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009ed4:	d005      	beq.n	8009ee2 <__cvt+0x42>
 8009ed6:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009eda:	d100      	bne.n	8009ede <__cvt+0x3e>
 8009edc:	3601      	adds	r6, #1
 8009ede:	2102      	movs	r1, #2
 8009ee0:	e000      	b.n	8009ee4 <__cvt+0x44>
 8009ee2:	2103      	movs	r1, #3
 8009ee4:	ab03      	add	r3, sp, #12
 8009ee6:	9301      	str	r3, [sp, #4]
 8009ee8:	ab02      	add	r3, sp, #8
 8009eea:	9300      	str	r3, [sp, #0]
 8009eec:	ec45 4b10 	vmov	d0, r4, r5
 8009ef0:	4653      	mov	r3, sl
 8009ef2:	4632      	mov	r2, r6
 8009ef4:	f000 fee4 	bl	800acc0 <_dtoa_r>
 8009ef8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009efc:	4607      	mov	r7, r0
 8009efe:	d102      	bne.n	8009f06 <__cvt+0x66>
 8009f00:	f019 0f01 	tst.w	r9, #1
 8009f04:	d022      	beq.n	8009f4c <__cvt+0xac>
 8009f06:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f0a:	eb07 0906 	add.w	r9, r7, r6
 8009f0e:	d110      	bne.n	8009f32 <__cvt+0x92>
 8009f10:	783b      	ldrb	r3, [r7, #0]
 8009f12:	2b30      	cmp	r3, #48	; 0x30
 8009f14:	d10a      	bne.n	8009f2c <__cvt+0x8c>
 8009f16:	2200      	movs	r2, #0
 8009f18:	2300      	movs	r3, #0
 8009f1a:	4620      	mov	r0, r4
 8009f1c:	4629      	mov	r1, r5
 8009f1e:	f7f6 fe0b 	bl	8000b38 <__aeabi_dcmpeq>
 8009f22:	b918      	cbnz	r0, 8009f2c <__cvt+0x8c>
 8009f24:	f1c6 0601 	rsb	r6, r6, #1
 8009f28:	f8ca 6000 	str.w	r6, [sl]
 8009f2c:	f8da 3000 	ldr.w	r3, [sl]
 8009f30:	4499      	add	r9, r3
 8009f32:	2200      	movs	r2, #0
 8009f34:	2300      	movs	r3, #0
 8009f36:	4620      	mov	r0, r4
 8009f38:	4629      	mov	r1, r5
 8009f3a:	f7f6 fdfd 	bl	8000b38 <__aeabi_dcmpeq>
 8009f3e:	b108      	cbz	r0, 8009f44 <__cvt+0xa4>
 8009f40:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f44:	2230      	movs	r2, #48	; 0x30
 8009f46:	9b03      	ldr	r3, [sp, #12]
 8009f48:	454b      	cmp	r3, r9
 8009f4a:	d307      	bcc.n	8009f5c <__cvt+0xbc>
 8009f4c:	9b03      	ldr	r3, [sp, #12]
 8009f4e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f50:	1bdb      	subs	r3, r3, r7
 8009f52:	4638      	mov	r0, r7
 8009f54:	6013      	str	r3, [r2, #0]
 8009f56:	b004      	add	sp, #16
 8009f58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f5c:	1c59      	adds	r1, r3, #1
 8009f5e:	9103      	str	r1, [sp, #12]
 8009f60:	701a      	strb	r2, [r3, #0]
 8009f62:	e7f0      	b.n	8009f46 <__cvt+0xa6>

08009f64 <__exponent>:
 8009f64:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f66:	4603      	mov	r3, r0
 8009f68:	2900      	cmp	r1, #0
 8009f6a:	bfb8      	it	lt
 8009f6c:	4249      	neglt	r1, r1
 8009f6e:	f803 2b02 	strb.w	r2, [r3], #2
 8009f72:	bfb4      	ite	lt
 8009f74:	222d      	movlt	r2, #45	; 0x2d
 8009f76:	222b      	movge	r2, #43	; 0x2b
 8009f78:	2909      	cmp	r1, #9
 8009f7a:	7042      	strb	r2, [r0, #1]
 8009f7c:	dd2a      	ble.n	8009fd4 <__exponent+0x70>
 8009f7e:	f10d 0207 	add.w	r2, sp, #7
 8009f82:	4617      	mov	r7, r2
 8009f84:	260a      	movs	r6, #10
 8009f86:	4694      	mov	ip, r2
 8009f88:	fb91 f5f6 	sdiv	r5, r1, r6
 8009f8c:	fb06 1415 	mls	r4, r6, r5, r1
 8009f90:	3430      	adds	r4, #48	; 0x30
 8009f92:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009f96:	460c      	mov	r4, r1
 8009f98:	2c63      	cmp	r4, #99	; 0x63
 8009f9a:	f102 32ff 	add.w	r2, r2, #4294967295
 8009f9e:	4629      	mov	r1, r5
 8009fa0:	dcf1      	bgt.n	8009f86 <__exponent+0x22>
 8009fa2:	3130      	adds	r1, #48	; 0x30
 8009fa4:	f1ac 0402 	sub.w	r4, ip, #2
 8009fa8:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009fac:	1c41      	adds	r1, r0, #1
 8009fae:	4622      	mov	r2, r4
 8009fb0:	42ba      	cmp	r2, r7
 8009fb2:	d30a      	bcc.n	8009fca <__exponent+0x66>
 8009fb4:	f10d 0209 	add.w	r2, sp, #9
 8009fb8:	eba2 020c 	sub.w	r2, r2, ip
 8009fbc:	42bc      	cmp	r4, r7
 8009fbe:	bf88      	it	hi
 8009fc0:	2200      	movhi	r2, #0
 8009fc2:	4413      	add	r3, r2
 8009fc4:	1a18      	subs	r0, r3, r0
 8009fc6:	b003      	add	sp, #12
 8009fc8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009fca:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009fce:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009fd2:	e7ed      	b.n	8009fb0 <__exponent+0x4c>
 8009fd4:	2330      	movs	r3, #48	; 0x30
 8009fd6:	3130      	adds	r1, #48	; 0x30
 8009fd8:	7083      	strb	r3, [r0, #2]
 8009fda:	70c1      	strb	r1, [r0, #3]
 8009fdc:	1d03      	adds	r3, r0, #4
 8009fde:	e7f1      	b.n	8009fc4 <__exponent+0x60>

08009fe0 <_printf_float>:
 8009fe0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fe4:	ed2d 8b02 	vpush	{d8}
 8009fe8:	b08d      	sub	sp, #52	; 0x34
 8009fea:	460c      	mov	r4, r1
 8009fec:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009ff0:	4616      	mov	r6, r2
 8009ff2:	461f      	mov	r7, r3
 8009ff4:	4605      	mov	r5, r0
 8009ff6:	f000 fd45 	bl	800aa84 <_localeconv_r>
 8009ffa:	f8d0 a000 	ldr.w	sl, [r0]
 8009ffe:	4650      	mov	r0, sl
 800a000:	f7f6 f96e 	bl	80002e0 <strlen>
 800a004:	2300      	movs	r3, #0
 800a006:	930a      	str	r3, [sp, #40]	; 0x28
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	9305      	str	r3, [sp, #20]
 800a00c:	f8d8 3000 	ldr.w	r3, [r8]
 800a010:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a014:	3307      	adds	r3, #7
 800a016:	f023 0307 	bic.w	r3, r3, #7
 800a01a:	f103 0208 	add.w	r2, r3, #8
 800a01e:	f8c8 2000 	str.w	r2, [r8]
 800a022:	e9d3 8900 	ldrd	r8, r9, [r3]
 800a026:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a02a:	9307      	str	r3, [sp, #28]
 800a02c:	f8cd 8018 	str.w	r8, [sp, #24]
 800a030:	ee08 0a10 	vmov	s16, r0
 800a034:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 800a038:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a03c:	4b9e      	ldr	r3, [pc, #632]	; (800a2b8 <_printf_float+0x2d8>)
 800a03e:	f04f 32ff 	mov.w	r2, #4294967295
 800a042:	f7f6 fdab 	bl	8000b9c <__aeabi_dcmpun>
 800a046:	bb88      	cbnz	r0, 800a0ac <_printf_float+0xcc>
 800a048:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a04c:	4b9a      	ldr	r3, [pc, #616]	; (800a2b8 <_printf_float+0x2d8>)
 800a04e:	f04f 32ff 	mov.w	r2, #4294967295
 800a052:	f7f6 fd85 	bl	8000b60 <__aeabi_dcmple>
 800a056:	bb48      	cbnz	r0, 800a0ac <_printf_float+0xcc>
 800a058:	2200      	movs	r2, #0
 800a05a:	2300      	movs	r3, #0
 800a05c:	4640      	mov	r0, r8
 800a05e:	4649      	mov	r1, r9
 800a060:	f7f6 fd74 	bl	8000b4c <__aeabi_dcmplt>
 800a064:	b110      	cbz	r0, 800a06c <_printf_float+0x8c>
 800a066:	232d      	movs	r3, #45	; 0x2d
 800a068:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a06c:	4a93      	ldr	r2, [pc, #588]	; (800a2bc <_printf_float+0x2dc>)
 800a06e:	4b94      	ldr	r3, [pc, #592]	; (800a2c0 <_printf_float+0x2e0>)
 800a070:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a074:	bf94      	ite	ls
 800a076:	4690      	movls	r8, r2
 800a078:	4698      	movhi	r8, r3
 800a07a:	2303      	movs	r3, #3
 800a07c:	6123      	str	r3, [r4, #16]
 800a07e:	9b05      	ldr	r3, [sp, #20]
 800a080:	f023 0304 	bic.w	r3, r3, #4
 800a084:	6023      	str	r3, [r4, #0]
 800a086:	f04f 0900 	mov.w	r9, #0
 800a08a:	9700      	str	r7, [sp, #0]
 800a08c:	4633      	mov	r3, r6
 800a08e:	aa0b      	add	r2, sp, #44	; 0x2c
 800a090:	4621      	mov	r1, r4
 800a092:	4628      	mov	r0, r5
 800a094:	f000 f9da 	bl	800a44c <_printf_common>
 800a098:	3001      	adds	r0, #1
 800a09a:	f040 8090 	bne.w	800a1be <_printf_float+0x1de>
 800a09e:	f04f 30ff 	mov.w	r0, #4294967295
 800a0a2:	b00d      	add	sp, #52	; 0x34
 800a0a4:	ecbd 8b02 	vpop	{d8}
 800a0a8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0ac:	4642      	mov	r2, r8
 800a0ae:	464b      	mov	r3, r9
 800a0b0:	4640      	mov	r0, r8
 800a0b2:	4649      	mov	r1, r9
 800a0b4:	f7f6 fd72 	bl	8000b9c <__aeabi_dcmpun>
 800a0b8:	b140      	cbz	r0, 800a0cc <_printf_float+0xec>
 800a0ba:	464b      	mov	r3, r9
 800a0bc:	2b00      	cmp	r3, #0
 800a0be:	bfbc      	itt	lt
 800a0c0:	232d      	movlt	r3, #45	; 0x2d
 800a0c2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a0c6:	4a7f      	ldr	r2, [pc, #508]	; (800a2c4 <_printf_float+0x2e4>)
 800a0c8:	4b7f      	ldr	r3, [pc, #508]	; (800a2c8 <_printf_float+0x2e8>)
 800a0ca:	e7d1      	b.n	800a070 <_printf_float+0x90>
 800a0cc:	6863      	ldr	r3, [r4, #4]
 800a0ce:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a0d2:	9206      	str	r2, [sp, #24]
 800a0d4:	1c5a      	adds	r2, r3, #1
 800a0d6:	d13f      	bne.n	800a158 <_printf_float+0x178>
 800a0d8:	2306      	movs	r3, #6
 800a0da:	6063      	str	r3, [r4, #4]
 800a0dc:	9b05      	ldr	r3, [sp, #20]
 800a0de:	6861      	ldr	r1, [r4, #4]
 800a0e0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	9303      	str	r3, [sp, #12]
 800a0e8:	ab0a      	add	r3, sp, #40	; 0x28
 800a0ea:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a0ee:	ab09      	add	r3, sp, #36	; 0x24
 800a0f0:	ec49 8b10 	vmov	d0, r8, r9
 800a0f4:	9300      	str	r3, [sp, #0]
 800a0f6:	6022      	str	r2, [r4, #0]
 800a0f8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a0fc:	4628      	mov	r0, r5
 800a0fe:	f7ff fecf 	bl	8009ea0 <__cvt>
 800a102:	9b06      	ldr	r3, [sp, #24]
 800a104:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a106:	2b47      	cmp	r3, #71	; 0x47
 800a108:	4680      	mov	r8, r0
 800a10a:	d108      	bne.n	800a11e <_printf_float+0x13e>
 800a10c:	1cc8      	adds	r0, r1, #3
 800a10e:	db02      	blt.n	800a116 <_printf_float+0x136>
 800a110:	6863      	ldr	r3, [r4, #4]
 800a112:	4299      	cmp	r1, r3
 800a114:	dd41      	ble.n	800a19a <_printf_float+0x1ba>
 800a116:	f1ab 0302 	sub.w	r3, fp, #2
 800a11a:	fa5f fb83 	uxtb.w	fp, r3
 800a11e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a122:	d820      	bhi.n	800a166 <_printf_float+0x186>
 800a124:	3901      	subs	r1, #1
 800a126:	465a      	mov	r2, fp
 800a128:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a12c:	9109      	str	r1, [sp, #36]	; 0x24
 800a12e:	f7ff ff19 	bl	8009f64 <__exponent>
 800a132:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a134:	1813      	adds	r3, r2, r0
 800a136:	2a01      	cmp	r2, #1
 800a138:	4681      	mov	r9, r0
 800a13a:	6123      	str	r3, [r4, #16]
 800a13c:	dc02      	bgt.n	800a144 <_printf_float+0x164>
 800a13e:	6822      	ldr	r2, [r4, #0]
 800a140:	07d2      	lsls	r2, r2, #31
 800a142:	d501      	bpl.n	800a148 <_printf_float+0x168>
 800a144:	3301      	adds	r3, #1
 800a146:	6123      	str	r3, [r4, #16]
 800a148:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a14c:	2b00      	cmp	r3, #0
 800a14e:	d09c      	beq.n	800a08a <_printf_float+0xaa>
 800a150:	232d      	movs	r3, #45	; 0x2d
 800a152:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a156:	e798      	b.n	800a08a <_printf_float+0xaa>
 800a158:	9a06      	ldr	r2, [sp, #24]
 800a15a:	2a47      	cmp	r2, #71	; 0x47
 800a15c:	d1be      	bne.n	800a0dc <_printf_float+0xfc>
 800a15e:	2b00      	cmp	r3, #0
 800a160:	d1bc      	bne.n	800a0dc <_printf_float+0xfc>
 800a162:	2301      	movs	r3, #1
 800a164:	e7b9      	b.n	800a0da <_printf_float+0xfa>
 800a166:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a16a:	d118      	bne.n	800a19e <_printf_float+0x1be>
 800a16c:	2900      	cmp	r1, #0
 800a16e:	6863      	ldr	r3, [r4, #4]
 800a170:	dd0b      	ble.n	800a18a <_printf_float+0x1aa>
 800a172:	6121      	str	r1, [r4, #16]
 800a174:	b913      	cbnz	r3, 800a17c <_printf_float+0x19c>
 800a176:	6822      	ldr	r2, [r4, #0]
 800a178:	07d0      	lsls	r0, r2, #31
 800a17a:	d502      	bpl.n	800a182 <_printf_float+0x1a2>
 800a17c:	3301      	adds	r3, #1
 800a17e:	440b      	add	r3, r1
 800a180:	6123      	str	r3, [r4, #16]
 800a182:	65a1      	str	r1, [r4, #88]	; 0x58
 800a184:	f04f 0900 	mov.w	r9, #0
 800a188:	e7de      	b.n	800a148 <_printf_float+0x168>
 800a18a:	b913      	cbnz	r3, 800a192 <_printf_float+0x1b2>
 800a18c:	6822      	ldr	r2, [r4, #0]
 800a18e:	07d2      	lsls	r2, r2, #31
 800a190:	d501      	bpl.n	800a196 <_printf_float+0x1b6>
 800a192:	3302      	adds	r3, #2
 800a194:	e7f4      	b.n	800a180 <_printf_float+0x1a0>
 800a196:	2301      	movs	r3, #1
 800a198:	e7f2      	b.n	800a180 <_printf_float+0x1a0>
 800a19a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a19e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1a0:	4299      	cmp	r1, r3
 800a1a2:	db05      	blt.n	800a1b0 <_printf_float+0x1d0>
 800a1a4:	6823      	ldr	r3, [r4, #0]
 800a1a6:	6121      	str	r1, [r4, #16]
 800a1a8:	07d8      	lsls	r0, r3, #31
 800a1aa:	d5ea      	bpl.n	800a182 <_printf_float+0x1a2>
 800a1ac:	1c4b      	adds	r3, r1, #1
 800a1ae:	e7e7      	b.n	800a180 <_printf_float+0x1a0>
 800a1b0:	2900      	cmp	r1, #0
 800a1b2:	bfd4      	ite	le
 800a1b4:	f1c1 0202 	rsble	r2, r1, #2
 800a1b8:	2201      	movgt	r2, #1
 800a1ba:	4413      	add	r3, r2
 800a1bc:	e7e0      	b.n	800a180 <_printf_float+0x1a0>
 800a1be:	6823      	ldr	r3, [r4, #0]
 800a1c0:	055a      	lsls	r2, r3, #21
 800a1c2:	d407      	bmi.n	800a1d4 <_printf_float+0x1f4>
 800a1c4:	6923      	ldr	r3, [r4, #16]
 800a1c6:	4642      	mov	r2, r8
 800a1c8:	4631      	mov	r1, r6
 800a1ca:	4628      	mov	r0, r5
 800a1cc:	47b8      	blx	r7
 800a1ce:	3001      	adds	r0, #1
 800a1d0:	d12c      	bne.n	800a22c <_printf_float+0x24c>
 800a1d2:	e764      	b.n	800a09e <_printf_float+0xbe>
 800a1d4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1d8:	f240 80e0 	bls.w	800a39c <_printf_float+0x3bc>
 800a1dc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a1e0:	2200      	movs	r2, #0
 800a1e2:	2300      	movs	r3, #0
 800a1e4:	f7f6 fca8 	bl	8000b38 <__aeabi_dcmpeq>
 800a1e8:	2800      	cmp	r0, #0
 800a1ea:	d034      	beq.n	800a256 <_printf_float+0x276>
 800a1ec:	4a37      	ldr	r2, [pc, #220]	; (800a2cc <_printf_float+0x2ec>)
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4631      	mov	r1, r6
 800a1f2:	4628      	mov	r0, r5
 800a1f4:	47b8      	blx	r7
 800a1f6:	3001      	adds	r0, #1
 800a1f8:	f43f af51 	beq.w	800a09e <_printf_float+0xbe>
 800a1fc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a200:	429a      	cmp	r2, r3
 800a202:	db02      	blt.n	800a20a <_printf_float+0x22a>
 800a204:	6823      	ldr	r3, [r4, #0]
 800a206:	07d8      	lsls	r0, r3, #31
 800a208:	d510      	bpl.n	800a22c <_printf_float+0x24c>
 800a20a:	ee18 3a10 	vmov	r3, s16
 800a20e:	4652      	mov	r2, sl
 800a210:	4631      	mov	r1, r6
 800a212:	4628      	mov	r0, r5
 800a214:	47b8      	blx	r7
 800a216:	3001      	adds	r0, #1
 800a218:	f43f af41 	beq.w	800a09e <_printf_float+0xbe>
 800a21c:	f04f 0800 	mov.w	r8, #0
 800a220:	f104 091a 	add.w	r9, r4, #26
 800a224:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a226:	3b01      	subs	r3, #1
 800a228:	4543      	cmp	r3, r8
 800a22a:	dc09      	bgt.n	800a240 <_printf_float+0x260>
 800a22c:	6823      	ldr	r3, [r4, #0]
 800a22e:	079b      	lsls	r3, r3, #30
 800a230:	f100 8107 	bmi.w	800a442 <_printf_float+0x462>
 800a234:	68e0      	ldr	r0, [r4, #12]
 800a236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a238:	4298      	cmp	r0, r3
 800a23a:	bfb8      	it	lt
 800a23c:	4618      	movlt	r0, r3
 800a23e:	e730      	b.n	800a0a2 <_printf_float+0xc2>
 800a240:	2301      	movs	r3, #1
 800a242:	464a      	mov	r2, r9
 800a244:	4631      	mov	r1, r6
 800a246:	4628      	mov	r0, r5
 800a248:	47b8      	blx	r7
 800a24a:	3001      	adds	r0, #1
 800a24c:	f43f af27 	beq.w	800a09e <_printf_float+0xbe>
 800a250:	f108 0801 	add.w	r8, r8, #1
 800a254:	e7e6      	b.n	800a224 <_printf_float+0x244>
 800a256:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a258:	2b00      	cmp	r3, #0
 800a25a:	dc39      	bgt.n	800a2d0 <_printf_float+0x2f0>
 800a25c:	4a1b      	ldr	r2, [pc, #108]	; (800a2cc <_printf_float+0x2ec>)
 800a25e:	2301      	movs	r3, #1
 800a260:	4631      	mov	r1, r6
 800a262:	4628      	mov	r0, r5
 800a264:	47b8      	blx	r7
 800a266:	3001      	adds	r0, #1
 800a268:	f43f af19 	beq.w	800a09e <_printf_float+0xbe>
 800a26c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a270:	4313      	orrs	r3, r2
 800a272:	d102      	bne.n	800a27a <_printf_float+0x29a>
 800a274:	6823      	ldr	r3, [r4, #0]
 800a276:	07d9      	lsls	r1, r3, #31
 800a278:	d5d8      	bpl.n	800a22c <_printf_float+0x24c>
 800a27a:	ee18 3a10 	vmov	r3, s16
 800a27e:	4652      	mov	r2, sl
 800a280:	4631      	mov	r1, r6
 800a282:	4628      	mov	r0, r5
 800a284:	47b8      	blx	r7
 800a286:	3001      	adds	r0, #1
 800a288:	f43f af09 	beq.w	800a09e <_printf_float+0xbe>
 800a28c:	f04f 0900 	mov.w	r9, #0
 800a290:	f104 0a1a 	add.w	sl, r4, #26
 800a294:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a296:	425b      	negs	r3, r3
 800a298:	454b      	cmp	r3, r9
 800a29a:	dc01      	bgt.n	800a2a0 <_printf_float+0x2c0>
 800a29c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a29e:	e792      	b.n	800a1c6 <_printf_float+0x1e6>
 800a2a0:	2301      	movs	r3, #1
 800a2a2:	4652      	mov	r2, sl
 800a2a4:	4631      	mov	r1, r6
 800a2a6:	4628      	mov	r0, r5
 800a2a8:	47b8      	blx	r7
 800a2aa:	3001      	adds	r0, #1
 800a2ac:	f43f aef7 	beq.w	800a09e <_printf_float+0xbe>
 800a2b0:	f109 0901 	add.w	r9, r9, #1
 800a2b4:	e7ee      	b.n	800a294 <_printf_float+0x2b4>
 800a2b6:	bf00      	nop
 800a2b8:	7fefffff 	.word	0x7fefffff
 800a2bc:	0800ce45 	.word	0x0800ce45
 800a2c0:	0800ce49 	.word	0x0800ce49
 800a2c4:	0800ce4d 	.word	0x0800ce4d
 800a2c8:	0800ce51 	.word	0x0800ce51
 800a2cc:	0800ce55 	.word	0x0800ce55
 800a2d0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a2d2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2d4:	429a      	cmp	r2, r3
 800a2d6:	bfa8      	it	ge
 800a2d8:	461a      	movge	r2, r3
 800a2da:	2a00      	cmp	r2, #0
 800a2dc:	4691      	mov	r9, r2
 800a2de:	dc37      	bgt.n	800a350 <_printf_float+0x370>
 800a2e0:	f04f 0b00 	mov.w	fp, #0
 800a2e4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a2e8:	f104 021a 	add.w	r2, r4, #26
 800a2ec:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a2ee:	9305      	str	r3, [sp, #20]
 800a2f0:	eba3 0309 	sub.w	r3, r3, r9
 800a2f4:	455b      	cmp	r3, fp
 800a2f6:	dc33      	bgt.n	800a360 <_printf_float+0x380>
 800a2f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2fc:	429a      	cmp	r2, r3
 800a2fe:	db3b      	blt.n	800a378 <_printf_float+0x398>
 800a300:	6823      	ldr	r3, [r4, #0]
 800a302:	07da      	lsls	r2, r3, #31
 800a304:	d438      	bmi.n	800a378 <_printf_float+0x398>
 800a306:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 800a30a:	eba2 0903 	sub.w	r9, r2, r3
 800a30e:	9b05      	ldr	r3, [sp, #20]
 800a310:	1ad2      	subs	r2, r2, r3
 800a312:	4591      	cmp	r9, r2
 800a314:	bfa8      	it	ge
 800a316:	4691      	movge	r9, r2
 800a318:	f1b9 0f00 	cmp.w	r9, #0
 800a31c:	dc35      	bgt.n	800a38a <_printf_float+0x3aa>
 800a31e:	f04f 0800 	mov.w	r8, #0
 800a322:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a326:	f104 0a1a 	add.w	sl, r4, #26
 800a32a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a32e:	1a9b      	subs	r3, r3, r2
 800a330:	eba3 0309 	sub.w	r3, r3, r9
 800a334:	4543      	cmp	r3, r8
 800a336:	f77f af79 	ble.w	800a22c <_printf_float+0x24c>
 800a33a:	2301      	movs	r3, #1
 800a33c:	4652      	mov	r2, sl
 800a33e:	4631      	mov	r1, r6
 800a340:	4628      	mov	r0, r5
 800a342:	47b8      	blx	r7
 800a344:	3001      	adds	r0, #1
 800a346:	f43f aeaa 	beq.w	800a09e <_printf_float+0xbe>
 800a34a:	f108 0801 	add.w	r8, r8, #1
 800a34e:	e7ec      	b.n	800a32a <_printf_float+0x34a>
 800a350:	4613      	mov	r3, r2
 800a352:	4631      	mov	r1, r6
 800a354:	4642      	mov	r2, r8
 800a356:	4628      	mov	r0, r5
 800a358:	47b8      	blx	r7
 800a35a:	3001      	adds	r0, #1
 800a35c:	d1c0      	bne.n	800a2e0 <_printf_float+0x300>
 800a35e:	e69e      	b.n	800a09e <_printf_float+0xbe>
 800a360:	2301      	movs	r3, #1
 800a362:	4631      	mov	r1, r6
 800a364:	4628      	mov	r0, r5
 800a366:	9205      	str	r2, [sp, #20]
 800a368:	47b8      	blx	r7
 800a36a:	3001      	adds	r0, #1
 800a36c:	f43f ae97 	beq.w	800a09e <_printf_float+0xbe>
 800a370:	9a05      	ldr	r2, [sp, #20]
 800a372:	f10b 0b01 	add.w	fp, fp, #1
 800a376:	e7b9      	b.n	800a2ec <_printf_float+0x30c>
 800a378:	ee18 3a10 	vmov	r3, s16
 800a37c:	4652      	mov	r2, sl
 800a37e:	4631      	mov	r1, r6
 800a380:	4628      	mov	r0, r5
 800a382:	47b8      	blx	r7
 800a384:	3001      	adds	r0, #1
 800a386:	d1be      	bne.n	800a306 <_printf_float+0x326>
 800a388:	e689      	b.n	800a09e <_printf_float+0xbe>
 800a38a:	9a05      	ldr	r2, [sp, #20]
 800a38c:	464b      	mov	r3, r9
 800a38e:	4442      	add	r2, r8
 800a390:	4631      	mov	r1, r6
 800a392:	4628      	mov	r0, r5
 800a394:	47b8      	blx	r7
 800a396:	3001      	adds	r0, #1
 800a398:	d1c1      	bne.n	800a31e <_printf_float+0x33e>
 800a39a:	e680      	b.n	800a09e <_printf_float+0xbe>
 800a39c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a39e:	2a01      	cmp	r2, #1
 800a3a0:	dc01      	bgt.n	800a3a6 <_printf_float+0x3c6>
 800a3a2:	07db      	lsls	r3, r3, #31
 800a3a4:	d53a      	bpl.n	800a41c <_printf_float+0x43c>
 800a3a6:	2301      	movs	r3, #1
 800a3a8:	4642      	mov	r2, r8
 800a3aa:	4631      	mov	r1, r6
 800a3ac:	4628      	mov	r0, r5
 800a3ae:	47b8      	blx	r7
 800a3b0:	3001      	adds	r0, #1
 800a3b2:	f43f ae74 	beq.w	800a09e <_printf_float+0xbe>
 800a3b6:	ee18 3a10 	vmov	r3, s16
 800a3ba:	4652      	mov	r2, sl
 800a3bc:	4631      	mov	r1, r6
 800a3be:	4628      	mov	r0, r5
 800a3c0:	47b8      	blx	r7
 800a3c2:	3001      	adds	r0, #1
 800a3c4:	f43f ae6b 	beq.w	800a09e <_printf_float+0xbe>
 800a3c8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a3cc:	2200      	movs	r2, #0
 800a3ce:	2300      	movs	r3, #0
 800a3d0:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 800a3d4:	f7f6 fbb0 	bl	8000b38 <__aeabi_dcmpeq>
 800a3d8:	b9d8      	cbnz	r0, 800a412 <_printf_float+0x432>
 800a3da:	f10a 33ff 	add.w	r3, sl, #4294967295
 800a3de:	f108 0201 	add.w	r2, r8, #1
 800a3e2:	4631      	mov	r1, r6
 800a3e4:	4628      	mov	r0, r5
 800a3e6:	47b8      	blx	r7
 800a3e8:	3001      	adds	r0, #1
 800a3ea:	d10e      	bne.n	800a40a <_printf_float+0x42a>
 800a3ec:	e657      	b.n	800a09e <_printf_float+0xbe>
 800a3ee:	2301      	movs	r3, #1
 800a3f0:	4652      	mov	r2, sl
 800a3f2:	4631      	mov	r1, r6
 800a3f4:	4628      	mov	r0, r5
 800a3f6:	47b8      	blx	r7
 800a3f8:	3001      	adds	r0, #1
 800a3fa:	f43f ae50 	beq.w	800a09e <_printf_float+0xbe>
 800a3fe:	f108 0801 	add.w	r8, r8, #1
 800a402:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a404:	3b01      	subs	r3, #1
 800a406:	4543      	cmp	r3, r8
 800a408:	dcf1      	bgt.n	800a3ee <_printf_float+0x40e>
 800a40a:	464b      	mov	r3, r9
 800a40c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a410:	e6da      	b.n	800a1c8 <_printf_float+0x1e8>
 800a412:	f04f 0800 	mov.w	r8, #0
 800a416:	f104 0a1a 	add.w	sl, r4, #26
 800a41a:	e7f2      	b.n	800a402 <_printf_float+0x422>
 800a41c:	2301      	movs	r3, #1
 800a41e:	4642      	mov	r2, r8
 800a420:	e7df      	b.n	800a3e2 <_printf_float+0x402>
 800a422:	2301      	movs	r3, #1
 800a424:	464a      	mov	r2, r9
 800a426:	4631      	mov	r1, r6
 800a428:	4628      	mov	r0, r5
 800a42a:	47b8      	blx	r7
 800a42c:	3001      	adds	r0, #1
 800a42e:	f43f ae36 	beq.w	800a09e <_printf_float+0xbe>
 800a432:	f108 0801 	add.w	r8, r8, #1
 800a436:	68e3      	ldr	r3, [r4, #12]
 800a438:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a43a:	1a5b      	subs	r3, r3, r1
 800a43c:	4543      	cmp	r3, r8
 800a43e:	dcf0      	bgt.n	800a422 <_printf_float+0x442>
 800a440:	e6f8      	b.n	800a234 <_printf_float+0x254>
 800a442:	f04f 0800 	mov.w	r8, #0
 800a446:	f104 0919 	add.w	r9, r4, #25
 800a44a:	e7f4      	b.n	800a436 <_printf_float+0x456>

0800a44c <_printf_common>:
 800a44c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a450:	4616      	mov	r6, r2
 800a452:	4699      	mov	r9, r3
 800a454:	688a      	ldr	r2, [r1, #8]
 800a456:	690b      	ldr	r3, [r1, #16]
 800a458:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a45c:	4293      	cmp	r3, r2
 800a45e:	bfb8      	it	lt
 800a460:	4613      	movlt	r3, r2
 800a462:	6033      	str	r3, [r6, #0]
 800a464:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a468:	4607      	mov	r7, r0
 800a46a:	460c      	mov	r4, r1
 800a46c:	b10a      	cbz	r2, 800a472 <_printf_common+0x26>
 800a46e:	3301      	adds	r3, #1
 800a470:	6033      	str	r3, [r6, #0]
 800a472:	6823      	ldr	r3, [r4, #0]
 800a474:	0699      	lsls	r1, r3, #26
 800a476:	bf42      	ittt	mi
 800a478:	6833      	ldrmi	r3, [r6, #0]
 800a47a:	3302      	addmi	r3, #2
 800a47c:	6033      	strmi	r3, [r6, #0]
 800a47e:	6825      	ldr	r5, [r4, #0]
 800a480:	f015 0506 	ands.w	r5, r5, #6
 800a484:	d106      	bne.n	800a494 <_printf_common+0x48>
 800a486:	f104 0a19 	add.w	sl, r4, #25
 800a48a:	68e3      	ldr	r3, [r4, #12]
 800a48c:	6832      	ldr	r2, [r6, #0]
 800a48e:	1a9b      	subs	r3, r3, r2
 800a490:	42ab      	cmp	r3, r5
 800a492:	dc26      	bgt.n	800a4e2 <_printf_common+0x96>
 800a494:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a498:	1e13      	subs	r3, r2, #0
 800a49a:	6822      	ldr	r2, [r4, #0]
 800a49c:	bf18      	it	ne
 800a49e:	2301      	movne	r3, #1
 800a4a0:	0692      	lsls	r2, r2, #26
 800a4a2:	d42b      	bmi.n	800a4fc <_printf_common+0xb0>
 800a4a4:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4a8:	4649      	mov	r1, r9
 800a4aa:	4638      	mov	r0, r7
 800a4ac:	47c0      	blx	r8
 800a4ae:	3001      	adds	r0, #1
 800a4b0:	d01e      	beq.n	800a4f0 <_printf_common+0xa4>
 800a4b2:	6823      	ldr	r3, [r4, #0]
 800a4b4:	6922      	ldr	r2, [r4, #16]
 800a4b6:	f003 0306 	and.w	r3, r3, #6
 800a4ba:	2b04      	cmp	r3, #4
 800a4bc:	bf02      	ittt	eq
 800a4be:	68e5      	ldreq	r5, [r4, #12]
 800a4c0:	6833      	ldreq	r3, [r6, #0]
 800a4c2:	1aed      	subeq	r5, r5, r3
 800a4c4:	68a3      	ldr	r3, [r4, #8]
 800a4c6:	bf0c      	ite	eq
 800a4c8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a4cc:	2500      	movne	r5, #0
 800a4ce:	4293      	cmp	r3, r2
 800a4d0:	bfc4      	itt	gt
 800a4d2:	1a9b      	subgt	r3, r3, r2
 800a4d4:	18ed      	addgt	r5, r5, r3
 800a4d6:	2600      	movs	r6, #0
 800a4d8:	341a      	adds	r4, #26
 800a4da:	42b5      	cmp	r5, r6
 800a4dc:	d11a      	bne.n	800a514 <_printf_common+0xc8>
 800a4de:	2000      	movs	r0, #0
 800a4e0:	e008      	b.n	800a4f4 <_printf_common+0xa8>
 800a4e2:	2301      	movs	r3, #1
 800a4e4:	4652      	mov	r2, sl
 800a4e6:	4649      	mov	r1, r9
 800a4e8:	4638      	mov	r0, r7
 800a4ea:	47c0      	blx	r8
 800a4ec:	3001      	adds	r0, #1
 800a4ee:	d103      	bne.n	800a4f8 <_printf_common+0xac>
 800a4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800a4f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a4f8:	3501      	adds	r5, #1
 800a4fa:	e7c6      	b.n	800a48a <_printf_common+0x3e>
 800a4fc:	18e1      	adds	r1, r4, r3
 800a4fe:	1c5a      	adds	r2, r3, #1
 800a500:	2030      	movs	r0, #48	; 0x30
 800a502:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a506:	4422      	add	r2, r4
 800a508:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a50c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a510:	3302      	adds	r3, #2
 800a512:	e7c7      	b.n	800a4a4 <_printf_common+0x58>
 800a514:	2301      	movs	r3, #1
 800a516:	4622      	mov	r2, r4
 800a518:	4649      	mov	r1, r9
 800a51a:	4638      	mov	r0, r7
 800a51c:	47c0      	blx	r8
 800a51e:	3001      	adds	r0, #1
 800a520:	d0e6      	beq.n	800a4f0 <_printf_common+0xa4>
 800a522:	3601      	adds	r6, #1
 800a524:	e7d9      	b.n	800a4da <_printf_common+0x8e>
	...

0800a528 <_printf_i>:
 800a528:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a52c:	7e0f      	ldrb	r7, [r1, #24]
 800a52e:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a530:	2f78      	cmp	r7, #120	; 0x78
 800a532:	4691      	mov	r9, r2
 800a534:	4680      	mov	r8, r0
 800a536:	460c      	mov	r4, r1
 800a538:	469a      	mov	sl, r3
 800a53a:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a53e:	d807      	bhi.n	800a550 <_printf_i+0x28>
 800a540:	2f62      	cmp	r7, #98	; 0x62
 800a542:	d80a      	bhi.n	800a55a <_printf_i+0x32>
 800a544:	2f00      	cmp	r7, #0
 800a546:	f000 80d4 	beq.w	800a6f2 <_printf_i+0x1ca>
 800a54a:	2f58      	cmp	r7, #88	; 0x58
 800a54c:	f000 80c0 	beq.w	800a6d0 <_printf_i+0x1a8>
 800a550:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a554:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a558:	e03a      	b.n	800a5d0 <_printf_i+0xa8>
 800a55a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a55e:	2b15      	cmp	r3, #21
 800a560:	d8f6      	bhi.n	800a550 <_printf_i+0x28>
 800a562:	a101      	add	r1, pc, #4	; (adr r1, 800a568 <_printf_i+0x40>)
 800a564:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a568:	0800a5c1 	.word	0x0800a5c1
 800a56c:	0800a5d5 	.word	0x0800a5d5
 800a570:	0800a551 	.word	0x0800a551
 800a574:	0800a551 	.word	0x0800a551
 800a578:	0800a551 	.word	0x0800a551
 800a57c:	0800a551 	.word	0x0800a551
 800a580:	0800a5d5 	.word	0x0800a5d5
 800a584:	0800a551 	.word	0x0800a551
 800a588:	0800a551 	.word	0x0800a551
 800a58c:	0800a551 	.word	0x0800a551
 800a590:	0800a551 	.word	0x0800a551
 800a594:	0800a6d9 	.word	0x0800a6d9
 800a598:	0800a601 	.word	0x0800a601
 800a59c:	0800a693 	.word	0x0800a693
 800a5a0:	0800a551 	.word	0x0800a551
 800a5a4:	0800a551 	.word	0x0800a551
 800a5a8:	0800a6fb 	.word	0x0800a6fb
 800a5ac:	0800a551 	.word	0x0800a551
 800a5b0:	0800a601 	.word	0x0800a601
 800a5b4:	0800a551 	.word	0x0800a551
 800a5b8:	0800a551 	.word	0x0800a551
 800a5bc:	0800a69b 	.word	0x0800a69b
 800a5c0:	682b      	ldr	r3, [r5, #0]
 800a5c2:	1d1a      	adds	r2, r3, #4
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	602a      	str	r2, [r5, #0]
 800a5c8:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5cc:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a5d0:	2301      	movs	r3, #1
 800a5d2:	e09f      	b.n	800a714 <_printf_i+0x1ec>
 800a5d4:	6820      	ldr	r0, [r4, #0]
 800a5d6:	682b      	ldr	r3, [r5, #0]
 800a5d8:	0607      	lsls	r7, r0, #24
 800a5da:	f103 0104 	add.w	r1, r3, #4
 800a5de:	6029      	str	r1, [r5, #0]
 800a5e0:	d501      	bpl.n	800a5e6 <_printf_i+0xbe>
 800a5e2:	681e      	ldr	r6, [r3, #0]
 800a5e4:	e003      	b.n	800a5ee <_printf_i+0xc6>
 800a5e6:	0646      	lsls	r6, r0, #25
 800a5e8:	d5fb      	bpl.n	800a5e2 <_printf_i+0xba>
 800a5ea:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a5ee:	2e00      	cmp	r6, #0
 800a5f0:	da03      	bge.n	800a5fa <_printf_i+0xd2>
 800a5f2:	232d      	movs	r3, #45	; 0x2d
 800a5f4:	4276      	negs	r6, r6
 800a5f6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a5fa:	485a      	ldr	r0, [pc, #360]	; (800a764 <_printf_i+0x23c>)
 800a5fc:	230a      	movs	r3, #10
 800a5fe:	e012      	b.n	800a626 <_printf_i+0xfe>
 800a600:	682b      	ldr	r3, [r5, #0]
 800a602:	6820      	ldr	r0, [r4, #0]
 800a604:	1d19      	adds	r1, r3, #4
 800a606:	6029      	str	r1, [r5, #0]
 800a608:	0605      	lsls	r5, r0, #24
 800a60a:	d501      	bpl.n	800a610 <_printf_i+0xe8>
 800a60c:	681e      	ldr	r6, [r3, #0]
 800a60e:	e002      	b.n	800a616 <_printf_i+0xee>
 800a610:	0641      	lsls	r1, r0, #25
 800a612:	d5fb      	bpl.n	800a60c <_printf_i+0xe4>
 800a614:	881e      	ldrh	r6, [r3, #0]
 800a616:	4853      	ldr	r0, [pc, #332]	; (800a764 <_printf_i+0x23c>)
 800a618:	2f6f      	cmp	r7, #111	; 0x6f
 800a61a:	bf0c      	ite	eq
 800a61c:	2308      	moveq	r3, #8
 800a61e:	230a      	movne	r3, #10
 800a620:	2100      	movs	r1, #0
 800a622:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a626:	6865      	ldr	r5, [r4, #4]
 800a628:	60a5      	str	r5, [r4, #8]
 800a62a:	2d00      	cmp	r5, #0
 800a62c:	bfa2      	ittt	ge
 800a62e:	6821      	ldrge	r1, [r4, #0]
 800a630:	f021 0104 	bicge.w	r1, r1, #4
 800a634:	6021      	strge	r1, [r4, #0]
 800a636:	b90e      	cbnz	r6, 800a63c <_printf_i+0x114>
 800a638:	2d00      	cmp	r5, #0
 800a63a:	d04b      	beq.n	800a6d4 <_printf_i+0x1ac>
 800a63c:	4615      	mov	r5, r2
 800a63e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a642:	fb03 6711 	mls	r7, r3, r1, r6
 800a646:	5dc7      	ldrb	r7, [r0, r7]
 800a648:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a64c:	4637      	mov	r7, r6
 800a64e:	42bb      	cmp	r3, r7
 800a650:	460e      	mov	r6, r1
 800a652:	d9f4      	bls.n	800a63e <_printf_i+0x116>
 800a654:	2b08      	cmp	r3, #8
 800a656:	d10b      	bne.n	800a670 <_printf_i+0x148>
 800a658:	6823      	ldr	r3, [r4, #0]
 800a65a:	07de      	lsls	r6, r3, #31
 800a65c:	d508      	bpl.n	800a670 <_printf_i+0x148>
 800a65e:	6923      	ldr	r3, [r4, #16]
 800a660:	6861      	ldr	r1, [r4, #4]
 800a662:	4299      	cmp	r1, r3
 800a664:	bfde      	ittt	le
 800a666:	2330      	movle	r3, #48	; 0x30
 800a668:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a66c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a670:	1b52      	subs	r2, r2, r5
 800a672:	6122      	str	r2, [r4, #16]
 800a674:	f8cd a000 	str.w	sl, [sp]
 800a678:	464b      	mov	r3, r9
 800a67a:	aa03      	add	r2, sp, #12
 800a67c:	4621      	mov	r1, r4
 800a67e:	4640      	mov	r0, r8
 800a680:	f7ff fee4 	bl	800a44c <_printf_common>
 800a684:	3001      	adds	r0, #1
 800a686:	d14a      	bne.n	800a71e <_printf_i+0x1f6>
 800a688:	f04f 30ff 	mov.w	r0, #4294967295
 800a68c:	b004      	add	sp, #16
 800a68e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a692:	6823      	ldr	r3, [r4, #0]
 800a694:	f043 0320 	orr.w	r3, r3, #32
 800a698:	6023      	str	r3, [r4, #0]
 800a69a:	4833      	ldr	r0, [pc, #204]	; (800a768 <_printf_i+0x240>)
 800a69c:	2778      	movs	r7, #120	; 0x78
 800a69e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a6a2:	6823      	ldr	r3, [r4, #0]
 800a6a4:	6829      	ldr	r1, [r5, #0]
 800a6a6:	061f      	lsls	r7, r3, #24
 800a6a8:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6ac:	d402      	bmi.n	800a6b4 <_printf_i+0x18c>
 800a6ae:	065f      	lsls	r7, r3, #25
 800a6b0:	bf48      	it	mi
 800a6b2:	b2b6      	uxthmi	r6, r6
 800a6b4:	07df      	lsls	r7, r3, #31
 800a6b6:	bf48      	it	mi
 800a6b8:	f043 0320 	orrmi.w	r3, r3, #32
 800a6bc:	6029      	str	r1, [r5, #0]
 800a6be:	bf48      	it	mi
 800a6c0:	6023      	strmi	r3, [r4, #0]
 800a6c2:	b91e      	cbnz	r6, 800a6cc <_printf_i+0x1a4>
 800a6c4:	6823      	ldr	r3, [r4, #0]
 800a6c6:	f023 0320 	bic.w	r3, r3, #32
 800a6ca:	6023      	str	r3, [r4, #0]
 800a6cc:	2310      	movs	r3, #16
 800a6ce:	e7a7      	b.n	800a620 <_printf_i+0xf8>
 800a6d0:	4824      	ldr	r0, [pc, #144]	; (800a764 <_printf_i+0x23c>)
 800a6d2:	e7e4      	b.n	800a69e <_printf_i+0x176>
 800a6d4:	4615      	mov	r5, r2
 800a6d6:	e7bd      	b.n	800a654 <_printf_i+0x12c>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	6826      	ldr	r6, [r4, #0]
 800a6dc:	6961      	ldr	r1, [r4, #20]
 800a6de:	1d18      	adds	r0, r3, #4
 800a6e0:	6028      	str	r0, [r5, #0]
 800a6e2:	0635      	lsls	r5, r6, #24
 800a6e4:	681b      	ldr	r3, [r3, #0]
 800a6e6:	d501      	bpl.n	800a6ec <_printf_i+0x1c4>
 800a6e8:	6019      	str	r1, [r3, #0]
 800a6ea:	e002      	b.n	800a6f2 <_printf_i+0x1ca>
 800a6ec:	0670      	lsls	r0, r6, #25
 800a6ee:	d5fb      	bpl.n	800a6e8 <_printf_i+0x1c0>
 800a6f0:	8019      	strh	r1, [r3, #0]
 800a6f2:	2300      	movs	r3, #0
 800a6f4:	6123      	str	r3, [r4, #16]
 800a6f6:	4615      	mov	r5, r2
 800a6f8:	e7bc      	b.n	800a674 <_printf_i+0x14c>
 800a6fa:	682b      	ldr	r3, [r5, #0]
 800a6fc:	1d1a      	adds	r2, r3, #4
 800a6fe:	602a      	str	r2, [r5, #0]
 800a700:	681d      	ldr	r5, [r3, #0]
 800a702:	6862      	ldr	r2, [r4, #4]
 800a704:	2100      	movs	r1, #0
 800a706:	4628      	mov	r0, r5
 800a708:	f7f5 fd9a 	bl	8000240 <memchr>
 800a70c:	b108      	cbz	r0, 800a712 <_printf_i+0x1ea>
 800a70e:	1b40      	subs	r0, r0, r5
 800a710:	6060      	str	r0, [r4, #4]
 800a712:	6863      	ldr	r3, [r4, #4]
 800a714:	6123      	str	r3, [r4, #16]
 800a716:	2300      	movs	r3, #0
 800a718:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a71c:	e7aa      	b.n	800a674 <_printf_i+0x14c>
 800a71e:	6923      	ldr	r3, [r4, #16]
 800a720:	462a      	mov	r2, r5
 800a722:	4649      	mov	r1, r9
 800a724:	4640      	mov	r0, r8
 800a726:	47d0      	blx	sl
 800a728:	3001      	adds	r0, #1
 800a72a:	d0ad      	beq.n	800a688 <_printf_i+0x160>
 800a72c:	6823      	ldr	r3, [r4, #0]
 800a72e:	079b      	lsls	r3, r3, #30
 800a730:	d413      	bmi.n	800a75a <_printf_i+0x232>
 800a732:	68e0      	ldr	r0, [r4, #12]
 800a734:	9b03      	ldr	r3, [sp, #12]
 800a736:	4298      	cmp	r0, r3
 800a738:	bfb8      	it	lt
 800a73a:	4618      	movlt	r0, r3
 800a73c:	e7a6      	b.n	800a68c <_printf_i+0x164>
 800a73e:	2301      	movs	r3, #1
 800a740:	4632      	mov	r2, r6
 800a742:	4649      	mov	r1, r9
 800a744:	4640      	mov	r0, r8
 800a746:	47d0      	blx	sl
 800a748:	3001      	adds	r0, #1
 800a74a:	d09d      	beq.n	800a688 <_printf_i+0x160>
 800a74c:	3501      	adds	r5, #1
 800a74e:	68e3      	ldr	r3, [r4, #12]
 800a750:	9903      	ldr	r1, [sp, #12]
 800a752:	1a5b      	subs	r3, r3, r1
 800a754:	42ab      	cmp	r3, r5
 800a756:	dcf2      	bgt.n	800a73e <_printf_i+0x216>
 800a758:	e7eb      	b.n	800a732 <_printf_i+0x20a>
 800a75a:	2500      	movs	r5, #0
 800a75c:	f104 0619 	add.w	r6, r4, #25
 800a760:	e7f5      	b.n	800a74e <_printf_i+0x226>
 800a762:	bf00      	nop
 800a764:	0800ce57 	.word	0x0800ce57
 800a768:	0800ce68 	.word	0x0800ce68

0800a76c <std>:
 800a76c:	2300      	movs	r3, #0
 800a76e:	b510      	push	{r4, lr}
 800a770:	4604      	mov	r4, r0
 800a772:	e9c0 3300 	strd	r3, r3, [r0]
 800a776:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a77a:	6083      	str	r3, [r0, #8]
 800a77c:	8181      	strh	r1, [r0, #12]
 800a77e:	6643      	str	r3, [r0, #100]	; 0x64
 800a780:	81c2      	strh	r2, [r0, #14]
 800a782:	6183      	str	r3, [r0, #24]
 800a784:	4619      	mov	r1, r3
 800a786:	2208      	movs	r2, #8
 800a788:	305c      	adds	r0, #92	; 0x5c
 800a78a:	f000 f916 	bl	800a9ba <memset>
 800a78e:	4b05      	ldr	r3, [pc, #20]	; (800a7a4 <std+0x38>)
 800a790:	6263      	str	r3, [r4, #36]	; 0x24
 800a792:	4b05      	ldr	r3, [pc, #20]	; (800a7a8 <std+0x3c>)
 800a794:	62a3      	str	r3, [r4, #40]	; 0x28
 800a796:	4b05      	ldr	r3, [pc, #20]	; (800a7ac <std+0x40>)
 800a798:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a79a:	4b05      	ldr	r3, [pc, #20]	; (800a7b0 <std+0x44>)
 800a79c:	6224      	str	r4, [r4, #32]
 800a79e:	6323      	str	r3, [r4, #48]	; 0x30
 800a7a0:	bd10      	pop	{r4, pc}
 800a7a2:	bf00      	nop
 800a7a4:	0800a935 	.word	0x0800a935
 800a7a8:	0800a957 	.word	0x0800a957
 800a7ac:	0800a98f 	.word	0x0800a98f
 800a7b0:	0800a9b3 	.word	0x0800a9b3

0800a7b4 <stdio_exit_handler>:
 800a7b4:	4a02      	ldr	r2, [pc, #8]	; (800a7c0 <stdio_exit_handler+0xc>)
 800a7b6:	4903      	ldr	r1, [pc, #12]	; (800a7c4 <stdio_exit_handler+0x10>)
 800a7b8:	4803      	ldr	r0, [pc, #12]	; (800a7c8 <stdio_exit_handler+0x14>)
 800a7ba:	f000 b869 	b.w	800a890 <_fwalk_sglue>
 800a7be:	bf00      	nop
 800a7c0:	200000d0 	.word	0x200000d0
 800a7c4:	0800c559 	.word	0x0800c559
 800a7c8:	200000dc 	.word	0x200000dc

0800a7cc <cleanup_stdio>:
 800a7cc:	6841      	ldr	r1, [r0, #4]
 800a7ce:	4b0c      	ldr	r3, [pc, #48]	; (800a800 <cleanup_stdio+0x34>)
 800a7d0:	4299      	cmp	r1, r3
 800a7d2:	b510      	push	{r4, lr}
 800a7d4:	4604      	mov	r4, r0
 800a7d6:	d001      	beq.n	800a7dc <cleanup_stdio+0x10>
 800a7d8:	f001 febe 	bl	800c558 <_fflush_r>
 800a7dc:	68a1      	ldr	r1, [r4, #8]
 800a7de:	4b09      	ldr	r3, [pc, #36]	; (800a804 <cleanup_stdio+0x38>)
 800a7e0:	4299      	cmp	r1, r3
 800a7e2:	d002      	beq.n	800a7ea <cleanup_stdio+0x1e>
 800a7e4:	4620      	mov	r0, r4
 800a7e6:	f001 feb7 	bl	800c558 <_fflush_r>
 800a7ea:	68e1      	ldr	r1, [r4, #12]
 800a7ec:	4b06      	ldr	r3, [pc, #24]	; (800a808 <cleanup_stdio+0x3c>)
 800a7ee:	4299      	cmp	r1, r3
 800a7f0:	d004      	beq.n	800a7fc <cleanup_stdio+0x30>
 800a7f2:	4620      	mov	r0, r4
 800a7f4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a7f8:	f001 beae 	b.w	800c558 <_fflush_r>
 800a7fc:	bd10      	pop	{r4, pc}
 800a7fe:	bf00      	nop
 800a800:	20000778 	.word	0x20000778
 800a804:	200007e0 	.word	0x200007e0
 800a808:	20000848 	.word	0x20000848

0800a80c <global_stdio_init.part.0>:
 800a80c:	b510      	push	{r4, lr}
 800a80e:	4b0b      	ldr	r3, [pc, #44]	; (800a83c <global_stdio_init.part.0+0x30>)
 800a810:	4c0b      	ldr	r4, [pc, #44]	; (800a840 <global_stdio_init.part.0+0x34>)
 800a812:	4a0c      	ldr	r2, [pc, #48]	; (800a844 <global_stdio_init.part.0+0x38>)
 800a814:	601a      	str	r2, [r3, #0]
 800a816:	4620      	mov	r0, r4
 800a818:	2200      	movs	r2, #0
 800a81a:	2104      	movs	r1, #4
 800a81c:	f7ff ffa6 	bl	800a76c <std>
 800a820:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a824:	2201      	movs	r2, #1
 800a826:	2109      	movs	r1, #9
 800a828:	f7ff ffa0 	bl	800a76c <std>
 800a82c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a830:	2202      	movs	r2, #2
 800a832:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a836:	2112      	movs	r1, #18
 800a838:	f7ff bf98 	b.w	800a76c <std>
 800a83c:	200008b0 	.word	0x200008b0
 800a840:	20000778 	.word	0x20000778
 800a844:	0800a7b5 	.word	0x0800a7b5

0800a848 <__sfp_lock_acquire>:
 800a848:	4801      	ldr	r0, [pc, #4]	; (800a850 <__sfp_lock_acquire+0x8>)
 800a84a:	f000 b98f 	b.w	800ab6c <__retarget_lock_acquire_recursive>
 800a84e:	bf00      	nop
 800a850:	200008b9 	.word	0x200008b9

0800a854 <__sfp_lock_release>:
 800a854:	4801      	ldr	r0, [pc, #4]	; (800a85c <__sfp_lock_release+0x8>)
 800a856:	f000 b98a 	b.w	800ab6e <__retarget_lock_release_recursive>
 800a85a:	bf00      	nop
 800a85c:	200008b9 	.word	0x200008b9

0800a860 <__sinit>:
 800a860:	b510      	push	{r4, lr}
 800a862:	4604      	mov	r4, r0
 800a864:	f7ff fff0 	bl	800a848 <__sfp_lock_acquire>
 800a868:	6a23      	ldr	r3, [r4, #32]
 800a86a:	b11b      	cbz	r3, 800a874 <__sinit+0x14>
 800a86c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a870:	f7ff bff0 	b.w	800a854 <__sfp_lock_release>
 800a874:	4b04      	ldr	r3, [pc, #16]	; (800a888 <__sinit+0x28>)
 800a876:	6223      	str	r3, [r4, #32]
 800a878:	4b04      	ldr	r3, [pc, #16]	; (800a88c <__sinit+0x2c>)
 800a87a:	681b      	ldr	r3, [r3, #0]
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d1f5      	bne.n	800a86c <__sinit+0xc>
 800a880:	f7ff ffc4 	bl	800a80c <global_stdio_init.part.0>
 800a884:	e7f2      	b.n	800a86c <__sinit+0xc>
 800a886:	bf00      	nop
 800a888:	0800a7cd 	.word	0x0800a7cd
 800a88c:	200008b0 	.word	0x200008b0

0800a890 <_fwalk_sglue>:
 800a890:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a894:	4607      	mov	r7, r0
 800a896:	4688      	mov	r8, r1
 800a898:	4614      	mov	r4, r2
 800a89a:	2600      	movs	r6, #0
 800a89c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a8a0:	f1b9 0901 	subs.w	r9, r9, #1
 800a8a4:	d505      	bpl.n	800a8b2 <_fwalk_sglue+0x22>
 800a8a6:	6824      	ldr	r4, [r4, #0]
 800a8a8:	2c00      	cmp	r4, #0
 800a8aa:	d1f7      	bne.n	800a89c <_fwalk_sglue+0xc>
 800a8ac:	4630      	mov	r0, r6
 800a8ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a8b2:	89ab      	ldrh	r3, [r5, #12]
 800a8b4:	2b01      	cmp	r3, #1
 800a8b6:	d907      	bls.n	800a8c8 <_fwalk_sglue+0x38>
 800a8b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a8bc:	3301      	adds	r3, #1
 800a8be:	d003      	beq.n	800a8c8 <_fwalk_sglue+0x38>
 800a8c0:	4629      	mov	r1, r5
 800a8c2:	4638      	mov	r0, r7
 800a8c4:	47c0      	blx	r8
 800a8c6:	4306      	orrs	r6, r0
 800a8c8:	3568      	adds	r5, #104	; 0x68
 800a8ca:	e7e9      	b.n	800a8a0 <_fwalk_sglue+0x10>

0800a8cc <sniprintf>:
 800a8cc:	b40c      	push	{r2, r3}
 800a8ce:	b530      	push	{r4, r5, lr}
 800a8d0:	4b17      	ldr	r3, [pc, #92]	; (800a930 <sniprintf+0x64>)
 800a8d2:	1e0c      	subs	r4, r1, #0
 800a8d4:	681d      	ldr	r5, [r3, #0]
 800a8d6:	b09d      	sub	sp, #116	; 0x74
 800a8d8:	da08      	bge.n	800a8ec <sniprintf+0x20>
 800a8da:	238b      	movs	r3, #139	; 0x8b
 800a8dc:	602b      	str	r3, [r5, #0]
 800a8de:	f04f 30ff 	mov.w	r0, #4294967295
 800a8e2:	b01d      	add	sp, #116	; 0x74
 800a8e4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a8e8:	b002      	add	sp, #8
 800a8ea:	4770      	bx	lr
 800a8ec:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a8f0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a8f4:	bf14      	ite	ne
 800a8f6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a8fa:	4623      	moveq	r3, r4
 800a8fc:	9304      	str	r3, [sp, #16]
 800a8fe:	9307      	str	r3, [sp, #28]
 800a900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a904:	9002      	str	r0, [sp, #8]
 800a906:	9006      	str	r0, [sp, #24]
 800a908:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a90c:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a90e:	ab21      	add	r3, sp, #132	; 0x84
 800a910:	a902      	add	r1, sp, #8
 800a912:	4628      	mov	r0, r5
 800a914:	9301      	str	r3, [sp, #4]
 800a916:	f001 fc9b 	bl	800c250 <_svfiprintf_r>
 800a91a:	1c43      	adds	r3, r0, #1
 800a91c:	bfbc      	itt	lt
 800a91e:	238b      	movlt	r3, #139	; 0x8b
 800a920:	602b      	strlt	r3, [r5, #0]
 800a922:	2c00      	cmp	r4, #0
 800a924:	d0dd      	beq.n	800a8e2 <sniprintf+0x16>
 800a926:	9b02      	ldr	r3, [sp, #8]
 800a928:	2200      	movs	r2, #0
 800a92a:	701a      	strb	r2, [r3, #0]
 800a92c:	e7d9      	b.n	800a8e2 <sniprintf+0x16>
 800a92e:	bf00      	nop
 800a930:	20000128 	.word	0x20000128

0800a934 <__sread>:
 800a934:	b510      	push	{r4, lr}
 800a936:	460c      	mov	r4, r1
 800a938:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a93c:	f000 f8c8 	bl	800aad0 <_read_r>
 800a940:	2800      	cmp	r0, #0
 800a942:	bfab      	itete	ge
 800a944:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a946:	89a3      	ldrhlt	r3, [r4, #12]
 800a948:	181b      	addge	r3, r3, r0
 800a94a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a94e:	bfac      	ite	ge
 800a950:	6563      	strge	r3, [r4, #84]	; 0x54
 800a952:	81a3      	strhlt	r3, [r4, #12]
 800a954:	bd10      	pop	{r4, pc}

0800a956 <__swrite>:
 800a956:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a95a:	461f      	mov	r7, r3
 800a95c:	898b      	ldrh	r3, [r1, #12]
 800a95e:	05db      	lsls	r3, r3, #23
 800a960:	4605      	mov	r5, r0
 800a962:	460c      	mov	r4, r1
 800a964:	4616      	mov	r6, r2
 800a966:	d505      	bpl.n	800a974 <__swrite+0x1e>
 800a968:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a96c:	2302      	movs	r3, #2
 800a96e:	2200      	movs	r2, #0
 800a970:	f000 f89c 	bl	800aaac <_lseek_r>
 800a974:	89a3      	ldrh	r3, [r4, #12]
 800a976:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a97a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a97e:	81a3      	strh	r3, [r4, #12]
 800a980:	4632      	mov	r2, r6
 800a982:	463b      	mov	r3, r7
 800a984:	4628      	mov	r0, r5
 800a986:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a98a:	f000 b8b3 	b.w	800aaf4 <_write_r>

0800a98e <__sseek>:
 800a98e:	b510      	push	{r4, lr}
 800a990:	460c      	mov	r4, r1
 800a992:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a996:	f000 f889 	bl	800aaac <_lseek_r>
 800a99a:	1c43      	adds	r3, r0, #1
 800a99c:	89a3      	ldrh	r3, [r4, #12]
 800a99e:	bf15      	itete	ne
 800a9a0:	6560      	strne	r0, [r4, #84]	; 0x54
 800a9a2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a9a6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a9aa:	81a3      	strheq	r3, [r4, #12]
 800a9ac:	bf18      	it	ne
 800a9ae:	81a3      	strhne	r3, [r4, #12]
 800a9b0:	bd10      	pop	{r4, pc}

0800a9b2 <__sclose>:
 800a9b2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a9b6:	f000 b869 	b.w	800aa8c <_close_r>

0800a9ba <memset>:
 800a9ba:	4402      	add	r2, r0
 800a9bc:	4603      	mov	r3, r0
 800a9be:	4293      	cmp	r3, r2
 800a9c0:	d100      	bne.n	800a9c4 <memset+0xa>
 800a9c2:	4770      	bx	lr
 800a9c4:	f803 1b01 	strb.w	r1, [r3], #1
 800a9c8:	e7f9      	b.n	800a9be <memset+0x4>
	...

0800a9cc <strtok>:
 800a9cc:	4b16      	ldr	r3, [pc, #88]	; (800aa28 <strtok+0x5c>)
 800a9ce:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a9d0:	681e      	ldr	r6, [r3, #0]
 800a9d2:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a9d4:	4605      	mov	r5, r0
 800a9d6:	b9fc      	cbnz	r4, 800aa18 <strtok+0x4c>
 800a9d8:	2050      	movs	r0, #80	; 0x50
 800a9da:	9101      	str	r1, [sp, #4]
 800a9dc:	f000 ffae 	bl	800b93c <malloc>
 800a9e0:	9901      	ldr	r1, [sp, #4]
 800a9e2:	6470      	str	r0, [r6, #68]	; 0x44
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	b920      	cbnz	r0, 800a9f2 <strtok+0x26>
 800a9e8:	4b10      	ldr	r3, [pc, #64]	; (800aa2c <strtok+0x60>)
 800a9ea:	4811      	ldr	r0, [pc, #68]	; (800aa30 <strtok+0x64>)
 800a9ec:	215b      	movs	r1, #91	; 0x5b
 800a9ee:	f000 f8bf 	bl	800ab70 <__assert_func>
 800a9f2:	e9c0 4400 	strd	r4, r4, [r0]
 800a9f6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a9fa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a9fe:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800aa02:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800aa06:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800aa0a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800aa0e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800aa12:	6184      	str	r4, [r0, #24]
 800aa14:	7704      	strb	r4, [r0, #28]
 800aa16:	6244      	str	r4, [r0, #36]	; 0x24
 800aa18:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	4628      	mov	r0, r5
 800aa1e:	b002      	add	sp, #8
 800aa20:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800aa24:	f000 b806 	b.w	800aa34 <__strtok_r>
 800aa28:	20000128 	.word	0x20000128
 800aa2c:	0800ce79 	.word	0x0800ce79
 800aa30:	0800ce90 	.word	0x0800ce90

0800aa34 <__strtok_r>:
 800aa34:	b5f0      	push	{r4, r5, r6, r7, lr}
 800aa36:	b908      	cbnz	r0, 800aa3c <__strtok_r+0x8>
 800aa38:	6810      	ldr	r0, [r2, #0]
 800aa3a:	b188      	cbz	r0, 800aa60 <__strtok_r+0x2c>
 800aa3c:	4604      	mov	r4, r0
 800aa3e:	4620      	mov	r0, r4
 800aa40:	f814 5b01 	ldrb.w	r5, [r4], #1
 800aa44:	460f      	mov	r7, r1
 800aa46:	f817 6b01 	ldrb.w	r6, [r7], #1
 800aa4a:	b91e      	cbnz	r6, 800aa54 <__strtok_r+0x20>
 800aa4c:	b965      	cbnz	r5, 800aa68 <__strtok_r+0x34>
 800aa4e:	6015      	str	r5, [r2, #0]
 800aa50:	4628      	mov	r0, r5
 800aa52:	e005      	b.n	800aa60 <__strtok_r+0x2c>
 800aa54:	42b5      	cmp	r5, r6
 800aa56:	d1f6      	bne.n	800aa46 <__strtok_r+0x12>
 800aa58:	2b00      	cmp	r3, #0
 800aa5a:	d1f0      	bne.n	800aa3e <__strtok_r+0xa>
 800aa5c:	6014      	str	r4, [r2, #0]
 800aa5e:	7003      	strb	r3, [r0, #0]
 800aa60:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800aa62:	461c      	mov	r4, r3
 800aa64:	e00c      	b.n	800aa80 <__strtok_r+0x4c>
 800aa66:	b915      	cbnz	r5, 800aa6e <__strtok_r+0x3a>
 800aa68:	f814 3b01 	ldrb.w	r3, [r4], #1
 800aa6c:	460e      	mov	r6, r1
 800aa6e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800aa72:	42ab      	cmp	r3, r5
 800aa74:	d1f7      	bne.n	800aa66 <__strtok_r+0x32>
 800aa76:	2b00      	cmp	r3, #0
 800aa78:	d0f3      	beq.n	800aa62 <__strtok_r+0x2e>
 800aa7a:	2300      	movs	r3, #0
 800aa7c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800aa80:	6014      	str	r4, [r2, #0]
 800aa82:	e7ed      	b.n	800aa60 <__strtok_r+0x2c>

0800aa84 <_localeconv_r>:
 800aa84:	4800      	ldr	r0, [pc, #0]	; (800aa88 <_localeconv_r+0x4>)
 800aa86:	4770      	bx	lr
 800aa88:	2000021c 	.word	0x2000021c

0800aa8c <_close_r>:
 800aa8c:	b538      	push	{r3, r4, r5, lr}
 800aa8e:	4d06      	ldr	r5, [pc, #24]	; (800aaa8 <_close_r+0x1c>)
 800aa90:	2300      	movs	r3, #0
 800aa92:	4604      	mov	r4, r0
 800aa94:	4608      	mov	r0, r1
 800aa96:	602b      	str	r3, [r5, #0]
 800aa98:	f7f7 f83f 	bl	8001b1a <_close>
 800aa9c:	1c43      	adds	r3, r0, #1
 800aa9e:	d102      	bne.n	800aaa6 <_close_r+0x1a>
 800aaa0:	682b      	ldr	r3, [r5, #0]
 800aaa2:	b103      	cbz	r3, 800aaa6 <_close_r+0x1a>
 800aaa4:	6023      	str	r3, [r4, #0]
 800aaa6:	bd38      	pop	{r3, r4, r5, pc}
 800aaa8:	200008b4 	.word	0x200008b4

0800aaac <_lseek_r>:
 800aaac:	b538      	push	{r3, r4, r5, lr}
 800aaae:	4d07      	ldr	r5, [pc, #28]	; (800aacc <_lseek_r+0x20>)
 800aab0:	4604      	mov	r4, r0
 800aab2:	4608      	mov	r0, r1
 800aab4:	4611      	mov	r1, r2
 800aab6:	2200      	movs	r2, #0
 800aab8:	602a      	str	r2, [r5, #0]
 800aaba:	461a      	mov	r2, r3
 800aabc:	f7f7 f854 	bl	8001b68 <_lseek>
 800aac0:	1c43      	adds	r3, r0, #1
 800aac2:	d102      	bne.n	800aaca <_lseek_r+0x1e>
 800aac4:	682b      	ldr	r3, [r5, #0]
 800aac6:	b103      	cbz	r3, 800aaca <_lseek_r+0x1e>
 800aac8:	6023      	str	r3, [r4, #0]
 800aaca:	bd38      	pop	{r3, r4, r5, pc}
 800aacc:	200008b4 	.word	0x200008b4

0800aad0 <_read_r>:
 800aad0:	b538      	push	{r3, r4, r5, lr}
 800aad2:	4d07      	ldr	r5, [pc, #28]	; (800aaf0 <_read_r+0x20>)
 800aad4:	4604      	mov	r4, r0
 800aad6:	4608      	mov	r0, r1
 800aad8:	4611      	mov	r1, r2
 800aada:	2200      	movs	r2, #0
 800aadc:	602a      	str	r2, [r5, #0]
 800aade:	461a      	mov	r2, r3
 800aae0:	f7f6 ffe2 	bl	8001aa8 <_read>
 800aae4:	1c43      	adds	r3, r0, #1
 800aae6:	d102      	bne.n	800aaee <_read_r+0x1e>
 800aae8:	682b      	ldr	r3, [r5, #0]
 800aaea:	b103      	cbz	r3, 800aaee <_read_r+0x1e>
 800aaec:	6023      	str	r3, [r4, #0]
 800aaee:	bd38      	pop	{r3, r4, r5, pc}
 800aaf0:	200008b4 	.word	0x200008b4

0800aaf4 <_write_r>:
 800aaf4:	b538      	push	{r3, r4, r5, lr}
 800aaf6:	4d07      	ldr	r5, [pc, #28]	; (800ab14 <_write_r+0x20>)
 800aaf8:	4604      	mov	r4, r0
 800aafa:	4608      	mov	r0, r1
 800aafc:	4611      	mov	r1, r2
 800aafe:	2200      	movs	r2, #0
 800ab00:	602a      	str	r2, [r5, #0]
 800ab02:	461a      	mov	r2, r3
 800ab04:	f7f6 ffed 	bl	8001ae2 <_write>
 800ab08:	1c43      	adds	r3, r0, #1
 800ab0a:	d102      	bne.n	800ab12 <_write_r+0x1e>
 800ab0c:	682b      	ldr	r3, [r5, #0]
 800ab0e:	b103      	cbz	r3, 800ab12 <_write_r+0x1e>
 800ab10:	6023      	str	r3, [r4, #0]
 800ab12:	bd38      	pop	{r3, r4, r5, pc}
 800ab14:	200008b4 	.word	0x200008b4

0800ab18 <__errno>:
 800ab18:	4b01      	ldr	r3, [pc, #4]	; (800ab20 <__errno+0x8>)
 800ab1a:	6818      	ldr	r0, [r3, #0]
 800ab1c:	4770      	bx	lr
 800ab1e:	bf00      	nop
 800ab20:	20000128 	.word	0x20000128

0800ab24 <__libc_init_array>:
 800ab24:	b570      	push	{r4, r5, r6, lr}
 800ab26:	4d0d      	ldr	r5, [pc, #52]	; (800ab5c <__libc_init_array+0x38>)
 800ab28:	4c0d      	ldr	r4, [pc, #52]	; (800ab60 <__libc_init_array+0x3c>)
 800ab2a:	1b64      	subs	r4, r4, r5
 800ab2c:	10a4      	asrs	r4, r4, #2
 800ab2e:	2600      	movs	r6, #0
 800ab30:	42a6      	cmp	r6, r4
 800ab32:	d109      	bne.n	800ab48 <__libc_init_array+0x24>
 800ab34:	4d0b      	ldr	r5, [pc, #44]	; (800ab64 <__libc_init_array+0x40>)
 800ab36:	4c0c      	ldr	r4, [pc, #48]	; (800ab68 <__libc_init_array+0x44>)
 800ab38:	f002 f894 	bl	800cc64 <_init>
 800ab3c:	1b64      	subs	r4, r4, r5
 800ab3e:	10a4      	asrs	r4, r4, #2
 800ab40:	2600      	movs	r6, #0
 800ab42:	42a6      	cmp	r6, r4
 800ab44:	d105      	bne.n	800ab52 <__libc_init_array+0x2e>
 800ab46:	bd70      	pop	{r4, r5, r6, pc}
 800ab48:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab4c:	4798      	blx	r3
 800ab4e:	3601      	adds	r6, #1
 800ab50:	e7ee      	b.n	800ab30 <__libc_init_array+0xc>
 800ab52:	f855 3b04 	ldr.w	r3, [r5], #4
 800ab56:	4798      	blx	r3
 800ab58:	3601      	adds	r6, #1
 800ab5a:	e7f2      	b.n	800ab42 <__libc_init_array+0x1e>
 800ab5c:	0800d118 	.word	0x0800d118
 800ab60:	0800d118 	.word	0x0800d118
 800ab64:	0800d118 	.word	0x0800d118
 800ab68:	0800d11c 	.word	0x0800d11c

0800ab6c <__retarget_lock_acquire_recursive>:
 800ab6c:	4770      	bx	lr

0800ab6e <__retarget_lock_release_recursive>:
 800ab6e:	4770      	bx	lr

0800ab70 <__assert_func>:
 800ab70:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ab72:	4614      	mov	r4, r2
 800ab74:	461a      	mov	r2, r3
 800ab76:	4b09      	ldr	r3, [pc, #36]	; (800ab9c <__assert_func+0x2c>)
 800ab78:	681b      	ldr	r3, [r3, #0]
 800ab7a:	4605      	mov	r5, r0
 800ab7c:	68d8      	ldr	r0, [r3, #12]
 800ab7e:	b14c      	cbz	r4, 800ab94 <__assert_func+0x24>
 800ab80:	4b07      	ldr	r3, [pc, #28]	; (800aba0 <__assert_func+0x30>)
 800ab82:	9100      	str	r1, [sp, #0]
 800ab84:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ab88:	4906      	ldr	r1, [pc, #24]	; (800aba4 <__assert_func+0x34>)
 800ab8a:	462b      	mov	r3, r5
 800ab8c:	f001 fd0c 	bl	800c5a8 <fiprintf>
 800ab90:	f001 fd54 	bl	800c63c <abort>
 800ab94:	4b04      	ldr	r3, [pc, #16]	; (800aba8 <__assert_func+0x38>)
 800ab96:	461c      	mov	r4, r3
 800ab98:	e7f3      	b.n	800ab82 <__assert_func+0x12>
 800ab9a:	bf00      	nop
 800ab9c:	20000128 	.word	0x20000128
 800aba0:	0800ceea 	.word	0x0800ceea
 800aba4:	0800cef7 	.word	0x0800cef7
 800aba8:	0800cf25 	.word	0x0800cf25

0800abac <quorem>:
 800abac:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800abb0:	6903      	ldr	r3, [r0, #16]
 800abb2:	690c      	ldr	r4, [r1, #16]
 800abb4:	42a3      	cmp	r3, r4
 800abb6:	4607      	mov	r7, r0
 800abb8:	db7e      	blt.n	800acb8 <quorem+0x10c>
 800abba:	3c01      	subs	r4, #1
 800abbc:	f101 0814 	add.w	r8, r1, #20
 800abc0:	f100 0514 	add.w	r5, r0, #20
 800abc4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800abc8:	9301      	str	r3, [sp, #4]
 800abca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800abce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800abd2:	3301      	adds	r3, #1
 800abd4:	429a      	cmp	r2, r3
 800abd6:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800abda:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800abde:	fbb2 f6f3 	udiv	r6, r2, r3
 800abe2:	d331      	bcc.n	800ac48 <quorem+0x9c>
 800abe4:	f04f 0e00 	mov.w	lr, #0
 800abe8:	4640      	mov	r0, r8
 800abea:	46ac      	mov	ip, r5
 800abec:	46f2      	mov	sl, lr
 800abee:	f850 2b04 	ldr.w	r2, [r0], #4
 800abf2:	b293      	uxth	r3, r2
 800abf4:	fb06 e303 	mla	r3, r6, r3, lr
 800abf8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800abfc:	0c1a      	lsrs	r2, r3, #16
 800abfe:	b29b      	uxth	r3, r3
 800ac00:	ebaa 0303 	sub.w	r3, sl, r3
 800ac04:	f8dc a000 	ldr.w	sl, [ip]
 800ac08:	fa13 f38a 	uxtah	r3, r3, sl
 800ac0c:	fb06 220e 	mla	r2, r6, lr, r2
 800ac10:	9300      	str	r3, [sp, #0]
 800ac12:	9b00      	ldr	r3, [sp, #0]
 800ac14:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ac18:	b292      	uxth	r2, r2
 800ac1a:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ac1e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac22:	f8bd 3000 	ldrh.w	r3, [sp]
 800ac26:	4581      	cmp	r9, r0
 800ac28:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac2c:	f84c 3b04 	str.w	r3, [ip], #4
 800ac30:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ac34:	d2db      	bcs.n	800abee <quorem+0x42>
 800ac36:	f855 300b 	ldr.w	r3, [r5, fp]
 800ac3a:	b92b      	cbnz	r3, 800ac48 <quorem+0x9c>
 800ac3c:	9b01      	ldr	r3, [sp, #4]
 800ac3e:	3b04      	subs	r3, #4
 800ac40:	429d      	cmp	r5, r3
 800ac42:	461a      	mov	r2, r3
 800ac44:	d32c      	bcc.n	800aca0 <quorem+0xf4>
 800ac46:	613c      	str	r4, [r7, #16]
 800ac48:	4638      	mov	r0, r7
 800ac4a:	f001 f9a7 	bl	800bf9c <__mcmp>
 800ac4e:	2800      	cmp	r0, #0
 800ac50:	db22      	blt.n	800ac98 <quorem+0xec>
 800ac52:	3601      	adds	r6, #1
 800ac54:	4629      	mov	r1, r5
 800ac56:	2000      	movs	r0, #0
 800ac58:	f858 2b04 	ldr.w	r2, [r8], #4
 800ac5c:	f8d1 c000 	ldr.w	ip, [r1]
 800ac60:	b293      	uxth	r3, r2
 800ac62:	1ac3      	subs	r3, r0, r3
 800ac64:	0c12      	lsrs	r2, r2, #16
 800ac66:	fa13 f38c 	uxtah	r3, r3, ip
 800ac6a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800ac6e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ac72:	b29b      	uxth	r3, r3
 800ac74:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ac78:	45c1      	cmp	r9, r8
 800ac7a:	f841 3b04 	str.w	r3, [r1], #4
 800ac7e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800ac82:	d2e9      	bcs.n	800ac58 <quorem+0xac>
 800ac84:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ac88:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ac8c:	b922      	cbnz	r2, 800ac98 <quorem+0xec>
 800ac8e:	3b04      	subs	r3, #4
 800ac90:	429d      	cmp	r5, r3
 800ac92:	461a      	mov	r2, r3
 800ac94:	d30a      	bcc.n	800acac <quorem+0x100>
 800ac96:	613c      	str	r4, [r7, #16]
 800ac98:	4630      	mov	r0, r6
 800ac9a:	b003      	add	sp, #12
 800ac9c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aca0:	6812      	ldr	r2, [r2, #0]
 800aca2:	3b04      	subs	r3, #4
 800aca4:	2a00      	cmp	r2, #0
 800aca6:	d1ce      	bne.n	800ac46 <quorem+0x9a>
 800aca8:	3c01      	subs	r4, #1
 800acaa:	e7c9      	b.n	800ac40 <quorem+0x94>
 800acac:	6812      	ldr	r2, [r2, #0]
 800acae:	3b04      	subs	r3, #4
 800acb0:	2a00      	cmp	r2, #0
 800acb2:	d1f0      	bne.n	800ac96 <quorem+0xea>
 800acb4:	3c01      	subs	r4, #1
 800acb6:	e7eb      	b.n	800ac90 <quorem+0xe4>
 800acb8:	2000      	movs	r0, #0
 800acba:	e7ee      	b.n	800ac9a <quorem+0xee>
 800acbc:	0000      	movs	r0, r0
	...

0800acc0 <_dtoa_r>:
 800acc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acc4:	ed2d 8b04 	vpush	{d8-d9}
 800acc8:	69c5      	ldr	r5, [r0, #28]
 800acca:	b093      	sub	sp, #76	; 0x4c
 800accc:	ed8d 0b02 	vstr	d0, [sp, #8]
 800acd0:	ec57 6b10 	vmov	r6, r7, d0
 800acd4:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800acd8:	9107      	str	r1, [sp, #28]
 800acda:	4604      	mov	r4, r0
 800acdc:	920a      	str	r2, [sp, #40]	; 0x28
 800acde:	930d      	str	r3, [sp, #52]	; 0x34
 800ace0:	b975      	cbnz	r5, 800ad00 <_dtoa_r+0x40>
 800ace2:	2010      	movs	r0, #16
 800ace4:	f000 fe2a 	bl	800b93c <malloc>
 800ace8:	4602      	mov	r2, r0
 800acea:	61e0      	str	r0, [r4, #28]
 800acec:	b920      	cbnz	r0, 800acf8 <_dtoa_r+0x38>
 800acee:	4bae      	ldr	r3, [pc, #696]	; (800afa8 <_dtoa_r+0x2e8>)
 800acf0:	21ef      	movs	r1, #239	; 0xef
 800acf2:	48ae      	ldr	r0, [pc, #696]	; (800afac <_dtoa_r+0x2ec>)
 800acf4:	f7ff ff3c 	bl	800ab70 <__assert_func>
 800acf8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800acfc:	6005      	str	r5, [r0, #0]
 800acfe:	60c5      	str	r5, [r0, #12]
 800ad00:	69e3      	ldr	r3, [r4, #28]
 800ad02:	6819      	ldr	r1, [r3, #0]
 800ad04:	b151      	cbz	r1, 800ad1c <_dtoa_r+0x5c>
 800ad06:	685a      	ldr	r2, [r3, #4]
 800ad08:	604a      	str	r2, [r1, #4]
 800ad0a:	2301      	movs	r3, #1
 800ad0c:	4093      	lsls	r3, r2
 800ad0e:	608b      	str	r3, [r1, #8]
 800ad10:	4620      	mov	r0, r4
 800ad12:	f000 ff07 	bl	800bb24 <_Bfree>
 800ad16:	69e3      	ldr	r3, [r4, #28]
 800ad18:	2200      	movs	r2, #0
 800ad1a:	601a      	str	r2, [r3, #0]
 800ad1c:	1e3b      	subs	r3, r7, #0
 800ad1e:	bfbb      	ittet	lt
 800ad20:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800ad24:	9303      	strlt	r3, [sp, #12]
 800ad26:	2300      	movge	r3, #0
 800ad28:	2201      	movlt	r2, #1
 800ad2a:	bfac      	ite	ge
 800ad2c:	f8c8 3000 	strge.w	r3, [r8]
 800ad30:	f8c8 2000 	strlt.w	r2, [r8]
 800ad34:	4b9e      	ldr	r3, [pc, #632]	; (800afb0 <_dtoa_r+0x2f0>)
 800ad36:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800ad3a:	ea33 0308 	bics.w	r3, r3, r8
 800ad3e:	d11b      	bne.n	800ad78 <_dtoa_r+0xb8>
 800ad40:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad42:	f242 730f 	movw	r3, #9999	; 0x270f
 800ad46:	6013      	str	r3, [r2, #0]
 800ad48:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800ad4c:	4333      	orrs	r3, r6
 800ad4e:	f000 8593 	beq.w	800b878 <_dtoa_r+0xbb8>
 800ad52:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad54:	b963      	cbnz	r3, 800ad70 <_dtoa_r+0xb0>
 800ad56:	4b97      	ldr	r3, [pc, #604]	; (800afb4 <_dtoa_r+0x2f4>)
 800ad58:	e027      	b.n	800adaa <_dtoa_r+0xea>
 800ad5a:	4b97      	ldr	r3, [pc, #604]	; (800afb8 <_dtoa_r+0x2f8>)
 800ad5c:	9300      	str	r3, [sp, #0]
 800ad5e:	3308      	adds	r3, #8
 800ad60:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ad62:	6013      	str	r3, [r2, #0]
 800ad64:	9800      	ldr	r0, [sp, #0]
 800ad66:	b013      	add	sp, #76	; 0x4c
 800ad68:	ecbd 8b04 	vpop	{d8-d9}
 800ad6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad70:	4b90      	ldr	r3, [pc, #576]	; (800afb4 <_dtoa_r+0x2f4>)
 800ad72:	9300      	str	r3, [sp, #0]
 800ad74:	3303      	adds	r3, #3
 800ad76:	e7f3      	b.n	800ad60 <_dtoa_r+0xa0>
 800ad78:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ad7c:	2200      	movs	r2, #0
 800ad7e:	ec51 0b17 	vmov	r0, r1, d7
 800ad82:	eeb0 8a47 	vmov.f32	s16, s14
 800ad86:	eef0 8a67 	vmov.f32	s17, s15
 800ad8a:	2300      	movs	r3, #0
 800ad8c:	f7f5 fed4 	bl	8000b38 <__aeabi_dcmpeq>
 800ad90:	4681      	mov	r9, r0
 800ad92:	b160      	cbz	r0, 800adae <_dtoa_r+0xee>
 800ad94:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ad96:	2301      	movs	r3, #1
 800ad98:	6013      	str	r3, [r2, #0]
 800ad9a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ad9c:	2b00      	cmp	r3, #0
 800ad9e:	f000 8568 	beq.w	800b872 <_dtoa_r+0xbb2>
 800ada2:	4b86      	ldr	r3, [pc, #536]	; (800afbc <_dtoa_r+0x2fc>)
 800ada4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ada6:	6013      	str	r3, [r2, #0]
 800ada8:	3b01      	subs	r3, #1
 800adaa:	9300      	str	r3, [sp, #0]
 800adac:	e7da      	b.n	800ad64 <_dtoa_r+0xa4>
 800adae:	aa10      	add	r2, sp, #64	; 0x40
 800adb0:	a911      	add	r1, sp, #68	; 0x44
 800adb2:	4620      	mov	r0, r4
 800adb4:	eeb0 0a48 	vmov.f32	s0, s16
 800adb8:	eef0 0a68 	vmov.f32	s1, s17
 800adbc:	f001 f994 	bl	800c0e8 <__d2b>
 800adc0:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800adc4:	4682      	mov	sl, r0
 800adc6:	2d00      	cmp	r5, #0
 800adc8:	d07f      	beq.n	800aeca <_dtoa_r+0x20a>
 800adca:	ee18 3a90 	vmov	r3, s17
 800adce:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800add2:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800add6:	ec51 0b18 	vmov	r0, r1, d8
 800adda:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800adde:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ade2:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800ade6:	4619      	mov	r1, r3
 800ade8:	2200      	movs	r2, #0
 800adea:	4b75      	ldr	r3, [pc, #468]	; (800afc0 <_dtoa_r+0x300>)
 800adec:	f7f5 fa84 	bl	80002f8 <__aeabi_dsub>
 800adf0:	a367      	add	r3, pc, #412	; (adr r3, 800af90 <_dtoa_r+0x2d0>)
 800adf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800adf6:	f7f5 fc37 	bl	8000668 <__aeabi_dmul>
 800adfa:	a367      	add	r3, pc, #412	; (adr r3, 800af98 <_dtoa_r+0x2d8>)
 800adfc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae00:	f7f5 fa7c 	bl	80002fc <__adddf3>
 800ae04:	4606      	mov	r6, r0
 800ae06:	4628      	mov	r0, r5
 800ae08:	460f      	mov	r7, r1
 800ae0a:	f7f5 fbc3 	bl	8000594 <__aeabi_i2d>
 800ae0e:	a364      	add	r3, pc, #400	; (adr r3, 800afa0 <_dtoa_r+0x2e0>)
 800ae10:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae14:	f7f5 fc28 	bl	8000668 <__aeabi_dmul>
 800ae18:	4602      	mov	r2, r0
 800ae1a:	460b      	mov	r3, r1
 800ae1c:	4630      	mov	r0, r6
 800ae1e:	4639      	mov	r1, r7
 800ae20:	f7f5 fa6c 	bl	80002fc <__adddf3>
 800ae24:	4606      	mov	r6, r0
 800ae26:	460f      	mov	r7, r1
 800ae28:	f7f5 fece 	bl	8000bc8 <__aeabi_d2iz>
 800ae2c:	2200      	movs	r2, #0
 800ae2e:	4683      	mov	fp, r0
 800ae30:	2300      	movs	r3, #0
 800ae32:	4630      	mov	r0, r6
 800ae34:	4639      	mov	r1, r7
 800ae36:	f7f5 fe89 	bl	8000b4c <__aeabi_dcmplt>
 800ae3a:	b148      	cbz	r0, 800ae50 <_dtoa_r+0x190>
 800ae3c:	4658      	mov	r0, fp
 800ae3e:	f7f5 fba9 	bl	8000594 <__aeabi_i2d>
 800ae42:	4632      	mov	r2, r6
 800ae44:	463b      	mov	r3, r7
 800ae46:	f7f5 fe77 	bl	8000b38 <__aeabi_dcmpeq>
 800ae4a:	b908      	cbnz	r0, 800ae50 <_dtoa_r+0x190>
 800ae4c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae50:	f1bb 0f16 	cmp.w	fp, #22
 800ae54:	d857      	bhi.n	800af06 <_dtoa_r+0x246>
 800ae56:	4b5b      	ldr	r3, [pc, #364]	; (800afc4 <_dtoa_r+0x304>)
 800ae58:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ae5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae60:	ec51 0b18 	vmov	r0, r1, d8
 800ae64:	f7f5 fe72 	bl	8000b4c <__aeabi_dcmplt>
 800ae68:	2800      	cmp	r0, #0
 800ae6a:	d04e      	beq.n	800af0a <_dtoa_r+0x24a>
 800ae6c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800ae70:	2300      	movs	r3, #0
 800ae72:	930c      	str	r3, [sp, #48]	; 0x30
 800ae74:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800ae76:	1b5b      	subs	r3, r3, r5
 800ae78:	1e5a      	subs	r2, r3, #1
 800ae7a:	bf45      	ittet	mi
 800ae7c:	f1c3 0301 	rsbmi	r3, r3, #1
 800ae80:	9305      	strmi	r3, [sp, #20]
 800ae82:	2300      	movpl	r3, #0
 800ae84:	2300      	movmi	r3, #0
 800ae86:	9206      	str	r2, [sp, #24]
 800ae88:	bf54      	ite	pl
 800ae8a:	9305      	strpl	r3, [sp, #20]
 800ae8c:	9306      	strmi	r3, [sp, #24]
 800ae8e:	f1bb 0f00 	cmp.w	fp, #0
 800ae92:	db3c      	blt.n	800af0e <_dtoa_r+0x24e>
 800ae94:	9b06      	ldr	r3, [sp, #24]
 800ae96:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800ae9a:	445b      	add	r3, fp
 800ae9c:	9306      	str	r3, [sp, #24]
 800ae9e:	2300      	movs	r3, #0
 800aea0:	9308      	str	r3, [sp, #32]
 800aea2:	9b07      	ldr	r3, [sp, #28]
 800aea4:	2b09      	cmp	r3, #9
 800aea6:	d868      	bhi.n	800af7a <_dtoa_r+0x2ba>
 800aea8:	2b05      	cmp	r3, #5
 800aeaa:	bfc4      	itt	gt
 800aeac:	3b04      	subgt	r3, #4
 800aeae:	9307      	strgt	r3, [sp, #28]
 800aeb0:	9b07      	ldr	r3, [sp, #28]
 800aeb2:	f1a3 0302 	sub.w	r3, r3, #2
 800aeb6:	bfcc      	ite	gt
 800aeb8:	2500      	movgt	r5, #0
 800aeba:	2501      	movle	r5, #1
 800aebc:	2b03      	cmp	r3, #3
 800aebe:	f200 8085 	bhi.w	800afcc <_dtoa_r+0x30c>
 800aec2:	e8df f003 	tbb	[pc, r3]
 800aec6:	3b2e      	.short	0x3b2e
 800aec8:	5839      	.short	0x5839
 800aeca:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800aece:	441d      	add	r5, r3
 800aed0:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800aed4:	2b20      	cmp	r3, #32
 800aed6:	bfc1      	itttt	gt
 800aed8:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800aedc:	fa08 f803 	lslgt.w	r8, r8, r3
 800aee0:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800aee4:	fa26 f303 	lsrgt.w	r3, r6, r3
 800aee8:	bfd6      	itet	le
 800aeea:	f1c3 0320 	rsble	r3, r3, #32
 800aeee:	ea48 0003 	orrgt.w	r0, r8, r3
 800aef2:	fa06 f003 	lslle.w	r0, r6, r3
 800aef6:	f7f5 fb3d 	bl	8000574 <__aeabi_ui2d>
 800aefa:	2201      	movs	r2, #1
 800aefc:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800af00:	3d01      	subs	r5, #1
 800af02:	920e      	str	r2, [sp, #56]	; 0x38
 800af04:	e76f      	b.n	800ade6 <_dtoa_r+0x126>
 800af06:	2301      	movs	r3, #1
 800af08:	e7b3      	b.n	800ae72 <_dtoa_r+0x1b2>
 800af0a:	900c      	str	r0, [sp, #48]	; 0x30
 800af0c:	e7b2      	b.n	800ae74 <_dtoa_r+0x1b4>
 800af0e:	9b05      	ldr	r3, [sp, #20]
 800af10:	eba3 030b 	sub.w	r3, r3, fp
 800af14:	9305      	str	r3, [sp, #20]
 800af16:	f1cb 0300 	rsb	r3, fp, #0
 800af1a:	9308      	str	r3, [sp, #32]
 800af1c:	2300      	movs	r3, #0
 800af1e:	930b      	str	r3, [sp, #44]	; 0x2c
 800af20:	e7bf      	b.n	800aea2 <_dtoa_r+0x1e2>
 800af22:	2300      	movs	r3, #0
 800af24:	9309      	str	r3, [sp, #36]	; 0x24
 800af26:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af28:	2b00      	cmp	r3, #0
 800af2a:	dc52      	bgt.n	800afd2 <_dtoa_r+0x312>
 800af2c:	2301      	movs	r3, #1
 800af2e:	9301      	str	r3, [sp, #4]
 800af30:	9304      	str	r3, [sp, #16]
 800af32:	461a      	mov	r2, r3
 800af34:	920a      	str	r2, [sp, #40]	; 0x28
 800af36:	e00b      	b.n	800af50 <_dtoa_r+0x290>
 800af38:	2301      	movs	r3, #1
 800af3a:	e7f3      	b.n	800af24 <_dtoa_r+0x264>
 800af3c:	2300      	movs	r3, #0
 800af3e:	9309      	str	r3, [sp, #36]	; 0x24
 800af40:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800af42:	445b      	add	r3, fp
 800af44:	9301      	str	r3, [sp, #4]
 800af46:	3301      	adds	r3, #1
 800af48:	2b01      	cmp	r3, #1
 800af4a:	9304      	str	r3, [sp, #16]
 800af4c:	bfb8      	it	lt
 800af4e:	2301      	movlt	r3, #1
 800af50:	69e0      	ldr	r0, [r4, #28]
 800af52:	2100      	movs	r1, #0
 800af54:	2204      	movs	r2, #4
 800af56:	f102 0614 	add.w	r6, r2, #20
 800af5a:	429e      	cmp	r6, r3
 800af5c:	d93d      	bls.n	800afda <_dtoa_r+0x31a>
 800af5e:	6041      	str	r1, [r0, #4]
 800af60:	4620      	mov	r0, r4
 800af62:	f000 fd9f 	bl	800baa4 <_Balloc>
 800af66:	9000      	str	r0, [sp, #0]
 800af68:	2800      	cmp	r0, #0
 800af6a:	d139      	bne.n	800afe0 <_dtoa_r+0x320>
 800af6c:	4b16      	ldr	r3, [pc, #88]	; (800afc8 <_dtoa_r+0x308>)
 800af6e:	4602      	mov	r2, r0
 800af70:	f240 11af 	movw	r1, #431	; 0x1af
 800af74:	e6bd      	b.n	800acf2 <_dtoa_r+0x32>
 800af76:	2301      	movs	r3, #1
 800af78:	e7e1      	b.n	800af3e <_dtoa_r+0x27e>
 800af7a:	2501      	movs	r5, #1
 800af7c:	2300      	movs	r3, #0
 800af7e:	9307      	str	r3, [sp, #28]
 800af80:	9509      	str	r5, [sp, #36]	; 0x24
 800af82:	f04f 33ff 	mov.w	r3, #4294967295
 800af86:	9301      	str	r3, [sp, #4]
 800af88:	9304      	str	r3, [sp, #16]
 800af8a:	2200      	movs	r2, #0
 800af8c:	2312      	movs	r3, #18
 800af8e:	e7d1      	b.n	800af34 <_dtoa_r+0x274>
 800af90:	636f4361 	.word	0x636f4361
 800af94:	3fd287a7 	.word	0x3fd287a7
 800af98:	8b60c8b3 	.word	0x8b60c8b3
 800af9c:	3fc68a28 	.word	0x3fc68a28
 800afa0:	509f79fb 	.word	0x509f79fb
 800afa4:	3fd34413 	.word	0x3fd34413
 800afa8:	0800ce79 	.word	0x0800ce79
 800afac:	0800cf33 	.word	0x0800cf33
 800afb0:	7ff00000 	.word	0x7ff00000
 800afb4:	0800cf2f 	.word	0x0800cf2f
 800afb8:	0800cf26 	.word	0x0800cf26
 800afbc:	0800ce56 	.word	0x0800ce56
 800afc0:	3ff80000 	.word	0x3ff80000
 800afc4:	0800d020 	.word	0x0800d020
 800afc8:	0800cf8b 	.word	0x0800cf8b
 800afcc:	2301      	movs	r3, #1
 800afce:	9309      	str	r3, [sp, #36]	; 0x24
 800afd0:	e7d7      	b.n	800af82 <_dtoa_r+0x2c2>
 800afd2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afd4:	9301      	str	r3, [sp, #4]
 800afd6:	9304      	str	r3, [sp, #16]
 800afd8:	e7ba      	b.n	800af50 <_dtoa_r+0x290>
 800afda:	3101      	adds	r1, #1
 800afdc:	0052      	lsls	r2, r2, #1
 800afde:	e7ba      	b.n	800af56 <_dtoa_r+0x296>
 800afe0:	69e3      	ldr	r3, [r4, #28]
 800afe2:	9a00      	ldr	r2, [sp, #0]
 800afe4:	601a      	str	r2, [r3, #0]
 800afe6:	9b04      	ldr	r3, [sp, #16]
 800afe8:	2b0e      	cmp	r3, #14
 800afea:	f200 80a8 	bhi.w	800b13e <_dtoa_r+0x47e>
 800afee:	2d00      	cmp	r5, #0
 800aff0:	f000 80a5 	beq.w	800b13e <_dtoa_r+0x47e>
 800aff4:	f1bb 0f00 	cmp.w	fp, #0
 800aff8:	dd38      	ble.n	800b06c <_dtoa_r+0x3ac>
 800affa:	4bc0      	ldr	r3, [pc, #768]	; (800b2fc <_dtoa_r+0x63c>)
 800affc:	f00b 020f 	and.w	r2, fp, #15
 800b000:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b004:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800b008:	e9d3 6700 	ldrd	r6, r7, [r3]
 800b00c:	ea4f 182b 	mov.w	r8, fp, asr #4
 800b010:	d019      	beq.n	800b046 <_dtoa_r+0x386>
 800b012:	4bbb      	ldr	r3, [pc, #748]	; (800b300 <_dtoa_r+0x640>)
 800b014:	ec51 0b18 	vmov	r0, r1, d8
 800b018:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b01c:	f7f5 fc4e 	bl	80008bc <__aeabi_ddiv>
 800b020:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b024:	f008 080f 	and.w	r8, r8, #15
 800b028:	2503      	movs	r5, #3
 800b02a:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800b300 <_dtoa_r+0x640>
 800b02e:	f1b8 0f00 	cmp.w	r8, #0
 800b032:	d10a      	bne.n	800b04a <_dtoa_r+0x38a>
 800b034:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800b038:	4632      	mov	r2, r6
 800b03a:	463b      	mov	r3, r7
 800b03c:	f7f5 fc3e 	bl	80008bc <__aeabi_ddiv>
 800b040:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b044:	e02b      	b.n	800b09e <_dtoa_r+0x3de>
 800b046:	2502      	movs	r5, #2
 800b048:	e7ef      	b.n	800b02a <_dtoa_r+0x36a>
 800b04a:	f018 0f01 	tst.w	r8, #1
 800b04e:	d008      	beq.n	800b062 <_dtoa_r+0x3a2>
 800b050:	4630      	mov	r0, r6
 800b052:	4639      	mov	r1, r7
 800b054:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b058:	f7f5 fb06 	bl	8000668 <__aeabi_dmul>
 800b05c:	3501      	adds	r5, #1
 800b05e:	4606      	mov	r6, r0
 800b060:	460f      	mov	r7, r1
 800b062:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b066:	f109 0908 	add.w	r9, r9, #8
 800b06a:	e7e0      	b.n	800b02e <_dtoa_r+0x36e>
 800b06c:	f000 809f 	beq.w	800b1ae <_dtoa_r+0x4ee>
 800b070:	f1cb 0600 	rsb	r6, fp, #0
 800b074:	4ba1      	ldr	r3, [pc, #644]	; (800b2fc <_dtoa_r+0x63c>)
 800b076:	4fa2      	ldr	r7, [pc, #648]	; (800b300 <_dtoa_r+0x640>)
 800b078:	f006 020f 	and.w	r2, r6, #15
 800b07c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b080:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b084:	ec51 0b18 	vmov	r0, r1, d8
 800b088:	f7f5 faee 	bl	8000668 <__aeabi_dmul>
 800b08c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b090:	1136      	asrs	r6, r6, #4
 800b092:	2300      	movs	r3, #0
 800b094:	2502      	movs	r5, #2
 800b096:	2e00      	cmp	r6, #0
 800b098:	d17e      	bne.n	800b198 <_dtoa_r+0x4d8>
 800b09a:	2b00      	cmp	r3, #0
 800b09c:	d1d0      	bne.n	800b040 <_dtoa_r+0x380>
 800b09e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b0a0:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b0a4:	2b00      	cmp	r3, #0
 800b0a6:	f000 8084 	beq.w	800b1b2 <_dtoa_r+0x4f2>
 800b0aa:	4b96      	ldr	r3, [pc, #600]	; (800b304 <_dtoa_r+0x644>)
 800b0ac:	2200      	movs	r2, #0
 800b0ae:	4640      	mov	r0, r8
 800b0b0:	4649      	mov	r1, r9
 800b0b2:	f7f5 fd4b 	bl	8000b4c <__aeabi_dcmplt>
 800b0b6:	2800      	cmp	r0, #0
 800b0b8:	d07b      	beq.n	800b1b2 <_dtoa_r+0x4f2>
 800b0ba:	9b04      	ldr	r3, [sp, #16]
 800b0bc:	2b00      	cmp	r3, #0
 800b0be:	d078      	beq.n	800b1b2 <_dtoa_r+0x4f2>
 800b0c0:	9b01      	ldr	r3, [sp, #4]
 800b0c2:	2b00      	cmp	r3, #0
 800b0c4:	dd39      	ble.n	800b13a <_dtoa_r+0x47a>
 800b0c6:	4b90      	ldr	r3, [pc, #576]	; (800b308 <_dtoa_r+0x648>)
 800b0c8:	2200      	movs	r2, #0
 800b0ca:	4640      	mov	r0, r8
 800b0cc:	4649      	mov	r1, r9
 800b0ce:	f7f5 facb 	bl	8000668 <__aeabi_dmul>
 800b0d2:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b0d6:	9e01      	ldr	r6, [sp, #4]
 800b0d8:	f10b 37ff 	add.w	r7, fp, #4294967295
 800b0dc:	3501      	adds	r5, #1
 800b0de:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800b0e2:	4628      	mov	r0, r5
 800b0e4:	f7f5 fa56 	bl	8000594 <__aeabi_i2d>
 800b0e8:	4642      	mov	r2, r8
 800b0ea:	464b      	mov	r3, r9
 800b0ec:	f7f5 fabc 	bl	8000668 <__aeabi_dmul>
 800b0f0:	4b86      	ldr	r3, [pc, #536]	; (800b30c <_dtoa_r+0x64c>)
 800b0f2:	2200      	movs	r2, #0
 800b0f4:	f7f5 f902 	bl	80002fc <__adddf3>
 800b0f8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800b0fc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800b100:	9303      	str	r3, [sp, #12]
 800b102:	2e00      	cmp	r6, #0
 800b104:	d158      	bne.n	800b1b8 <_dtoa_r+0x4f8>
 800b106:	4b82      	ldr	r3, [pc, #520]	; (800b310 <_dtoa_r+0x650>)
 800b108:	2200      	movs	r2, #0
 800b10a:	4640      	mov	r0, r8
 800b10c:	4649      	mov	r1, r9
 800b10e:	f7f5 f8f3 	bl	80002f8 <__aeabi_dsub>
 800b112:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b116:	4680      	mov	r8, r0
 800b118:	4689      	mov	r9, r1
 800b11a:	f7f5 fd35 	bl	8000b88 <__aeabi_dcmpgt>
 800b11e:	2800      	cmp	r0, #0
 800b120:	f040 8296 	bne.w	800b650 <_dtoa_r+0x990>
 800b124:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800b128:	4640      	mov	r0, r8
 800b12a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b12e:	4649      	mov	r1, r9
 800b130:	f7f5 fd0c 	bl	8000b4c <__aeabi_dcmplt>
 800b134:	2800      	cmp	r0, #0
 800b136:	f040 8289 	bne.w	800b64c <_dtoa_r+0x98c>
 800b13a:	ed8d 8b02 	vstr	d8, [sp, #8]
 800b13e:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b140:	2b00      	cmp	r3, #0
 800b142:	f2c0 814e 	blt.w	800b3e2 <_dtoa_r+0x722>
 800b146:	f1bb 0f0e 	cmp.w	fp, #14
 800b14a:	f300 814a 	bgt.w	800b3e2 <_dtoa_r+0x722>
 800b14e:	4b6b      	ldr	r3, [pc, #428]	; (800b2fc <_dtoa_r+0x63c>)
 800b150:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800b154:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b15a:	2b00      	cmp	r3, #0
 800b15c:	f280 80dc 	bge.w	800b318 <_dtoa_r+0x658>
 800b160:	9b04      	ldr	r3, [sp, #16]
 800b162:	2b00      	cmp	r3, #0
 800b164:	f300 80d8 	bgt.w	800b318 <_dtoa_r+0x658>
 800b168:	f040 826f 	bne.w	800b64a <_dtoa_r+0x98a>
 800b16c:	4b68      	ldr	r3, [pc, #416]	; (800b310 <_dtoa_r+0x650>)
 800b16e:	2200      	movs	r2, #0
 800b170:	4640      	mov	r0, r8
 800b172:	4649      	mov	r1, r9
 800b174:	f7f5 fa78 	bl	8000668 <__aeabi_dmul>
 800b178:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800b17c:	f7f5 fcfa 	bl	8000b74 <__aeabi_dcmpge>
 800b180:	9e04      	ldr	r6, [sp, #16]
 800b182:	4637      	mov	r7, r6
 800b184:	2800      	cmp	r0, #0
 800b186:	f040 8245 	bne.w	800b614 <_dtoa_r+0x954>
 800b18a:	9d00      	ldr	r5, [sp, #0]
 800b18c:	2331      	movs	r3, #49	; 0x31
 800b18e:	f805 3b01 	strb.w	r3, [r5], #1
 800b192:	f10b 0b01 	add.w	fp, fp, #1
 800b196:	e241      	b.n	800b61c <_dtoa_r+0x95c>
 800b198:	07f2      	lsls	r2, r6, #31
 800b19a:	d505      	bpl.n	800b1a8 <_dtoa_r+0x4e8>
 800b19c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b1a0:	f7f5 fa62 	bl	8000668 <__aeabi_dmul>
 800b1a4:	3501      	adds	r5, #1
 800b1a6:	2301      	movs	r3, #1
 800b1a8:	1076      	asrs	r6, r6, #1
 800b1aa:	3708      	adds	r7, #8
 800b1ac:	e773      	b.n	800b096 <_dtoa_r+0x3d6>
 800b1ae:	2502      	movs	r5, #2
 800b1b0:	e775      	b.n	800b09e <_dtoa_r+0x3de>
 800b1b2:	9e04      	ldr	r6, [sp, #16]
 800b1b4:	465f      	mov	r7, fp
 800b1b6:	e792      	b.n	800b0de <_dtoa_r+0x41e>
 800b1b8:	9900      	ldr	r1, [sp, #0]
 800b1ba:	4b50      	ldr	r3, [pc, #320]	; (800b2fc <_dtoa_r+0x63c>)
 800b1bc:	ed9d 7b02 	vldr	d7, [sp, #8]
 800b1c0:	4431      	add	r1, r6
 800b1c2:	9102      	str	r1, [sp, #8]
 800b1c4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b1c6:	eeb0 9a47 	vmov.f32	s18, s14
 800b1ca:	eef0 9a67 	vmov.f32	s19, s15
 800b1ce:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b1d2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b1d6:	2900      	cmp	r1, #0
 800b1d8:	d044      	beq.n	800b264 <_dtoa_r+0x5a4>
 800b1da:	494e      	ldr	r1, [pc, #312]	; (800b314 <_dtoa_r+0x654>)
 800b1dc:	2000      	movs	r0, #0
 800b1de:	f7f5 fb6d 	bl	80008bc <__aeabi_ddiv>
 800b1e2:	ec53 2b19 	vmov	r2, r3, d9
 800b1e6:	f7f5 f887 	bl	80002f8 <__aeabi_dsub>
 800b1ea:	9d00      	ldr	r5, [sp, #0]
 800b1ec:	ec41 0b19 	vmov	d9, r0, r1
 800b1f0:	4649      	mov	r1, r9
 800b1f2:	4640      	mov	r0, r8
 800b1f4:	f7f5 fce8 	bl	8000bc8 <__aeabi_d2iz>
 800b1f8:	4606      	mov	r6, r0
 800b1fa:	f7f5 f9cb 	bl	8000594 <__aeabi_i2d>
 800b1fe:	4602      	mov	r2, r0
 800b200:	460b      	mov	r3, r1
 800b202:	4640      	mov	r0, r8
 800b204:	4649      	mov	r1, r9
 800b206:	f7f5 f877 	bl	80002f8 <__aeabi_dsub>
 800b20a:	3630      	adds	r6, #48	; 0x30
 800b20c:	f805 6b01 	strb.w	r6, [r5], #1
 800b210:	ec53 2b19 	vmov	r2, r3, d9
 800b214:	4680      	mov	r8, r0
 800b216:	4689      	mov	r9, r1
 800b218:	f7f5 fc98 	bl	8000b4c <__aeabi_dcmplt>
 800b21c:	2800      	cmp	r0, #0
 800b21e:	d164      	bne.n	800b2ea <_dtoa_r+0x62a>
 800b220:	4642      	mov	r2, r8
 800b222:	464b      	mov	r3, r9
 800b224:	4937      	ldr	r1, [pc, #220]	; (800b304 <_dtoa_r+0x644>)
 800b226:	2000      	movs	r0, #0
 800b228:	f7f5 f866 	bl	80002f8 <__aeabi_dsub>
 800b22c:	ec53 2b19 	vmov	r2, r3, d9
 800b230:	f7f5 fc8c 	bl	8000b4c <__aeabi_dcmplt>
 800b234:	2800      	cmp	r0, #0
 800b236:	f040 80b6 	bne.w	800b3a6 <_dtoa_r+0x6e6>
 800b23a:	9b02      	ldr	r3, [sp, #8]
 800b23c:	429d      	cmp	r5, r3
 800b23e:	f43f af7c 	beq.w	800b13a <_dtoa_r+0x47a>
 800b242:	4b31      	ldr	r3, [pc, #196]	; (800b308 <_dtoa_r+0x648>)
 800b244:	ec51 0b19 	vmov	r0, r1, d9
 800b248:	2200      	movs	r2, #0
 800b24a:	f7f5 fa0d 	bl	8000668 <__aeabi_dmul>
 800b24e:	4b2e      	ldr	r3, [pc, #184]	; (800b308 <_dtoa_r+0x648>)
 800b250:	ec41 0b19 	vmov	d9, r0, r1
 800b254:	2200      	movs	r2, #0
 800b256:	4640      	mov	r0, r8
 800b258:	4649      	mov	r1, r9
 800b25a:	f7f5 fa05 	bl	8000668 <__aeabi_dmul>
 800b25e:	4680      	mov	r8, r0
 800b260:	4689      	mov	r9, r1
 800b262:	e7c5      	b.n	800b1f0 <_dtoa_r+0x530>
 800b264:	ec51 0b17 	vmov	r0, r1, d7
 800b268:	f7f5 f9fe 	bl	8000668 <__aeabi_dmul>
 800b26c:	9b02      	ldr	r3, [sp, #8]
 800b26e:	9d00      	ldr	r5, [sp, #0]
 800b270:	930f      	str	r3, [sp, #60]	; 0x3c
 800b272:	ec41 0b19 	vmov	d9, r0, r1
 800b276:	4649      	mov	r1, r9
 800b278:	4640      	mov	r0, r8
 800b27a:	f7f5 fca5 	bl	8000bc8 <__aeabi_d2iz>
 800b27e:	4606      	mov	r6, r0
 800b280:	f7f5 f988 	bl	8000594 <__aeabi_i2d>
 800b284:	3630      	adds	r6, #48	; 0x30
 800b286:	4602      	mov	r2, r0
 800b288:	460b      	mov	r3, r1
 800b28a:	4640      	mov	r0, r8
 800b28c:	4649      	mov	r1, r9
 800b28e:	f7f5 f833 	bl	80002f8 <__aeabi_dsub>
 800b292:	f805 6b01 	strb.w	r6, [r5], #1
 800b296:	9b02      	ldr	r3, [sp, #8]
 800b298:	429d      	cmp	r5, r3
 800b29a:	4680      	mov	r8, r0
 800b29c:	4689      	mov	r9, r1
 800b29e:	f04f 0200 	mov.w	r2, #0
 800b2a2:	d124      	bne.n	800b2ee <_dtoa_r+0x62e>
 800b2a4:	4b1b      	ldr	r3, [pc, #108]	; (800b314 <_dtoa_r+0x654>)
 800b2a6:	ec51 0b19 	vmov	r0, r1, d9
 800b2aa:	f7f5 f827 	bl	80002fc <__adddf3>
 800b2ae:	4602      	mov	r2, r0
 800b2b0:	460b      	mov	r3, r1
 800b2b2:	4640      	mov	r0, r8
 800b2b4:	4649      	mov	r1, r9
 800b2b6:	f7f5 fc67 	bl	8000b88 <__aeabi_dcmpgt>
 800b2ba:	2800      	cmp	r0, #0
 800b2bc:	d173      	bne.n	800b3a6 <_dtoa_r+0x6e6>
 800b2be:	ec53 2b19 	vmov	r2, r3, d9
 800b2c2:	4914      	ldr	r1, [pc, #80]	; (800b314 <_dtoa_r+0x654>)
 800b2c4:	2000      	movs	r0, #0
 800b2c6:	f7f5 f817 	bl	80002f8 <__aeabi_dsub>
 800b2ca:	4602      	mov	r2, r0
 800b2cc:	460b      	mov	r3, r1
 800b2ce:	4640      	mov	r0, r8
 800b2d0:	4649      	mov	r1, r9
 800b2d2:	f7f5 fc3b 	bl	8000b4c <__aeabi_dcmplt>
 800b2d6:	2800      	cmp	r0, #0
 800b2d8:	f43f af2f 	beq.w	800b13a <_dtoa_r+0x47a>
 800b2dc:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b2de:	1e6b      	subs	r3, r5, #1
 800b2e0:	930f      	str	r3, [sp, #60]	; 0x3c
 800b2e2:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b2e6:	2b30      	cmp	r3, #48	; 0x30
 800b2e8:	d0f8      	beq.n	800b2dc <_dtoa_r+0x61c>
 800b2ea:	46bb      	mov	fp, r7
 800b2ec:	e04a      	b.n	800b384 <_dtoa_r+0x6c4>
 800b2ee:	4b06      	ldr	r3, [pc, #24]	; (800b308 <_dtoa_r+0x648>)
 800b2f0:	f7f5 f9ba 	bl	8000668 <__aeabi_dmul>
 800b2f4:	4680      	mov	r8, r0
 800b2f6:	4689      	mov	r9, r1
 800b2f8:	e7bd      	b.n	800b276 <_dtoa_r+0x5b6>
 800b2fa:	bf00      	nop
 800b2fc:	0800d020 	.word	0x0800d020
 800b300:	0800cff8 	.word	0x0800cff8
 800b304:	3ff00000 	.word	0x3ff00000
 800b308:	40240000 	.word	0x40240000
 800b30c:	401c0000 	.word	0x401c0000
 800b310:	40140000 	.word	0x40140000
 800b314:	3fe00000 	.word	0x3fe00000
 800b318:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800b31c:	9d00      	ldr	r5, [sp, #0]
 800b31e:	4642      	mov	r2, r8
 800b320:	464b      	mov	r3, r9
 800b322:	4630      	mov	r0, r6
 800b324:	4639      	mov	r1, r7
 800b326:	f7f5 fac9 	bl	80008bc <__aeabi_ddiv>
 800b32a:	f7f5 fc4d 	bl	8000bc8 <__aeabi_d2iz>
 800b32e:	9001      	str	r0, [sp, #4]
 800b330:	f7f5 f930 	bl	8000594 <__aeabi_i2d>
 800b334:	4642      	mov	r2, r8
 800b336:	464b      	mov	r3, r9
 800b338:	f7f5 f996 	bl	8000668 <__aeabi_dmul>
 800b33c:	4602      	mov	r2, r0
 800b33e:	460b      	mov	r3, r1
 800b340:	4630      	mov	r0, r6
 800b342:	4639      	mov	r1, r7
 800b344:	f7f4 ffd8 	bl	80002f8 <__aeabi_dsub>
 800b348:	9e01      	ldr	r6, [sp, #4]
 800b34a:	9f04      	ldr	r7, [sp, #16]
 800b34c:	3630      	adds	r6, #48	; 0x30
 800b34e:	f805 6b01 	strb.w	r6, [r5], #1
 800b352:	9e00      	ldr	r6, [sp, #0]
 800b354:	1bae      	subs	r6, r5, r6
 800b356:	42b7      	cmp	r7, r6
 800b358:	4602      	mov	r2, r0
 800b35a:	460b      	mov	r3, r1
 800b35c:	d134      	bne.n	800b3c8 <_dtoa_r+0x708>
 800b35e:	f7f4 ffcd 	bl	80002fc <__adddf3>
 800b362:	4642      	mov	r2, r8
 800b364:	464b      	mov	r3, r9
 800b366:	4606      	mov	r6, r0
 800b368:	460f      	mov	r7, r1
 800b36a:	f7f5 fc0d 	bl	8000b88 <__aeabi_dcmpgt>
 800b36e:	b9c8      	cbnz	r0, 800b3a4 <_dtoa_r+0x6e4>
 800b370:	4642      	mov	r2, r8
 800b372:	464b      	mov	r3, r9
 800b374:	4630      	mov	r0, r6
 800b376:	4639      	mov	r1, r7
 800b378:	f7f5 fbde 	bl	8000b38 <__aeabi_dcmpeq>
 800b37c:	b110      	cbz	r0, 800b384 <_dtoa_r+0x6c4>
 800b37e:	9b01      	ldr	r3, [sp, #4]
 800b380:	07db      	lsls	r3, r3, #31
 800b382:	d40f      	bmi.n	800b3a4 <_dtoa_r+0x6e4>
 800b384:	4651      	mov	r1, sl
 800b386:	4620      	mov	r0, r4
 800b388:	f000 fbcc 	bl	800bb24 <_Bfree>
 800b38c:	2300      	movs	r3, #0
 800b38e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b390:	702b      	strb	r3, [r5, #0]
 800b392:	f10b 0301 	add.w	r3, fp, #1
 800b396:	6013      	str	r3, [r2, #0]
 800b398:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b39a:	2b00      	cmp	r3, #0
 800b39c:	f43f ace2 	beq.w	800ad64 <_dtoa_r+0xa4>
 800b3a0:	601d      	str	r5, [r3, #0]
 800b3a2:	e4df      	b.n	800ad64 <_dtoa_r+0xa4>
 800b3a4:	465f      	mov	r7, fp
 800b3a6:	462b      	mov	r3, r5
 800b3a8:	461d      	mov	r5, r3
 800b3aa:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b3ae:	2a39      	cmp	r2, #57	; 0x39
 800b3b0:	d106      	bne.n	800b3c0 <_dtoa_r+0x700>
 800b3b2:	9a00      	ldr	r2, [sp, #0]
 800b3b4:	429a      	cmp	r2, r3
 800b3b6:	d1f7      	bne.n	800b3a8 <_dtoa_r+0x6e8>
 800b3b8:	9900      	ldr	r1, [sp, #0]
 800b3ba:	2230      	movs	r2, #48	; 0x30
 800b3bc:	3701      	adds	r7, #1
 800b3be:	700a      	strb	r2, [r1, #0]
 800b3c0:	781a      	ldrb	r2, [r3, #0]
 800b3c2:	3201      	adds	r2, #1
 800b3c4:	701a      	strb	r2, [r3, #0]
 800b3c6:	e790      	b.n	800b2ea <_dtoa_r+0x62a>
 800b3c8:	4ba3      	ldr	r3, [pc, #652]	; (800b658 <_dtoa_r+0x998>)
 800b3ca:	2200      	movs	r2, #0
 800b3cc:	f7f5 f94c 	bl	8000668 <__aeabi_dmul>
 800b3d0:	2200      	movs	r2, #0
 800b3d2:	2300      	movs	r3, #0
 800b3d4:	4606      	mov	r6, r0
 800b3d6:	460f      	mov	r7, r1
 800b3d8:	f7f5 fbae 	bl	8000b38 <__aeabi_dcmpeq>
 800b3dc:	2800      	cmp	r0, #0
 800b3de:	d09e      	beq.n	800b31e <_dtoa_r+0x65e>
 800b3e0:	e7d0      	b.n	800b384 <_dtoa_r+0x6c4>
 800b3e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b3e4:	2a00      	cmp	r2, #0
 800b3e6:	f000 80ca 	beq.w	800b57e <_dtoa_r+0x8be>
 800b3ea:	9a07      	ldr	r2, [sp, #28]
 800b3ec:	2a01      	cmp	r2, #1
 800b3ee:	f300 80ad 	bgt.w	800b54c <_dtoa_r+0x88c>
 800b3f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b3f4:	2a00      	cmp	r2, #0
 800b3f6:	f000 80a5 	beq.w	800b544 <_dtoa_r+0x884>
 800b3fa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b3fe:	9e08      	ldr	r6, [sp, #32]
 800b400:	9d05      	ldr	r5, [sp, #20]
 800b402:	9a05      	ldr	r2, [sp, #20]
 800b404:	441a      	add	r2, r3
 800b406:	9205      	str	r2, [sp, #20]
 800b408:	9a06      	ldr	r2, [sp, #24]
 800b40a:	2101      	movs	r1, #1
 800b40c:	441a      	add	r2, r3
 800b40e:	4620      	mov	r0, r4
 800b410:	9206      	str	r2, [sp, #24]
 800b412:	f000 fc3d 	bl	800bc90 <__i2b>
 800b416:	4607      	mov	r7, r0
 800b418:	b165      	cbz	r5, 800b434 <_dtoa_r+0x774>
 800b41a:	9b06      	ldr	r3, [sp, #24]
 800b41c:	2b00      	cmp	r3, #0
 800b41e:	dd09      	ble.n	800b434 <_dtoa_r+0x774>
 800b420:	42ab      	cmp	r3, r5
 800b422:	9a05      	ldr	r2, [sp, #20]
 800b424:	bfa8      	it	ge
 800b426:	462b      	movge	r3, r5
 800b428:	1ad2      	subs	r2, r2, r3
 800b42a:	9205      	str	r2, [sp, #20]
 800b42c:	9a06      	ldr	r2, [sp, #24]
 800b42e:	1aed      	subs	r5, r5, r3
 800b430:	1ad3      	subs	r3, r2, r3
 800b432:	9306      	str	r3, [sp, #24]
 800b434:	9b08      	ldr	r3, [sp, #32]
 800b436:	b1f3      	cbz	r3, 800b476 <_dtoa_r+0x7b6>
 800b438:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b43a:	2b00      	cmp	r3, #0
 800b43c:	f000 80a3 	beq.w	800b586 <_dtoa_r+0x8c6>
 800b440:	2e00      	cmp	r6, #0
 800b442:	dd10      	ble.n	800b466 <_dtoa_r+0x7a6>
 800b444:	4639      	mov	r1, r7
 800b446:	4632      	mov	r2, r6
 800b448:	4620      	mov	r0, r4
 800b44a:	f000 fce1 	bl	800be10 <__pow5mult>
 800b44e:	4652      	mov	r2, sl
 800b450:	4601      	mov	r1, r0
 800b452:	4607      	mov	r7, r0
 800b454:	4620      	mov	r0, r4
 800b456:	f000 fc31 	bl	800bcbc <__multiply>
 800b45a:	4651      	mov	r1, sl
 800b45c:	4680      	mov	r8, r0
 800b45e:	4620      	mov	r0, r4
 800b460:	f000 fb60 	bl	800bb24 <_Bfree>
 800b464:	46c2      	mov	sl, r8
 800b466:	9b08      	ldr	r3, [sp, #32]
 800b468:	1b9a      	subs	r2, r3, r6
 800b46a:	d004      	beq.n	800b476 <_dtoa_r+0x7b6>
 800b46c:	4651      	mov	r1, sl
 800b46e:	4620      	mov	r0, r4
 800b470:	f000 fcce 	bl	800be10 <__pow5mult>
 800b474:	4682      	mov	sl, r0
 800b476:	2101      	movs	r1, #1
 800b478:	4620      	mov	r0, r4
 800b47a:	f000 fc09 	bl	800bc90 <__i2b>
 800b47e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b480:	2b00      	cmp	r3, #0
 800b482:	4606      	mov	r6, r0
 800b484:	f340 8081 	ble.w	800b58a <_dtoa_r+0x8ca>
 800b488:	461a      	mov	r2, r3
 800b48a:	4601      	mov	r1, r0
 800b48c:	4620      	mov	r0, r4
 800b48e:	f000 fcbf 	bl	800be10 <__pow5mult>
 800b492:	9b07      	ldr	r3, [sp, #28]
 800b494:	2b01      	cmp	r3, #1
 800b496:	4606      	mov	r6, r0
 800b498:	dd7a      	ble.n	800b590 <_dtoa_r+0x8d0>
 800b49a:	f04f 0800 	mov.w	r8, #0
 800b49e:	6933      	ldr	r3, [r6, #16]
 800b4a0:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b4a4:	6918      	ldr	r0, [r3, #16]
 800b4a6:	f000 fba5 	bl	800bbf4 <__hi0bits>
 800b4aa:	f1c0 0020 	rsb	r0, r0, #32
 800b4ae:	9b06      	ldr	r3, [sp, #24]
 800b4b0:	4418      	add	r0, r3
 800b4b2:	f010 001f 	ands.w	r0, r0, #31
 800b4b6:	f000 8094 	beq.w	800b5e2 <_dtoa_r+0x922>
 800b4ba:	f1c0 0320 	rsb	r3, r0, #32
 800b4be:	2b04      	cmp	r3, #4
 800b4c0:	f340 8085 	ble.w	800b5ce <_dtoa_r+0x90e>
 800b4c4:	9b05      	ldr	r3, [sp, #20]
 800b4c6:	f1c0 001c 	rsb	r0, r0, #28
 800b4ca:	4403      	add	r3, r0
 800b4cc:	9305      	str	r3, [sp, #20]
 800b4ce:	9b06      	ldr	r3, [sp, #24]
 800b4d0:	4403      	add	r3, r0
 800b4d2:	4405      	add	r5, r0
 800b4d4:	9306      	str	r3, [sp, #24]
 800b4d6:	9b05      	ldr	r3, [sp, #20]
 800b4d8:	2b00      	cmp	r3, #0
 800b4da:	dd05      	ble.n	800b4e8 <_dtoa_r+0x828>
 800b4dc:	4651      	mov	r1, sl
 800b4de:	461a      	mov	r2, r3
 800b4e0:	4620      	mov	r0, r4
 800b4e2:	f000 fcef 	bl	800bec4 <__lshift>
 800b4e6:	4682      	mov	sl, r0
 800b4e8:	9b06      	ldr	r3, [sp, #24]
 800b4ea:	2b00      	cmp	r3, #0
 800b4ec:	dd05      	ble.n	800b4fa <_dtoa_r+0x83a>
 800b4ee:	4631      	mov	r1, r6
 800b4f0:	461a      	mov	r2, r3
 800b4f2:	4620      	mov	r0, r4
 800b4f4:	f000 fce6 	bl	800bec4 <__lshift>
 800b4f8:	4606      	mov	r6, r0
 800b4fa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b4fc:	2b00      	cmp	r3, #0
 800b4fe:	d072      	beq.n	800b5e6 <_dtoa_r+0x926>
 800b500:	4631      	mov	r1, r6
 800b502:	4650      	mov	r0, sl
 800b504:	f000 fd4a 	bl	800bf9c <__mcmp>
 800b508:	2800      	cmp	r0, #0
 800b50a:	da6c      	bge.n	800b5e6 <_dtoa_r+0x926>
 800b50c:	2300      	movs	r3, #0
 800b50e:	4651      	mov	r1, sl
 800b510:	220a      	movs	r2, #10
 800b512:	4620      	mov	r0, r4
 800b514:	f000 fb28 	bl	800bb68 <__multadd>
 800b518:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b51a:	f10b 3bff 	add.w	fp, fp, #4294967295
 800b51e:	4682      	mov	sl, r0
 800b520:	2b00      	cmp	r3, #0
 800b522:	f000 81b0 	beq.w	800b886 <_dtoa_r+0xbc6>
 800b526:	2300      	movs	r3, #0
 800b528:	4639      	mov	r1, r7
 800b52a:	220a      	movs	r2, #10
 800b52c:	4620      	mov	r0, r4
 800b52e:	f000 fb1b 	bl	800bb68 <__multadd>
 800b532:	9b01      	ldr	r3, [sp, #4]
 800b534:	2b00      	cmp	r3, #0
 800b536:	4607      	mov	r7, r0
 800b538:	f300 8096 	bgt.w	800b668 <_dtoa_r+0x9a8>
 800b53c:	9b07      	ldr	r3, [sp, #28]
 800b53e:	2b02      	cmp	r3, #2
 800b540:	dc59      	bgt.n	800b5f6 <_dtoa_r+0x936>
 800b542:	e091      	b.n	800b668 <_dtoa_r+0x9a8>
 800b544:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b546:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b54a:	e758      	b.n	800b3fe <_dtoa_r+0x73e>
 800b54c:	9b04      	ldr	r3, [sp, #16]
 800b54e:	1e5e      	subs	r6, r3, #1
 800b550:	9b08      	ldr	r3, [sp, #32]
 800b552:	42b3      	cmp	r3, r6
 800b554:	bfbf      	itttt	lt
 800b556:	9b08      	ldrlt	r3, [sp, #32]
 800b558:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b55a:	9608      	strlt	r6, [sp, #32]
 800b55c:	1af3      	sublt	r3, r6, r3
 800b55e:	bfb4      	ite	lt
 800b560:	18d2      	addlt	r2, r2, r3
 800b562:	1b9e      	subge	r6, r3, r6
 800b564:	9b04      	ldr	r3, [sp, #16]
 800b566:	bfbc      	itt	lt
 800b568:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b56a:	2600      	movlt	r6, #0
 800b56c:	2b00      	cmp	r3, #0
 800b56e:	bfb7      	itett	lt
 800b570:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b574:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b578:	1a9d      	sublt	r5, r3, r2
 800b57a:	2300      	movlt	r3, #0
 800b57c:	e741      	b.n	800b402 <_dtoa_r+0x742>
 800b57e:	9e08      	ldr	r6, [sp, #32]
 800b580:	9d05      	ldr	r5, [sp, #20]
 800b582:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b584:	e748      	b.n	800b418 <_dtoa_r+0x758>
 800b586:	9a08      	ldr	r2, [sp, #32]
 800b588:	e770      	b.n	800b46c <_dtoa_r+0x7ac>
 800b58a:	9b07      	ldr	r3, [sp, #28]
 800b58c:	2b01      	cmp	r3, #1
 800b58e:	dc19      	bgt.n	800b5c4 <_dtoa_r+0x904>
 800b590:	9b02      	ldr	r3, [sp, #8]
 800b592:	b9bb      	cbnz	r3, 800b5c4 <_dtoa_r+0x904>
 800b594:	9b03      	ldr	r3, [sp, #12]
 800b596:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b59a:	b99b      	cbnz	r3, 800b5c4 <_dtoa_r+0x904>
 800b59c:	9b03      	ldr	r3, [sp, #12]
 800b59e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b5a2:	0d1b      	lsrs	r3, r3, #20
 800b5a4:	051b      	lsls	r3, r3, #20
 800b5a6:	b183      	cbz	r3, 800b5ca <_dtoa_r+0x90a>
 800b5a8:	9b05      	ldr	r3, [sp, #20]
 800b5aa:	3301      	adds	r3, #1
 800b5ac:	9305      	str	r3, [sp, #20]
 800b5ae:	9b06      	ldr	r3, [sp, #24]
 800b5b0:	3301      	adds	r3, #1
 800b5b2:	9306      	str	r3, [sp, #24]
 800b5b4:	f04f 0801 	mov.w	r8, #1
 800b5b8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5ba:	2b00      	cmp	r3, #0
 800b5bc:	f47f af6f 	bne.w	800b49e <_dtoa_r+0x7de>
 800b5c0:	2001      	movs	r0, #1
 800b5c2:	e774      	b.n	800b4ae <_dtoa_r+0x7ee>
 800b5c4:	f04f 0800 	mov.w	r8, #0
 800b5c8:	e7f6      	b.n	800b5b8 <_dtoa_r+0x8f8>
 800b5ca:	4698      	mov	r8, r3
 800b5cc:	e7f4      	b.n	800b5b8 <_dtoa_r+0x8f8>
 800b5ce:	d082      	beq.n	800b4d6 <_dtoa_r+0x816>
 800b5d0:	9a05      	ldr	r2, [sp, #20]
 800b5d2:	331c      	adds	r3, #28
 800b5d4:	441a      	add	r2, r3
 800b5d6:	9205      	str	r2, [sp, #20]
 800b5d8:	9a06      	ldr	r2, [sp, #24]
 800b5da:	441a      	add	r2, r3
 800b5dc:	441d      	add	r5, r3
 800b5de:	9206      	str	r2, [sp, #24]
 800b5e0:	e779      	b.n	800b4d6 <_dtoa_r+0x816>
 800b5e2:	4603      	mov	r3, r0
 800b5e4:	e7f4      	b.n	800b5d0 <_dtoa_r+0x910>
 800b5e6:	9b04      	ldr	r3, [sp, #16]
 800b5e8:	2b00      	cmp	r3, #0
 800b5ea:	dc37      	bgt.n	800b65c <_dtoa_r+0x99c>
 800b5ec:	9b07      	ldr	r3, [sp, #28]
 800b5ee:	2b02      	cmp	r3, #2
 800b5f0:	dd34      	ble.n	800b65c <_dtoa_r+0x99c>
 800b5f2:	9b04      	ldr	r3, [sp, #16]
 800b5f4:	9301      	str	r3, [sp, #4]
 800b5f6:	9b01      	ldr	r3, [sp, #4]
 800b5f8:	b963      	cbnz	r3, 800b614 <_dtoa_r+0x954>
 800b5fa:	4631      	mov	r1, r6
 800b5fc:	2205      	movs	r2, #5
 800b5fe:	4620      	mov	r0, r4
 800b600:	f000 fab2 	bl	800bb68 <__multadd>
 800b604:	4601      	mov	r1, r0
 800b606:	4606      	mov	r6, r0
 800b608:	4650      	mov	r0, sl
 800b60a:	f000 fcc7 	bl	800bf9c <__mcmp>
 800b60e:	2800      	cmp	r0, #0
 800b610:	f73f adbb 	bgt.w	800b18a <_dtoa_r+0x4ca>
 800b614:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b616:	9d00      	ldr	r5, [sp, #0]
 800b618:	ea6f 0b03 	mvn.w	fp, r3
 800b61c:	f04f 0800 	mov.w	r8, #0
 800b620:	4631      	mov	r1, r6
 800b622:	4620      	mov	r0, r4
 800b624:	f000 fa7e 	bl	800bb24 <_Bfree>
 800b628:	2f00      	cmp	r7, #0
 800b62a:	f43f aeab 	beq.w	800b384 <_dtoa_r+0x6c4>
 800b62e:	f1b8 0f00 	cmp.w	r8, #0
 800b632:	d005      	beq.n	800b640 <_dtoa_r+0x980>
 800b634:	45b8      	cmp	r8, r7
 800b636:	d003      	beq.n	800b640 <_dtoa_r+0x980>
 800b638:	4641      	mov	r1, r8
 800b63a:	4620      	mov	r0, r4
 800b63c:	f000 fa72 	bl	800bb24 <_Bfree>
 800b640:	4639      	mov	r1, r7
 800b642:	4620      	mov	r0, r4
 800b644:	f000 fa6e 	bl	800bb24 <_Bfree>
 800b648:	e69c      	b.n	800b384 <_dtoa_r+0x6c4>
 800b64a:	2600      	movs	r6, #0
 800b64c:	4637      	mov	r7, r6
 800b64e:	e7e1      	b.n	800b614 <_dtoa_r+0x954>
 800b650:	46bb      	mov	fp, r7
 800b652:	4637      	mov	r7, r6
 800b654:	e599      	b.n	800b18a <_dtoa_r+0x4ca>
 800b656:	bf00      	nop
 800b658:	40240000 	.word	0x40240000
 800b65c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b65e:	2b00      	cmp	r3, #0
 800b660:	f000 80c8 	beq.w	800b7f4 <_dtoa_r+0xb34>
 800b664:	9b04      	ldr	r3, [sp, #16]
 800b666:	9301      	str	r3, [sp, #4]
 800b668:	2d00      	cmp	r5, #0
 800b66a:	dd05      	ble.n	800b678 <_dtoa_r+0x9b8>
 800b66c:	4639      	mov	r1, r7
 800b66e:	462a      	mov	r2, r5
 800b670:	4620      	mov	r0, r4
 800b672:	f000 fc27 	bl	800bec4 <__lshift>
 800b676:	4607      	mov	r7, r0
 800b678:	f1b8 0f00 	cmp.w	r8, #0
 800b67c:	d05b      	beq.n	800b736 <_dtoa_r+0xa76>
 800b67e:	6879      	ldr	r1, [r7, #4]
 800b680:	4620      	mov	r0, r4
 800b682:	f000 fa0f 	bl	800baa4 <_Balloc>
 800b686:	4605      	mov	r5, r0
 800b688:	b928      	cbnz	r0, 800b696 <_dtoa_r+0x9d6>
 800b68a:	4b83      	ldr	r3, [pc, #524]	; (800b898 <_dtoa_r+0xbd8>)
 800b68c:	4602      	mov	r2, r0
 800b68e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b692:	f7ff bb2e 	b.w	800acf2 <_dtoa_r+0x32>
 800b696:	693a      	ldr	r2, [r7, #16]
 800b698:	3202      	adds	r2, #2
 800b69a:	0092      	lsls	r2, r2, #2
 800b69c:	f107 010c 	add.w	r1, r7, #12
 800b6a0:	300c      	adds	r0, #12
 800b6a2:	f000 ffbd 	bl	800c620 <memcpy>
 800b6a6:	2201      	movs	r2, #1
 800b6a8:	4629      	mov	r1, r5
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 fc0a 	bl	800bec4 <__lshift>
 800b6b0:	9b00      	ldr	r3, [sp, #0]
 800b6b2:	3301      	adds	r3, #1
 800b6b4:	9304      	str	r3, [sp, #16]
 800b6b6:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b6ba:	4413      	add	r3, r2
 800b6bc:	9308      	str	r3, [sp, #32]
 800b6be:	9b02      	ldr	r3, [sp, #8]
 800b6c0:	f003 0301 	and.w	r3, r3, #1
 800b6c4:	46b8      	mov	r8, r7
 800b6c6:	9306      	str	r3, [sp, #24]
 800b6c8:	4607      	mov	r7, r0
 800b6ca:	9b04      	ldr	r3, [sp, #16]
 800b6cc:	4631      	mov	r1, r6
 800b6ce:	3b01      	subs	r3, #1
 800b6d0:	4650      	mov	r0, sl
 800b6d2:	9301      	str	r3, [sp, #4]
 800b6d4:	f7ff fa6a 	bl	800abac <quorem>
 800b6d8:	4641      	mov	r1, r8
 800b6da:	9002      	str	r0, [sp, #8]
 800b6dc:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b6e0:	4650      	mov	r0, sl
 800b6e2:	f000 fc5b 	bl	800bf9c <__mcmp>
 800b6e6:	463a      	mov	r2, r7
 800b6e8:	9005      	str	r0, [sp, #20]
 800b6ea:	4631      	mov	r1, r6
 800b6ec:	4620      	mov	r0, r4
 800b6ee:	f000 fc71 	bl	800bfd4 <__mdiff>
 800b6f2:	68c2      	ldr	r2, [r0, #12]
 800b6f4:	4605      	mov	r5, r0
 800b6f6:	bb02      	cbnz	r2, 800b73a <_dtoa_r+0xa7a>
 800b6f8:	4601      	mov	r1, r0
 800b6fa:	4650      	mov	r0, sl
 800b6fc:	f000 fc4e 	bl	800bf9c <__mcmp>
 800b700:	4602      	mov	r2, r0
 800b702:	4629      	mov	r1, r5
 800b704:	4620      	mov	r0, r4
 800b706:	9209      	str	r2, [sp, #36]	; 0x24
 800b708:	f000 fa0c 	bl	800bb24 <_Bfree>
 800b70c:	9b07      	ldr	r3, [sp, #28]
 800b70e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b710:	9d04      	ldr	r5, [sp, #16]
 800b712:	ea43 0102 	orr.w	r1, r3, r2
 800b716:	9b06      	ldr	r3, [sp, #24]
 800b718:	4319      	orrs	r1, r3
 800b71a:	d110      	bne.n	800b73e <_dtoa_r+0xa7e>
 800b71c:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b720:	d029      	beq.n	800b776 <_dtoa_r+0xab6>
 800b722:	9b05      	ldr	r3, [sp, #20]
 800b724:	2b00      	cmp	r3, #0
 800b726:	dd02      	ble.n	800b72e <_dtoa_r+0xa6e>
 800b728:	9b02      	ldr	r3, [sp, #8]
 800b72a:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b72e:	9b01      	ldr	r3, [sp, #4]
 800b730:	f883 9000 	strb.w	r9, [r3]
 800b734:	e774      	b.n	800b620 <_dtoa_r+0x960>
 800b736:	4638      	mov	r0, r7
 800b738:	e7ba      	b.n	800b6b0 <_dtoa_r+0x9f0>
 800b73a:	2201      	movs	r2, #1
 800b73c:	e7e1      	b.n	800b702 <_dtoa_r+0xa42>
 800b73e:	9b05      	ldr	r3, [sp, #20]
 800b740:	2b00      	cmp	r3, #0
 800b742:	db04      	blt.n	800b74e <_dtoa_r+0xa8e>
 800b744:	9907      	ldr	r1, [sp, #28]
 800b746:	430b      	orrs	r3, r1
 800b748:	9906      	ldr	r1, [sp, #24]
 800b74a:	430b      	orrs	r3, r1
 800b74c:	d120      	bne.n	800b790 <_dtoa_r+0xad0>
 800b74e:	2a00      	cmp	r2, #0
 800b750:	dded      	ble.n	800b72e <_dtoa_r+0xa6e>
 800b752:	4651      	mov	r1, sl
 800b754:	2201      	movs	r2, #1
 800b756:	4620      	mov	r0, r4
 800b758:	f000 fbb4 	bl	800bec4 <__lshift>
 800b75c:	4631      	mov	r1, r6
 800b75e:	4682      	mov	sl, r0
 800b760:	f000 fc1c 	bl	800bf9c <__mcmp>
 800b764:	2800      	cmp	r0, #0
 800b766:	dc03      	bgt.n	800b770 <_dtoa_r+0xab0>
 800b768:	d1e1      	bne.n	800b72e <_dtoa_r+0xa6e>
 800b76a:	f019 0f01 	tst.w	r9, #1
 800b76e:	d0de      	beq.n	800b72e <_dtoa_r+0xa6e>
 800b770:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b774:	d1d8      	bne.n	800b728 <_dtoa_r+0xa68>
 800b776:	9a01      	ldr	r2, [sp, #4]
 800b778:	2339      	movs	r3, #57	; 0x39
 800b77a:	7013      	strb	r3, [r2, #0]
 800b77c:	462b      	mov	r3, r5
 800b77e:	461d      	mov	r5, r3
 800b780:	3b01      	subs	r3, #1
 800b782:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b786:	2a39      	cmp	r2, #57	; 0x39
 800b788:	d06c      	beq.n	800b864 <_dtoa_r+0xba4>
 800b78a:	3201      	adds	r2, #1
 800b78c:	701a      	strb	r2, [r3, #0]
 800b78e:	e747      	b.n	800b620 <_dtoa_r+0x960>
 800b790:	2a00      	cmp	r2, #0
 800b792:	dd07      	ble.n	800b7a4 <_dtoa_r+0xae4>
 800b794:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b798:	d0ed      	beq.n	800b776 <_dtoa_r+0xab6>
 800b79a:	9a01      	ldr	r2, [sp, #4]
 800b79c:	f109 0301 	add.w	r3, r9, #1
 800b7a0:	7013      	strb	r3, [r2, #0]
 800b7a2:	e73d      	b.n	800b620 <_dtoa_r+0x960>
 800b7a4:	9b04      	ldr	r3, [sp, #16]
 800b7a6:	9a08      	ldr	r2, [sp, #32]
 800b7a8:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b7ac:	4293      	cmp	r3, r2
 800b7ae:	d043      	beq.n	800b838 <_dtoa_r+0xb78>
 800b7b0:	4651      	mov	r1, sl
 800b7b2:	2300      	movs	r3, #0
 800b7b4:	220a      	movs	r2, #10
 800b7b6:	4620      	mov	r0, r4
 800b7b8:	f000 f9d6 	bl	800bb68 <__multadd>
 800b7bc:	45b8      	cmp	r8, r7
 800b7be:	4682      	mov	sl, r0
 800b7c0:	f04f 0300 	mov.w	r3, #0
 800b7c4:	f04f 020a 	mov.w	r2, #10
 800b7c8:	4641      	mov	r1, r8
 800b7ca:	4620      	mov	r0, r4
 800b7cc:	d107      	bne.n	800b7de <_dtoa_r+0xb1e>
 800b7ce:	f000 f9cb 	bl	800bb68 <__multadd>
 800b7d2:	4680      	mov	r8, r0
 800b7d4:	4607      	mov	r7, r0
 800b7d6:	9b04      	ldr	r3, [sp, #16]
 800b7d8:	3301      	adds	r3, #1
 800b7da:	9304      	str	r3, [sp, #16]
 800b7dc:	e775      	b.n	800b6ca <_dtoa_r+0xa0a>
 800b7de:	f000 f9c3 	bl	800bb68 <__multadd>
 800b7e2:	4639      	mov	r1, r7
 800b7e4:	4680      	mov	r8, r0
 800b7e6:	2300      	movs	r3, #0
 800b7e8:	220a      	movs	r2, #10
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 f9bc 	bl	800bb68 <__multadd>
 800b7f0:	4607      	mov	r7, r0
 800b7f2:	e7f0      	b.n	800b7d6 <_dtoa_r+0xb16>
 800b7f4:	9b04      	ldr	r3, [sp, #16]
 800b7f6:	9301      	str	r3, [sp, #4]
 800b7f8:	9d00      	ldr	r5, [sp, #0]
 800b7fa:	4631      	mov	r1, r6
 800b7fc:	4650      	mov	r0, sl
 800b7fe:	f7ff f9d5 	bl	800abac <quorem>
 800b802:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b806:	9b00      	ldr	r3, [sp, #0]
 800b808:	f805 9b01 	strb.w	r9, [r5], #1
 800b80c:	1aea      	subs	r2, r5, r3
 800b80e:	9b01      	ldr	r3, [sp, #4]
 800b810:	4293      	cmp	r3, r2
 800b812:	dd07      	ble.n	800b824 <_dtoa_r+0xb64>
 800b814:	4651      	mov	r1, sl
 800b816:	2300      	movs	r3, #0
 800b818:	220a      	movs	r2, #10
 800b81a:	4620      	mov	r0, r4
 800b81c:	f000 f9a4 	bl	800bb68 <__multadd>
 800b820:	4682      	mov	sl, r0
 800b822:	e7ea      	b.n	800b7fa <_dtoa_r+0xb3a>
 800b824:	9b01      	ldr	r3, [sp, #4]
 800b826:	2b00      	cmp	r3, #0
 800b828:	bfc8      	it	gt
 800b82a:	461d      	movgt	r5, r3
 800b82c:	9b00      	ldr	r3, [sp, #0]
 800b82e:	bfd8      	it	le
 800b830:	2501      	movle	r5, #1
 800b832:	441d      	add	r5, r3
 800b834:	f04f 0800 	mov.w	r8, #0
 800b838:	4651      	mov	r1, sl
 800b83a:	2201      	movs	r2, #1
 800b83c:	4620      	mov	r0, r4
 800b83e:	f000 fb41 	bl	800bec4 <__lshift>
 800b842:	4631      	mov	r1, r6
 800b844:	4682      	mov	sl, r0
 800b846:	f000 fba9 	bl	800bf9c <__mcmp>
 800b84a:	2800      	cmp	r0, #0
 800b84c:	dc96      	bgt.n	800b77c <_dtoa_r+0xabc>
 800b84e:	d102      	bne.n	800b856 <_dtoa_r+0xb96>
 800b850:	f019 0f01 	tst.w	r9, #1
 800b854:	d192      	bne.n	800b77c <_dtoa_r+0xabc>
 800b856:	462b      	mov	r3, r5
 800b858:	461d      	mov	r5, r3
 800b85a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b85e:	2a30      	cmp	r2, #48	; 0x30
 800b860:	d0fa      	beq.n	800b858 <_dtoa_r+0xb98>
 800b862:	e6dd      	b.n	800b620 <_dtoa_r+0x960>
 800b864:	9a00      	ldr	r2, [sp, #0]
 800b866:	429a      	cmp	r2, r3
 800b868:	d189      	bne.n	800b77e <_dtoa_r+0xabe>
 800b86a:	f10b 0b01 	add.w	fp, fp, #1
 800b86e:	2331      	movs	r3, #49	; 0x31
 800b870:	e796      	b.n	800b7a0 <_dtoa_r+0xae0>
 800b872:	4b0a      	ldr	r3, [pc, #40]	; (800b89c <_dtoa_r+0xbdc>)
 800b874:	f7ff ba99 	b.w	800adaa <_dtoa_r+0xea>
 800b878:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b87a:	2b00      	cmp	r3, #0
 800b87c:	f47f aa6d 	bne.w	800ad5a <_dtoa_r+0x9a>
 800b880:	4b07      	ldr	r3, [pc, #28]	; (800b8a0 <_dtoa_r+0xbe0>)
 800b882:	f7ff ba92 	b.w	800adaa <_dtoa_r+0xea>
 800b886:	9b01      	ldr	r3, [sp, #4]
 800b888:	2b00      	cmp	r3, #0
 800b88a:	dcb5      	bgt.n	800b7f8 <_dtoa_r+0xb38>
 800b88c:	9b07      	ldr	r3, [sp, #28]
 800b88e:	2b02      	cmp	r3, #2
 800b890:	f73f aeb1 	bgt.w	800b5f6 <_dtoa_r+0x936>
 800b894:	e7b0      	b.n	800b7f8 <_dtoa_r+0xb38>
 800b896:	bf00      	nop
 800b898:	0800cf8b 	.word	0x0800cf8b
 800b89c:	0800ce55 	.word	0x0800ce55
 800b8a0:	0800cf26 	.word	0x0800cf26

0800b8a4 <_free_r>:
 800b8a4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b8a6:	2900      	cmp	r1, #0
 800b8a8:	d044      	beq.n	800b934 <_free_r+0x90>
 800b8aa:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b8ae:	9001      	str	r0, [sp, #4]
 800b8b0:	2b00      	cmp	r3, #0
 800b8b2:	f1a1 0404 	sub.w	r4, r1, #4
 800b8b6:	bfb8      	it	lt
 800b8b8:	18e4      	addlt	r4, r4, r3
 800b8ba:	f000 f8e7 	bl	800ba8c <__malloc_lock>
 800b8be:	4a1e      	ldr	r2, [pc, #120]	; (800b938 <_free_r+0x94>)
 800b8c0:	9801      	ldr	r0, [sp, #4]
 800b8c2:	6813      	ldr	r3, [r2, #0]
 800b8c4:	b933      	cbnz	r3, 800b8d4 <_free_r+0x30>
 800b8c6:	6063      	str	r3, [r4, #4]
 800b8c8:	6014      	str	r4, [r2, #0]
 800b8ca:	b003      	add	sp, #12
 800b8cc:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b8d0:	f000 b8e2 	b.w	800ba98 <__malloc_unlock>
 800b8d4:	42a3      	cmp	r3, r4
 800b8d6:	d908      	bls.n	800b8ea <_free_r+0x46>
 800b8d8:	6825      	ldr	r5, [r4, #0]
 800b8da:	1961      	adds	r1, r4, r5
 800b8dc:	428b      	cmp	r3, r1
 800b8de:	bf01      	itttt	eq
 800b8e0:	6819      	ldreq	r1, [r3, #0]
 800b8e2:	685b      	ldreq	r3, [r3, #4]
 800b8e4:	1949      	addeq	r1, r1, r5
 800b8e6:	6021      	streq	r1, [r4, #0]
 800b8e8:	e7ed      	b.n	800b8c6 <_free_r+0x22>
 800b8ea:	461a      	mov	r2, r3
 800b8ec:	685b      	ldr	r3, [r3, #4]
 800b8ee:	b10b      	cbz	r3, 800b8f4 <_free_r+0x50>
 800b8f0:	42a3      	cmp	r3, r4
 800b8f2:	d9fa      	bls.n	800b8ea <_free_r+0x46>
 800b8f4:	6811      	ldr	r1, [r2, #0]
 800b8f6:	1855      	adds	r5, r2, r1
 800b8f8:	42a5      	cmp	r5, r4
 800b8fa:	d10b      	bne.n	800b914 <_free_r+0x70>
 800b8fc:	6824      	ldr	r4, [r4, #0]
 800b8fe:	4421      	add	r1, r4
 800b900:	1854      	adds	r4, r2, r1
 800b902:	42a3      	cmp	r3, r4
 800b904:	6011      	str	r1, [r2, #0]
 800b906:	d1e0      	bne.n	800b8ca <_free_r+0x26>
 800b908:	681c      	ldr	r4, [r3, #0]
 800b90a:	685b      	ldr	r3, [r3, #4]
 800b90c:	6053      	str	r3, [r2, #4]
 800b90e:	440c      	add	r4, r1
 800b910:	6014      	str	r4, [r2, #0]
 800b912:	e7da      	b.n	800b8ca <_free_r+0x26>
 800b914:	d902      	bls.n	800b91c <_free_r+0x78>
 800b916:	230c      	movs	r3, #12
 800b918:	6003      	str	r3, [r0, #0]
 800b91a:	e7d6      	b.n	800b8ca <_free_r+0x26>
 800b91c:	6825      	ldr	r5, [r4, #0]
 800b91e:	1961      	adds	r1, r4, r5
 800b920:	428b      	cmp	r3, r1
 800b922:	bf04      	itt	eq
 800b924:	6819      	ldreq	r1, [r3, #0]
 800b926:	685b      	ldreq	r3, [r3, #4]
 800b928:	6063      	str	r3, [r4, #4]
 800b92a:	bf04      	itt	eq
 800b92c:	1949      	addeq	r1, r1, r5
 800b92e:	6021      	streq	r1, [r4, #0]
 800b930:	6054      	str	r4, [r2, #4]
 800b932:	e7ca      	b.n	800b8ca <_free_r+0x26>
 800b934:	b003      	add	sp, #12
 800b936:	bd30      	pop	{r4, r5, pc}
 800b938:	200008bc 	.word	0x200008bc

0800b93c <malloc>:
 800b93c:	4b02      	ldr	r3, [pc, #8]	; (800b948 <malloc+0xc>)
 800b93e:	4601      	mov	r1, r0
 800b940:	6818      	ldr	r0, [r3, #0]
 800b942:	f000 b823 	b.w	800b98c <_malloc_r>
 800b946:	bf00      	nop
 800b948:	20000128 	.word	0x20000128

0800b94c <sbrk_aligned>:
 800b94c:	b570      	push	{r4, r5, r6, lr}
 800b94e:	4e0e      	ldr	r6, [pc, #56]	; (800b988 <sbrk_aligned+0x3c>)
 800b950:	460c      	mov	r4, r1
 800b952:	6831      	ldr	r1, [r6, #0]
 800b954:	4605      	mov	r5, r0
 800b956:	b911      	cbnz	r1, 800b95e <sbrk_aligned+0x12>
 800b958:	f000 fe52 	bl	800c600 <_sbrk_r>
 800b95c:	6030      	str	r0, [r6, #0]
 800b95e:	4621      	mov	r1, r4
 800b960:	4628      	mov	r0, r5
 800b962:	f000 fe4d 	bl	800c600 <_sbrk_r>
 800b966:	1c43      	adds	r3, r0, #1
 800b968:	d00a      	beq.n	800b980 <sbrk_aligned+0x34>
 800b96a:	1cc4      	adds	r4, r0, #3
 800b96c:	f024 0403 	bic.w	r4, r4, #3
 800b970:	42a0      	cmp	r0, r4
 800b972:	d007      	beq.n	800b984 <sbrk_aligned+0x38>
 800b974:	1a21      	subs	r1, r4, r0
 800b976:	4628      	mov	r0, r5
 800b978:	f000 fe42 	bl	800c600 <_sbrk_r>
 800b97c:	3001      	adds	r0, #1
 800b97e:	d101      	bne.n	800b984 <sbrk_aligned+0x38>
 800b980:	f04f 34ff 	mov.w	r4, #4294967295
 800b984:	4620      	mov	r0, r4
 800b986:	bd70      	pop	{r4, r5, r6, pc}
 800b988:	200008c0 	.word	0x200008c0

0800b98c <_malloc_r>:
 800b98c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b990:	1ccd      	adds	r5, r1, #3
 800b992:	f025 0503 	bic.w	r5, r5, #3
 800b996:	3508      	adds	r5, #8
 800b998:	2d0c      	cmp	r5, #12
 800b99a:	bf38      	it	cc
 800b99c:	250c      	movcc	r5, #12
 800b99e:	2d00      	cmp	r5, #0
 800b9a0:	4607      	mov	r7, r0
 800b9a2:	db01      	blt.n	800b9a8 <_malloc_r+0x1c>
 800b9a4:	42a9      	cmp	r1, r5
 800b9a6:	d905      	bls.n	800b9b4 <_malloc_r+0x28>
 800b9a8:	230c      	movs	r3, #12
 800b9aa:	603b      	str	r3, [r7, #0]
 800b9ac:	2600      	movs	r6, #0
 800b9ae:	4630      	mov	r0, r6
 800b9b0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b9b4:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800ba88 <_malloc_r+0xfc>
 800b9b8:	f000 f868 	bl	800ba8c <__malloc_lock>
 800b9bc:	f8d8 3000 	ldr.w	r3, [r8]
 800b9c0:	461c      	mov	r4, r3
 800b9c2:	bb5c      	cbnz	r4, 800ba1c <_malloc_r+0x90>
 800b9c4:	4629      	mov	r1, r5
 800b9c6:	4638      	mov	r0, r7
 800b9c8:	f7ff ffc0 	bl	800b94c <sbrk_aligned>
 800b9cc:	1c43      	adds	r3, r0, #1
 800b9ce:	4604      	mov	r4, r0
 800b9d0:	d155      	bne.n	800ba7e <_malloc_r+0xf2>
 800b9d2:	f8d8 4000 	ldr.w	r4, [r8]
 800b9d6:	4626      	mov	r6, r4
 800b9d8:	2e00      	cmp	r6, #0
 800b9da:	d145      	bne.n	800ba68 <_malloc_r+0xdc>
 800b9dc:	2c00      	cmp	r4, #0
 800b9de:	d048      	beq.n	800ba72 <_malloc_r+0xe6>
 800b9e0:	6823      	ldr	r3, [r4, #0]
 800b9e2:	4631      	mov	r1, r6
 800b9e4:	4638      	mov	r0, r7
 800b9e6:	eb04 0903 	add.w	r9, r4, r3
 800b9ea:	f000 fe09 	bl	800c600 <_sbrk_r>
 800b9ee:	4581      	cmp	r9, r0
 800b9f0:	d13f      	bne.n	800ba72 <_malloc_r+0xe6>
 800b9f2:	6821      	ldr	r1, [r4, #0]
 800b9f4:	1a6d      	subs	r5, r5, r1
 800b9f6:	4629      	mov	r1, r5
 800b9f8:	4638      	mov	r0, r7
 800b9fa:	f7ff ffa7 	bl	800b94c <sbrk_aligned>
 800b9fe:	3001      	adds	r0, #1
 800ba00:	d037      	beq.n	800ba72 <_malloc_r+0xe6>
 800ba02:	6823      	ldr	r3, [r4, #0]
 800ba04:	442b      	add	r3, r5
 800ba06:	6023      	str	r3, [r4, #0]
 800ba08:	f8d8 3000 	ldr.w	r3, [r8]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d038      	beq.n	800ba82 <_malloc_r+0xf6>
 800ba10:	685a      	ldr	r2, [r3, #4]
 800ba12:	42a2      	cmp	r2, r4
 800ba14:	d12b      	bne.n	800ba6e <_malloc_r+0xe2>
 800ba16:	2200      	movs	r2, #0
 800ba18:	605a      	str	r2, [r3, #4]
 800ba1a:	e00f      	b.n	800ba3c <_malloc_r+0xb0>
 800ba1c:	6822      	ldr	r2, [r4, #0]
 800ba1e:	1b52      	subs	r2, r2, r5
 800ba20:	d41f      	bmi.n	800ba62 <_malloc_r+0xd6>
 800ba22:	2a0b      	cmp	r2, #11
 800ba24:	d917      	bls.n	800ba56 <_malloc_r+0xca>
 800ba26:	1961      	adds	r1, r4, r5
 800ba28:	42a3      	cmp	r3, r4
 800ba2a:	6025      	str	r5, [r4, #0]
 800ba2c:	bf18      	it	ne
 800ba2e:	6059      	strne	r1, [r3, #4]
 800ba30:	6863      	ldr	r3, [r4, #4]
 800ba32:	bf08      	it	eq
 800ba34:	f8c8 1000 	streq.w	r1, [r8]
 800ba38:	5162      	str	r2, [r4, r5]
 800ba3a:	604b      	str	r3, [r1, #4]
 800ba3c:	4638      	mov	r0, r7
 800ba3e:	f104 060b 	add.w	r6, r4, #11
 800ba42:	f000 f829 	bl	800ba98 <__malloc_unlock>
 800ba46:	f026 0607 	bic.w	r6, r6, #7
 800ba4a:	1d23      	adds	r3, r4, #4
 800ba4c:	1af2      	subs	r2, r6, r3
 800ba4e:	d0ae      	beq.n	800b9ae <_malloc_r+0x22>
 800ba50:	1b9b      	subs	r3, r3, r6
 800ba52:	50a3      	str	r3, [r4, r2]
 800ba54:	e7ab      	b.n	800b9ae <_malloc_r+0x22>
 800ba56:	42a3      	cmp	r3, r4
 800ba58:	6862      	ldr	r2, [r4, #4]
 800ba5a:	d1dd      	bne.n	800ba18 <_malloc_r+0x8c>
 800ba5c:	f8c8 2000 	str.w	r2, [r8]
 800ba60:	e7ec      	b.n	800ba3c <_malloc_r+0xb0>
 800ba62:	4623      	mov	r3, r4
 800ba64:	6864      	ldr	r4, [r4, #4]
 800ba66:	e7ac      	b.n	800b9c2 <_malloc_r+0x36>
 800ba68:	4634      	mov	r4, r6
 800ba6a:	6876      	ldr	r6, [r6, #4]
 800ba6c:	e7b4      	b.n	800b9d8 <_malloc_r+0x4c>
 800ba6e:	4613      	mov	r3, r2
 800ba70:	e7cc      	b.n	800ba0c <_malloc_r+0x80>
 800ba72:	230c      	movs	r3, #12
 800ba74:	603b      	str	r3, [r7, #0]
 800ba76:	4638      	mov	r0, r7
 800ba78:	f000 f80e 	bl	800ba98 <__malloc_unlock>
 800ba7c:	e797      	b.n	800b9ae <_malloc_r+0x22>
 800ba7e:	6025      	str	r5, [r4, #0]
 800ba80:	e7dc      	b.n	800ba3c <_malloc_r+0xb0>
 800ba82:	605b      	str	r3, [r3, #4]
 800ba84:	deff      	udf	#255	; 0xff
 800ba86:	bf00      	nop
 800ba88:	200008bc 	.word	0x200008bc

0800ba8c <__malloc_lock>:
 800ba8c:	4801      	ldr	r0, [pc, #4]	; (800ba94 <__malloc_lock+0x8>)
 800ba8e:	f7ff b86d 	b.w	800ab6c <__retarget_lock_acquire_recursive>
 800ba92:	bf00      	nop
 800ba94:	200008b8 	.word	0x200008b8

0800ba98 <__malloc_unlock>:
 800ba98:	4801      	ldr	r0, [pc, #4]	; (800baa0 <__malloc_unlock+0x8>)
 800ba9a:	f7ff b868 	b.w	800ab6e <__retarget_lock_release_recursive>
 800ba9e:	bf00      	nop
 800baa0:	200008b8 	.word	0x200008b8

0800baa4 <_Balloc>:
 800baa4:	b570      	push	{r4, r5, r6, lr}
 800baa6:	69c6      	ldr	r6, [r0, #28]
 800baa8:	4604      	mov	r4, r0
 800baaa:	460d      	mov	r5, r1
 800baac:	b976      	cbnz	r6, 800bacc <_Balloc+0x28>
 800baae:	2010      	movs	r0, #16
 800bab0:	f7ff ff44 	bl	800b93c <malloc>
 800bab4:	4602      	mov	r2, r0
 800bab6:	61e0      	str	r0, [r4, #28]
 800bab8:	b920      	cbnz	r0, 800bac4 <_Balloc+0x20>
 800baba:	4b18      	ldr	r3, [pc, #96]	; (800bb1c <_Balloc+0x78>)
 800babc:	4818      	ldr	r0, [pc, #96]	; (800bb20 <_Balloc+0x7c>)
 800babe:	216b      	movs	r1, #107	; 0x6b
 800bac0:	f7ff f856 	bl	800ab70 <__assert_func>
 800bac4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bac8:	6006      	str	r6, [r0, #0]
 800baca:	60c6      	str	r6, [r0, #12]
 800bacc:	69e6      	ldr	r6, [r4, #28]
 800bace:	68f3      	ldr	r3, [r6, #12]
 800bad0:	b183      	cbz	r3, 800baf4 <_Balloc+0x50>
 800bad2:	69e3      	ldr	r3, [r4, #28]
 800bad4:	68db      	ldr	r3, [r3, #12]
 800bad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800bada:	b9b8      	cbnz	r0, 800bb0c <_Balloc+0x68>
 800badc:	2101      	movs	r1, #1
 800bade:	fa01 f605 	lsl.w	r6, r1, r5
 800bae2:	1d72      	adds	r2, r6, #5
 800bae4:	0092      	lsls	r2, r2, #2
 800bae6:	4620      	mov	r0, r4
 800bae8:	f000 fdaf 	bl	800c64a <_calloc_r>
 800baec:	b160      	cbz	r0, 800bb08 <_Balloc+0x64>
 800baee:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800baf2:	e00e      	b.n	800bb12 <_Balloc+0x6e>
 800baf4:	2221      	movs	r2, #33	; 0x21
 800baf6:	2104      	movs	r1, #4
 800baf8:	4620      	mov	r0, r4
 800bafa:	f000 fda6 	bl	800c64a <_calloc_r>
 800bafe:	69e3      	ldr	r3, [r4, #28]
 800bb00:	60f0      	str	r0, [r6, #12]
 800bb02:	68db      	ldr	r3, [r3, #12]
 800bb04:	2b00      	cmp	r3, #0
 800bb06:	d1e4      	bne.n	800bad2 <_Balloc+0x2e>
 800bb08:	2000      	movs	r0, #0
 800bb0a:	bd70      	pop	{r4, r5, r6, pc}
 800bb0c:	6802      	ldr	r2, [r0, #0]
 800bb0e:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800bb12:	2300      	movs	r3, #0
 800bb14:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800bb18:	e7f7      	b.n	800bb0a <_Balloc+0x66>
 800bb1a:	bf00      	nop
 800bb1c:	0800ce79 	.word	0x0800ce79
 800bb20:	0800cf9c 	.word	0x0800cf9c

0800bb24 <_Bfree>:
 800bb24:	b570      	push	{r4, r5, r6, lr}
 800bb26:	69c6      	ldr	r6, [r0, #28]
 800bb28:	4605      	mov	r5, r0
 800bb2a:	460c      	mov	r4, r1
 800bb2c:	b976      	cbnz	r6, 800bb4c <_Bfree+0x28>
 800bb2e:	2010      	movs	r0, #16
 800bb30:	f7ff ff04 	bl	800b93c <malloc>
 800bb34:	4602      	mov	r2, r0
 800bb36:	61e8      	str	r0, [r5, #28]
 800bb38:	b920      	cbnz	r0, 800bb44 <_Bfree+0x20>
 800bb3a:	4b09      	ldr	r3, [pc, #36]	; (800bb60 <_Bfree+0x3c>)
 800bb3c:	4809      	ldr	r0, [pc, #36]	; (800bb64 <_Bfree+0x40>)
 800bb3e:	218f      	movs	r1, #143	; 0x8f
 800bb40:	f7ff f816 	bl	800ab70 <__assert_func>
 800bb44:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800bb48:	6006      	str	r6, [r0, #0]
 800bb4a:	60c6      	str	r6, [r0, #12]
 800bb4c:	b13c      	cbz	r4, 800bb5e <_Bfree+0x3a>
 800bb4e:	69eb      	ldr	r3, [r5, #28]
 800bb50:	6862      	ldr	r2, [r4, #4]
 800bb52:	68db      	ldr	r3, [r3, #12]
 800bb54:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800bb58:	6021      	str	r1, [r4, #0]
 800bb5a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800bb5e:	bd70      	pop	{r4, r5, r6, pc}
 800bb60:	0800ce79 	.word	0x0800ce79
 800bb64:	0800cf9c 	.word	0x0800cf9c

0800bb68 <__multadd>:
 800bb68:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bb6c:	690d      	ldr	r5, [r1, #16]
 800bb6e:	4607      	mov	r7, r0
 800bb70:	460c      	mov	r4, r1
 800bb72:	461e      	mov	r6, r3
 800bb74:	f101 0c14 	add.w	ip, r1, #20
 800bb78:	2000      	movs	r0, #0
 800bb7a:	f8dc 3000 	ldr.w	r3, [ip]
 800bb7e:	b299      	uxth	r1, r3
 800bb80:	fb02 6101 	mla	r1, r2, r1, r6
 800bb84:	0c1e      	lsrs	r6, r3, #16
 800bb86:	0c0b      	lsrs	r3, r1, #16
 800bb88:	fb02 3306 	mla	r3, r2, r6, r3
 800bb8c:	b289      	uxth	r1, r1
 800bb8e:	3001      	adds	r0, #1
 800bb90:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800bb94:	4285      	cmp	r5, r0
 800bb96:	f84c 1b04 	str.w	r1, [ip], #4
 800bb9a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800bb9e:	dcec      	bgt.n	800bb7a <__multadd+0x12>
 800bba0:	b30e      	cbz	r6, 800bbe6 <__multadd+0x7e>
 800bba2:	68a3      	ldr	r3, [r4, #8]
 800bba4:	42ab      	cmp	r3, r5
 800bba6:	dc19      	bgt.n	800bbdc <__multadd+0x74>
 800bba8:	6861      	ldr	r1, [r4, #4]
 800bbaa:	4638      	mov	r0, r7
 800bbac:	3101      	adds	r1, #1
 800bbae:	f7ff ff79 	bl	800baa4 <_Balloc>
 800bbb2:	4680      	mov	r8, r0
 800bbb4:	b928      	cbnz	r0, 800bbc2 <__multadd+0x5a>
 800bbb6:	4602      	mov	r2, r0
 800bbb8:	4b0c      	ldr	r3, [pc, #48]	; (800bbec <__multadd+0x84>)
 800bbba:	480d      	ldr	r0, [pc, #52]	; (800bbf0 <__multadd+0x88>)
 800bbbc:	21ba      	movs	r1, #186	; 0xba
 800bbbe:	f7fe ffd7 	bl	800ab70 <__assert_func>
 800bbc2:	6922      	ldr	r2, [r4, #16]
 800bbc4:	3202      	adds	r2, #2
 800bbc6:	f104 010c 	add.w	r1, r4, #12
 800bbca:	0092      	lsls	r2, r2, #2
 800bbcc:	300c      	adds	r0, #12
 800bbce:	f000 fd27 	bl	800c620 <memcpy>
 800bbd2:	4621      	mov	r1, r4
 800bbd4:	4638      	mov	r0, r7
 800bbd6:	f7ff ffa5 	bl	800bb24 <_Bfree>
 800bbda:	4644      	mov	r4, r8
 800bbdc:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800bbe0:	3501      	adds	r5, #1
 800bbe2:	615e      	str	r6, [r3, #20]
 800bbe4:	6125      	str	r5, [r4, #16]
 800bbe6:	4620      	mov	r0, r4
 800bbe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bbec:	0800cf8b 	.word	0x0800cf8b
 800bbf0:	0800cf9c 	.word	0x0800cf9c

0800bbf4 <__hi0bits>:
 800bbf4:	0c03      	lsrs	r3, r0, #16
 800bbf6:	041b      	lsls	r3, r3, #16
 800bbf8:	b9d3      	cbnz	r3, 800bc30 <__hi0bits+0x3c>
 800bbfa:	0400      	lsls	r0, r0, #16
 800bbfc:	2310      	movs	r3, #16
 800bbfe:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800bc02:	bf04      	itt	eq
 800bc04:	0200      	lsleq	r0, r0, #8
 800bc06:	3308      	addeq	r3, #8
 800bc08:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800bc0c:	bf04      	itt	eq
 800bc0e:	0100      	lsleq	r0, r0, #4
 800bc10:	3304      	addeq	r3, #4
 800bc12:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800bc16:	bf04      	itt	eq
 800bc18:	0080      	lsleq	r0, r0, #2
 800bc1a:	3302      	addeq	r3, #2
 800bc1c:	2800      	cmp	r0, #0
 800bc1e:	db05      	blt.n	800bc2c <__hi0bits+0x38>
 800bc20:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800bc24:	f103 0301 	add.w	r3, r3, #1
 800bc28:	bf08      	it	eq
 800bc2a:	2320      	moveq	r3, #32
 800bc2c:	4618      	mov	r0, r3
 800bc2e:	4770      	bx	lr
 800bc30:	2300      	movs	r3, #0
 800bc32:	e7e4      	b.n	800bbfe <__hi0bits+0xa>

0800bc34 <__lo0bits>:
 800bc34:	6803      	ldr	r3, [r0, #0]
 800bc36:	f013 0207 	ands.w	r2, r3, #7
 800bc3a:	d00c      	beq.n	800bc56 <__lo0bits+0x22>
 800bc3c:	07d9      	lsls	r1, r3, #31
 800bc3e:	d422      	bmi.n	800bc86 <__lo0bits+0x52>
 800bc40:	079a      	lsls	r2, r3, #30
 800bc42:	bf49      	itett	mi
 800bc44:	085b      	lsrmi	r3, r3, #1
 800bc46:	089b      	lsrpl	r3, r3, #2
 800bc48:	6003      	strmi	r3, [r0, #0]
 800bc4a:	2201      	movmi	r2, #1
 800bc4c:	bf5c      	itt	pl
 800bc4e:	6003      	strpl	r3, [r0, #0]
 800bc50:	2202      	movpl	r2, #2
 800bc52:	4610      	mov	r0, r2
 800bc54:	4770      	bx	lr
 800bc56:	b299      	uxth	r1, r3
 800bc58:	b909      	cbnz	r1, 800bc5e <__lo0bits+0x2a>
 800bc5a:	0c1b      	lsrs	r3, r3, #16
 800bc5c:	2210      	movs	r2, #16
 800bc5e:	b2d9      	uxtb	r1, r3
 800bc60:	b909      	cbnz	r1, 800bc66 <__lo0bits+0x32>
 800bc62:	3208      	adds	r2, #8
 800bc64:	0a1b      	lsrs	r3, r3, #8
 800bc66:	0719      	lsls	r1, r3, #28
 800bc68:	bf04      	itt	eq
 800bc6a:	091b      	lsreq	r3, r3, #4
 800bc6c:	3204      	addeq	r2, #4
 800bc6e:	0799      	lsls	r1, r3, #30
 800bc70:	bf04      	itt	eq
 800bc72:	089b      	lsreq	r3, r3, #2
 800bc74:	3202      	addeq	r2, #2
 800bc76:	07d9      	lsls	r1, r3, #31
 800bc78:	d403      	bmi.n	800bc82 <__lo0bits+0x4e>
 800bc7a:	085b      	lsrs	r3, r3, #1
 800bc7c:	f102 0201 	add.w	r2, r2, #1
 800bc80:	d003      	beq.n	800bc8a <__lo0bits+0x56>
 800bc82:	6003      	str	r3, [r0, #0]
 800bc84:	e7e5      	b.n	800bc52 <__lo0bits+0x1e>
 800bc86:	2200      	movs	r2, #0
 800bc88:	e7e3      	b.n	800bc52 <__lo0bits+0x1e>
 800bc8a:	2220      	movs	r2, #32
 800bc8c:	e7e1      	b.n	800bc52 <__lo0bits+0x1e>
	...

0800bc90 <__i2b>:
 800bc90:	b510      	push	{r4, lr}
 800bc92:	460c      	mov	r4, r1
 800bc94:	2101      	movs	r1, #1
 800bc96:	f7ff ff05 	bl	800baa4 <_Balloc>
 800bc9a:	4602      	mov	r2, r0
 800bc9c:	b928      	cbnz	r0, 800bcaa <__i2b+0x1a>
 800bc9e:	4b05      	ldr	r3, [pc, #20]	; (800bcb4 <__i2b+0x24>)
 800bca0:	4805      	ldr	r0, [pc, #20]	; (800bcb8 <__i2b+0x28>)
 800bca2:	f240 1145 	movw	r1, #325	; 0x145
 800bca6:	f7fe ff63 	bl	800ab70 <__assert_func>
 800bcaa:	2301      	movs	r3, #1
 800bcac:	6144      	str	r4, [r0, #20]
 800bcae:	6103      	str	r3, [r0, #16]
 800bcb0:	bd10      	pop	{r4, pc}
 800bcb2:	bf00      	nop
 800bcb4:	0800cf8b 	.word	0x0800cf8b
 800bcb8:	0800cf9c 	.word	0x0800cf9c

0800bcbc <__multiply>:
 800bcbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bcc0:	4691      	mov	r9, r2
 800bcc2:	690a      	ldr	r2, [r1, #16]
 800bcc4:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800bcc8:	429a      	cmp	r2, r3
 800bcca:	bfb8      	it	lt
 800bccc:	460b      	movlt	r3, r1
 800bcce:	460c      	mov	r4, r1
 800bcd0:	bfbc      	itt	lt
 800bcd2:	464c      	movlt	r4, r9
 800bcd4:	4699      	movlt	r9, r3
 800bcd6:	6927      	ldr	r7, [r4, #16]
 800bcd8:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800bcdc:	68a3      	ldr	r3, [r4, #8]
 800bcde:	6861      	ldr	r1, [r4, #4]
 800bce0:	eb07 060a 	add.w	r6, r7, sl
 800bce4:	42b3      	cmp	r3, r6
 800bce6:	b085      	sub	sp, #20
 800bce8:	bfb8      	it	lt
 800bcea:	3101      	addlt	r1, #1
 800bcec:	f7ff feda 	bl	800baa4 <_Balloc>
 800bcf0:	b930      	cbnz	r0, 800bd00 <__multiply+0x44>
 800bcf2:	4602      	mov	r2, r0
 800bcf4:	4b44      	ldr	r3, [pc, #272]	; (800be08 <__multiply+0x14c>)
 800bcf6:	4845      	ldr	r0, [pc, #276]	; (800be0c <__multiply+0x150>)
 800bcf8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800bcfc:	f7fe ff38 	bl	800ab70 <__assert_func>
 800bd00:	f100 0514 	add.w	r5, r0, #20
 800bd04:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800bd08:	462b      	mov	r3, r5
 800bd0a:	2200      	movs	r2, #0
 800bd0c:	4543      	cmp	r3, r8
 800bd0e:	d321      	bcc.n	800bd54 <__multiply+0x98>
 800bd10:	f104 0314 	add.w	r3, r4, #20
 800bd14:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800bd18:	f109 0314 	add.w	r3, r9, #20
 800bd1c:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800bd20:	9202      	str	r2, [sp, #8]
 800bd22:	1b3a      	subs	r2, r7, r4
 800bd24:	3a15      	subs	r2, #21
 800bd26:	f022 0203 	bic.w	r2, r2, #3
 800bd2a:	3204      	adds	r2, #4
 800bd2c:	f104 0115 	add.w	r1, r4, #21
 800bd30:	428f      	cmp	r7, r1
 800bd32:	bf38      	it	cc
 800bd34:	2204      	movcc	r2, #4
 800bd36:	9201      	str	r2, [sp, #4]
 800bd38:	9a02      	ldr	r2, [sp, #8]
 800bd3a:	9303      	str	r3, [sp, #12]
 800bd3c:	429a      	cmp	r2, r3
 800bd3e:	d80c      	bhi.n	800bd5a <__multiply+0x9e>
 800bd40:	2e00      	cmp	r6, #0
 800bd42:	dd03      	ble.n	800bd4c <__multiply+0x90>
 800bd44:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800bd48:	2b00      	cmp	r3, #0
 800bd4a:	d05b      	beq.n	800be04 <__multiply+0x148>
 800bd4c:	6106      	str	r6, [r0, #16]
 800bd4e:	b005      	add	sp, #20
 800bd50:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd54:	f843 2b04 	str.w	r2, [r3], #4
 800bd58:	e7d8      	b.n	800bd0c <__multiply+0x50>
 800bd5a:	f8b3 a000 	ldrh.w	sl, [r3]
 800bd5e:	f1ba 0f00 	cmp.w	sl, #0
 800bd62:	d024      	beq.n	800bdae <__multiply+0xf2>
 800bd64:	f104 0e14 	add.w	lr, r4, #20
 800bd68:	46a9      	mov	r9, r5
 800bd6a:	f04f 0c00 	mov.w	ip, #0
 800bd6e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800bd72:	f8d9 1000 	ldr.w	r1, [r9]
 800bd76:	fa1f fb82 	uxth.w	fp, r2
 800bd7a:	b289      	uxth	r1, r1
 800bd7c:	fb0a 110b 	mla	r1, sl, fp, r1
 800bd80:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800bd84:	f8d9 2000 	ldr.w	r2, [r9]
 800bd88:	4461      	add	r1, ip
 800bd8a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bd8e:	fb0a c20b 	mla	r2, sl, fp, ip
 800bd92:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800bd96:	b289      	uxth	r1, r1
 800bd98:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bd9c:	4577      	cmp	r7, lr
 800bd9e:	f849 1b04 	str.w	r1, [r9], #4
 800bda2:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800bda6:	d8e2      	bhi.n	800bd6e <__multiply+0xb2>
 800bda8:	9a01      	ldr	r2, [sp, #4]
 800bdaa:	f845 c002 	str.w	ip, [r5, r2]
 800bdae:	9a03      	ldr	r2, [sp, #12]
 800bdb0:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800bdb4:	3304      	adds	r3, #4
 800bdb6:	f1b9 0f00 	cmp.w	r9, #0
 800bdba:	d021      	beq.n	800be00 <__multiply+0x144>
 800bdbc:	6829      	ldr	r1, [r5, #0]
 800bdbe:	f104 0c14 	add.w	ip, r4, #20
 800bdc2:	46ae      	mov	lr, r5
 800bdc4:	f04f 0a00 	mov.w	sl, #0
 800bdc8:	f8bc b000 	ldrh.w	fp, [ip]
 800bdcc:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800bdd0:	fb09 220b 	mla	r2, r9, fp, r2
 800bdd4:	4452      	add	r2, sl
 800bdd6:	b289      	uxth	r1, r1
 800bdd8:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800bddc:	f84e 1b04 	str.w	r1, [lr], #4
 800bde0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800bde4:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bde8:	f8be 1000 	ldrh.w	r1, [lr]
 800bdec:	fb09 110a 	mla	r1, r9, sl, r1
 800bdf0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800bdf4:	4567      	cmp	r7, ip
 800bdf6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800bdfa:	d8e5      	bhi.n	800bdc8 <__multiply+0x10c>
 800bdfc:	9a01      	ldr	r2, [sp, #4]
 800bdfe:	50a9      	str	r1, [r5, r2]
 800be00:	3504      	adds	r5, #4
 800be02:	e799      	b.n	800bd38 <__multiply+0x7c>
 800be04:	3e01      	subs	r6, #1
 800be06:	e79b      	b.n	800bd40 <__multiply+0x84>
 800be08:	0800cf8b 	.word	0x0800cf8b
 800be0c:	0800cf9c 	.word	0x0800cf9c

0800be10 <__pow5mult>:
 800be10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800be14:	4615      	mov	r5, r2
 800be16:	f012 0203 	ands.w	r2, r2, #3
 800be1a:	4606      	mov	r6, r0
 800be1c:	460f      	mov	r7, r1
 800be1e:	d007      	beq.n	800be30 <__pow5mult+0x20>
 800be20:	4c25      	ldr	r4, [pc, #148]	; (800beb8 <__pow5mult+0xa8>)
 800be22:	3a01      	subs	r2, #1
 800be24:	2300      	movs	r3, #0
 800be26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800be2a:	f7ff fe9d 	bl	800bb68 <__multadd>
 800be2e:	4607      	mov	r7, r0
 800be30:	10ad      	asrs	r5, r5, #2
 800be32:	d03d      	beq.n	800beb0 <__pow5mult+0xa0>
 800be34:	69f4      	ldr	r4, [r6, #28]
 800be36:	b97c      	cbnz	r4, 800be58 <__pow5mult+0x48>
 800be38:	2010      	movs	r0, #16
 800be3a:	f7ff fd7f 	bl	800b93c <malloc>
 800be3e:	4602      	mov	r2, r0
 800be40:	61f0      	str	r0, [r6, #28]
 800be42:	b928      	cbnz	r0, 800be50 <__pow5mult+0x40>
 800be44:	4b1d      	ldr	r3, [pc, #116]	; (800bebc <__pow5mult+0xac>)
 800be46:	481e      	ldr	r0, [pc, #120]	; (800bec0 <__pow5mult+0xb0>)
 800be48:	f240 11b3 	movw	r1, #435	; 0x1b3
 800be4c:	f7fe fe90 	bl	800ab70 <__assert_func>
 800be50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800be54:	6004      	str	r4, [r0, #0]
 800be56:	60c4      	str	r4, [r0, #12]
 800be58:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800be5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800be60:	b94c      	cbnz	r4, 800be76 <__pow5mult+0x66>
 800be62:	f240 2171 	movw	r1, #625	; 0x271
 800be66:	4630      	mov	r0, r6
 800be68:	f7ff ff12 	bl	800bc90 <__i2b>
 800be6c:	2300      	movs	r3, #0
 800be6e:	f8c8 0008 	str.w	r0, [r8, #8]
 800be72:	4604      	mov	r4, r0
 800be74:	6003      	str	r3, [r0, #0]
 800be76:	f04f 0900 	mov.w	r9, #0
 800be7a:	07eb      	lsls	r3, r5, #31
 800be7c:	d50a      	bpl.n	800be94 <__pow5mult+0x84>
 800be7e:	4639      	mov	r1, r7
 800be80:	4622      	mov	r2, r4
 800be82:	4630      	mov	r0, r6
 800be84:	f7ff ff1a 	bl	800bcbc <__multiply>
 800be88:	4639      	mov	r1, r7
 800be8a:	4680      	mov	r8, r0
 800be8c:	4630      	mov	r0, r6
 800be8e:	f7ff fe49 	bl	800bb24 <_Bfree>
 800be92:	4647      	mov	r7, r8
 800be94:	106d      	asrs	r5, r5, #1
 800be96:	d00b      	beq.n	800beb0 <__pow5mult+0xa0>
 800be98:	6820      	ldr	r0, [r4, #0]
 800be9a:	b938      	cbnz	r0, 800beac <__pow5mult+0x9c>
 800be9c:	4622      	mov	r2, r4
 800be9e:	4621      	mov	r1, r4
 800bea0:	4630      	mov	r0, r6
 800bea2:	f7ff ff0b 	bl	800bcbc <__multiply>
 800bea6:	6020      	str	r0, [r4, #0]
 800bea8:	f8c0 9000 	str.w	r9, [r0]
 800beac:	4604      	mov	r4, r0
 800beae:	e7e4      	b.n	800be7a <__pow5mult+0x6a>
 800beb0:	4638      	mov	r0, r7
 800beb2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800beb6:	bf00      	nop
 800beb8:	0800d0e8 	.word	0x0800d0e8
 800bebc:	0800ce79 	.word	0x0800ce79
 800bec0:	0800cf9c 	.word	0x0800cf9c

0800bec4 <__lshift>:
 800bec4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bec8:	460c      	mov	r4, r1
 800beca:	6849      	ldr	r1, [r1, #4]
 800becc:	6923      	ldr	r3, [r4, #16]
 800bece:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800bed2:	68a3      	ldr	r3, [r4, #8]
 800bed4:	4607      	mov	r7, r0
 800bed6:	4691      	mov	r9, r2
 800bed8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800bedc:	f108 0601 	add.w	r6, r8, #1
 800bee0:	42b3      	cmp	r3, r6
 800bee2:	db0b      	blt.n	800befc <__lshift+0x38>
 800bee4:	4638      	mov	r0, r7
 800bee6:	f7ff fddd 	bl	800baa4 <_Balloc>
 800beea:	4605      	mov	r5, r0
 800beec:	b948      	cbnz	r0, 800bf02 <__lshift+0x3e>
 800beee:	4602      	mov	r2, r0
 800bef0:	4b28      	ldr	r3, [pc, #160]	; (800bf94 <__lshift+0xd0>)
 800bef2:	4829      	ldr	r0, [pc, #164]	; (800bf98 <__lshift+0xd4>)
 800bef4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800bef8:	f7fe fe3a 	bl	800ab70 <__assert_func>
 800befc:	3101      	adds	r1, #1
 800befe:	005b      	lsls	r3, r3, #1
 800bf00:	e7ee      	b.n	800bee0 <__lshift+0x1c>
 800bf02:	2300      	movs	r3, #0
 800bf04:	f100 0114 	add.w	r1, r0, #20
 800bf08:	f100 0210 	add.w	r2, r0, #16
 800bf0c:	4618      	mov	r0, r3
 800bf0e:	4553      	cmp	r3, sl
 800bf10:	db33      	blt.n	800bf7a <__lshift+0xb6>
 800bf12:	6920      	ldr	r0, [r4, #16]
 800bf14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800bf18:	f104 0314 	add.w	r3, r4, #20
 800bf1c:	f019 091f 	ands.w	r9, r9, #31
 800bf20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800bf24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800bf28:	d02b      	beq.n	800bf82 <__lshift+0xbe>
 800bf2a:	f1c9 0e20 	rsb	lr, r9, #32
 800bf2e:	468a      	mov	sl, r1
 800bf30:	2200      	movs	r2, #0
 800bf32:	6818      	ldr	r0, [r3, #0]
 800bf34:	fa00 f009 	lsl.w	r0, r0, r9
 800bf38:	4310      	orrs	r0, r2
 800bf3a:	f84a 0b04 	str.w	r0, [sl], #4
 800bf3e:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf42:	459c      	cmp	ip, r3
 800bf44:	fa22 f20e 	lsr.w	r2, r2, lr
 800bf48:	d8f3      	bhi.n	800bf32 <__lshift+0x6e>
 800bf4a:	ebac 0304 	sub.w	r3, ip, r4
 800bf4e:	3b15      	subs	r3, #21
 800bf50:	f023 0303 	bic.w	r3, r3, #3
 800bf54:	3304      	adds	r3, #4
 800bf56:	f104 0015 	add.w	r0, r4, #21
 800bf5a:	4584      	cmp	ip, r0
 800bf5c:	bf38      	it	cc
 800bf5e:	2304      	movcc	r3, #4
 800bf60:	50ca      	str	r2, [r1, r3]
 800bf62:	b10a      	cbz	r2, 800bf68 <__lshift+0xa4>
 800bf64:	f108 0602 	add.w	r6, r8, #2
 800bf68:	3e01      	subs	r6, #1
 800bf6a:	4638      	mov	r0, r7
 800bf6c:	612e      	str	r6, [r5, #16]
 800bf6e:	4621      	mov	r1, r4
 800bf70:	f7ff fdd8 	bl	800bb24 <_Bfree>
 800bf74:	4628      	mov	r0, r5
 800bf76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf7a:	f842 0f04 	str.w	r0, [r2, #4]!
 800bf7e:	3301      	adds	r3, #1
 800bf80:	e7c5      	b.n	800bf0e <__lshift+0x4a>
 800bf82:	3904      	subs	r1, #4
 800bf84:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf88:	f841 2f04 	str.w	r2, [r1, #4]!
 800bf8c:	459c      	cmp	ip, r3
 800bf8e:	d8f9      	bhi.n	800bf84 <__lshift+0xc0>
 800bf90:	e7ea      	b.n	800bf68 <__lshift+0xa4>
 800bf92:	bf00      	nop
 800bf94:	0800cf8b 	.word	0x0800cf8b
 800bf98:	0800cf9c 	.word	0x0800cf9c

0800bf9c <__mcmp>:
 800bf9c:	b530      	push	{r4, r5, lr}
 800bf9e:	6902      	ldr	r2, [r0, #16]
 800bfa0:	690c      	ldr	r4, [r1, #16]
 800bfa2:	1b12      	subs	r2, r2, r4
 800bfa4:	d10e      	bne.n	800bfc4 <__mcmp+0x28>
 800bfa6:	f100 0314 	add.w	r3, r0, #20
 800bfaa:	3114      	adds	r1, #20
 800bfac:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800bfb0:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800bfb4:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800bfb8:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800bfbc:	42a5      	cmp	r5, r4
 800bfbe:	d003      	beq.n	800bfc8 <__mcmp+0x2c>
 800bfc0:	d305      	bcc.n	800bfce <__mcmp+0x32>
 800bfc2:	2201      	movs	r2, #1
 800bfc4:	4610      	mov	r0, r2
 800bfc6:	bd30      	pop	{r4, r5, pc}
 800bfc8:	4283      	cmp	r3, r0
 800bfca:	d3f3      	bcc.n	800bfb4 <__mcmp+0x18>
 800bfcc:	e7fa      	b.n	800bfc4 <__mcmp+0x28>
 800bfce:	f04f 32ff 	mov.w	r2, #4294967295
 800bfd2:	e7f7      	b.n	800bfc4 <__mcmp+0x28>

0800bfd4 <__mdiff>:
 800bfd4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfd8:	460c      	mov	r4, r1
 800bfda:	4606      	mov	r6, r0
 800bfdc:	4611      	mov	r1, r2
 800bfde:	4620      	mov	r0, r4
 800bfe0:	4690      	mov	r8, r2
 800bfe2:	f7ff ffdb 	bl	800bf9c <__mcmp>
 800bfe6:	1e05      	subs	r5, r0, #0
 800bfe8:	d110      	bne.n	800c00c <__mdiff+0x38>
 800bfea:	4629      	mov	r1, r5
 800bfec:	4630      	mov	r0, r6
 800bfee:	f7ff fd59 	bl	800baa4 <_Balloc>
 800bff2:	b930      	cbnz	r0, 800c002 <__mdiff+0x2e>
 800bff4:	4b3a      	ldr	r3, [pc, #232]	; (800c0e0 <__mdiff+0x10c>)
 800bff6:	4602      	mov	r2, r0
 800bff8:	f240 2137 	movw	r1, #567	; 0x237
 800bffc:	4839      	ldr	r0, [pc, #228]	; (800c0e4 <__mdiff+0x110>)
 800bffe:	f7fe fdb7 	bl	800ab70 <__assert_func>
 800c002:	2301      	movs	r3, #1
 800c004:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c008:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c00c:	bfa4      	itt	ge
 800c00e:	4643      	movge	r3, r8
 800c010:	46a0      	movge	r8, r4
 800c012:	4630      	mov	r0, r6
 800c014:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c018:	bfa6      	itte	ge
 800c01a:	461c      	movge	r4, r3
 800c01c:	2500      	movge	r5, #0
 800c01e:	2501      	movlt	r5, #1
 800c020:	f7ff fd40 	bl	800baa4 <_Balloc>
 800c024:	b920      	cbnz	r0, 800c030 <__mdiff+0x5c>
 800c026:	4b2e      	ldr	r3, [pc, #184]	; (800c0e0 <__mdiff+0x10c>)
 800c028:	4602      	mov	r2, r0
 800c02a:	f240 2145 	movw	r1, #581	; 0x245
 800c02e:	e7e5      	b.n	800bffc <__mdiff+0x28>
 800c030:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c034:	6926      	ldr	r6, [r4, #16]
 800c036:	60c5      	str	r5, [r0, #12]
 800c038:	f104 0914 	add.w	r9, r4, #20
 800c03c:	f108 0514 	add.w	r5, r8, #20
 800c040:	f100 0e14 	add.w	lr, r0, #20
 800c044:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c048:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c04c:	f108 0210 	add.w	r2, r8, #16
 800c050:	46f2      	mov	sl, lr
 800c052:	2100      	movs	r1, #0
 800c054:	f859 3b04 	ldr.w	r3, [r9], #4
 800c058:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c05c:	fa11 f88b 	uxtah	r8, r1, fp
 800c060:	b299      	uxth	r1, r3
 800c062:	0c1b      	lsrs	r3, r3, #16
 800c064:	eba8 0801 	sub.w	r8, r8, r1
 800c068:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c06c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c070:	fa1f f888 	uxth.w	r8, r8
 800c074:	1419      	asrs	r1, r3, #16
 800c076:	454e      	cmp	r6, r9
 800c078:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c07c:	f84a 3b04 	str.w	r3, [sl], #4
 800c080:	d8e8      	bhi.n	800c054 <__mdiff+0x80>
 800c082:	1b33      	subs	r3, r6, r4
 800c084:	3b15      	subs	r3, #21
 800c086:	f023 0303 	bic.w	r3, r3, #3
 800c08a:	3304      	adds	r3, #4
 800c08c:	3415      	adds	r4, #21
 800c08e:	42a6      	cmp	r6, r4
 800c090:	bf38      	it	cc
 800c092:	2304      	movcc	r3, #4
 800c094:	441d      	add	r5, r3
 800c096:	4473      	add	r3, lr
 800c098:	469e      	mov	lr, r3
 800c09a:	462e      	mov	r6, r5
 800c09c:	4566      	cmp	r6, ip
 800c09e:	d30e      	bcc.n	800c0be <__mdiff+0xea>
 800c0a0:	f10c 0203 	add.w	r2, ip, #3
 800c0a4:	1b52      	subs	r2, r2, r5
 800c0a6:	f022 0203 	bic.w	r2, r2, #3
 800c0aa:	3d03      	subs	r5, #3
 800c0ac:	45ac      	cmp	ip, r5
 800c0ae:	bf38      	it	cc
 800c0b0:	2200      	movcc	r2, #0
 800c0b2:	4413      	add	r3, r2
 800c0b4:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800c0b8:	b17a      	cbz	r2, 800c0da <__mdiff+0x106>
 800c0ba:	6107      	str	r7, [r0, #16]
 800c0bc:	e7a4      	b.n	800c008 <__mdiff+0x34>
 800c0be:	f856 8b04 	ldr.w	r8, [r6], #4
 800c0c2:	fa11 f288 	uxtah	r2, r1, r8
 800c0c6:	1414      	asrs	r4, r2, #16
 800c0c8:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c0cc:	b292      	uxth	r2, r2
 800c0ce:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c0d2:	f84e 2b04 	str.w	r2, [lr], #4
 800c0d6:	1421      	asrs	r1, r4, #16
 800c0d8:	e7e0      	b.n	800c09c <__mdiff+0xc8>
 800c0da:	3f01      	subs	r7, #1
 800c0dc:	e7ea      	b.n	800c0b4 <__mdiff+0xe0>
 800c0de:	bf00      	nop
 800c0e0:	0800cf8b 	.word	0x0800cf8b
 800c0e4:	0800cf9c 	.word	0x0800cf9c

0800c0e8 <__d2b>:
 800c0e8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800c0ec:	460f      	mov	r7, r1
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	ec59 8b10 	vmov	r8, r9, d0
 800c0f4:	4616      	mov	r6, r2
 800c0f6:	f7ff fcd5 	bl	800baa4 <_Balloc>
 800c0fa:	4604      	mov	r4, r0
 800c0fc:	b930      	cbnz	r0, 800c10c <__d2b+0x24>
 800c0fe:	4602      	mov	r2, r0
 800c100:	4b24      	ldr	r3, [pc, #144]	; (800c194 <__d2b+0xac>)
 800c102:	4825      	ldr	r0, [pc, #148]	; (800c198 <__d2b+0xb0>)
 800c104:	f240 310f 	movw	r1, #783	; 0x30f
 800c108:	f7fe fd32 	bl	800ab70 <__assert_func>
 800c10c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800c110:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800c114:	bb2d      	cbnz	r5, 800c162 <__d2b+0x7a>
 800c116:	9301      	str	r3, [sp, #4]
 800c118:	f1b8 0300 	subs.w	r3, r8, #0
 800c11c:	d026      	beq.n	800c16c <__d2b+0x84>
 800c11e:	4668      	mov	r0, sp
 800c120:	9300      	str	r3, [sp, #0]
 800c122:	f7ff fd87 	bl	800bc34 <__lo0bits>
 800c126:	e9dd 1200 	ldrd	r1, r2, [sp]
 800c12a:	b1e8      	cbz	r0, 800c168 <__d2b+0x80>
 800c12c:	f1c0 0320 	rsb	r3, r0, #32
 800c130:	fa02 f303 	lsl.w	r3, r2, r3
 800c134:	430b      	orrs	r3, r1
 800c136:	40c2      	lsrs	r2, r0
 800c138:	6163      	str	r3, [r4, #20]
 800c13a:	9201      	str	r2, [sp, #4]
 800c13c:	9b01      	ldr	r3, [sp, #4]
 800c13e:	61a3      	str	r3, [r4, #24]
 800c140:	2b00      	cmp	r3, #0
 800c142:	bf14      	ite	ne
 800c144:	2202      	movne	r2, #2
 800c146:	2201      	moveq	r2, #1
 800c148:	6122      	str	r2, [r4, #16]
 800c14a:	b1bd      	cbz	r5, 800c17c <__d2b+0x94>
 800c14c:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800c150:	4405      	add	r5, r0
 800c152:	603d      	str	r5, [r7, #0]
 800c154:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800c158:	6030      	str	r0, [r6, #0]
 800c15a:	4620      	mov	r0, r4
 800c15c:	b003      	add	sp, #12
 800c15e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c162:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800c166:	e7d6      	b.n	800c116 <__d2b+0x2e>
 800c168:	6161      	str	r1, [r4, #20]
 800c16a:	e7e7      	b.n	800c13c <__d2b+0x54>
 800c16c:	a801      	add	r0, sp, #4
 800c16e:	f7ff fd61 	bl	800bc34 <__lo0bits>
 800c172:	9b01      	ldr	r3, [sp, #4]
 800c174:	6163      	str	r3, [r4, #20]
 800c176:	3020      	adds	r0, #32
 800c178:	2201      	movs	r2, #1
 800c17a:	e7e5      	b.n	800c148 <__d2b+0x60>
 800c17c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800c180:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800c184:	6038      	str	r0, [r7, #0]
 800c186:	6918      	ldr	r0, [r3, #16]
 800c188:	f7ff fd34 	bl	800bbf4 <__hi0bits>
 800c18c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800c190:	e7e2      	b.n	800c158 <__d2b+0x70>
 800c192:	bf00      	nop
 800c194:	0800cf8b 	.word	0x0800cf8b
 800c198:	0800cf9c 	.word	0x0800cf9c

0800c19c <__ssputs_r>:
 800c19c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c1a0:	688e      	ldr	r6, [r1, #8]
 800c1a2:	461f      	mov	r7, r3
 800c1a4:	42be      	cmp	r6, r7
 800c1a6:	680b      	ldr	r3, [r1, #0]
 800c1a8:	4682      	mov	sl, r0
 800c1aa:	460c      	mov	r4, r1
 800c1ac:	4690      	mov	r8, r2
 800c1ae:	d82c      	bhi.n	800c20a <__ssputs_r+0x6e>
 800c1b0:	898a      	ldrh	r2, [r1, #12]
 800c1b2:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800c1b6:	d026      	beq.n	800c206 <__ssputs_r+0x6a>
 800c1b8:	6965      	ldr	r5, [r4, #20]
 800c1ba:	6909      	ldr	r1, [r1, #16]
 800c1bc:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800c1c0:	eba3 0901 	sub.w	r9, r3, r1
 800c1c4:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800c1c8:	1c7b      	adds	r3, r7, #1
 800c1ca:	444b      	add	r3, r9
 800c1cc:	106d      	asrs	r5, r5, #1
 800c1ce:	429d      	cmp	r5, r3
 800c1d0:	bf38      	it	cc
 800c1d2:	461d      	movcc	r5, r3
 800c1d4:	0553      	lsls	r3, r2, #21
 800c1d6:	d527      	bpl.n	800c228 <__ssputs_r+0x8c>
 800c1d8:	4629      	mov	r1, r5
 800c1da:	f7ff fbd7 	bl	800b98c <_malloc_r>
 800c1de:	4606      	mov	r6, r0
 800c1e0:	b360      	cbz	r0, 800c23c <__ssputs_r+0xa0>
 800c1e2:	6921      	ldr	r1, [r4, #16]
 800c1e4:	464a      	mov	r2, r9
 800c1e6:	f000 fa1b 	bl	800c620 <memcpy>
 800c1ea:	89a3      	ldrh	r3, [r4, #12]
 800c1ec:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800c1f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c1f4:	81a3      	strh	r3, [r4, #12]
 800c1f6:	6126      	str	r6, [r4, #16]
 800c1f8:	6165      	str	r5, [r4, #20]
 800c1fa:	444e      	add	r6, r9
 800c1fc:	eba5 0509 	sub.w	r5, r5, r9
 800c200:	6026      	str	r6, [r4, #0]
 800c202:	60a5      	str	r5, [r4, #8]
 800c204:	463e      	mov	r6, r7
 800c206:	42be      	cmp	r6, r7
 800c208:	d900      	bls.n	800c20c <__ssputs_r+0x70>
 800c20a:	463e      	mov	r6, r7
 800c20c:	6820      	ldr	r0, [r4, #0]
 800c20e:	4632      	mov	r2, r6
 800c210:	4641      	mov	r1, r8
 800c212:	f000 f9db 	bl	800c5cc <memmove>
 800c216:	68a3      	ldr	r3, [r4, #8]
 800c218:	1b9b      	subs	r3, r3, r6
 800c21a:	60a3      	str	r3, [r4, #8]
 800c21c:	6823      	ldr	r3, [r4, #0]
 800c21e:	4433      	add	r3, r6
 800c220:	6023      	str	r3, [r4, #0]
 800c222:	2000      	movs	r0, #0
 800c224:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c228:	462a      	mov	r2, r5
 800c22a:	f000 fa36 	bl	800c69a <_realloc_r>
 800c22e:	4606      	mov	r6, r0
 800c230:	2800      	cmp	r0, #0
 800c232:	d1e0      	bne.n	800c1f6 <__ssputs_r+0x5a>
 800c234:	6921      	ldr	r1, [r4, #16]
 800c236:	4650      	mov	r0, sl
 800c238:	f7ff fb34 	bl	800b8a4 <_free_r>
 800c23c:	230c      	movs	r3, #12
 800c23e:	f8ca 3000 	str.w	r3, [sl]
 800c242:	89a3      	ldrh	r3, [r4, #12]
 800c244:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c248:	81a3      	strh	r3, [r4, #12]
 800c24a:	f04f 30ff 	mov.w	r0, #4294967295
 800c24e:	e7e9      	b.n	800c224 <__ssputs_r+0x88>

0800c250 <_svfiprintf_r>:
 800c250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c254:	4698      	mov	r8, r3
 800c256:	898b      	ldrh	r3, [r1, #12]
 800c258:	061b      	lsls	r3, r3, #24
 800c25a:	b09d      	sub	sp, #116	; 0x74
 800c25c:	4607      	mov	r7, r0
 800c25e:	460d      	mov	r5, r1
 800c260:	4614      	mov	r4, r2
 800c262:	d50e      	bpl.n	800c282 <_svfiprintf_r+0x32>
 800c264:	690b      	ldr	r3, [r1, #16]
 800c266:	b963      	cbnz	r3, 800c282 <_svfiprintf_r+0x32>
 800c268:	2140      	movs	r1, #64	; 0x40
 800c26a:	f7ff fb8f 	bl	800b98c <_malloc_r>
 800c26e:	6028      	str	r0, [r5, #0]
 800c270:	6128      	str	r0, [r5, #16]
 800c272:	b920      	cbnz	r0, 800c27e <_svfiprintf_r+0x2e>
 800c274:	230c      	movs	r3, #12
 800c276:	603b      	str	r3, [r7, #0]
 800c278:	f04f 30ff 	mov.w	r0, #4294967295
 800c27c:	e0d0      	b.n	800c420 <_svfiprintf_r+0x1d0>
 800c27e:	2340      	movs	r3, #64	; 0x40
 800c280:	616b      	str	r3, [r5, #20]
 800c282:	2300      	movs	r3, #0
 800c284:	9309      	str	r3, [sp, #36]	; 0x24
 800c286:	2320      	movs	r3, #32
 800c288:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c28c:	f8cd 800c 	str.w	r8, [sp, #12]
 800c290:	2330      	movs	r3, #48	; 0x30
 800c292:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800c438 <_svfiprintf_r+0x1e8>
 800c296:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c29a:	f04f 0901 	mov.w	r9, #1
 800c29e:	4623      	mov	r3, r4
 800c2a0:	469a      	mov	sl, r3
 800c2a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c2a6:	b10a      	cbz	r2, 800c2ac <_svfiprintf_r+0x5c>
 800c2a8:	2a25      	cmp	r2, #37	; 0x25
 800c2aa:	d1f9      	bne.n	800c2a0 <_svfiprintf_r+0x50>
 800c2ac:	ebba 0b04 	subs.w	fp, sl, r4
 800c2b0:	d00b      	beq.n	800c2ca <_svfiprintf_r+0x7a>
 800c2b2:	465b      	mov	r3, fp
 800c2b4:	4622      	mov	r2, r4
 800c2b6:	4629      	mov	r1, r5
 800c2b8:	4638      	mov	r0, r7
 800c2ba:	f7ff ff6f 	bl	800c19c <__ssputs_r>
 800c2be:	3001      	adds	r0, #1
 800c2c0:	f000 80a9 	beq.w	800c416 <_svfiprintf_r+0x1c6>
 800c2c4:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2c6:	445a      	add	r2, fp
 800c2c8:	9209      	str	r2, [sp, #36]	; 0x24
 800c2ca:	f89a 3000 	ldrb.w	r3, [sl]
 800c2ce:	2b00      	cmp	r3, #0
 800c2d0:	f000 80a1 	beq.w	800c416 <_svfiprintf_r+0x1c6>
 800c2d4:	2300      	movs	r3, #0
 800c2d6:	f04f 32ff 	mov.w	r2, #4294967295
 800c2da:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2de:	f10a 0a01 	add.w	sl, sl, #1
 800c2e2:	9304      	str	r3, [sp, #16]
 800c2e4:	9307      	str	r3, [sp, #28]
 800c2e6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2ea:	931a      	str	r3, [sp, #104]	; 0x68
 800c2ec:	4654      	mov	r4, sl
 800c2ee:	2205      	movs	r2, #5
 800c2f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2f4:	4850      	ldr	r0, [pc, #320]	; (800c438 <_svfiprintf_r+0x1e8>)
 800c2f6:	f7f3 ffa3 	bl	8000240 <memchr>
 800c2fa:	9a04      	ldr	r2, [sp, #16]
 800c2fc:	b9d8      	cbnz	r0, 800c336 <_svfiprintf_r+0xe6>
 800c2fe:	06d0      	lsls	r0, r2, #27
 800c300:	bf44      	itt	mi
 800c302:	2320      	movmi	r3, #32
 800c304:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c308:	0711      	lsls	r1, r2, #28
 800c30a:	bf44      	itt	mi
 800c30c:	232b      	movmi	r3, #43	; 0x2b
 800c30e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c312:	f89a 3000 	ldrb.w	r3, [sl]
 800c316:	2b2a      	cmp	r3, #42	; 0x2a
 800c318:	d015      	beq.n	800c346 <_svfiprintf_r+0xf6>
 800c31a:	9a07      	ldr	r2, [sp, #28]
 800c31c:	4654      	mov	r4, sl
 800c31e:	2000      	movs	r0, #0
 800c320:	f04f 0c0a 	mov.w	ip, #10
 800c324:	4621      	mov	r1, r4
 800c326:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c32a:	3b30      	subs	r3, #48	; 0x30
 800c32c:	2b09      	cmp	r3, #9
 800c32e:	d94d      	bls.n	800c3cc <_svfiprintf_r+0x17c>
 800c330:	b1b0      	cbz	r0, 800c360 <_svfiprintf_r+0x110>
 800c332:	9207      	str	r2, [sp, #28]
 800c334:	e014      	b.n	800c360 <_svfiprintf_r+0x110>
 800c336:	eba0 0308 	sub.w	r3, r0, r8
 800c33a:	fa09 f303 	lsl.w	r3, r9, r3
 800c33e:	4313      	orrs	r3, r2
 800c340:	9304      	str	r3, [sp, #16]
 800c342:	46a2      	mov	sl, r4
 800c344:	e7d2      	b.n	800c2ec <_svfiprintf_r+0x9c>
 800c346:	9b03      	ldr	r3, [sp, #12]
 800c348:	1d19      	adds	r1, r3, #4
 800c34a:	681b      	ldr	r3, [r3, #0]
 800c34c:	9103      	str	r1, [sp, #12]
 800c34e:	2b00      	cmp	r3, #0
 800c350:	bfbb      	ittet	lt
 800c352:	425b      	neglt	r3, r3
 800c354:	f042 0202 	orrlt.w	r2, r2, #2
 800c358:	9307      	strge	r3, [sp, #28]
 800c35a:	9307      	strlt	r3, [sp, #28]
 800c35c:	bfb8      	it	lt
 800c35e:	9204      	strlt	r2, [sp, #16]
 800c360:	7823      	ldrb	r3, [r4, #0]
 800c362:	2b2e      	cmp	r3, #46	; 0x2e
 800c364:	d10c      	bne.n	800c380 <_svfiprintf_r+0x130>
 800c366:	7863      	ldrb	r3, [r4, #1]
 800c368:	2b2a      	cmp	r3, #42	; 0x2a
 800c36a:	d134      	bne.n	800c3d6 <_svfiprintf_r+0x186>
 800c36c:	9b03      	ldr	r3, [sp, #12]
 800c36e:	1d1a      	adds	r2, r3, #4
 800c370:	681b      	ldr	r3, [r3, #0]
 800c372:	9203      	str	r2, [sp, #12]
 800c374:	2b00      	cmp	r3, #0
 800c376:	bfb8      	it	lt
 800c378:	f04f 33ff 	movlt.w	r3, #4294967295
 800c37c:	3402      	adds	r4, #2
 800c37e:	9305      	str	r3, [sp, #20]
 800c380:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800c448 <_svfiprintf_r+0x1f8>
 800c384:	7821      	ldrb	r1, [r4, #0]
 800c386:	2203      	movs	r2, #3
 800c388:	4650      	mov	r0, sl
 800c38a:	f7f3 ff59 	bl	8000240 <memchr>
 800c38e:	b138      	cbz	r0, 800c3a0 <_svfiprintf_r+0x150>
 800c390:	9b04      	ldr	r3, [sp, #16]
 800c392:	eba0 000a 	sub.w	r0, r0, sl
 800c396:	2240      	movs	r2, #64	; 0x40
 800c398:	4082      	lsls	r2, r0
 800c39a:	4313      	orrs	r3, r2
 800c39c:	3401      	adds	r4, #1
 800c39e:	9304      	str	r3, [sp, #16]
 800c3a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c3a4:	4825      	ldr	r0, [pc, #148]	; (800c43c <_svfiprintf_r+0x1ec>)
 800c3a6:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c3aa:	2206      	movs	r2, #6
 800c3ac:	f7f3 ff48 	bl	8000240 <memchr>
 800c3b0:	2800      	cmp	r0, #0
 800c3b2:	d038      	beq.n	800c426 <_svfiprintf_r+0x1d6>
 800c3b4:	4b22      	ldr	r3, [pc, #136]	; (800c440 <_svfiprintf_r+0x1f0>)
 800c3b6:	bb1b      	cbnz	r3, 800c400 <_svfiprintf_r+0x1b0>
 800c3b8:	9b03      	ldr	r3, [sp, #12]
 800c3ba:	3307      	adds	r3, #7
 800c3bc:	f023 0307 	bic.w	r3, r3, #7
 800c3c0:	3308      	adds	r3, #8
 800c3c2:	9303      	str	r3, [sp, #12]
 800c3c4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3c6:	4433      	add	r3, r6
 800c3c8:	9309      	str	r3, [sp, #36]	; 0x24
 800c3ca:	e768      	b.n	800c29e <_svfiprintf_r+0x4e>
 800c3cc:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3d0:	460c      	mov	r4, r1
 800c3d2:	2001      	movs	r0, #1
 800c3d4:	e7a6      	b.n	800c324 <_svfiprintf_r+0xd4>
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	3401      	adds	r4, #1
 800c3da:	9305      	str	r3, [sp, #20]
 800c3dc:	4619      	mov	r1, r3
 800c3de:	f04f 0c0a 	mov.w	ip, #10
 800c3e2:	4620      	mov	r0, r4
 800c3e4:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3e8:	3a30      	subs	r2, #48	; 0x30
 800c3ea:	2a09      	cmp	r2, #9
 800c3ec:	d903      	bls.n	800c3f6 <_svfiprintf_r+0x1a6>
 800c3ee:	2b00      	cmp	r3, #0
 800c3f0:	d0c6      	beq.n	800c380 <_svfiprintf_r+0x130>
 800c3f2:	9105      	str	r1, [sp, #20]
 800c3f4:	e7c4      	b.n	800c380 <_svfiprintf_r+0x130>
 800c3f6:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3fa:	4604      	mov	r4, r0
 800c3fc:	2301      	movs	r3, #1
 800c3fe:	e7f0      	b.n	800c3e2 <_svfiprintf_r+0x192>
 800c400:	ab03      	add	r3, sp, #12
 800c402:	9300      	str	r3, [sp, #0]
 800c404:	462a      	mov	r2, r5
 800c406:	4b0f      	ldr	r3, [pc, #60]	; (800c444 <_svfiprintf_r+0x1f4>)
 800c408:	a904      	add	r1, sp, #16
 800c40a:	4638      	mov	r0, r7
 800c40c:	f7fd fde8 	bl	8009fe0 <_printf_float>
 800c410:	1c42      	adds	r2, r0, #1
 800c412:	4606      	mov	r6, r0
 800c414:	d1d6      	bne.n	800c3c4 <_svfiprintf_r+0x174>
 800c416:	89ab      	ldrh	r3, [r5, #12]
 800c418:	065b      	lsls	r3, r3, #25
 800c41a:	f53f af2d 	bmi.w	800c278 <_svfiprintf_r+0x28>
 800c41e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c420:	b01d      	add	sp, #116	; 0x74
 800c422:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c426:	ab03      	add	r3, sp, #12
 800c428:	9300      	str	r3, [sp, #0]
 800c42a:	462a      	mov	r2, r5
 800c42c:	4b05      	ldr	r3, [pc, #20]	; (800c444 <_svfiprintf_r+0x1f4>)
 800c42e:	a904      	add	r1, sp, #16
 800c430:	4638      	mov	r0, r7
 800c432:	f7fe f879 	bl	800a528 <_printf_i>
 800c436:	e7eb      	b.n	800c410 <_svfiprintf_r+0x1c0>
 800c438:	0800d0f4 	.word	0x0800d0f4
 800c43c:	0800d0fe 	.word	0x0800d0fe
 800c440:	08009fe1 	.word	0x08009fe1
 800c444:	0800c19d 	.word	0x0800c19d
 800c448:	0800d0fa 	.word	0x0800d0fa

0800c44c <__sflush_r>:
 800c44c:	898a      	ldrh	r2, [r1, #12]
 800c44e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c452:	4605      	mov	r5, r0
 800c454:	0710      	lsls	r0, r2, #28
 800c456:	460c      	mov	r4, r1
 800c458:	d458      	bmi.n	800c50c <__sflush_r+0xc0>
 800c45a:	684b      	ldr	r3, [r1, #4]
 800c45c:	2b00      	cmp	r3, #0
 800c45e:	dc05      	bgt.n	800c46c <__sflush_r+0x20>
 800c460:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800c462:	2b00      	cmp	r3, #0
 800c464:	dc02      	bgt.n	800c46c <__sflush_r+0x20>
 800c466:	2000      	movs	r0, #0
 800c468:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c46c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c46e:	2e00      	cmp	r6, #0
 800c470:	d0f9      	beq.n	800c466 <__sflush_r+0x1a>
 800c472:	2300      	movs	r3, #0
 800c474:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800c478:	682f      	ldr	r7, [r5, #0]
 800c47a:	6a21      	ldr	r1, [r4, #32]
 800c47c:	602b      	str	r3, [r5, #0]
 800c47e:	d032      	beq.n	800c4e6 <__sflush_r+0x9a>
 800c480:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800c482:	89a3      	ldrh	r3, [r4, #12]
 800c484:	075a      	lsls	r2, r3, #29
 800c486:	d505      	bpl.n	800c494 <__sflush_r+0x48>
 800c488:	6863      	ldr	r3, [r4, #4]
 800c48a:	1ac0      	subs	r0, r0, r3
 800c48c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800c48e:	b10b      	cbz	r3, 800c494 <__sflush_r+0x48>
 800c490:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800c492:	1ac0      	subs	r0, r0, r3
 800c494:	2300      	movs	r3, #0
 800c496:	4602      	mov	r2, r0
 800c498:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800c49a:	6a21      	ldr	r1, [r4, #32]
 800c49c:	4628      	mov	r0, r5
 800c49e:	47b0      	blx	r6
 800c4a0:	1c43      	adds	r3, r0, #1
 800c4a2:	89a3      	ldrh	r3, [r4, #12]
 800c4a4:	d106      	bne.n	800c4b4 <__sflush_r+0x68>
 800c4a6:	6829      	ldr	r1, [r5, #0]
 800c4a8:	291d      	cmp	r1, #29
 800c4aa:	d82b      	bhi.n	800c504 <__sflush_r+0xb8>
 800c4ac:	4a29      	ldr	r2, [pc, #164]	; (800c554 <__sflush_r+0x108>)
 800c4ae:	410a      	asrs	r2, r1
 800c4b0:	07d6      	lsls	r6, r2, #31
 800c4b2:	d427      	bmi.n	800c504 <__sflush_r+0xb8>
 800c4b4:	2200      	movs	r2, #0
 800c4b6:	6062      	str	r2, [r4, #4]
 800c4b8:	04d9      	lsls	r1, r3, #19
 800c4ba:	6922      	ldr	r2, [r4, #16]
 800c4bc:	6022      	str	r2, [r4, #0]
 800c4be:	d504      	bpl.n	800c4ca <__sflush_r+0x7e>
 800c4c0:	1c42      	adds	r2, r0, #1
 800c4c2:	d101      	bne.n	800c4c8 <__sflush_r+0x7c>
 800c4c4:	682b      	ldr	r3, [r5, #0]
 800c4c6:	b903      	cbnz	r3, 800c4ca <__sflush_r+0x7e>
 800c4c8:	6560      	str	r0, [r4, #84]	; 0x54
 800c4ca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4cc:	602f      	str	r7, [r5, #0]
 800c4ce:	2900      	cmp	r1, #0
 800c4d0:	d0c9      	beq.n	800c466 <__sflush_r+0x1a>
 800c4d2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c4d6:	4299      	cmp	r1, r3
 800c4d8:	d002      	beq.n	800c4e0 <__sflush_r+0x94>
 800c4da:	4628      	mov	r0, r5
 800c4dc:	f7ff f9e2 	bl	800b8a4 <_free_r>
 800c4e0:	2000      	movs	r0, #0
 800c4e2:	6360      	str	r0, [r4, #52]	; 0x34
 800c4e4:	e7c0      	b.n	800c468 <__sflush_r+0x1c>
 800c4e6:	2301      	movs	r3, #1
 800c4e8:	4628      	mov	r0, r5
 800c4ea:	47b0      	blx	r6
 800c4ec:	1c41      	adds	r1, r0, #1
 800c4ee:	d1c8      	bne.n	800c482 <__sflush_r+0x36>
 800c4f0:	682b      	ldr	r3, [r5, #0]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	d0c5      	beq.n	800c482 <__sflush_r+0x36>
 800c4f6:	2b1d      	cmp	r3, #29
 800c4f8:	d001      	beq.n	800c4fe <__sflush_r+0xb2>
 800c4fa:	2b16      	cmp	r3, #22
 800c4fc:	d101      	bne.n	800c502 <__sflush_r+0xb6>
 800c4fe:	602f      	str	r7, [r5, #0]
 800c500:	e7b1      	b.n	800c466 <__sflush_r+0x1a>
 800c502:	89a3      	ldrh	r3, [r4, #12]
 800c504:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c508:	81a3      	strh	r3, [r4, #12]
 800c50a:	e7ad      	b.n	800c468 <__sflush_r+0x1c>
 800c50c:	690f      	ldr	r7, [r1, #16]
 800c50e:	2f00      	cmp	r7, #0
 800c510:	d0a9      	beq.n	800c466 <__sflush_r+0x1a>
 800c512:	0793      	lsls	r3, r2, #30
 800c514:	680e      	ldr	r6, [r1, #0]
 800c516:	bf08      	it	eq
 800c518:	694b      	ldreq	r3, [r1, #20]
 800c51a:	600f      	str	r7, [r1, #0]
 800c51c:	bf18      	it	ne
 800c51e:	2300      	movne	r3, #0
 800c520:	eba6 0807 	sub.w	r8, r6, r7
 800c524:	608b      	str	r3, [r1, #8]
 800c526:	f1b8 0f00 	cmp.w	r8, #0
 800c52a:	dd9c      	ble.n	800c466 <__sflush_r+0x1a>
 800c52c:	6a21      	ldr	r1, [r4, #32]
 800c52e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800c530:	4643      	mov	r3, r8
 800c532:	463a      	mov	r2, r7
 800c534:	4628      	mov	r0, r5
 800c536:	47b0      	blx	r6
 800c538:	2800      	cmp	r0, #0
 800c53a:	dc06      	bgt.n	800c54a <__sflush_r+0xfe>
 800c53c:	89a3      	ldrh	r3, [r4, #12]
 800c53e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800c542:	81a3      	strh	r3, [r4, #12]
 800c544:	f04f 30ff 	mov.w	r0, #4294967295
 800c548:	e78e      	b.n	800c468 <__sflush_r+0x1c>
 800c54a:	4407      	add	r7, r0
 800c54c:	eba8 0800 	sub.w	r8, r8, r0
 800c550:	e7e9      	b.n	800c526 <__sflush_r+0xda>
 800c552:	bf00      	nop
 800c554:	dfbffffe 	.word	0xdfbffffe

0800c558 <_fflush_r>:
 800c558:	b538      	push	{r3, r4, r5, lr}
 800c55a:	690b      	ldr	r3, [r1, #16]
 800c55c:	4605      	mov	r5, r0
 800c55e:	460c      	mov	r4, r1
 800c560:	b913      	cbnz	r3, 800c568 <_fflush_r+0x10>
 800c562:	2500      	movs	r5, #0
 800c564:	4628      	mov	r0, r5
 800c566:	bd38      	pop	{r3, r4, r5, pc}
 800c568:	b118      	cbz	r0, 800c572 <_fflush_r+0x1a>
 800c56a:	6a03      	ldr	r3, [r0, #32]
 800c56c:	b90b      	cbnz	r3, 800c572 <_fflush_r+0x1a>
 800c56e:	f7fe f977 	bl	800a860 <__sinit>
 800c572:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c576:	2b00      	cmp	r3, #0
 800c578:	d0f3      	beq.n	800c562 <_fflush_r+0xa>
 800c57a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c57c:	07d0      	lsls	r0, r2, #31
 800c57e:	d404      	bmi.n	800c58a <_fflush_r+0x32>
 800c580:	0599      	lsls	r1, r3, #22
 800c582:	d402      	bmi.n	800c58a <_fflush_r+0x32>
 800c584:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c586:	f7fe faf1 	bl	800ab6c <__retarget_lock_acquire_recursive>
 800c58a:	4628      	mov	r0, r5
 800c58c:	4621      	mov	r1, r4
 800c58e:	f7ff ff5d 	bl	800c44c <__sflush_r>
 800c592:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c594:	07da      	lsls	r2, r3, #31
 800c596:	4605      	mov	r5, r0
 800c598:	d4e4      	bmi.n	800c564 <_fflush_r+0xc>
 800c59a:	89a3      	ldrh	r3, [r4, #12]
 800c59c:	059b      	lsls	r3, r3, #22
 800c59e:	d4e1      	bmi.n	800c564 <_fflush_r+0xc>
 800c5a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c5a2:	f7fe fae4 	bl	800ab6e <__retarget_lock_release_recursive>
 800c5a6:	e7dd      	b.n	800c564 <_fflush_r+0xc>

0800c5a8 <fiprintf>:
 800c5a8:	b40e      	push	{r1, r2, r3}
 800c5aa:	b503      	push	{r0, r1, lr}
 800c5ac:	4601      	mov	r1, r0
 800c5ae:	ab03      	add	r3, sp, #12
 800c5b0:	4805      	ldr	r0, [pc, #20]	; (800c5c8 <fiprintf+0x20>)
 800c5b2:	f853 2b04 	ldr.w	r2, [r3], #4
 800c5b6:	6800      	ldr	r0, [r0, #0]
 800c5b8:	9301      	str	r3, [sp, #4]
 800c5ba:	f000 f8d3 	bl	800c764 <_vfiprintf_r>
 800c5be:	b002      	add	sp, #8
 800c5c0:	f85d eb04 	ldr.w	lr, [sp], #4
 800c5c4:	b003      	add	sp, #12
 800c5c6:	4770      	bx	lr
 800c5c8:	20000128 	.word	0x20000128

0800c5cc <memmove>:
 800c5cc:	4288      	cmp	r0, r1
 800c5ce:	b510      	push	{r4, lr}
 800c5d0:	eb01 0402 	add.w	r4, r1, r2
 800c5d4:	d902      	bls.n	800c5dc <memmove+0x10>
 800c5d6:	4284      	cmp	r4, r0
 800c5d8:	4623      	mov	r3, r4
 800c5da:	d807      	bhi.n	800c5ec <memmove+0x20>
 800c5dc:	1e43      	subs	r3, r0, #1
 800c5de:	42a1      	cmp	r1, r4
 800c5e0:	d008      	beq.n	800c5f4 <memmove+0x28>
 800c5e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c5e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c5ea:	e7f8      	b.n	800c5de <memmove+0x12>
 800c5ec:	4402      	add	r2, r0
 800c5ee:	4601      	mov	r1, r0
 800c5f0:	428a      	cmp	r2, r1
 800c5f2:	d100      	bne.n	800c5f6 <memmove+0x2a>
 800c5f4:	bd10      	pop	{r4, pc}
 800c5f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c5fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c5fe:	e7f7      	b.n	800c5f0 <memmove+0x24>

0800c600 <_sbrk_r>:
 800c600:	b538      	push	{r3, r4, r5, lr}
 800c602:	4d06      	ldr	r5, [pc, #24]	; (800c61c <_sbrk_r+0x1c>)
 800c604:	2300      	movs	r3, #0
 800c606:	4604      	mov	r4, r0
 800c608:	4608      	mov	r0, r1
 800c60a:	602b      	str	r3, [r5, #0]
 800c60c:	f7f5 faba 	bl	8001b84 <_sbrk>
 800c610:	1c43      	adds	r3, r0, #1
 800c612:	d102      	bne.n	800c61a <_sbrk_r+0x1a>
 800c614:	682b      	ldr	r3, [r5, #0]
 800c616:	b103      	cbz	r3, 800c61a <_sbrk_r+0x1a>
 800c618:	6023      	str	r3, [r4, #0]
 800c61a:	bd38      	pop	{r3, r4, r5, pc}
 800c61c:	200008b4 	.word	0x200008b4

0800c620 <memcpy>:
 800c620:	440a      	add	r2, r1
 800c622:	4291      	cmp	r1, r2
 800c624:	f100 33ff 	add.w	r3, r0, #4294967295
 800c628:	d100      	bne.n	800c62c <memcpy+0xc>
 800c62a:	4770      	bx	lr
 800c62c:	b510      	push	{r4, lr}
 800c62e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c632:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c636:	4291      	cmp	r1, r2
 800c638:	d1f9      	bne.n	800c62e <memcpy+0xe>
 800c63a:	bd10      	pop	{r4, pc}

0800c63c <abort>:
 800c63c:	b508      	push	{r3, lr}
 800c63e:	2006      	movs	r0, #6
 800c640:	f000 fa68 	bl	800cb14 <raise>
 800c644:	2001      	movs	r0, #1
 800c646:	f7f5 fa25 	bl	8001a94 <_exit>

0800c64a <_calloc_r>:
 800c64a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c64c:	fba1 2402 	umull	r2, r4, r1, r2
 800c650:	b94c      	cbnz	r4, 800c666 <_calloc_r+0x1c>
 800c652:	4611      	mov	r1, r2
 800c654:	9201      	str	r2, [sp, #4]
 800c656:	f7ff f999 	bl	800b98c <_malloc_r>
 800c65a:	9a01      	ldr	r2, [sp, #4]
 800c65c:	4605      	mov	r5, r0
 800c65e:	b930      	cbnz	r0, 800c66e <_calloc_r+0x24>
 800c660:	4628      	mov	r0, r5
 800c662:	b003      	add	sp, #12
 800c664:	bd30      	pop	{r4, r5, pc}
 800c666:	220c      	movs	r2, #12
 800c668:	6002      	str	r2, [r0, #0]
 800c66a:	2500      	movs	r5, #0
 800c66c:	e7f8      	b.n	800c660 <_calloc_r+0x16>
 800c66e:	4621      	mov	r1, r4
 800c670:	f7fe f9a3 	bl	800a9ba <memset>
 800c674:	e7f4      	b.n	800c660 <_calloc_r+0x16>

0800c676 <__ascii_mbtowc>:
 800c676:	b082      	sub	sp, #8
 800c678:	b901      	cbnz	r1, 800c67c <__ascii_mbtowc+0x6>
 800c67a:	a901      	add	r1, sp, #4
 800c67c:	b142      	cbz	r2, 800c690 <__ascii_mbtowc+0x1a>
 800c67e:	b14b      	cbz	r3, 800c694 <__ascii_mbtowc+0x1e>
 800c680:	7813      	ldrb	r3, [r2, #0]
 800c682:	600b      	str	r3, [r1, #0]
 800c684:	7812      	ldrb	r2, [r2, #0]
 800c686:	1e10      	subs	r0, r2, #0
 800c688:	bf18      	it	ne
 800c68a:	2001      	movne	r0, #1
 800c68c:	b002      	add	sp, #8
 800c68e:	4770      	bx	lr
 800c690:	4610      	mov	r0, r2
 800c692:	e7fb      	b.n	800c68c <__ascii_mbtowc+0x16>
 800c694:	f06f 0001 	mvn.w	r0, #1
 800c698:	e7f8      	b.n	800c68c <__ascii_mbtowc+0x16>

0800c69a <_realloc_r>:
 800c69a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c69e:	4680      	mov	r8, r0
 800c6a0:	4614      	mov	r4, r2
 800c6a2:	460e      	mov	r6, r1
 800c6a4:	b921      	cbnz	r1, 800c6b0 <_realloc_r+0x16>
 800c6a6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c6aa:	4611      	mov	r1, r2
 800c6ac:	f7ff b96e 	b.w	800b98c <_malloc_r>
 800c6b0:	b92a      	cbnz	r2, 800c6be <_realloc_r+0x24>
 800c6b2:	f7ff f8f7 	bl	800b8a4 <_free_r>
 800c6b6:	4625      	mov	r5, r4
 800c6b8:	4628      	mov	r0, r5
 800c6ba:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c6be:	f000 fa45 	bl	800cb4c <_malloc_usable_size_r>
 800c6c2:	4284      	cmp	r4, r0
 800c6c4:	4607      	mov	r7, r0
 800c6c6:	d802      	bhi.n	800c6ce <_realloc_r+0x34>
 800c6c8:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c6cc:	d812      	bhi.n	800c6f4 <_realloc_r+0x5a>
 800c6ce:	4621      	mov	r1, r4
 800c6d0:	4640      	mov	r0, r8
 800c6d2:	f7ff f95b 	bl	800b98c <_malloc_r>
 800c6d6:	4605      	mov	r5, r0
 800c6d8:	2800      	cmp	r0, #0
 800c6da:	d0ed      	beq.n	800c6b8 <_realloc_r+0x1e>
 800c6dc:	42bc      	cmp	r4, r7
 800c6de:	4622      	mov	r2, r4
 800c6e0:	4631      	mov	r1, r6
 800c6e2:	bf28      	it	cs
 800c6e4:	463a      	movcs	r2, r7
 800c6e6:	f7ff ff9b 	bl	800c620 <memcpy>
 800c6ea:	4631      	mov	r1, r6
 800c6ec:	4640      	mov	r0, r8
 800c6ee:	f7ff f8d9 	bl	800b8a4 <_free_r>
 800c6f2:	e7e1      	b.n	800c6b8 <_realloc_r+0x1e>
 800c6f4:	4635      	mov	r5, r6
 800c6f6:	e7df      	b.n	800c6b8 <_realloc_r+0x1e>

0800c6f8 <__ascii_wctomb>:
 800c6f8:	b149      	cbz	r1, 800c70e <__ascii_wctomb+0x16>
 800c6fa:	2aff      	cmp	r2, #255	; 0xff
 800c6fc:	bf85      	ittet	hi
 800c6fe:	238a      	movhi	r3, #138	; 0x8a
 800c700:	6003      	strhi	r3, [r0, #0]
 800c702:	700a      	strbls	r2, [r1, #0]
 800c704:	f04f 30ff 	movhi.w	r0, #4294967295
 800c708:	bf98      	it	ls
 800c70a:	2001      	movls	r0, #1
 800c70c:	4770      	bx	lr
 800c70e:	4608      	mov	r0, r1
 800c710:	4770      	bx	lr

0800c712 <__sfputc_r>:
 800c712:	6893      	ldr	r3, [r2, #8]
 800c714:	3b01      	subs	r3, #1
 800c716:	2b00      	cmp	r3, #0
 800c718:	b410      	push	{r4}
 800c71a:	6093      	str	r3, [r2, #8]
 800c71c:	da08      	bge.n	800c730 <__sfputc_r+0x1e>
 800c71e:	6994      	ldr	r4, [r2, #24]
 800c720:	42a3      	cmp	r3, r4
 800c722:	db01      	blt.n	800c728 <__sfputc_r+0x16>
 800c724:	290a      	cmp	r1, #10
 800c726:	d103      	bne.n	800c730 <__sfputc_r+0x1e>
 800c728:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c72c:	f000 b934 	b.w	800c998 <__swbuf_r>
 800c730:	6813      	ldr	r3, [r2, #0]
 800c732:	1c58      	adds	r0, r3, #1
 800c734:	6010      	str	r0, [r2, #0]
 800c736:	7019      	strb	r1, [r3, #0]
 800c738:	4608      	mov	r0, r1
 800c73a:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c73e:	4770      	bx	lr

0800c740 <__sfputs_r>:
 800c740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c742:	4606      	mov	r6, r0
 800c744:	460f      	mov	r7, r1
 800c746:	4614      	mov	r4, r2
 800c748:	18d5      	adds	r5, r2, r3
 800c74a:	42ac      	cmp	r4, r5
 800c74c:	d101      	bne.n	800c752 <__sfputs_r+0x12>
 800c74e:	2000      	movs	r0, #0
 800c750:	e007      	b.n	800c762 <__sfputs_r+0x22>
 800c752:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c756:	463a      	mov	r2, r7
 800c758:	4630      	mov	r0, r6
 800c75a:	f7ff ffda 	bl	800c712 <__sfputc_r>
 800c75e:	1c43      	adds	r3, r0, #1
 800c760:	d1f3      	bne.n	800c74a <__sfputs_r+0xa>
 800c762:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c764 <_vfiprintf_r>:
 800c764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c768:	460d      	mov	r5, r1
 800c76a:	b09d      	sub	sp, #116	; 0x74
 800c76c:	4614      	mov	r4, r2
 800c76e:	4698      	mov	r8, r3
 800c770:	4606      	mov	r6, r0
 800c772:	b118      	cbz	r0, 800c77c <_vfiprintf_r+0x18>
 800c774:	6a03      	ldr	r3, [r0, #32]
 800c776:	b90b      	cbnz	r3, 800c77c <_vfiprintf_r+0x18>
 800c778:	f7fe f872 	bl	800a860 <__sinit>
 800c77c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c77e:	07d9      	lsls	r1, r3, #31
 800c780:	d405      	bmi.n	800c78e <_vfiprintf_r+0x2a>
 800c782:	89ab      	ldrh	r3, [r5, #12]
 800c784:	059a      	lsls	r2, r3, #22
 800c786:	d402      	bmi.n	800c78e <_vfiprintf_r+0x2a>
 800c788:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c78a:	f7fe f9ef 	bl	800ab6c <__retarget_lock_acquire_recursive>
 800c78e:	89ab      	ldrh	r3, [r5, #12]
 800c790:	071b      	lsls	r3, r3, #28
 800c792:	d501      	bpl.n	800c798 <_vfiprintf_r+0x34>
 800c794:	692b      	ldr	r3, [r5, #16]
 800c796:	b99b      	cbnz	r3, 800c7c0 <_vfiprintf_r+0x5c>
 800c798:	4629      	mov	r1, r5
 800c79a:	4630      	mov	r0, r6
 800c79c:	f000 f93a 	bl	800ca14 <__swsetup_r>
 800c7a0:	b170      	cbz	r0, 800c7c0 <_vfiprintf_r+0x5c>
 800c7a2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c7a4:	07dc      	lsls	r4, r3, #31
 800c7a6:	d504      	bpl.n	800c7b2 <_vfiprintf_r+0x4e>
 800c7a8:	f04f 30ff 	mov.w	r0, #4294967295
 800c7ac:	b01d      	add	sp, #116	; 0x74
 800c7ae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c7b2:	89ab      	ldrh	r3, [r5, #12]
 800c7b4:	0598      	lsls	r0, r3, #22
 800c7b6:	d4f7      	bmi.n	800c7a8 <_vfiprintf_r+0x44>
 800c7b8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c7ba:	f7fe f9d8 	bl	800ab6e <__retarget_lock_release_recursive>
 800c7be:	e7f3      	b.n	800c7a8 <_vfiprintf_r+0x44>
 800c7c0:	2300      	movs	r3, #0
 800c7c2:	9309      	str	r3, [sp, #36]	; 0x24
 800c7c4:	2320      	movs	r3, #32
 800c7c6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c7ca:	f8cd 800c 	str.w	r8, [sp, #12]
 800c7ce:	2330      	movs	r3, #48	; 0x30
 800c7d0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c984 <_vfiprintf_r+0x220>
 800c7d4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c7d8:	f04f 0901 	mov.w	r9, #1
 800c7dc:	4623      	mov	r3, r4
 800c7de:	469a      	mov	sl, r3
 800c7e0:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c7e4:	b10a      	cbz	r2, 800c7ea <_vfiprintf_r+0x86>
 800c7e6:	2a25      	cmp	r2, #37	; 0x25
 800c7e8:	d1f9      	bne.n	800c7de <_vfiprintf_r+0x7a>
 800c7ea:	ebba 0b04 	subs.w	fp, sl, r4
 800c7ee:	d00b      	beq.n	800c808 <_vfiprintf_r+0xa4>
 800c7f0:	465b      	mov	r3, fp
 800c7f2:	4622      	mov	r2, r4
 800c7f4:	4629      	mov	r1, r5
 800c7f6:	4630      	mov	r0, r6
 800c7f8:	f7ff ffa2 	bl	800c740 <__sfputs_r>
 800c7fc:	3001      	adds	r0, #1
 800c7fe:	f000 80a9 	beq.w	800c954 <_vfiprintf_r+0x1f0>
 800c802:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c804:	445a      	add	r2, fp
 800c806:	9209      	str	r2, [sp, #36]	; 0x24
 800c808:	f89a 3000 	ldrb.w	r3, [sl]
 800c80c:	2b00      	cmp	r3, #0
 800c80e:	f000 80a1 	beq.w	800c954 <_vfiprintf_r+0x1f0>
 800c812:	2300      	movs	r3, #0
 800c814:	f04f 32ff 	mov.w	r2, #4294967295
 800c818:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c81c:	f10a 0a01 	add.w	sl, sl, #1
 800c820:	9304      	str	r3, [sp, #16]
 800c822:	9307      	str	r3, [sp, #28]
 800c824:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c828:	931a      	str	r3, [sp, #104]	; 0x68
 800c82a:	4654      	mov	r4, sl
 800c82c:	2205      	movs	r2, #5
 800c82e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c832:	4854      	ldr	r0, [pc, #336]	; (800c984 <_vfiprintf_r+0x220>)
 800c834:	f7f3 fd04 	bl	8000240 <memchr>
 800c838:	9a04      	ldr	r2, [sp, #16]
 800c83a:	b9d8      	cbnz	r0, 800c874 <_vfiprintf_r+0x110>
 800c83c:	06d1      	lsls	r1, r2, #27
 800c83e:	bf44      	itt	mi
 800c840:	2320      	movmi	r3, #32
 800c842:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c846:	0713      	lsls	r3, r2, #28
 800c848:	bf44      	itt	mi
 800c84a:	232b      	movmi	r3, #43	; 0x2b
 800c84c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c850:	f89a 3000 	ldrb.w	r3, [sl]
 800c854:	2b2a      	cmp	r3, #42	; 0x2a
 800c856:	d015      	beq.n	800c884 <_vfiprintf_r+0x120>
 800c858:	9a07      	ldr	r2, [sp, #28]
 800c85a:	4654      	mov	r4, sl
 800c85c:	2000      	movs	r0, #0
 800c85e:	f04f 0c0a 	mov.w	ip, #10
 800c862:	4621      	mov	r1, r4
 800c864:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c868:	3b30      	subs	r3, #48	; 0x30
 800c86a:	2b09      	cmp	r3, #9
 800c86c:	d94d      	bls.n	800c90a <_vfiprintf_r+0x1a6>
 800c86e:	b1b0      	cbz	r0, 800c89e <_vfiprintf_r+0x13a>
 800c870:	9207      	str	r2, [sp, #28]
 800c872:	e014      	b.n	800c89e <_vfiprintf_r+0x13a>
 800c874:	eba0 0308 	sub.w	r3, r0, r8
 800c878:	fa09 f303 	lsl.w	r3, r9, r3
 800c87c:	4313      	orrs	r3, r2
 800c87e:	9304      	str	r3, [sp, #16]
 800c880:	46a2      	mov	sl, r4
 800c882:	e7d2      	b.n	800c82a <_vfiprintf_r+0xc6>
 800c884:	9b03      	ldr	r3, [sp, #12]
 800c886:	1d19      	adds	r1, r3, #4
 800c888:	681b      	ldr	r3, [r3, #0]
 800c88a:	9103      	str	r1, [sp, #12]
 800c88c:	2b00      	cmp	r3, #0
 800c88e:	bfbb      	ittet	lt
 800c890:	425b      	neglt	r3, r3
 800c892:	f042 0202 	orrlt.w	r2, r2, #2
 800c896:	9307      	strge	r3, [sp, #28]
 800c898:	9307      	strlt	r3, [sp, #28]
 800c89a:	bfb8      	it	lt
 800c89c:	9204      	strlt	r2, [sp, #16]
 800c89e:	7823      	ldrb	r3, [r4, #0]
 800c8a0:	2b2e      	cmp	r3, #46	; 0x2e
 800c8a2:	d10c      	bne.n	800c8be <_vfiprintf_r+0x15a>
 800c8a4:	7863      	ldrb	r3, [r4, #1]
 800c8a6:	2b2a      	cmp	r3, #42	; 0x2a
 800c8a8:	d134      	bne.n	800c914 <_vfiprintf_r+0x1b0>
 800c8aa:	9b03      	ldr	r3, [sp, #12]
 800c8ac:	1d1a      	adds	r2, r3, #4
 800c8ae:	681b      	ldr	r3, [r3, #0]
 800c8b0:	9203      	str	r2, [sp, #12]
 800c8b2:	2b00      	cmp	r3, #0
 800c8b4:	bfb8      	it	lt
 800c8b6:	f04f 33ff 	movlt.w	r3, #4294967295
 800c8ba:	3402      	adds	r4, #2
 800c8bc:	9305      	str	r3, [sp, #20]
 800c8be:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c994 <_vfiprintf_r+0x230>
 800c8c2:	7821      	ldrb	r1, [r4, #0]
 800c8c4:	2203      	movs	r2, #3
 800c8c6:	4650      	mov	r0, sl
 800c8c8:	f7f3 fcba 	bl	8000240 <memchr>
 800c8cc:	b138      	cbz	r0, 800c8de <_vfiprintf_r+0x17a>
 800c8ce:	9b04      	ldr	r3, [sp, #16]
 800c8d0:	eba0 000a 	sub.w	r0, r0, sl
 800c8d4:	2240      	movs	r2, #64	; 0x40
 800c8d6:	4082      	lsls	r2, r0
 800c8d8:	4313      	orrs	r3, r2
 800c8da:	3401      	adds	r4, #1
 800c8dc:	9304      	str	r3, [sp, #16]
 800c8de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c8e2:	4829      	ldr	r0, [pc, #164]	; (800c988 <_vfiprintf_r+0x224>)
 800c8e4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c8e8:	2206      	movs	r2, #6
 800c8ea:	f7f3 fca9 	bl	8000240 <memchr>
 800c8ee:	2800      	cmp	r0, #0
 800c8f0:	d03f      	beq.n	800c972 <_vfiprintf_r+0x20e>
 800c8f2:	4b26      	ldr	r3, [pc, #152]	; (800c98c <_vfiprintf_r+0x228>)
 800c8f4:	bb1b      	cbnz	r3, 800c93e <_vfiprintf_r+0x1da>
 800c8f6:	9b03      	ldr	r3, [sp, #12]
 800c8f8:	3307      	adds	r3, #7
 800c8fa:	f023 0307 	bic.w	r3, r3, #7
 800c8fe:	3308      	adds	r3, #8
 800c900:	9303      	str	r3, [sp, #12]
 800c902:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c904:	443b      	add	r3, r7
 800c906:	9309      	str	r3, [sp, #36]	; 0x24
 800c908:	e768      	b.n	800c7dc <_vfiprintf_r+0x78>
 800c90a:	fb0c 3202 	mla	r2, ip, r2, r3
 800c90e:	460c      	mov	r4, r1
 800c910:	2001      	movs	r0, #1
 800c912:	e7a6      	b.n	800c862 <_vfiprintf_r+0xfe>
 800c914:	2300      	movs	r3, #0
 800c916:	3401      	adds	r4, #1
 800c918:	9305      	str	r3, [sp, #20]
 800c91a:	4619      	mov	r1, r3
 800c91c:	f04f 0c0a 	mov.w	ip, #10
 800c920:	4620      	mov	r0, r4
 800c922:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c926:	3a30      	subs	r2, #48	; 0x30
 800c928:	2a09      	cmp	r2, #9
 800c92a:	d903      	bls.n	800c934 <_vfiprintf_r+0x1d0>
 800c92c:	2b00      	cmp	r3, #0
 800c92e:	d0c6      	beq.n	800c8be <_vfiprintf_r+0x15a>
 800c930:	9105      	str	r1, [sp, #20]
 800c932:	e7c4      	b.n	800c8be <_vfiprintf_r+0x15a>
 800c934:	fb0c 2101 	mla	r1, ip, r1, r2
 800c938:	4604      	mov	r4, r0
 800c93a:	2301      	movs	r3, #1
 800c93c:	e7f0      	b.n	800c920 <_vfiprintf_r+0x1bc>
 800c93e:	ab03      	add	r3, sp, #12
 800c940:	9300      	str	r3, [sp, #0]
 800c942:	462a      	mov	r2, r5
 800c944:	4b12      	ldr	r3, [pc, #72]	; (800c990 <_vfiprintf_r+0x22c>)
 800c946:	a904      	add	r1, sp, #16
 800c948:	4630      	mov	r0, r6
 800c94a:	f7fd fb49 	bl	8009fe0 <_printf_float>
 800c94e:	4607      	mov	r7, r0
 800c950:	1c78      	adds	r0, r7, #1
 800c952:	d1d6      	bne.n	800c902 <_vfiprintf_r+0x19e>
 800c954:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c956:	07d9      	lsls	r1, r3, #31
 800c958:	d405      	bmi.n	800c966 <_vfiprintf_r+0x202>
 800c95a:	89ab      	ldrh	r3, [r5, #12]
 800c95c:	059a      	lsls	r2, r3, #22
 800c95e:	d402      	bmi.n	800c966 <_vfiprintf_r+0x202>
 800c960:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c962:	f7fe f904 	bl	800ab6e <__retarget_lock_release_recursive>
 800c966:	89ab      	ldrh	r3, [r5, #12]
 800c968:	065b      	lsls	r3, r3, #25
 800c96a:	f53f af1d 	bmi.w	800c7a8 <_vfiprintf_r+0x44>
 800c96e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c970:	e71c      	b.n	800c7ac <_vfiprintf_r+0x48>
 800c972:	ab03      	add	r3, sp, #12
 800c974:	9300      	str	r3, [sp, #0]
 800c976:	462a      	mov	r2, r5
 800c978:	4b05      	ldr	r3, [pc, #20]	; (800c990 <_vfiprintf_r+0x22c>)
 800c97a:	a904      	add	r1, sp, #16
 800c97c:	4630      	mov	r0, r6
 800c97e:	f7fd fdd3 	bl	800a528 <_printf_i>
 800c982:	e7e4      	b.n	800c94e <_vfiprintf_r+0x1ea>
 800c984:	0800d0f4 	.word	0x0800d0f4
 800c988:	0800d0fe 	.word	0x0800d0fe
 800c98c:	08009fe1 	.word	0x08009fe1
 800c990:	0800c741 	.word	0x0800c741
 800c994:	0800d0fa 	.word	0x0800d0fa

0800c998 <__swbuf_r>:
 800c998:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c99a:	460e      	mov	r6, r1
 800c99c:	4614      	mov	r4, r2
 800c99e:	4605      	mov	r5, r0
 800c9a0:	b118      	cbz	r0, 800c9aa <__swbuf_r+0x12>
 800c9a2:	6a03      	ldr	r3, [r0, #32]
 800c9a4:	b90b      	cbnz	r3, 800c9aa <__swbuf_r+0x12>
 800c9a6:	f7fd ff5b 	bl	800a860 <__sinit>
 800c9aa:	69a3      	ldr	r3, [r4, #24]
 800c9ac:	60a3      	str	r3, [r4, #8]
 800c9ae:	89a3      	ldrh	r3, [r4, #12]
 800c9b0:	071a      	lsls	r2, r3, #28
 800c9b2:	d525      	bpl.n	800ca00 <__swbuf_r+0x68>
 800c9b4:	6923      	ldr	r3, [r4, #16]
 800c9b6:	b31b      	cbz	r3, 800ca00 <__swbuf_r+0x68>
 800c9b8:	6823      	ldr	r3, [r4, #0]
 800c9ba:	6922      	ldr	r2, [r4, #16]
 800c9bc:	1a98      	subs	r0, r3, r2
 800c9be:	6963      	ldr	r3, [r4, #20]
 800c9c0:	b2f6      	uxtb	r6, r6
 800c9c2:	4283      	cmp	r3, r0
 800c9c4:	4637      	mov	r7, r6
 800c9c6:	dc04      	bgt.n	800c9d2 <__swbuf_r+0x3a>
 800c9c8:	4621      	mov	r1, r4
 800c9ca:	4628      	mov	r0, r5
 800c9cc:	f7ff fdc4 	bl	800c558 <_fflush_r>
 800c9d0:	b9e0      	cbnz	r0, 800ca0c <__swbuf_r+0x74>
 800c9d2:	68a3      	ldr	r3, [r4, #8]
 800c9d4:	3b01      	subs	r3, #1
 800c9d6:	60a3      	str	r3, [r4, #8]
 800c9d8:	6823      	ldr	r3, [r4, #0]
 800c9da:	1c5a      	adds	r2, r3, #1
 800c9dc:	6022      	str	r2, [r4, #0]
 800c9de:	701e      	strb	r6, [r3, #0]
 800c9e0:	6962      	ldr	r2, [r4, #20]
 800c9e2:	1c43      	adds	r3, r0, #1
 800c9e4:	429a      	cmp	r2, r3
 800c9e6:	d004      	beq.n	800c9f2 <__swbuf_r+0x5a>
 800c9e8:	89a3      	ldrh	r3, [r4, #12]
 800c9ea:	07db      	lsls	r3, r3, #31
 800c9ec:	d506      	bpl.n	800c9fc <__swbuf_r+0x64>
 800c9ee:	2e0a      	cmp	r6, #10
 800c9f0:	d104      	bne.n	800c9fc <__swbuf_r+0x64>
 800c9f2:	4621      	mov	r1, r4
 800c9f4:	4628      	mov	r0, r5
 800c9f6:	f7ff fdaf 	bl	800c558 <_fflush_r>
 800c9fa:	b938      	cbnz	r0, 800ca0c <__swbuf_r+0x74>
 800c9fc:	4638      	mov	r0, r7
 800c9fe:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca00:	4621      	mov	r1, r4
 800ca02:	4628      	mov	r0, r5
 800ca04:	f000 f806 	bl	800ca14 <__swsetup_r>
 800ca08:	2800      	cmp	r0, #0
 800ca0a:	d0d5      	beq.n	800c9b8 <__swbuf_r+0x20>
 800ca0c:	f04f 37ff 	mov.w	r7, #4294967295
 800ca10:	e7f4      	b.n	800c9fc <__swbuf_r+0x64>
	...

0800ca14 <__swsetup_r>:
 800ca14:	b538      	push	{r3, r4, r5, lr}
 800ca16:	4b2a      	ldr	r3, [pc, #168]	; (800cac0 <__swsetup_r+0xac>)
 800ca18:	4605      	mov	r5, r0
 800ca1a:	6818      	ldr	r0, [r3, #0]
 800ca1c:	460c      	mov	r4, r1
 800ca1e:	b118      	cbz	r0, 800ca28 <__swsetup_r+0x14>
 800ca20:	6a03      	ldr	r3, [r0, #32]
 800ca22:	b90b      	cbnz	r3, 800ca28 <__swsetup_r+0x14>
 800ca24:	f7fd ff1c 	bl	800a860 <__sinit>
 800ca28:	89a3      	ldrh	r3, [r4, #12]
 800ca2a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca2e:	0718      	lsls	r0, r3, #28
 800ca30:	d422      	bmi.n	800ca78 <__swsetup_r+0x64>
 800ca32:	06d9      	lsls	r1, r3, #27
 800ca34:	d407      	bmi.n	800ca46 <__swsetup_r+0x32>
 800ca36:	2309      	movs	r3, #9
 800ca38:	602b      	str	r3, [r5, #0]
 800ca3a:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ca3e:	81a3      	strh	r3, [r4, #12]
 800ca40:	f04f 30ff 	mov.w	r0, #4294967295
 800ca44:	e034      	b.n	800cab0 <__swsetup_r+0x9c>
 800ca46:	0758      	lsls	r0, r3, #29
 800ca48:	d512      	bpl.n	800ca70 <__swsetup_r+0x5c>
 800ca4a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ca4c:	b141      	cbz	r1, 800ca60 <__swsetup_r+0x4c>
 800ca4e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ca52:	4299      	cmp	r1, r3
 800ca54:	d002      	beq.n	800ca5c <__swsetup_r+0x48>
 800ca56:	4628      	mov	r0, r5
 800ca58:	f7fe ff24 	bl	800b8a4 <_free_r>
 800ca5c:	2300      	movs	r3, #0
 800ca5e:	6363      	str	r3, [r4, #52]	; 0x34
 800ca60:	89a3      	ldrh	r3, [r4, #12]
 800ca62:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ca66:	81a3      	strh	r3, [r4, #12]
 800ca68:	2300      	movs	r3, #0
 800ca6a:	6063      	str	r3, [r4, #4]
 800ca6c:	6923      	ldr	r3, [r4, #16]
 800ca6e:	6023      	str	r3, [r4, #0]
 800ca70:	89a3      	ldrh	r3, [r4, #12]
 800ca72:	f043 0308 	orr.w	r3, r3, #8
 800ca76:	81a3      	strh	r3, [r4, #12]
 800ca78:	6923      	ldr	r3, [r4, #16]
 800ca7a:	b94b      	cbnz	r3, 800ca90 <__swsetup_r+0x7c>
 800ca7c:	89a3      	ldrh	r3, [r4, #12]
 800ca7e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ca82:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ca86:	d003      	beq.n	800ca90 <__swsetup_r+0x7c>
 800ca88:	4621      	mov	r1, r4
 800ca8a:	4628      	mov	r0, r5
 800ca8c:	f000 f88c 	bl	800cba8 <__smakebuf_r>
 800ca90:	89a0      	ldrh	r0, [r4, #12]
 800ca92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ca96:	f010 0301 	ands.w	r3, r0, #1
 800ca9a:	d00a      	beq.n	800cab2 <__swsetup_r+0x9e>
 800ca9c:	2300      	movs	r3, #0
 800ca9e:	60a3      	str	r3, [r4, #8]
 800caa0:	6963      	ldr	r3, [r4, #20]
 800caa2:	425b      	negs	r3, r3
 800caa4:	61a3      	str	r3, [r4, #24]
 800caa6:	6923      	ldr	r3, [r4, #16]
 800caa8:	b943      	cbnz	r3, 800cabc <__swsetup_r+0xa8>
 800caaa:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800caae:	d1c4      	bne.n	800ca3a <__swsetup_r+0x26>
 800cab0:	bd38      	pop	{r3, r4, r5, pc}
 800cab2:	0781      	lsls	r1, r0, #30
 800cab4:	bf58      	it	pl
 800cab6:	6963      	ldrpl	r3, [r4, #20]
 800cab8:	60a3      	str	r3, [r4, #8]
 800caba:	e7f4      	b.n	800caa6 <__swsetup_r+0x92>
 800cabc:	2000      	movs	r0, #0
 800cabe:	e7f7      	b.n	800cab0 <__swsetup_r+0x9c>
 800cac0:	20000128 	.word	0x20000128

0800cac4 <_raise_r>:
 800cac4:	291f      	cmp	r1, #31
 800cac6:	b538      	push	{r3, r4, r5, lr}
 800cac8:	4604      	mov	r4, r0
 800caca:	460d      	mov	r5, r1
 800cacc:	d904      	bls.n	800cad8 <_raise_r+0x14>
 800cace:	2316      	movs	r3, #22
 800cad0:	6003      	str	r3, [r0, #0]
 800cad2:	f04f 30ff 	mov.w	r0, #4294967295
 800cad6:	bd38      	pop	{r3, r4, r5, pc}
 800cad8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800cada:	b112      	cbz	r2, 800cae2 <_raise_r+0x1e>
 800cadc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800cae0:	b94b      	cbnz	r3, 800caf6 <_raise_r+0x32>
 800cae2:	4620      	mov	r0, r4
 800cae4:	f000 f830 	bl	800cb48 <_getpid_r>
 800cae8:	462a      	mov	r2, r5
 800caea:	4601      	mov	r1, r0
 800caec:	4620      	mov	r0, r4
 800caee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800caf2:	f000 b817 	b.w	800cb24 <_kill_r>
 800caf6:	2b01      	cmp	r3, #1
 800caf8:	d00a      	beq.n	800cb10 <_raise_r+0x4c>
 800cafa:	1c59      	adds	r1, r3, #1
 800cafc:	d103      	bne.n	800cb06 <_raise_r+0x42>
 800cafe:	2316      	movs	r3, #22
 800cb00:	6003      	str	r3, [r0, #0]
 800cb02:	2001      	movs	r0, #1
 800cb04:	e7e7      	b.n	800cad6 <_raise_r+0x12>
 800cb06:	2400      	movs	r4, #0
 800cb08:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800cb0c:	4628      	mov	r0, r5
 800cb0e:	4798      	blx	r3
 800cb10:	2000      	movs	r0, #0
 800cb12:	e7e0      	b.n	800cad6 <_raise_r+0x12>

0800cb14 <raise>:
 800cb14:	4b02      	ldr	r3, [pc, #8]	; (800cb20 <raise+0xc>)
 800cb16:	4601      	mov	r1, r0
 800cb18:	6818      	ldr	r0, [r3, #0]
 800cb1a:	f7ff bfd3 	b.w	800cac4 <_raise_r>
 800cb1e:	bf00      	nop
 800cb20:	20000128 	.word	0x20000128

0800cb24 <_kill_r>:
 800cb24:	b538      	push	{r3, r4, r5, lr}
 800cb26:	4d07      	ldr	r5, [pc, #28]	; (800cb44 <_kill_r+0x20>)
 800cb28:	2300      	movs	r3, #0
 800cb2a:	4604      	mov	r4, r0
 800cb2c:	4608      	mov	r0, r1
 800cb2e:	4611      	mov	r1, r2
 800cb30:	602b      	str	r3, [r5, #0]
 800cb32:	f7f4 ff9f 	bl	8001a74 <_kill>
 800cb36:	1c43      	adds	r3, r0, #1
 800cb38:	d102      	bne.n	800cb40 <_kill_r+0x1c>
 800cb3a:	682b      	ldr	r3, [r5, #0]
 800cb3c:	b103      	cbz	r3, 800cb40 <_kill_r+0x1c>
 800cb3e:	6023      	str	r3, [r4, #0]
 800cb40:	bd38      	pop	{r3, r4, r5, pc}
 800cb42:	bf00      	nop
 800cb44:	200008b4 	.word	0x200008b4

0800cb48 <_getpid_r>:
 800cb48:	f7f4 bf8c 	b.w	8001a64 <_getpid>

0800cb4c <_malloc_usable_size_r>:
 800cb4c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cb50:	1f18      	subs	r0, r3, #4
 800cb52:	2b00      	cmp	r3, #0
 800cb54:	bfbc      	itt	lt
 800cb56:	580b      	ldrlt	r3, [r1, r0]
 800cb58:	18c0      	addlt	r0, r0, r3
 800cb5a:	4770      	bx	lr

0800cb5c <__swhatbuf_r>:
 800cb5c:	b570      	push	{r4, r5, r6, lr}
 800cb5e:	460c      	mov	r4, r1
 800cb60:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800cb64:	2900      	cmp	r1, #0
 800cb66:	b096      	sub	sp, #88	; 0x58
 800cb68:	4615      	mov	r5, r2
 800cb6a:	461e      	mov	r6, r3
 800cb6c:	da0d      	bge.n	800cb8a <__swhatbuf_r+0x2e>
 800cb6e:	89a3      	ldrh	r3, [r4, #12]
 800cb70:	f013 0f80 	tst.w	r3, #128	; 0x80
 800cb74:	f04f 0100 	mov.w	r1, #0
 800cb78:	bf0c      	ite	eq
 800cb7a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800cb7e:	2340      	movne	r3, #64	; 0x40
 800cb80:	2000      	movs	r0, #0
 800cb82:	6031      	str	r1, [r6, #0]
 800cb84:	602b      	str	r3, [r5, #0]
 800cb86:	b016      	add	sp, #88	; 0x58
 800cb88:	bd70      	pop	{r4, r5, r6, pc}
 800cb8a:	466a      	mov	r2, sp
 800cb8c:	f000 f848 	bl	800cc20 <_fstat_r>
 800cb90:	2800      	cmp	r0, #0
 800cb92:	dbec      	blt.n	800cb6e <__swhatbuf_r+0x12>
 800cb94:	9901      	ldr	r1, [sp, #4]
 800cb96:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800cb9a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800cb9e:	4259      	negs	r1, r3
 800cba0:	4159      	adcs	r1, r3
 800cba2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800cba6:	e7eb      	b.n	800cb80 <__swhatbuf_r+0x24>

0800cba8 <__smakebuf_r>:
 800cba8:	898b      	ldrh	r3, [r1, #12]
 800cbaa:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800cbac:	079d      	lsls	r5, r3, #30
 800cbae:	4606      	mov	r6, r0
 800cbb0:	460c      	mov	r4, r1
 800cbb2:	d507      	bpl.n	800cbc4 <__smakebuf_r+0x1c>
 800cbb4:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800cbb8:	6023      	str	r3, [r4, #0]
 800cbba:	6123      	str	r3, [r4, #16]
 800cbbc:	2301      	movs	r3, #1
 800cbbe:	6163      	str	r3, [r4, #20]
 800cbc0:	b002      	add	sp, #8
 800cbc2:	bd70      	pop	{r4, r5, r6, pc}
 800cbc4:	ab01      	add	r3, sp, #4
 800cbc6:	466a      	mov	r2, sp
 800cbc8:	f7ff ffc8 	bl	800cb5c <__swhatbuf_r>
 800cbcc:	9900      	ldr	r1, [sp, #0]
 800cbce:	4605      	mov	r5, r0
 800cbd0:	4630      	mov	r0, r6
 800cbd2:	f7fe fedb 	bl	800b98c <_malloc_r>
 800cbd6:	b948      	cbnz	r0, 800cbec <__smakebuf_r+0x44>
 800cbd8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800cbdc:	059a      	lsls	r2, r3, #22
 800cbde:	d4ef      	bmi.n	800cbc0 <__smakebuf_r+0x18>
 800cbe0:	f023 0303 	bic.w	r3, r3, #3
 800cbe4:	f043 0302 	orr.w	r3, r3, #2
 800cbe8:	81a3      	strh	r3, [r4, #12]
 800cbea:	e7e3      	b.n	800cbb4 <__smakebuf_r+0xc>
 800cbec:	89a3      	ldrh	r3, [r4, #12]
 800cbee:	6020      	str	r0, [r4, #0]
 800cbf0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cbf4:	81a3      	strh	r3, [r4, #12]
 800cbf6:	9b00      	ldr	r3, [sp, #0]
 800cbf8:	6163      	str	r3, [r4, #20]
 800cbfa:	9b01      	ldr	r3, [sp, #4]
 800cbfc:	6120      	str	r0, [r4, #16]
 800cbfe:	b15b      	cbz	r3, 800cc18 <__smakebuf_r+0x70>
 800cc00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800cc04:	4630      	mov	r0, r6
 800cc06:	f000 f81d 	bl	800cc44 <_isatty_r>
 800cc0a:	b128      	cbz	r0, 800cc18 <__smakebuf_r+0x70>
 800cc0c:	89a3      	ldrh	r3, [r4, #12]
 800cc0e:	f023 0303 	bic.w	r3, r3, #3
 800cc12:	f043 0301 	orr.w	r3, r3, #1
 800cc16:	81a3      	strh	r3, [r4, #12]
 800cc18:	89a3      	ldrh	r3, [r4, #12]
 800cc1a:	431d      	orrs	r5, r3
 800cc1c:	81a5      	strh	r5, [r4, #12]
 800cc1e:	e7cf      	b.n	800cbc0 <__smakebuf_r+0x18>

0800cc20 <_fstat_r>:
 800cc20:	b538      	push	{r3, r4, r5, lr}
 800cc22:	4d07      	ldr	r5, [pc, #28]	; (800cc40 <_fstat_r+0x20>)
 800cc24:	2300      	movs	r3, #0
 800cc26:	4604      	mov	r4, r0
 800cc28:	4608      	mov	r0, r1
 800cc2a:	4611      	mov	r1, r2
 800cc2c:	602b      	str	r3, [r5, #0]
 800cc2e:	f7f4 ff80 	bl	8001b32 <_fstat>
 800cc32:	1c43      	adds	r3, r0, #1
 800cc34:	d102      	bne.n	800cc3c <_fstat_r+0x1c>
 800cc36:	682b      	ldr	r3, [r5, #0]
 800cc38:	b103      	cbz	r3, 800cc3c <_fstat_r+0x1c>
 800cc3a:	6023      	str	r3, [r4, #0]
 800cc3c:	bd38      	pop	{r3, r4, r5, pc}
 800cc3e:	bf00      	nop
 800cc40:	200008b4 	.word	0x200008b4

0800cc44 <_isatty_r>:
 800cc44:	b538      	push	{r3, r4, r5, lr}
 800cc46:	4d06      	ldr	r5, [pc, #24]	; (800cc60 <_isatty_r+0x1c>)
 800cc48:	2300      	movs	r3, #0
 800cc4a:	4604      	mov	r4, r0
 800cc4c:	4608      	mov	r0, r1
 800cc4e:	602b      	str	r3, [r5, #0]
 800cc50:	f7f4 ff7f 	bl	8001b52 <_isatty>
 800cc54:	1c43      	adds	r3, r0, #1
 800cc56:	d102      	bne.n	800cc5e <_isatty_r+0x1a>
 800cc58:	682b      	ldr	r3, [r5, #0]
 800cc5a:	b103      	cbz	r3, 800cc5e <_isatty_r+0x1a>
 800cc5c:	6023      	str	r3, [r4, #0]
 800cc5e:	bd38      	pop	{r3, r4, r5, pc}
 800cc60:	200008b4 	.word	0x200008b4

0800cc64 <_init>:
 800cc64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc66:	bf00      	nop
 800cc68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc6a:	bc08      	pop	{r3}
 800cc6c:	469e      	mov	lr, r3
 800cc6e:	4770      	bx	lr

0800cc70 <_fini>:
 800cc70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800cc72:	bf00      	nop
 800cc74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800cc76:	bc08      	pop	{r3}
 800cc78:	469e      	mov	lr, r3
 800cc7a:	4770      	bx	lr
