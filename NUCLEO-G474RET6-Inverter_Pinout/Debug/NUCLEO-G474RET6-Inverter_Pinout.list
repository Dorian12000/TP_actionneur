
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009004  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000278  080091e4  080091e4  000191e4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800945c  0800945c  00020124  2**0
                  CONTENTS
  4 .ARM          00000008  0800945c  0800945c  0001945c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009464  08009464  00020124  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009464  08009464  00019464  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009468  08009468  00019468  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000124  20000000  0800946c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000050c  20000124  08009590  00020124  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000630  08009590  00020630  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020124  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020154  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a875  00000000  00000000  00020197  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003642  00000000  00000000  0003aa0c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015f8  00000000  00000000  0003e050  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010fd  00000000  00000000  0003f648  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a302  00000000  00000000  00040745  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001b37c  00000000  00000000  0006aa47  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001145fa  00000000  00000000  00085dc3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  000068e0  00000000  00000000  0019a3c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001a0ca0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000124 	.word	0x20000124
 80001fc:	00000000 	.word	0x00000000
 8000200:	080091cc 	.word	0x080091cc

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	20000128 	.word	0x20000128
 800021c:	080091cc 	.word	0x080091cc

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr

08000234 <strlen>:
 8000234:	4603      	mov	r3, r0
 8000236:	f813 2b01 	ldrb.w	r2, [r3], #1
 800023a:	2a00      	cmp	r2, #0
 800023c:	d1fb      	bne.n	8000236 <strlen+0x2>
 800023e:	1a18      	subs	r0, r3, r0
 8000240:	3801      	subs	r0, #1
 8000242:	4770      	bx	lr
	...

08000250 <memchr>:
 8000250:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000254:	2a10      	cmp	r2, #16
 8000256:	db2b      	blt.n	80002b0 <memchr+0x60>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	d008      	beq.n	8000270 <memchr+0x20>
 800025e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000262:	3a01      	subs	r2, #1
 8000264:	428b      	cmp	r3, r1
 8000266:	d02d      	beq.n	80002c4 <memchr+0x74>
 8000268:	f010 0f07 	tst.w	r0, #7
 800026c:	b342      	cbz	r2, 80002c0 <memchr+0x70>
 800026e:	d1f6      	bne.n	800025e <memchr+0xe>
 8000270:	b4f0      	push	{r4, r5, r6, r7}
 8000272:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000276:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800027a:	f022 0407 	bic.w	r4, r2, #7
 800027e:	f07f 0700 	mvns.w	r7, #0
 8000282:	2300      	movs	r3, #0
 8000284:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000288:	3c08      	subs	r4, #8
 800028a:	ea85 0501 	eor.w	r5, r5, r1
 800028e:	ea86 0601 	eor.w	r6, r6, r1
 8000292:	fa85 f547 	uadd8	r5, r5, r7
 8000296:	faa3 f587 	sel	r5, r3, r7
 800029a:	fa86 f647 	uadd8	r6, r6, r7
 800029e:	faa5 f687 	sel	r6, r5, r7
 80002a2:	b98e      	cbnz	r6, 80002c8 <memchr+0x78>
 80002a4:	d1ee      	bne.n	8000284 <memchr+0x34>
 80002a6:	bcf0      	pop	{r4, r5, r6, r7}
 80002a8:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002ac:	f002 0207 	and.w	r2, r2, #7
 80002b0:	b132      	cbz	r2, 80002c0 <memchr+0x70>
 80002b2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002b6:	3a01      	subs	r2, #1
 80002b8:	ea83 0301 	eor.w	r3, r3, r1
 80002bc:	b113      	cbz	r3, 80002c4 <memchr+0x74>
 80002be:	d1f8      	bne.n	80002b2 <memchr+0x62>
 80002c0:	2000      	movs	r0, #0
 80002c2:	4770      	bx	lr
 80002c4:	3801      	subs	r0, #1
 80002c6:	4770      	bx	lr
 80002c8:	2d00      	cmp	r5, #0
 80002ca:	bf06      	itte	eq
 80002cc:	4635      	moveq	r5, r6
 80002ce:	3803      	subeq	r0, #3
 80002d0:	3807      	subne	r0, #7
 80002d2:	f015 0f01 	tst.w	r5, #1
 80002d6:	d107      	bne.n	80002e8 <memchr+0x98>
 80002d8:	3001      	adds	r0, #1
 80002da:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002de:	bf02      	ittt	eq
 80002e0:	3001      	addeq	r0, #1
 80002e2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002e6:	3001      	addeq	r0, #1
 80002e8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ea:	3801      	subs	r0, #1
 80002ec:	4770      	bx	lr
 80002ee:	bf00      	nop

080002f0 <__aeabi_uldivmod>:
 80002f0:	b953      	cbnz	r3, 8000308 <__aeabi_uldivmod+0x18>
 80002f2:	b94a      	cbnz	r2, 8000308 <__aeabi_uldivmod+0x18>
 80002f4:	2900      	cmp	r1, #0
 80002f6:	bf08      	it	eq
 80002f8:	2800      	cmpeq	r0, #0
 80002fa:	bf1c      	itt	ne
 80002fc:	f04f 31ff 	movne.w	r1, #4294967295
 8000300:	f04f 30ff 	movne.w	r0, #4294967295
 8000304:	f000 b970 	b.w	80005e8 <__aeabi_idiv0>
 8000308:	f1ad 0c08 	sub.w	ip, sp, #8
 800030c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000310:	f000 f806 	bl	8000320 <__udivmoddi4>
 8000314:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000318:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800031c:	b004      	add	sp, #16
 800031e:	4770      	bx	lr

08000320 <__udivmoddi4>:
 8000320:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000324:	9e08      	ldr	r6, [sp, #32]
 8000326:	460d      	mov	r5, r1
 8000328:	4604      	mov	r4, r0
 800032a:	460f      	mov	r7, r1
 800032c:	2b00      	cmp	r3, #0
 800032e:	d14a      	bne.n	80003c6 <__udivmoddi4+0xa6>
 8000330:	428a      	cmp	r2, r1
 8000332:	4694      	mov	ip, r2
 8000334:	d965      	bls.n	8000402 <__udivmoddi4+0xe2>
 8000336:	fab2 f382 	clz	r3, r2
 800033a:	b143      	cbz	r3, 800034e <__udivmoddi4+0x2e>
 800033c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000340:	f1c3 0220 	rsb	r2, r3, #32
 8000344:	409f      	lsls	r7, r3
 8000346:	fa20 f202 	lsr.w	r2, r0, r2
 800034a:	4317      	orrs	r7, r2
 800034c:	409c      	lsls	r4, r3
 800034e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000352:	fa1f f58c 	uxth.w	r5, ip
 8000356:	fbb7 f1fe 	udiv	r1, r7, lr
 800035a:	0c22      	lsrs	r2, r4, #16
 800035c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000360:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000364:	fb01 f005 	mul.w	r0, r1, r5
 8000368:	4290      	cmp	r0, r2
 800036a:	d90a      	bls.n	8000382 <__udivmoddi4+0x62>
 800036c:	eb1c 0202 	adds.w	r2, ip, r2
 8000370:	f101 37ff 	add.w	r7, r1, #4294967295
 8000374:	f080 811c 	bcs.w	80005b0 <__udivmoddi4+0x290>
 8000378:	4290      	cmp	r0, r2
 800037a:	f240 8119 	bls.w	80005b0 <__udivmoddi4+0x290>
 800037e:	3902      	subs	r1, #2
 8000380:	4462      	add	r2, ip
 8000382:	1a12      	subs	r2, r2, r0
 8000384:	b2a4      	uxth	r4, r4
 8000386:	fbb2 f0fe 	udiv	r0, r2, lr
 800038a:	fb0e 2210 	mls	r2, lr, r0, r2
 800038e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000392:	fb00 f505 	mul.w	r5, r0, r5
 8000396:	42a5      	cmp	r5, r4
 8000398:	d90a      	bls.n	80003b0 <__udivmoddi4+0x90>
 800039a:	eb1c 0404 	adds.w	r4, ip, r4
 800039e:	f100 32ff 	add.w	r2, r0, #4294967295
 80003a2:	f080 8107 	bcs.w	80005b4 <__udivmoddi4+0x294>
 80003a6:	42a5      	cmp	r5, r4
 80003a8:	f240 8104 	bls.w	80005b4 <__udivmoddi4+0x294>
 80003ac:	4464      	add	r4, ip
 80003ae:	3802      	subs	r0, #2
 80003b0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80003b4:	1b64      	subs	r4, r4, r5
 80003b6:	2100      	movs	r1, #0
 80003b8:	b11e      	cbz	r6, 80003c2 <__udivmoddi4+0xa2>
 80003ba:	40dc      	lsrs	r4, r3
 80003bc:	2300      	movs	r3, #0
 80003be:	e9c6 4300 	strd	r4, r3, [r6]
 80003c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003c6:	428b      	cmp	r3, r1
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0xbc>
 80003ca:	2e00      	cmp	r6, #0
 80003cc:	f000 80ed 	beq.w	80005aa <__udivmoddi4+0x28a>
 80003d0:	2100      	movs	r1, #0
 80003d2:	e9c6 0500 	strd	r0, r5, [r6]
 80003d6:	4608      	mov	r0, r1
 80003d8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003dc:	fab3 f183 	clz	r1, r3
 80003e0:	2900      	cmp	r1, #0
 80003e2:	d149      	bne.n	8000478 <__udivmoddi4+0x158>
 80003e4:	42ab      	cmp	r3, r5
 80003e6:	d302      	bcc.n	80003ee <__udivmoddi4+0xce>
 80003e8:	4282      	cmp	r2, r0
 80003ea:	f200 80f8 	bhi.w	80005de <__udivmoddi4+0x2be>
 80003ee:	1a84      	subs	r4, r0, r2
 80003f0:	eb65 0203 	sbc.w	r2, r5, r3
 80003f4:	2001      	movs	r0, #1
 80003f6:	4617      	mov	r7, r2
 80003f8:	2e00      	cmp	r6, #0
 80003fa:	d0e2      	beq.n	80003c2 <__udivmoddi4+0xa2>
 80003fc:	e9c6 4700 	strd	r4, r7, [r6]
 8000400:	e7df      	b.n	80003c2 <__udivmoddi4+0xa2>
 8000402:	b902      	cbnz	r2, 8000406 <__udivmoddi4+0xe6>
 8000404:	deff      	udf	#255	; 0xff
 8000406:	fab2 f382 	clz	r3, r2
 800040a:	2b00      	cmp	r3, #0
 800040c:	f040 8090 	bne.w	8000530 <__udivmoddi4+0x210>
 8000410:	1a8a      	subs	r2, r1, r2
 8000412:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000416:	fa1f fe8c 	uxth.w	lr, ip
 800041a:	2101      	movs	r1, #1
 800041c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000420:	fb07 2015 	mls	r0, r7, r5, r2
 8000424:	0c22      	lsrs	r2, r4, #16
 8000426:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800042a:	fb0e f005 	mul.w	r0, lr, r5
 800042e:	4290      	cmp	r0, r2
 8000430:	d908      	bls.n	8000444 <__udivmoddi4+0x124>
 8000432:	eb1c 0202 	adds.w	r2, ip, r2
 8000436:	f105 38ff 	add.w	r8, r5, #4294967295
 800043a:	d202      	bcs.n	8000442 <__udivmoddi4+0x122>
 800043c:	4290      	cmp	r0, r2
 800043e:	f200 80cb 	bhi.w	80005d8 <__udivmoddi4+0x2b8>
 8000442:	4645      	mov	r5, r8
 8000444:	1a12      	subs	r2, r2, r0
 8000446:	b2a4      	uxth	r4, r4
 8000448:	fbb2 f0f7 	udiv	r0, r2, r7
 800044c:	fb07 2210 	mls	r2, r7, r0, r2
 8000450:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000454:	fb0e fe00 	mul.w	lr, lr, r0
 8000458:	45a6      	cmp	lr, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x14e>
 800045c:	eb1c 0404 	adds.w	r4, ip, r4
 8000460:	f100 32ff 	add.w	r2, r0, #4294967295
 8000464:	d202      	bcs.n	800046c <__udivmoddi4+0x14c>
 8000466:	45a6      	cmp	lr, r4
 8000468:	f200 80bb 	bhi.w	80005e2 <__udivmoddi4+0x2c2>
 800046c:	4610      	mov	r0, r2
 800046e:	eba4 040e 	sub.w	r4, r4, lr
 8000472:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000476:	e79f      	b.n	80003b8 <__udivmoddi4+0x98>
 8000478:	f1c1 0720 	rsb	r7, r1, #32
 800047c:	408b      	lsls	r3, r1
 800047e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000482:	ea4c 0c03 	orr.w	ip, ip, r3
 8000486:	fa05 f401 	lsl.w	r4, r5, r1
 800048a:	fa20 f307 	lsr.w	r3, r0, r7
 800048e:	40fd      	lsrs	r5, r7
 8000490:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000494:	4323      	orrs	r3, r4
 8000496:	fbb5 f8f9 	udiv	r8, r5, r9
 800049a:	fa1f fe8c 	uxth.w	lr, ip
 800049e:	fb09 5518 	mls	r5, r9, r8, r5
 80004a2:	0c1c      	lsrs	r4, r3, #16
 80004a4:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 80004a8:	fb08 f50e 	mul.w	r5, r8, lr
 80004ac:	42a5      	cmp	r5, r4
 80004ae:	fa02 f201 	lsl.w	r2, r2, r1
 80004b2:	fa00 f001 	lsl.w	r0, r0, r1
 80004b6:	d90b      	bls.n	80004d0 <__udivmoddi4+0x1b0>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f108 3aff 	add.w	sl, r8, #4294967295
 80004c0:	f080 8088 	bcs.w	80005d4 <__udivmoddi4+0x2b4>
 80004c4:	42a5      	cmp	r5, r4
 80004c6:	f240 8085 	bls.w	80005d4 <__udivmoddi4+0x2b4>
 80004ca:	f1a8 0802 	sub.w	r8, r8, #2
 80004ce:	4464      	add	r4, ip
 80004d0:	1b64      	subs	r4, r4, r5
 80004d2:	b29d      	uxth	r5, r3
 80004d4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004d8:	fb09 4413 	mls	r4, r9, r3, r4
 80004dc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004e0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004e4:	45a6      	cmp	lr, r4
 80004e6:	d908      	bls.n	80004fa <__udivmoddi4+0x1da>
 80004e8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ec:	f103 35ff 	add.w	r5, r3, #4294967295
 80004f0:	d26c      	bcs.n	80005cc <__udivmoddi4+0x2ac>
 80004f2:	45a6      	cmp	lr, r4
 80004f4:	d96a      	bls.n	80005cc <__udivmoddi4+0x2ac>
 80004f6:	3b02      	subs	r3, #2
 80004f8:	4464      	add	r4, ip
 80004fa:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004fe:	fba3 9502 	umull	r9, r5, r3, r2
 8000502:	eba4 040e 	sub.w	r4, r4, lr
 8000506:	42ac      	cmp	r4, r5
 8000508:	46c8      	mov	r8, r9
 800050a:	46ae      	mov	lr, r5
 800050c:	d356      	bcc.n	80005bc <__udivmoddi4+0x29c>
 800050e:	d053      	beq.n	80005b8 <__udivmoddi4+0x298>
 8000510:	b156      	cbz	r6, 8000528 <__udivmoddi4+0x208>
 8000512:	ebb0 0208 	subs.w	r2, r0, r8
 8000516:	eb64 040e 	sbc.w	r4, r4, lr
 800051a:	fa04 f707 	lsl.w	r7, r4, r7
 800051e:	40ca      	lsrs	r2, r1
 8000520:	40cc      	lsrs	r4, r1
 8000522:	4317      	orrs	r7, r2
 8000524:	e9c6 7400 	strd	r7, r4, [r6]
 8000528:	4618      	mov	r0, r3
 800052a:	2100      	movs	r1, #0
 800052c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000530:	f1c3 0120 	rsb	r1, r3, #32
 8000534:	fa02 fc03 	lsl.w	ip, r2, r3
 8000538:	fa20 f201 	lsr.w	r2, r0, r1
 800053c:	fa25 f101 	lsr.w	r1, r5, r1
 8000540:	409d      	lsls	r5, r3
 8000542:	432a      	orrs	r2, r5
 8000544:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000548:	fa1f fe8c 	uxth.w	lr, ip
 800054c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000550:	fb07 1510 	mls	r5, r7, r0, r1
 8000554:	0c11      	lsrs	r1, r2, #16
 8000556:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800055a:	fb00 f50e 	mul.w	r5, r0, lr
 800055e:	428d      	cmp	r5, r1
 8000560:	fa04 f403 	lsl.w	r4, r4, r3
 8000564:	d908      	bls.n	8000578 <__udivmoddi4+0x258>
 8000566:	eb1c 0101 	adds.w	r1, ip, r1
 800056a:	f100 38ff 	add.w	r8, r0, #4294967295
 800056e:	d22f      	bcs.n	80005d0 <__udivmoddi4+0x2b0>
 8000570:	428d      	cmp	r5, r1
 8000572:	d92d      	bls.n	80005d0 <__udivmoddi4+0x2b0>
 8000574:	3802      	subs	r0, #2
 8000576:	4461      	add	r1, ip
 8000578:	1b49      	subs	r1, r1, r5
 800057a:	b292      	uxth	r2, r2
 800057c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000580:	fb07 1115 	mls	r1, r7, r5, r1
 8000584:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000588:	fb05 f10e 	mul.w	r1, r5, lr
 800058c:	4291      	cmp	r1, r2
 800058e:	d908      	bls.n	80005a2 <__udivmoddi4+0x282>
 8000590:	eb1c 0202 	adds.w	r2, ip, r2
 8000594:	f105 38ff 	add.w	r8, r5, #4294967295
 8000598:	d216      	bcs.n	80005c8 <__udivmoddi4+0x2a8>
 800059a:	4291      	cmp	r1, r2
 800059c:	d914      	bls.n	80005c8 <__udivmoddi4+0x2a8>
 800059e:	3d02      	subs	r5, #2
 80005a0:	4462      	add	r2, ip
 80005a2:	1a52      	subs	r2, r2, r1
 80005a4:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 80005a8:	e738      	b.n	800041c <__udivmoddi4+0xfc>
 80005aa:	4631      	mov	r1, r6
 80005ac:	4630      	mov	r0, r6
 80005ae:	e708      	b.n	80003c2 <__udivmoddi4+0xa2>
 80005b0:	4639      	mov	r1, r7
 80005b2:	e6e6      	b.n	8000382 <__udivmoddi4+0x62>
 80005b4:	4610      	mov	r0, r2
 80005b6:	e6fb      	b.n	80003b0 <__udivmoddi4+0x90>
 80005b8:	4548      	cmp	r0, r9
 80005ba:	d2a9      	bcs.n	8000510 <__udivmoddi4+0x1f0>
 80005bc:	ebb9 0802 	subs.w	r8, r9, r2
 80005c0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80005c4:	3b01      	subs	r3, #1
 80005c6:	e7a3      	b.n	8000510 <__udivmoddi4+0x1f0>
 80005c8:	4645      	mov	r5, r8
 80005ca:	e7ea      	b.n	80005a2 <__udivmoddi4+0x282>
 80005cc:	462b      	mov	r3, r5
 80005ce:	e794      	b.n	80004fa <__udivmoddi4+0x1da>
 80005d0:	4640      	mov	r0, r8
 80005d2:	e7d1      	b.n	8000578 <__udivmoddi4+0x258>
 80005d4:	46d0      	mov	r8, sl
 80005d6:	e77b      	b.n	80004d0 <__udivmoddi4+0x1b0>
 80005d8:	3d02      	subs	r5, #2
 80005da:	4462      	add	r2, ip
 80005dc:	e732      	b.n	8000444 <__udivmoddi4+0x124>
 80005de:	4608      	mov	r0, r1
 80005e0:	e70a      	b.n	80003f8 <__udivmoddi4+0xd8>
 80005e2:	4464      	add	r4, ip
 80005e4:	3802      	subs	r0, #2
 80005e6:	e742      	b.n	800046e <__udivmoddi4+0x14e>

080005e8 <__aeabi_idiv0>:
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop

080005ec <MX_ADC1_Init>:
ADC_HandleTypeDef hadc1;
ADC_HandleTypeDef hadc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ec:	b580      	push	{r7, lr}
 80005ee:	b08c      	sub	sp, #48	; 0x30
 80005f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80005f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80005f6:	2200      	movs	r2, #0
 80005f8:	601a      	str	r2, [r3, #0]
 80005fa:	605a      	str	r2, [r3, #4]
 80005fc:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80005fe:	1d3b      	adds	r3, r7, #4
 8000600:	2220      	movs	r2, #32
 8000602:	2100      	movs	r1, #0
 8000604:	4618      	mov	r0, r3
 8000606:	f007 fd2c 	bl	8008062 <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 800060a:	4b32      	ldr	r3, [pc, #200]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800060c:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000610:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000612:	4b30      	ldr	r3, [pc, #192]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000614:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000618:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800061a:	4b2e      	ldr	r3, [pc, #184]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800061c:	2200      	movs	r2, #0
 800061e:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000620:	4b2c      	ldr	r3, [pc, #176]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000626:	4b2b      	ldr	r3, [pc, #172]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000628:	2200      	movs	r2, #0
 800062a:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800062c:	4b29      	ldr	r3, [pc, #164]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800062e:	2200      	movs	r2, #0
 8000630:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000632:	4b28      	ldr	r3, [pc, #160]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000634:	2204      	movs	r2, #4
 8000636:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000638:	4b26      	ldr	r3, [pc, #152]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800063a:	2200      	movs	r2, #0
 800063c:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800063e:	4b25      	ldr	r3, [pc, #148]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000640:	2200      	movs	r2, #0
 8000642:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000644:	4b23      	ldr	r3, [pc, #140]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000646:	2201      	movs	r2, #1
 8000648:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 800064a:	4b22      	ldr	r3, [pc, #136]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800064c:	2200      	movs	r2, #0
 800064e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000652:	4b20      	ldr	r3, [pc, #128]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000654:	2200      	movs	r2, #0
 8000656:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000658:	4b1e      	ldr	r3, [pc, #120]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800065a:	2200      	movs	r2, #0
 800065c:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = DISABLE;
 800065e:	4b1d      	ldr	r3, [pc, #116]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000660:	2200      	movs	r2, #0
 8000662:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000666:	4b1b      	ldr	r3, [pc, #108]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000668:	2200      	movs	r2, #0
 800066a:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 800066c:	4b19      	ldr	r3, [pc, #100]	; (80006d4 <MX_ADC1_Init+0xe8>)
 800066e:	2200      	movs	r2, #0
 8000670:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000674:	4817      	ldr	r0, [pc, #92]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000676:	f001 fb41 	bl	8001cfc <HAL_ADC_Init>
 800067a:	4603      	mov	r3, r0
 800067c:	2b00      	cmp	r3, #0
 800067e:	d001      	beq.n	8000684 <MX_ADC1_Init+0x98>
  {
    Error_Handler();
 8000680:	f000 fad8 	bl	8000c34 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000684:	2300      	movs	r3, #0
 8000686:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000688:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800068c:	4619      	mov	r1, r3
 800068e:	4811      	ldr	r0, [pc, #68]	; (80006d4 <MX_ADC1_Init+0xe8>)
 8000690:	f002 f95c 	bl	800294c <HAL_ADCEx_MultiModeConfigChannel>
 8000694:	4603      	mov	r3, r0
 8000696:	2b00      	cmp	r3, #0
 8000698:	d001      	beq.n	800069e <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 800069a:	f000 facb 	bl	8000c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800069e:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <MX_ADC1_Init+0xec>)
 80006a0:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006a2:	2306      	movs	r3, #6
 80006a4:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 80006a6:	2300      	movs	r3, #0
 80006a8:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80006aa:	237f      	movs	r3, #127	; 0x7f
 80006ac:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80006ae:	2304      	movs	r3, #4
 80006b0:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 80006b2:	2300      	movs	r3, #0
 80006b4:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006b6:	1d3b      	adds	r3, r7, #4
 80006b8:	4619      	mov	r1, r3
 80006ba:	4806      	ldr	r0, [pc, #24]	; (80006d4 <MX_ADC1_Init+0xe8>)
 80006bc:	f001 fce0 	bl	8002080 <HAL_ADC_ConfigChannel>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d001      	beq.n	80006ca <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 80006c6:	f000 fab5 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006ca:	bf00      	nop
 80006cc:	3730      	adds	r7, #48	; 0x30
 80006ce:	46bd      	mov	sp, r7
 80006d0:	bd80      	pop	{r7, pc}
 80006d2:	bf00      	nop
 80006d4:	20000140 	.word	0x20000140
 80006d8:	21800100 	.word	0x21800100

080006dc <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b088      	sub	sp, #32
 80006e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006e2:	463b      	mov	r3, r7
 80006e4:	2220      	movs	r2, #32
 80006e6:	2100      	movs	r1, #0
 80006e8:	4618      	mov	r0, r3
 80006ea:	f007 fcba 	bl	8008062 <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 80006ee:	4b2b      	ldr	r3, [pc, #172]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f0:	4a2b      	ldr	r2, [pc, #172]	; (80007a0 <MX_ADC2_Init+0xc4>)
 80006f2:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80006f4:	4b29      	ldr	r3, [pc, #164]	; (800079c <MX_ADC2_Init+0xc0>)
 80006f6:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 80006fa:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 80006fc:	4b27      	ldr	r3, [pc, #156]	; (800079c <MX_ADC2_Init+0xc0>)
 80006fe:	2200      	movs	r2, #0
 8000700:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000702:	4b26      	ldr	r3, [pc, #152]	; (800079c <MX_ADC2_Init+0xc0>)
 8000704:	2200      	movs	r2, #0
 8000706:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8000708:	4b24      	ldr	r3, [pc, #144]	; (800079c <MX_ADC2_Init+0xc0>)
 800070a:	2200      	movs	r2, #0
 800070c:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800070e:	4b23      	ldr	r3, [pc, #140]	; (800079c <MX_ADC2_Init+0xc0>)
 8000710:	2200      	movs	r2, #0
 8000712:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000714:	4b21      	ldr	r3, [pc, #132]	; (800079c <MX_ADC2_Init+0xc0>)
 8000716:	2204      	movs	r2, #4
 8000718:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 800071a:	4b20      	ldr	r3, [pc, #128]	; (800079c <MX_ADC2_Init+0xc0>)
 800071c:	2200      	movs	r2, #0
 800071e:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1e      	ldr	r3, [pc, #120]	; (800079c <MX_ADC2_Init+0xc0>)
 8000722:	2200      	movs	r2, #0
 8000724:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 1;
 8000726:	4b1d      	ldr	r3, [pc, #116]	; (800079c <MX_ADC2_Init+0xc0>)
 8000728:	2201      	movs	r2, #1
 800072a:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 800072c:	4b1b      	ldr	r3, [pc, #108]	; (800079c <MX_ADC2_Init+0xc0>)
 800072e:	2200      	movs	r2, #0
 8000730:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b19      	ldr	r3, [pc, #100]	; (800079c <MX_ADC2_Init+0xc0>)
 8000736:	2200      	movs	r2, #0
 8000738:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800073a:	4b18      	ldr	r3, [pc, #96]	; (800079c <MX_ADC2_Init+0xc0>)
 800073c:	2200      	movs	r2, #0
 800073e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8000740:	4b16      	ldr	r3, [pc, #88]	; (800079c <MX_ADC2_Init+0xc0>)
 8000742:	2200      	movs	r2, #0
 8000744:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000748:	4b14      	ldr	r3, [pc, #80]	; (800079c <MX_ADC2_Init+0xc0>)
 800074a:	2200      	movs	r2, #0
 800074c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800074e:	4b13      	ldr	r3, [pc, #76]	; (800079c <MX_ADC2_Init+0xc0>)
 8000750:	2200      	movs	r2, #0
 8000752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8000756:	4811      	ldr	r0, [pc, #68]	; (800079c <MX_ADC2_Init+0xc0>)
 8000758:	f001 fad0 	bl	8001cfc <HAL_ADC_Init>
 800075c:	4603      	mov	r3, r0
 800075e:	2b00      	cmp	r3, #0
 8000760:	d001      	beq.n	8000766 <MX_ADC2_Init+0x8a>
  {
    Error_Handler();
 8000762:	f000 fa67 	bl	8000c34 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8000766:	4b0f      	ldr	r3, [pc, #60]	; (80007a4 <MX_ADC2_Init+0xc8>)
 8000768:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800076a:	2306      	movs	r3, #6
 800076c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_2CYCLES_5;
 800076e:	2300      	movs	r3, #0
 8000770:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000772:	237f      	movs	r3, #127	; 0x7f
 8000774:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000776:	2304      	movs	r3, #4
 8000778:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 800077e:	463b      	mov	r3, r7
 8000780:	4619      	mov	r1, r3
 8000782:	4806      	ldr	r0, [pc, #24]	; (800079c <MX_ADC2_Init+0xc0>)
 8000784:	f001 fc7c 	bl	8002080 <HAL_ADC_ConfigChannel>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_ADC2_Init+0xb6>
  {
    Error_Handler();
 800078e:	f000 fa51 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	200001ac 	.word	0x200001ac
 80007a0:	50000100 	.word	0x50000100
 80007a4:	19200040 	.word	0x19200040

080007a8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80007a8:	b580      	push	{r7, lr}
 80007aa:	b0a4      	sub	sp, #144	; 0x90
 80007ac:	af00      	add	r7, sp, #0
 80007ae:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007b0:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80007b4:	2200      	movs	r2, #0
 80007b6:	601a      	str	r2, [r3, #0]
 80007b8:	605a      	str	r2, [r3, #4]
 80007ba:	609a      	str	r2, [r3, #8]
 80007bc:	60da      	str	r2, [r3, #12]
 80007be:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80007c0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c4:	2254      	movs	r2, #84	; 0x54
 80007c6:	2100      	movs	r1, #0
 80007c8:	4618      	mov	r0, r3
 80007ca:	f007 fc4a 	bl	8008062 <memset>
  if(adcHandle->Instance==ADC1)
 80007ce:	687b      	ldr	r3, [r7, #4]
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80007d6:	d174      	bne.n	80008c2 <HAL_ADC_MspInit+0x11a>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80007d8:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80007dc:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80007de:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80007e2:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80007e4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007e8:	4618      	mov	r0, r3
 80007ea:	f003 fb2f 	bl	8003e4c <HAL_RCCEx_PeriphCLKConfig>
 80007ee:	4603      	mov	r3, r0
 80007f0:	2b00      	cmp	r3, #0
 80007f2:	d001      	beq.n	80007f8 <HAL_ADC_MspInit+0x50>
    {
      Error_Handler();
 80007f4:	f000 fa1e 	bl	8000c34 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 80007f8:	4b63      	ldr	r3, [pc, #396]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80007fa:	681b      	ldr	r3, [r3, #0]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4a62      	ldr	r2, [pc, #392]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000800:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8000802:	4b61      	ldr	r3, [pc, #388]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 8000804:	681b      	ldr	r3, [r3, #0]
 8000806:	2b01      	cmp	r3, #1
 8000808:	d10b      	bne.n	8000822 <HAL_ADC_MspInit+0x7a>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800080a:	4b60      	ldr	r3, [pc, #384]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800080c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800080e:	4a5f      	ldr	r2, [pc, #380]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000810:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000814:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000816:	4b5d      	ldr	r3, [pc, #372]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000818:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800081a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800081e:	627b      	str	r3, [r7, #36]	; 0x24
 8000820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000822:	4b5a      	ldr	r3, [pc, #360]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000824:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000826:	4a59      	ldr	r2, [pc, #356]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000828:	f043 0304 	orr.w	r3, r3, #4
 800082c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800082e:	4b57      	ldr	r3, [pc, #348]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000830:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000832:	f003 0304 	and.w	r3, r3, #4
 8000836:	623b      	str	r3, [r7, #32]
 8000838:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800083a:	4b54      	ldr	r3, [pc, #336]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800083c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800083e:	4a53      	ldr	r2, [pc, #332]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000840:	f043 0301 	orr.w	r3, r3, #1
 8000844:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000846:	4b51      	ldr	r3, [pc, #324]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000848:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800084a:	f003 0301 	and.w	r3, r3, #1
 800084e:	61fb      	str	r3, [r7, #28]
 8000850:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000852:	4b4e      	ldr	r3, [pc, #312]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000854:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000856:	4a4d      	ldr	r2, [pc, #308]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000858:	f043 0302 	orr.w	r3, r3, #2
 800085c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800085e:	4b4b      	ldr	r3, [pc, #300]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000860:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000862:	f003 0302 	and.w	r3, r3, #2
 8000866:	61bb      	str	r3, [r7, #24]
 8000868:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 800086a:	2304      	movs	r3, #4
 800086c:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800086e:	2303      	movs	r3, #3
 8000870:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000874:	2300      	movs	r3, #0
 8000876:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 800087a:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800087e:	4619      	mov	r1, r3
 8000880:	4843      	ldr	r0, [pc, #268]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 8000882:	f002 fb0b 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 8000886:	2302      	movs	r3, #2
 8000888:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800088a:	2303      	movs	r3, #3
 800088c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000890:	2300      	movs	r3, #0
 8000892:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 8000896:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800089a:	4619      	mov	r1, r3
 800089c:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80008a0:	f002 fafc 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80008a4:	2303      	movs	r3, #3
 80008a6:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80008a8:	2303      	movs	r3, #3
 80008aa:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008ae:	2300      	movs	r3, #0
 80008b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80008b4:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80008b8:	4619      	mov	r1, r3
 80008ba:	4836      	ldr	r0, [pc, #216]	; (8000994 <HAL_ADC_MspInit+0x1ec>)
 80008bc:	f002 faee 	bl	8002e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 80008c0:	e05e      	b.n	8000980 <HAL_ADC_MspInit+0x1d8>
  else if(adcHandle->Instance==ADC2)
 80008c2:	687b      	ldr	r3, [r7, #4]
 80008c4:	681b      	ldr	r3, [r3, #0]
 80008c6:	4a34      	ldr	r2, [pc, #208]	; (8000998 <HAL_ADC_MspInit+0x1f0>)
 80008c8:	4293      	cmp	r3, r2
 80008ca:	d159      	bne.n	8000980 <HAL_ADC_MspInit+0x1d8>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 80008cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80008d0:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 80008d2:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 80008d6:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80008d8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80008dc:	4618      	mov	r0, r3
 80008de:	f003 fab5 	bl	8003e4c <HAL_RCCEx_PeriphCLKConfig>
 80008e2:	4603      	mov	r3, r0
 80008e4:	2b00      	cmp	r3, #0
 80008e6:	d001      	beq.n	80008ec <HAL_ADC_MspInit+0x144>
      Error_Handler();
 80008e8:	f000 f9a4 	bl	8000c34 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 80008ec:	4b26      	ldr	r3, [pc, #152]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	3301      	adds	r3, #1
 80008f2:	4a25      	ldr	r2, [pc, #148]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80008f6:	4b24      	ldr	r3, [pc, #144]	; (8000988 <HAL_ADC_MspInit+0x1e0>)
 80008f8:	681b      	ldr	r3, [r3, #0]
 80008fa:	2b01      	cmp	r3, #1
 80008fc:	d10b      	bne.n	8000916 <HAL_ADC_MspInit+0x16e>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80008fe:	4b23      	ldr	r3, [pc, #140]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000900:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000902:	4a22      	ldr	r2, [pc, #136]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000904:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8000908:	64d3      	str	r3, [r2, #76]	; 0x4c
 800090a:	4b20      	ldr	r3, [pc, #128]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800090c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800090e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000912:	617b      	str	r3, [r7, #20]
 8000914:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000916:	4b1d      	ldr	r3, [pc, #116]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000918:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800091a:	4a1c      	ldr	r2, [pc, #112]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800091c:	f043 0304 	orr.w	r3, r3, #4
 8000920:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000922:	4b1a      	ldr	r3, [pc, #104]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000924:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000926:	f003 0304 	and.w	r3, r3, #4
 800092a:	613b      	str	r3, [r7, #16]
 800092c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800092e:	4b17      	ldr	r3, [pc, #92]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000930:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000932:	4a16      	ldr	r2, [pc, #88]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	64d3      	str	r3, [r2, #76]	; 0x4c
 800093a:	4b14      	ldr	r3, [pc, #80]	; (800098c <HAL_ADC_MspInit+0x1e4>)
 800093c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800093e:	f003 0301 	and.w	r3, r3, #1
 8000942:	60fb      	str	r3, [r7, #12]
 8000944:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8000946:	230b      	movs	r3, #11
 8000948:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800094a:	2303      	movs	r3, #3
 800094c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000950:	2300      	movs	r3, #0
 8000952:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000956:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800095a:	4619      	mov	r1, r3
 800095c:	480c      	ldr	r0, [pc, #48]	; (8000990 <HAL_ADC_MspInit+0x1e8>)
 800095e:	f002 fa9d 	bl	8002e9c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8000962:	2301      	movs	r3, #1
 8000964:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000966:	2303      	movs	r3, #3
 8000968:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8000972:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8000976:	4619      	mov	r1, r3
 8000978:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800097c:	f002 fa8e 	bl	8002e9c <HAL_GPIO_Init>
}
 8000980:	bf00      	nop
 8000982:	3790      	adds	r7, #144	; 0x90
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	20000218 	.word	0x20000218
 800098c:	40021000 	.word	0x40021000
 8000990:	48000800 	.word	0x48000800
 8000994:	48000400 	.word	0x48000400
 8000998:	50000100 	.word	0x50000100

0800099c <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 800099c:	b580      	push	{r7, lr}
 800099e:	b08a      	sub	sp, #40	; 0x28
 80009a0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009a2:	f107 0314 	add.w	r3, r7, #20
 80009a6:	2200      	movs	r2, #0
 80009a8:	601a      	str	r2, [r3, #0]
 80009aa:	605a      	str	r2, [r3, #4]
 80009ac:	609a      	str	r2, [r3, #8]
 80009ae:	60da      	str	r2, [r3, #12]
 80009b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80009b2:	4b3f      	ldr	r3, [pc, #252]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009b6:	4a3e      	ldr	r2, [pc, #248]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009b8:	f043 0304 	orr.w	r3, r3, #4
 80009bc:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009be:	4b3c      	ldr	r3, [pc, #240]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009c0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009c2:	f003 0304 	and.w	r3, r3, #4
 80009c6:	613b      	str	r3, [r7, #16]
 80009c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 80009ca:	4b39      	ldr	r3, [pc, #228]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009cc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009ce:	4a38      	ldr	r2, [pc, #224]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d0:	f043 0320 	orr.w	r3, r3, #32
 80009d4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009d6:	4b36      	ldr	r3, [pc, #216]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009da:	f003 0320 	and.w	r3, r3, #32
 80009de:	60fb      	str	r3, [r7, #12]
 80009e0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80009e2:	4b33      	ldr	r3, [pc, #204]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009e6:	4a32      	ldr	r2, [pc, #200]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009e8:	f043 0301 	orr.w	r3, r3, #1
 80009ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80009ee:	4b30      	ldr	r3, [pc, #192]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009f2:	f003 0301 	and.w	r3, r3, #1
 80009f6:	60bb      	str	r3, [r7, #8]
 80009f8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80009fa:	4b2d      	ldr	r3, [pc, #180]	; (8000ab0 <MX_GPIO_Init+0x114>)
 80009fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80009fe:	4a2c      	ldr	r2, [pc, #176]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a00:	f043 0302 	orr.w	r3, r3, #2
 8000a04:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a06:	4b2a      	ldr	r3, [pc, #168]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a08:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a0a:	f003 0302 	and.w	r3, r3, #2
 8000a0e:	607b      	str	r3, [r7, #4]
 8000a10:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a12:	4b27      	ldr	r3, [pc, #156]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a16:	4a26      	ldr	r2, [pc, #152]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a18:	f043 0308 	orr.w	r3, r3, #8
 8000a1c:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a1e:	4b24      	ldr	r3, [pc, #144]	; (8000ab0 <MX_GPIO_Init+0x114>)
 8000a20:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a22:	f003 0308 	and.w	r3, r3, #8
 8000a26:	603b      	str	r3, [r7, #0]
 8000a28:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2120      	movs	r1, #32
 8000a2e:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a32:	f002 fbb5 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2104      	movs	r1, #4
 8000a3a:	481e      	ldr	r0, [pc, #120]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a3c:	f002 fbb0 	bl	80031a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 8000a40:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000a44:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000a46:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 8000a4a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a4c:	2300      	movs	r3, #0
 8000a4e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 8000a50:	f107 0314 	add.w	r3, r7, #20
 8000a54:	4619      	mov	r1, r3
 8000a56:	4818      	ldr	r0, [pc, #96]	; (8000ab8 <MX_GPIO_Init+0x11c>)
 8000a58:	f002 fa20 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8000a5c:	2320      	movs	r3, #32
 8000a5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a60:	2301      	movs	r3, #1
 8000a62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a64:	2300      	movs	r3, #0
 8000a66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a68:	2300      	movs	r3, #0
 8000a6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000a76:	f002 fa11 	bl	8002e9c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8000a7a:	2304      	movs	r3, #4
 8000a7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a7e:	2301      	movs	r3, #1
 8000a80:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a86:	2300      	movs	r3, #0
 8000a88:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8000a8a:	f107 0314 	add.w	r3, r7, #20
 8000a8e:	4619      	mov	r1, r3
 8000a90:	4808      	ldr	r0, [pc, #32]	; (8000ab4 <MX_GPIO_Init+0x118>)
 8000a92:	f002 fa03 	bl	8002e9c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2100      	movs	r1, #0
 8000a9a:	2028      	movs	r0, #40	; 0x28
 8000a9c:	f002 f916 	bl	8002ccc <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000aa0:	2028      	movs	r0, #40	; 0x28
 8000aa2:	f002 f92d 	bl	8002d00 <HAL_NVIC_EnableIRQ>

}
 8000aa6:	bf00      	nop
 8000aa8:	3728      	adds	r7, #40	; 0x28
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	40021000 	.word	0x40021000
 8000ab4:	48000c00 	.word	0x48000c00
 8000ab8:	48000800 	.word	0x48000800

08000abc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000abc:	b580      	push	{r7, lr}
 8000abe:	b082      	sub	sp, #8
 8000ac0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ac2:	f000 ff0a 	bl	80018da <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ac6:	f000 f859 	bl	8000b7c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000aca:	f7ff ff67 	bl	800099c <MX_GPIO_Init>
  MX_ADC2_Init();
 8000ace:	f7ff fe05 	bl	80006dc <MX_ADC2_Init>
  MX_ADC1_Init();
 8000ad2:	f7ff fd8b 	bl	80005ec <MX_ADC1_Init>
  MX_TIM1_Init();
 8000ad6:	f000 fa6d 	bl	8000fb4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ada:	f000 fb1d 	bl	8001118 <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8000ade:	f000 fc51 	bl	8001384 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8000ae2:	f000 fc9b 	bl	800141c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8000ae6:	f000 fd8d 	bl	8001604 <Shell_Init>

	uint8_t errorMsg[] = "Error";
 8000aea:	4a21      	ldr	r2, [pc, #132]	; (8000b70 <main+0xb4>)
 8000aec:	463b      	mov	r3, r7
 8000aee:	e892 0003 	ldmia.w	r2, {r0, r1}
 8000af2:	6018      	str	r0, [r3, #0]
 8000af4:	3304      	adds	r3, #4
 8000af6:	8019      	strh	r1, [r3, #0]


	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000af8:	2100      	movs	r1, #0
 8000afa:	481e      	ldr	r0, [pc, #120]	; (8000b74 <main+0xb8>)
 8000afc:	f003 fd26 	bl	800454c <HAL_TIM_PWM_Start>
 8000b00:	4603      	mov	r3, r0
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d006      	beq.n	8000b14 <main+0x58>
	{
		HAL_UART_Transmit(&huart2, errorMsg, sizeof(errorMsg), HAL_MAX_DELAY);
 8000b06:	4639      	mov	r1, r7
 8000b08:	f04f 33ff 	mov.w	r3, #4294967295
 8000b0c:	2206      	movs	r2, #6
 8000b0e:	481a      	ldr	r0, [pc, #104]	; (8000b78 <main+0xbc>)
 8000b10:	f005 f8c9 	bl	8005ca6 <HAL_UART_Transmit>
	}
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8000b14:	2100      	movs	r1, #0
 8000b16:	4817      	ldr	r0, [pc, #92]	; (8000b74 <main+0xb8>)
 8000b18:	f004 fe00 	bl	800571c <HAL_TIMEx_PWMN_Start>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d006      	beq.n	8000b30 <main+0x74>
	{
		HAL_UART_Transmit(&huart2, errorMsg, sizeof(errorMsg), HAL_MAX_DELAY);
 8000b22:	4639      	mov	r1, r7
 8000b24:	f04f 33ff 	mov.w	r3, #4294967295
 8000b28:	2206      	movs	r2, #6
 8000b2a:	4813      	ldr	r0, [pc, #76]	; (8000b78 <main+0xbc>)
 8000b2c:	f005 f8bb 	bl	8005ca6 <HAL_UART_Transmit>
	}
	if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8000b30:	2104      	movs	r1, #4
 8000b32:	4810      	ldr	r0, [pc, #64]	; (8000b74 <main+0xb8>)
 8000b34:	f003 fd0a 	bl	800454c <HAL_TIM_PWM_Start>
 8000b38:	4603      	mov	r3, r0
 8000b3a:	2b00      	cmp	r3, #0
 8000b3c:	d006      	beq.n	8000b4c <main+0x90>
	{
		HAL_UART_Transmit(&huart2, errorMsg, sizeof(errorMsg), HAL_MAX_DELAY);
 8000b3e:	4639      	mov	r1, r7
 8000b40:	f04f 33ff 	mov.w	r3, #4294967295
 8000b44:	2206      	movs	r2, #6
 8000b46:	480c      	ldr	r0, [pc, #48]	; (8000b78 <main+0xbc>)
 8000b48:	f005 f8ad 	bl	8005ca6 <HAL_UART_Transmit>
	}
	if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 8000b4c:	2104      	movs	r1, #4
 8000b4e:	4809      	ldr	r0, [pc, #36]	; (8000b74 <main+0xb8>)
 8000b50:	f004 fde4 	bl	800571c <HAL_TIMEx_PWMN_Start>
 8000b54:	4603      	mov	r3, r0
 8000b56:	2b00      	cmp	r3, #0
 8000b58:	d006      	beq.n	8000b68 <main+0xac>
	{
		HAL_UART_Transmit(&huart2, errorMsg, sizeof(errorMsg), HAL_MAX_DELAY);
 8000b5a:	4639      	mov	r1, r7
 8000b5c:	f04f 33ff 	mov.w	r3, #4294967295
 8000b60:	2206      	movs	r2, #6
 8000b62:	4805      	ldr	r0, [pc, #20]	; (8000b78 <main+0xbc>)
 8000b64:	f005 f89f 	bl	8005ca6 <HAL_UART_Transmit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8000b68:	f000 fd8c 	bl	8001684 <Shell_Loop>
 8000b6c:	e7fc      	b.n	8000b68 <main+0xac>
 8000b6e:	bf00      	nop
 8000b70:	080091e4 	.word	0x080091e4
 8000b74:	2000026c 	.word	0x2000026c
 8000b78:	20000304 	.word	0x20000304

08000b7c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b7c:	b580      	push	{r7, lr}
 8000b7e:	b094      	sub	sp, #80	; 0x50
 8000b80:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b82:	f107 0318 	add.w	r3, r7, #24
 8000b86:	2238      	movs	r2, #56	; 0x38
 8000b88:	2100      	movs	r1, #0
 8000b8a:	4618      	mov	r0, r3
 8000b8c:	f007 fa69 	bl	8008062 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b90:	1d3b      	adds	r3, r7, #4
 8000b92:	2200      	movs	r2, #0
 8000b94:	601a      	str	r2, [r3, #0]
 8000b96:	605a      	str	r2, [r3, #4]
 8000b98:	609a      	str	r2, [r3, #8]
 8000b9a:	60da      	str	r2, [r3, #12]
 8000b9c:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 8000b9e:	2000      	movs	r0, #0
 8000ba0:	f002 fb3a 	bl	8003218 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000ba4:	2301      	movs	r3, #1
 8000ba6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000ba8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000bac:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bae:	2302      	movs	r3, #2
 8000bb0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000bb2:	2303      	movs	r3, #3
 8000bb4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 8000bb6:	2306      	movs	r3, #6
 8000bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 8000bba:	2355      	movs	r3, #85	; 0x55
 8000bbc:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000bbe:	2302      	movs	r3, #2
 8000bc0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000bc2:	2302      	movs	r3, #2
 8000bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 8000bc6:	2302      	movs	r3, #2
 8000bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bca:	f107 0318 	add.w	r3, r7, #24
 8000bce:	4618      	mov	r0, r3
 8000bd0:	f002 fbd6 	bl	8003380 <HAL_RCC_OscConfig>
 8000bd4:	4603      	mov	r3, r0
 8000bd6:	2b00      	cmp	r3, #0
 8000bd8:	d001      	beq.n	8000bde <SystemClock_Config+0x62>
  {
    Error_Handler();
 8000bda:	f000 f82b 	bl	8000c34 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bde:	230f      	movs	r3, #15
 8000be0:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000be2:	2303      	movs	r3, #3
 8000be4:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000be6:	2300      	movs	r3, #0
 8000be8:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000bea:	2300      	movs	r3, #0
 8000bec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000bee:	2300      	movs	r3, #0
 8000bf0:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8000bf2:	1d3b      	adds	r3, r7, #4
 8000bf4:	2104      	movs	r1, #4
 8000bf6:	4618      	mov	r0, r3
 8000bf8:	f002 feda 	bl	80039b0 <HAL_RCC_ClockConfig>
 8000bfc:	4603      	mov	r3, r0
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8000c02:	f000 f817 	bl	8000c34 <Error_Handler>
  }
}
 8000c06:	bf00      	nop
 8000c08:	3750      	adds	r7, #80	; 0x50
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
	...

08000c10 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000c10:	b580      	push	{r7, lr}
 8000c12:	b082      	sub	sp, #8
 8000c14:	af00      	add	r7, sp, #0
 8000c16:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000c18:	687b      	ldr	r3, [r7, #4]
 8000c1a:	681b      	ldr	r3, [r3, #0]
 8000c1c:	4a04      	ldr	r2, [pc, #16]	; (8000c30 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000c1e:	4293      	cmp	r3, r2
 8000c20:	d101      	bne.n	8000c26 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000c22:	f000 fe73 	bl	800190c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	40001000 	.word	0x40001000

08000c34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c34:	b480      	push	{r7}
 8000c36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c38:	b672      	cpsid	i
}
 8000c3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8000c3c:	e7fe      	b.n	8000c3c <Error_Handler+0x8>
	...

08000c40 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b082      	sub	sp, #8
 8000c44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000c46:	4b0f      	ldr	r3, [pc, #60]	; (8000c84 <HAL_MspInit+0x44>)
 8000c48:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c4a:	4a0e      	ldr	r2, [pc, #56]	; (8000c84 <HAL_MspInit+0x44>)
 8000c4c:	f043 0301 	orr.w	r3, r3, #1
 8000c50:	6613      	str	r3, [r2, #96]	; 0x60
 8000c52:	4b0c      	ldr	r3, [pc, #48]	; (8000c84 <HAL_MspInit+0x44>)
 8000c54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000c56:	f003 0301 	and.w	r3, r3, #1
 8000c5a:	607b      	str	r3, [r7, #4]
 8000c5c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000c5e:	4b09      	ldr	r3, [pc, #36]	; (8000c84 <HAL_MspInit+0x44>)
 8000c60:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c62:	4a08      	ldr	r2, [pc, #32]	; (8000c84 <HAL_MspInit+0x44>)
 8000c64:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000c68:	6593      	str	r3, [r2, #88]	; 0x58
 8000c6a:	4b06      	ldr	r3, [pc, #24]	; (8000c84 <HAL_MspInit+0x44>)
 8000c6c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c6e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000c72:	603b      	str	r3, [r7, #0]
 8000c74:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 8000c76:	f002 fb73 	bl	8003360 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000c7a:	bf00      	nop
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40021000 	.word	0x40021000

08000c88 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b08c      	sub	sp, #48	; 0x30
 8000c8c:	af00      	add	r7, sp, #0
 8000c8e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 8000c90:	2300      	movs	r3, #0
 8000c92:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 8000c94:	2300      	movs	r3, #0
 8000c96:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c98:	4b2c      	ldr	r3, [pc, #176]	; (8000d4c <HAL_InitTick+0xc4>)
 8000c9a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000c9c:	4a2b      	ldr	r2, [pc, #172]	; (8000d4c <HAL_InitTick+0xc4>)
 8000c9e:	f043 0310 	orr.w	r3, r3, #16
 8000ca2:	6593      	str	r3, [r2, #88]	; 0x58
 8000ca4:	4b29      	ldr	r3, [pc, #164]	; (8000d4c <HAL_InitTick+0xc4>)
 8000ca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ca8:	f003 0310 	and.w	r3, r3, #16
 8000cac:	60bb      	str	r3, [r7, #8]
 8000cae:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000cb0:	f107 020c 	add.w	r2, r7, #12
 8000cb4:	f107 0310 	add.w	r3, r7, #16
 8000cb8:	4611      	mov	r1, r2
 8000cba:	4618      	mov	r0, r3
 8000cbc:	f003 f84e 	bl	8003d5c <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cc0:	f003 f820 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8000cc4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cc8:	4a21      	ldr	r2, [pc, #132]	; (8000d50 <HAL_InitTick+0xc8>)
 8000cca:	fba2 2303 	umull	r2, r3, r2, r3
 8000cce:	0c9b      	lsrs	r3, r3, #18
 8000cd0:	3b01      	subs	r3, #1
 8000cd2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000cd4:	4b1f      	ldr	r3, [pc, #124]	; (8000d54 <HAL_InitTick+0xcc>)
 8000cd6:	4a20      	ldr	r2, [pc, #128]	; (8000d58 <HAL_InitTick+0xd0>)
 8000cd8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000cda:	4b1e      	ldr	r3, [pc, #120]	; (8000d54 <HAL_InitTick+0xcc>)
 8000cdc:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ce0:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000ce2:	4a1c      	ldr	r2, [pc, #112]	; (8000d54 <HAL_InitTick+0xcc>)
 8000ce4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000ce6:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000ce8:	4b1a      	ldr	r3, [pc, #104]	; (8000d54 <HAL_InitTick+0xcc>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cee:	4b19      	ldr	r3, [pc, #100]	; (8000d54 <HAL_InitTick+0xcc>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8000cf4:	4817      	ldr	r0, [pc, #92]	; (8000d54 <HAL_InitTick+0xcc>)
 8000cf6:	f003 faf7 	bl	80042e8 <HAL_TIM_Base_Init>
 8000cfa:	4603      	mov	r3, r0
 8000cfc:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000d00:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d04:	2b00      	cmp	r3, #0
 8000d06:	d11b      	bne.n	8000d40 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d08:	4812      	ldr	r0, [pc, #72]	; (8000d54 <HAL_InitTick+0xcc>)
 8000d0a:	f003 fb4f 	bl	80043ac <HAL_TIM_Base_Start_IT>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000d14:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d111      	bne.n	8000d40 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d1c:	2036      	movs	r0, #54	; 0x36
 8000d1e:	f001 ffef 	bl	8002d00 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	2b0f      	cmp	r3, #15
 8000d26:	d808      	bhi.n	8000d3a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d28:	2200      	movs	r2, #0
 8000d2a:	6879      	ldr	r1, [r7, #4]
 8000d2c:	2036      	movs	r0, #54	; 0x36
 8000d2e:	f001 ffcd 	bl	8002ccc <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d32:	4a0a      	ldr	r2, [pc, #40]	; (8000d5c <HAL_InitTick+0xd4>)
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	6013      	str	r3, [r2, #0]
 8000d38:	e002      	b.n	8000d40 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 8000d3a:	2301      	movs	r3, #1
 8000d3c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000d40:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000d44:	4618      	mov	r0, r3
 8000d46:	3730      	adds	r7, #48	; 0x30
 8000d48:	46bd      	mov	sp, r7
 8000d4a:	bd80      	pop	{r7, pc}
 8000d4c:	40021000 	.word	0x40021000
 8000d50:	431bde83 	.word	0x431bde83
 8000d54:	2000021c 	.word	0x2000021c
 8000d58:	40001000 	.word	0x40001000
 8000d5c:	200000c0 	.word	0x200000c0

08000d60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d60:	b480      	push	{r7}
 8000d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d64:	e7fe      	b.n	8000d64 <NMI_Handler+0x4>

08000d66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d66:	b480      	push	{r7}
 8000d68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d6a:	e7fe      	b.n	8000d6a <HardFault_Handler+0x4>

08000d6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d6c:	b480      	push	{r7}
 8000d6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d70:	e7fe      	b.n	8000d70 <MemManage_Handler+0x4>

08000d72 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d72:	b480      	push	{r7}
 8000d74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d76:	e7fe      	b.n	8000d76 <BusFault_Handler+0x4>

08000d78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <UsageFault_Handler+0x4>

08000d7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr

08000d8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d90:	bf00      	nop
 8000d92:	46bd      	mov	sp, r7
 8000d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d98:	4770      	bx	lr

08000d9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d9a:	b480      	push	{r7}
 8000d9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr

08000da8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dac:	bf00      	nop
 8000dae:	46bd      	mov	sp, r7
 8000db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db4:	4770      	bx	lr
	...

08000db8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8000dbc:	4802      	ldr	r0, [pc, #8]	; (8000dc8 <USART2_IRQHandler+0x10>)
 8000dbe:	f005 f85f 	bl	8005e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8000dc2:	bf00      	nop
 8000dc4:	bd80      	pop	{r7, pc}
 8000dc6:	bf00      	nop
 8000dc8:	20000304 	.word	0x20000304

08000dcc <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8000dcc:	b580      	push	{r7, lr}
 8000dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000dd0:	4802      	ldr	r0, [pc, #8]	; (8000ddc <USART3_IRQHandler+0x10>)
 8000dd2:	f005 f855 	bl	8005e80 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000dd6:	bf00      	nop
 8000dd8:	bd80      	pop	{r7, pc}
 8000dda:	bf00      	nop
 8000ddc:	20000394 	.word	0x20000394

08000de0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8000de0:	b580      	push	{r7, lr}
 8000de2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8000de4:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8000de8:	f002 f9f2 	bl	80031d0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8000dec:	bf00      	nop
 8000dee:	bd80      	pop	{r7, pc}

08000df0 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000df0:	b580      	push	{r7, lr}
 8000df2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000df4:	4802      	ldr	r0, [pc, #8]	; (8000e00 <TIM6_DAC_IRQHandler+0x10>)
 8000df6:	f003 fcbb 	bl	8004770 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000dfa:	bf00      	nop
 8000dfc:	bd80      	pop	{r7, pc}
 8000dfe:	bf00      	nop
 8000e00:	2000021c 	.word	0x2000021c

08000e04 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e04:	b480      	push	{r7}
 8000e06:	af00      	add	r7, sp, #0
  return 1;
 8000e08:	2301      	movs	r3, #1
}
 8000e0a:	4618      	mov	r0, r3
 8000e0c:	46bd      	mov	sp, r7
 8000e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e12:	4770      	bx	lr

08000e14 <_kill>:

int _kill(int pid, int sig)
{
 8000e14:	b580      	push	{r7, lr}
 8000e16:	b082      	sub	sp, #8
 8000e18:	af00      	add	r7, sp, #0
 8000e1a:	6078      	str	r0, [r7, #4]
 8000e1c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e1e:	f007 f9cb 	bl	80081b8 <__errno>
 8000e22:	4603      	mov	r3, r0
 8000e24:	2216      	movs	r2, #22
 8000e26:	601a      	str	r2, [r3, #0]
  return -1;
 8000e28:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e2c:	4618      	mov	r0, r3
 8000e2e:	3708      	adds	r7, #8
 8000e30:	46bd      	mov	sp, r7
 8000e32:	bd80      	pop	{r7, pc}

08000e34 <_exit>:

void _exit (int status)
{
 8000e34:	b580      	push	{r7, lr}
 8000e36:	b082      	sub	sp, #8
 8000e38:	af00      	add	r7, sp, #0
 8000e3a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e3c:	f04f 31ff 	mov.w	r1, #4294967295
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ffe7 	bl	8000e14 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e46:	e7fe      	b.n	8000e46 <_exit+0x12>

08000e48 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b086      	sub	sp, #24
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	60f8      	str	r0, [r7, #12]
 8000e50:	60b9      	str	r1, [r7, #8]
 8000e52:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e54:	2300      	movs	r3, #0
 8000e56:	617b      	str	r3, [r7, #20]
 8000e58:	e00a      	b.n	8000e70 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e5a:	f3af 8000 	nop.w
 8000e5e:	4601      	mov	r1, r0
 8000e60:	68bb      	ldr	r3, [r7, #8]
 8000e62:	1c5a      	adds	r2, r3, #1
 8000e64:	60ba      	str	r2, [r7, #8]
 8000e66:	b2ca      	uxtb	r2, r1
 8000e68:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e6a:	697b      	ldr	r3, [r7, #20]
 8000e6c:	3301      	adds	r3, #1
 8000e6e:	617b      	str	r3, [r7, #20]
 8000e70:	697a      	ldr	r2, [r7, #20]
 8000e72:	687b      	ldr	r3, [r7, #4]
 8000e74:	429a      	cmp	r2, r3
 8000e76:	dbf0      	blt.n	8000e5a <_read+0x12>
  }

  return len;
 8000e78:	687b      	ldr	r3, [r7, #4]
}
 8000e7a:	4618      	mov	r0, r3
 8000e7c:	3718      	adds	r7, #24
 8000e7e:	46bd      	mov	sp, r7
 8000e80:	bd80      	pop	{r7, pc}

08000e82 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e82:	b580      	push	{r7, lr}
 8000e84:	b086      	sub	sp, #24
 8000e86:	af00      	add	r7, sp, #0
 8000e88:	60f8      	str	r0, [r7, #12]
 8000e8a:	60b9      	str	r1, [r7, #8]
 8000e8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e8e:	2300      	movs	r3, #0
 8000e90:	617b      	str	r3, [r7, #20]
 8000e92:	e009      	b.n	8000ea8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000e94:	68bb      	ldr	r3, [r7, #8]
 8000e96:	1c5a      	adds	r2, r3, #1
 8000e98:	60ba      	str	r2, [r7, #8]
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	4618      	mov	r0, r3
 8000e9e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	697b      	ldr	r3, [r7, #20]
 8000ea4:	3301      	adds	r3, #1
 8000ea6:	617b      	str	r3, [r7, #20]
 8000ea8:	697a      	ldr	r2, [r7, #20]
 8000eaa:	687b      	ldr	r3, [r7, #4]
 8000eac:	429a      	cmp	r2, r3
 8000eae:	dbf1      	blt.n	8000e94 <_write+0x12>
  }
  return len;
 8000eb0:	687b      	ldr	r3, [r7, #4]
}
 8000eb2:	4618      	mov	r0, r3
 8000eb4:	3718      	adds	r7, #24
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}

08000eba <_close>:

int _close(int file)
{
 8000eba:	b480      	push	{r7}
 8000ebc:	b083      	sub	sp, #12
 8000ebe:	af00      	add	r7, sp, #0
 8000ec0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ec2:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	370c      	adds	r7, #12
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ed0:	4770      	bx	lr

08000ed2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ed2:	b480      	push	{r7}
 8000ed4:	b083      	sub	sp, #12
 8000ed6:	af00      	add	r7, sp, #0
 8000ed8:	6078      	str	r0, [r7, #4]
 8000eda:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000edc:	683b      	ldr	r3, [r7, #0]
 8000ede:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ee2:	605a      	str	r2, [r3, #4]
  return 0;
 8000ee4:	2300      	movs	r3, #0
}
 8000ee6:	4618      	mov	r0, r3
 8000ee8:	370c      	adds	r7, #12
 8000eea:	46bd      	mov	sp, r7
 8000eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef0:	4770      	bx	lr

08000ef2 <_isatty>:

int _isatty(int file)
{
 8000ef2:	b480      	push	{r7}
 8000ef4:	b083      	sub	sp, #12
 8000ef6:	af00      	add	r7, sp, #0
 8000ef8:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000efa:	2301      	movs	r3, #1
}
 8000efc:	4618      	mov	r0, r3
 8000efe:	370c      	adds	r7, #12
 8000f00:	46bd      	mov	sp, r7
 8000f02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f06:	4770      	bx	lr

08000f08 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f08:	b480      	push	{r7}
 8000f0a:	b085      	sub	sp, #20
 8000f0c:	af00      	add	r7, sp, #0
 8000f0e:	60f8      	str	r0, [r7, #12]
 8000f10:	60b9      	str	r1, [r7, #8]
 8000f12:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f14:	2300      	movs	r3, #0
}
 8000f16:	4618      	mov	r0, r3
 8000f18:	3714      	adds	r7, #20
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
	...

08000f24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b086      	sub	sp, #24
 8000f28:	af00      	add	r7, sp, #0
 8000f2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f2c:	4a14      	ldr	r2, [pc, #80]	; (8000f80 <_sbrk+0x5c>)
 8000f2e:	4b15      	ldr	r3, [pc, #84]	; (8000f84 <_sbrk+0x60>)
 8000f30:	1ad3      	subs	r3, r2, r3
 8000f32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f34:	697b      	ldr	r3, [r7, #20]
 8000f36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f38:	4b13      	ldr	r3, [pc, #76]	; (8000f88 <_sbrk+0x64>)
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d102      	bne.n	8000f46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f40:	4b11      	ldr	r3, [pc, #68]	; (8000f88 <_sbrk+0x64>)
 8000f42:	4a12      	ldr	r2, [pc, #72]	; (8000f8c <_sbrk+0x68>)
 8000f44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f46:	4b10      	ldr	r3, [pc, #64]	; (8000f88 <_sbrk+0x64>)
 8000f48:	681a      	ldr	r2, [r3, #0]
 8000f4a:	687b      	ldr	r3, [r7, #4]
 8000f4c:	4413      	add	r3, r2
 8000f4e:	693a      	ldr	r2, [r7, #16]
 8000f50:	429a      	cmp	r2, r3
 8000f52:	d207      	bcs.n	8000f64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000f54:	f007 f930 	bl	80081b8 <__errno>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	220c      	movs	r2, #12
 8000f5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f5e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f62:	e009      	b.n	8000f78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f64:	4b08      	ldr	r3, [pc, #32]	; (8000f88 <_sbrk+0x64>)
 8000f66:	681b      	ldr	r3, [r3, #0]
 8000f68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f6a:	4b07      	ldr	r3, [pc, #28]	; (8000f88 <_sbrk+0x64>)
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	4413      	add	r3, r2
 8000f72:	4a05      	ldr	r2, [pc, #20]	; (8000f88 <_sbrk+0x64>)
 8000f74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f76:	68fb      	ldr	r3, [r7, #12]
}
 8000f78:	4618      	mov	r0, r3
 8000f7a:	3718      	adds	r7, #24
 8000f7c:	46bd      	mov	sp, r7
 8000f7e:	bd80      	pop	{r7, pc}
 8000f80:	20020000 	.word	0x20020000
 8000f84:	00000400 	.word	0x00000400
 8000f88:	20000268 	.word	0x20000268
 8000f8c:	20000630 	.word	0x20000630

08000f90 <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8000f90:	b480      	push	{r7}
 8000f92:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000f94:	4b06      	ldr	r3, [pc, #24]	; (8000fb0 <SystemInit+0x20>)
 8000f96:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000f9a:	4a05      	ldr	r2, [pc, #20]	; (8000fb0 <SystemInit+0x20>)
 8000f9c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fa0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fa4:	bf00      	nop
 8000fa6:	46bd      	mov	sp, r7
 8000fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fac:	4770      	bx	lr
 8000fae:	bf00      	nop
 8000fb0:	e000ed00 	.word	0xe000ed00

08000fb4 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	b098      	sub	sp, #96	; 0x60
 8000fb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fba:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	601a      	str	r2, [r3, #0]
 8000fc2:	605a      	str	r2, [r3, #4]
 8000fc4:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fc6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8000fca:	2200      	movs	r2, #0
 8000fcc:	601a      	str	r2, [r3, #0]
 8000fce:	605a      	str	r2, [r3, #4]
 8000fd0:	609a      	str	r2, [r3, #8]
 8000fd2:	60da      	str	r2, [r3, #12]
 8000fd4:	611a      	str	r2, [r3, #16]
 8000fd6:	615a      	str	r2, [r3, #20]
 8000fd8:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8000fda:	1d3b      	adds	r3, r7, #4
 8000fdc:	2234      	movs	r2, #52	; 0x34
 8000fde:	2100      	movs	r1, #0
 8000fe0:	4618      	mov	r0, r3
 8000fe2:	f007 f83e 	bl	8008062 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fe6:	4b4a      	ldr	r3, [pc, #296]	; (8001110 <MX_TIM1_Init+0x15c>)
 8000fe8:	4a4a      	ldr	r2, [pc, #296]	; (8001114 <MX_TIM1_Init+0x160>)
 8000fea:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8000fec:	4b48      	ldr	r3, [pc, #288]	; (8001110 <MX_TIM1_Init+0x15c>)
 8000fee:	2200      	movs	r2, #0
 8000ff0:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8000ff2:	4b47      	ldr	r3, [pc, #284]	; (8001110 <MX_TIM1_Init+0x15c>)
 8000ff4:	2220      	movs	r2, #32
 8000ff6:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8000ff8:	4b45      	ldr	r3, [pc, #276]	; (8001110 <MX_TIM1_Init+0x15c>)
 8000ffa:	f241 0299 	movw	r2, #4249	; 0x1099
 8000ffe:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001000:	4b43      	ldr	r3, [pc, #268]	; (8001110 <MX_TIM1_Init+0x15c>)
 8001002:	2200      	movs	r2, #0
 8001004:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001006:	4b42      	ldr	r3, [pc, #264]	; (8001110 <MX_TIM1_Init+0x15c>)
 8001008:	2200      	movs	r2, #0
 800100a:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800100c:	4b40      	ldr	r3, [pc, #256]	; (8001110 <MX_TIM1_Init+0x15c>)
 800100e:	2200      	movs	r2, #0
 8001010:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001012:	483f      	ldr	r0, [pc, #252]	; (8001110 <MX_TIM1_Init+0x15c>)
 8001014:	f003 fa42 	bl	800449c <HAL_TIM_PWM_Init>
 8001018:	4603      	mov	r3, r0
 800101a:	2b00      	cmp	r3, #0
 800101c:	d001      	beq.n	8001022 <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 800101e:	f7ff fe09 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001022:	2300      	movs	r3, #0
 8001024:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001026:	2300      	movs	r3, #0
 8001028:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800102a:	2300      	movs	r3, #0
 800102c:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800102e:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001032:	4619      	mov	r1, r3
 8001034:	4836      	ldr	r0, [pc, #216]	; (8001110 <MX_TIM1_Init+0x15c>)
 8001036:	f004 fc33 	bl	80058a0 <HAL_TIMEx_MasterConfigSynchronization>
 800103a:	4603      	mov	r3, r0
 800103c:	2b00      	cmp	r3, #0
 800103e:	d001      	beq.n	8001044 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001040:	f7ff fdf8 	bl	8000c34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001044:	2360      	movs	r3, #96	; 0x60
 8001046:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2457;
 8001048:	f640 1399 	movw	r3, #2457	; 0x999
 800104c:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800104e:	2300      	movs	r3, #0
 8001050:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001052:	2300      	movs	r3, #0
 8001054:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800105a:	2300      	movs	r3, #0
 800105c:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800105e:	2300      	movs	r3, #0
 8001060:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001062:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001066:	2200      	movs	r2, #0
 8001068:	4619      	mov	r1, r3
 800106a:	4829      	ldr	r0, [pc, #164]	; (8001110 <MX_TIM1_Init+0x15c>)
 800106c:	f003 fd00 	bl	8004a70 <HAL_TIM_PWM_ConfigChannel>
 8001070:	4603      	mov	r3, r0
 8001072:	2b00      	cmp	r3, #0
 8001074:	d001      	beq.n	800107a <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001076:	f7ff fddd 	bl	8000c34 <Error_Handler>
  }
  sConfigOC.Pulse = 1637;
 800107a:	f240 6365 	movw	r3, #1637	; 0x665
 800107e:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001080:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001084:	2204      	movs	r2, #4
 8001086:	4619      	mov	r1, r3
 8001088:	4821      	ldr	r0, [pc, #132]	; (8001110 <MX_TIM1_Init+0x15c>)
 800108a:	f003 fcf1 	bl	8004a70 <HAL_TIM_PWM_ConfigChannel>
 800108e:	4603      	mov	r3, r0
 8001090:	2b00      	cmp	r3, #0
 8001092:	d001      	beq.n	8001098 <MX_TIM1_Init+0xe4>
  {
    Error_Handler();
 8001094:	f7ff fdce 	bl	8000c34 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001098:	2300      	movs	r3, #0
 800109a:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800109c:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80010a0:	2208      	movs	r2, #8
 80010a2:	4619      	mov	r1, r3
 80010a4:	481a      	ldr	r0, [pc, #104]	; (8001110 <MX_TIM1_Init+0x15c>)
 80010a6:	f003 fce3 	bl	8004a70 <HAL_TIM_PWM_ConfigChannel>
 80010aa:	4603      	mov	r3, r0
 80010ac:	2b00      	cmp	r3, #0
 80010ae:	d001      	beq.n	80010b4 <MX_TIM1_Init+0x100>
  {
    Error_Handler();
 80010b0:	f7ff fdc0 	bl	8000c34 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80010b4:	2300      	movs	r3, #0
 80010b6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80010b8:	2300      	movs	r3, #0
 80010ba:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80010bc:	2300      	movs	r3, #0
 80010be:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 80010c0:	2322      	movs	r3, #34	; 0x22
 80010c2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80010c4:	2300      	movs	r3, #0
 80010c6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80010c8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010cc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 80010ce:	2300      	movs	r3, #0
 80010d0:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 80010d2:	2300      	movs	r3, #0
 80010d4:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 80010d6:	2300      	movs	r3, #0
 80010d8:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 80010da:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80010de:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 80010e0:	2300      	movs	r3, #0
 80010e2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 80010e4:	2300      	movs	r3, #0
 80010e6:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80010e8:	2300      	movs	r3, #0
 80010ea:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 80010ec:	1d3b      	adds	r3, r7, #4
 80010ee:	4619      	mov	r1, r3
 80010f0:	4807      	ldr	r0, [pc, #28]	; (8001110 <MX_TIM1_Init+0x15c>)
 80010f2:	f004 fc6b 	bl	80059cc <HAL_TIMEx_ConfigBreakDeadTime>
 80010f6:	4603      	mov	r3, r0
 80010f8:	2b00      	cmp	r3, #0
 80010fa:	d001      	beq.n	8001100 <MX_TIM1_Init+0x14c>
  {
    Error_Handler();
 80010fc:	f7ff fd9a 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001100:	4803      	ldr	r0, [pc, #12]	; (8001110 <MX_TIM1_Init+0x15c>)
 8001102:	f000 f8d7 	bl	80012b4 <HAL_TIM_MspPostInit>

}
 8001106:	bf00      	nop
 8001108:	3760      	adds	r7, #96	; 0x60
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	2000026c 	.word	0x2000026c
 8001114:	40012c00 	.word	0x40012c00

08001118 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b088      	sub	sp, #32
 800111c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 800111e:	f107 0310 	add.w	r3, r7, #16
 8001122:	2200      	movs	r2, #0
 8001124:	601a      	str	r2, [r3, #0]
 8001126:	605a      	str	r2, [r3, #4]
 8001128:	609a      	str	r2, [r3, #8]
 800112a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800112c:	1d3b      	adds	r3, r7, #4
 800112e:	2200      	movs	r2, #0
 8001130:	601a      	str	r2, [r3, #0]
 8001132:	605a      	str	r2, [r3, #4]
 8001134:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001136:	4b1c      	ldr	r3, [pc, #112]	; (80011a8 <MX_TIM3_Init+0x90>)
 8001138:	4a1c      	ldr	r2, [pc, #112]	; (80011ac <MX_TIM3_Init+0x94>)
 800113a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800113c:	4b1a      	ldr	r3, [pc, #104]	; (80011a8 <MX_TIM3_Init+0x90>)
 800113e:	2200      	movs	r2, #0
 8001140:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001142:	4b19      	ldr	r3, [pc, #100]	; (80011a8 <MX_TIM3_Init+0x90>)
 8001144:	2200      	movs	r2, #0
 8001146:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001148:	4b17      	ldr	r3, [pc, #92]	; (80011a8 <MX_TIM3_Init+0x90>)
 800114a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800114e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001150:	4b15      	ldr	r3, [pc, #84]	; (80011a8 <MX_TIM3_Init+0x90>)
 8001152:	2200      	movs	r2, #0
 8001154:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001156:	4b14      	ldr	r3, [pc, #80]	; (80011a8 <MX_TIM3_Init+0x90>)
 8001158:	2200      	movs	r2, #0
 800115a:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800115c:	2300      	movs	r3, #0
 800115e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001160:	2300      	movs	r3, #0
 8001162:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001164:	2300      	movs	r3, #0
 8001166:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001168:	2300      	movs	r3, #0
 800116a:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 800116c:	f107 0310 	add.w	r3, r7, #16
 8001170:	4619      	mov	r1, r3
 8001172:	480d      	ldr	r0, [pc, #52]	; (80011a8 <MX_TIM3_Init+0x90>)
 8001174:	f004 fa23 	bl	80055be <HAL_TIMEx_HallSensor_Init>
 8001178:	4603      	mov	r3, r0
 800117a:	2b00      	cmp	r3, #0
 800117c:	d001      	beq.n	8001182 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 800117e:	f7ff fd59 	bl	8000c34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001182:	2350      	movs	r3, #80	; 0x50
 8001184:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001186:	2300      	movs	r3, #0
 8001188:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800118a:	1d3b      	adds	r3, r7, #4
 800118c:	4619      	mov	r1, r3
 800118e:	4806      	ldr	r0, [pc, #24]	; (80011a8 <MX_TIM3_Init+0x90>)
 8001190:	f004 fb86 	bl	80058a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001194:	4603      	mov	r3, r0
 8001196:	2b00      	cmp	r3, #0
 8001198:	d001      	beq.n	800119e <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 800119a:	f7ff fd4b 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	200002b8 	.word	0x200002b8
 80011ac:	40000400 	.word	0x40000400

080011b0 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80011b0:	b480      	push	{r7}
 80011b2:	b085      	sub	sp, #20
 80011b4:	af00      	add	r7, sp, #0
 80011b6:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a0a      	ldr	r2, [pc, #40]	; (80011e8 <HAL_TIM_PWM_MspInit+0x38>)
 80011be:	4293      	cmp	r3, r2
 80011c0:	d10b      	bne.n	80011da <HAL_TIM_PWM_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80011c2:	4b0a      	ldr	r3, [pc, #40]	; (80011ec <HAL_TIM_PWM_MspInit+0x3c>)
 80011c4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011c6:	4a09      	ldr	r2, [pc, #36]	; (80011ec <HAL_TIM_PWM_MspInit+0x3c>)
 80011c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80011cc:	6613      	str	r3, [r2, #96]	; 0x60
 80011ce:	4b07      	ldr	r3, [pc, #28]	; (80011ec <HAL_TIM_PWM_MspInit+0x3c>)
 80011d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80011d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 80011da:	bf00      	nop
 80011dc:	3714      	adds	r7, #20
 80011de:	46bd      	mov	sp, r7
 80011e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e4:	4770      	bx	lr
 80011e6:	bf00      	nop
 80011e8:	40012c00 	.word	0x40012c00
 80011ec:	40021000 	.word	0x40021000

080011f0 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	b08a      	sub	sp, #40	; 0x28
 80011f4:	af00      	add	r7, sp, #0
 80011f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011f8:	f107 0314 	add.w	r3, r7, #20
 80011fc:	2200      	movs	r2, #0
 80011fe:	601a      	str	r2, [r3, #0]
 8001200:	605a      	str	r2, [r3, #4]
 8001202:	609a      	str	r2, [r3, #8]
 8001204:	60da      	str	r2, [r3, #12]
 8001206:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	681b      	ldr	r3, [r3, #0]
 800120c:	4a26      	ldr	r2, [pc, #152]	; (80012a8 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d145      	bne.n	800129e <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001212:	4b26      	ldr	r3, [pc, #152]	; (80012ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001214:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001216:	4a25      	ldr	r2, [pc, #148]	; (80012ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001218:	f043 0302 	orr.w	r3, r3, #2
 800121c:	6593      	str	r3, [r2, #88]	; 0x58
 800121e:	4b23      	ldr	r3, [pc, #140]	; (80012ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001220:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001222:	f003 0302 	and.w	r3, r3, #2
 8001226:	613b      	str	r3, [r7, #16]
 8001228:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800122a:	4b20      	ldr	r3, [pc, #128]	; (80012ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 800122c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800122e:	4a1f      	ldr	r2, [pc, #124]	; (80012ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001230:	f043 0301 	orr.w	r3, r3, #1
 8001234:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001236:	4b1d      	ldr	r3, [pc, #116]	; (80012ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001238:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800123a:	f003 0301 	and.w	r3, r3, #1
 800123e:	60fb      	str	r3, [r7, #12]
 8001240:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001242:	4b1a      	ldr	r3, [pc, #104]	; (80012ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001246:	4a19      	ldr	r2, [pc, #100]	; (80012ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001248:	f043 0304 	orr.w	r3, r3, #4
 800124c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800124e:	4b17      	ldr	r3, [pc, #92]	; (80012ac <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001250:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001252:	f003 0304 	and.w	r3, r3, #4
 8001256:	60bb      	str	r3, [r7, #8]
 8001258:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 800125a:	2350      	movs	r3, #80	; 0x50
 800125c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800125e:	2302      	movs	r3, #2
 8001260:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001262:	2300      	movs	r3, #0
 8001264:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001266:	2300      	movs	r3, #0
 8001268:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800126a:	2302      	movs	r3, #2
 800126c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800126e:	f107 0314 	add.w	r3, r7, #20
 8001272:	4619      	mov	r1, r3
 8001274:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001278:	f001 fe10 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800127c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001280:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001282:	2302      	movs	r3, #2
 8001284:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001286:	2300      	movs	r3, #0
 8001288:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800128a:	2300      	movs	r3, #0
 800128c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800128e:	2302      	movs	r3, #2
 8001290:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001292:	f107 0314 	add.w	r3, r7, #20
 8001296:	4619      	mov	r1, r3
 8001298:	4805      	ldr	r0, [pc, #20]	; (80012b0 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 800129a:	f001 fdff 	bl	8002e9c <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800129e:	bf00      	nop
 80012a0:	3728      	adds	r7, #40	; 0x28
 80012a2:	46bd      	mov	sp, r7
 80012a4:	bd80      	pop	{r7, pc}
 80012a6:	bf00      	nop
 80012a8:	40000400 	.word	0x40000400
 80012ac:	40021000 	.word	0x40021000
 80012b0:	48000800 	.word	0x48000800

080012b4 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b08a      	sub	sp, #40	; 0x28
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80012bc:	f107 0314 	add.w	r3, r7, #20
 80012c0:	2200      	movs	r2, #0
 80012c2:	601a      	str	r2, [r3, #0]
 80012c4:	605a      	str	r2, [r3, #4]
 80012c6:	609a      	str	r2, [r3, #8]
 80012c8:	60da      	str	r2, [r3, #12]
 80012ca:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	681b      	ldr	r3, [r3, #0]
 80012d0:	4a29      	ldr	r2, [pc, #164]	; (8001378 <HAL_TIM_MspPostInit+0xc4>)
 80012d2:	4293      	cmp	r3, r2
 80012d4:	d14b      	bne.n	800136e <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012d6:	4b29      	ldr	r3, [pc, #164]	; (800137c <HAL_TIM_MspPostInit+0xc8>)
 80012d8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012da:	4a28      	ldr	r2, [pc, #160]	; (800137c <HAL_TIM_MspPostInit+0xc8>)
 80012dc:	f043 0302 	orr.w	r3, r3, #2
 80012e0:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e2:	4b26      	ldr	r3, [pc, #152]	; (800137c <HAL_TIM_MspPostInit+0xc8>)
 80012e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e6:	f003 0302 	and.w	r3, r3, #2
 80012ea:	613b      	str	r3, [r7, #16]
 80012ec:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012ee:	4b23      	ldr	r3, [pc, #140]	; (800137c <HAL_TIM_MspPostInit+0xc8>)
 80012f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f2:	4a22      	ldr	r2, [pc, #136]	; (800137c <HAL_TIM_MspPostInit+0xc8>)
 80012f4:	f043 0301 	orr.w	r3, r3, #1
 80012f8:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fa:	4b20      	ldr	r3, [pc, #128]	; (800137c <HAL_TIM_MspPostInit+0xc8>)
 80012fc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012fe:	f003 0301 	and.w	r3, r3, #1
 8001302:	60fb      	str	r3, [r7, #12]
 8001304:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001306:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 800130a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800130c:	2302      	movs	r3, #2
 800130e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001310:	2300      	movs	r3, #0
 8001312:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001314:	2300      	movs	r3, #0
 8001316:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001318:	2306      	movs	r3, #6
 800131a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800131c:	f107 0314 	add.w	r3, r7, #20
 8001320:	4619      	mov	r1, r3
 8001322:	4817      	ldr	r0, [pc, #92]	; (8001380 <HAL_TIM_MspPostInit+0xcc>)
 8001324:	f001 fdba 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001328:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800132c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132e:	2302      	movs	r3, #2
 8001330:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001332:	2300      	movs	r3, #0
 8001334:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001336:	2300      	movs	r3, #0
 8001338:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 800133a:	2304      	movs	r3, #4
 800133c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 800133e:	f107 0314 	add.w	r3, r7, #20
 8001342:	4619      	mov	r1, r3
 8001344:	480e      	ldr	r0, [pc, #56]	; (8001380 <HAL_TIM_MspPostInit+0xcc>)
 8001346:	f001 fda9 	bl	8002e9c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 800134a:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 800134e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001350:	2302      	movs	r3, #2
 8001352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001354:	2300      	movs	r3, #0
 8001356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001358:	2300      	movs	r3, #0
 800135a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 800135c:	2306      	movs	r3, #6
 800135e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001360:	f107 0314 	add.w	r3, r7, #20
 8001364:	4619      	mov	r1, r3
 8001366:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800136a:	f001 fd97 	bl	8002e9c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 800136e:	bf00      	nop
 8001370:	3728      	adds	r7, #40	; 0x28
 8001372:	46bd      	mov	sp, r7
 8001374:	bd80      	pop	{r7, pc}
 8001376:	bf00      	nop
 8001378:	40012c00 	.word	0x40012c00
 800137c:	40021000 	.word	0x40021000
 8001380:	48000400 	.word	0x48000400

08001384 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001388:	4b22      	ldr	r3, [pc, #136]	; (8001414 <MX_USART2_UART_Init+0x90>)
 800138a:	4a23      	ldr	r2, [pc, #140]	; (8001418 <MX_USART2_UART_Init+0x94>)
 800138c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800138e:	4b21      	ldr	r3, [pc, #132]	; (8001414 <MX_USART2_UART_Init+0x90>)
 8001390:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001394:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001396:	4b1f      	ldr	r3, [pc, #124]	; (8001414 <MX_USART2_UART_Init+0x90>)
 8001398:	2200      	movs	r2, #0
 800139a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800139c:	4b1d      	ldr	r3, [pc, #116]	; (8001414 <MX_USART2_UART_Init+0x90>)
 800139e:	2200      	movs	r2, #0
 80013a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80013a2:	4b1c      	ldr	r3, [pc, #112]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80013a8:	4b1a      	ldr	r3, [pc, #104]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013aa:	220c      	movs	r2, #12
 80013ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80013ae:	4b19      	ldr	r3, [pc, #100]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80013b4:	4b17      	ldr	r3, [pc, #92]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013b6:	2200      	movs	r2, #0
 80013b8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80013ba:	4b16      	ldr	r3, [pc, #88]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013bc:	2200      	movs	r2, #0
 80013be:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 80013c0:	4b14      	ldr	r3, [pc, #80]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013c2:	2200      	movs	r2, #0
 80013c4:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80013c6:	4b13      	ldr	r3, [pc, #76]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80013cc:	4811      	ldr	r0, [pc, #68]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013ce:	f004 fc1a 	bl	8005c06 <HAL_UART_Init>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 80013d8:	f7ff fc2c 	bl	8000c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013dc:	2100      	movs	r1, #0
 80013de:	480d      	ldr	r0, [pc, #52]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013e0:	f006 fbbd 	bl	8007b5e <HAL_UARTEx_SetTxFifoThreshold>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 80013ea:	f7ff fc23 	bl	8000c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 80013ee:	2100      	movs	r1, #0
 80013f0:	4808      	ldr	r0, [pc, #32]	; (8001414 <MX_USART2_UART_Init+0x90>)
 80013f2:	f006 fbf2 	bl	8007bda <HAL_UARTEx_SetRxFifoThreshold>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 80013fc:	f7ff fc1a 	bl	8000c34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001400:	4804      	ldr	r0, [pc, #16]	; (8001414 <MX_USART2_UART_Init+0x90>)
 8001402:	f006 fb73 	bl	8007aec <HAL_UARTEx_DisableFifoMode>
 8001406:	4603      	mov	r3, r0
 8001408:	2b00      	cmp	r3, #0
 800140a:	d001      	beq.n	8001410 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 800140c:	f7ff fc12 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001410:	bf00      	nop
 8001412:	bd80      	pop	{r7, pc}
 8001414:	20000304 	.word	0x20000304
 8001418:	40004400 	.word	0x40004400

0800141c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001420:	4b22      	ldr	r3, [pc, #136]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001422:	4a23      	ldr	r2, [pc, #140]	; (80014b0 <MX_USART3_UART_Init+0x94>)
 8001424:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001426:	4b21      	ldr	r3, [pc, #132]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001428:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800142c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800142e:	4b1f      	ldr	r3, [pc, #124]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001430:	2200      	movs	r2, #0
 8001432:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001436:	2200      	movs	r2, #0
 8001438:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800143c:	2200      	movs	r2, #0
 800143e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001442:	220c      	movs	r2, #12
 8001444:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001448:	2200      	movs	r2, #0
 800144a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800144c:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800144e:	2200      	movs	r2, #0
 8001450:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001452:	4b16      	ldr	r3, [pc, #88]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001454:	2200      	movs	r2, #0
 8001456:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001458:	4b14      	ldr	r3, [pc, #80]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800145a:	2200      	movs	r2, #0
 800145c:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800145e:	4b13      	ldr	r3, [pc, #76]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001460:	2200      	movs	r2, #0
 8001462:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001464:	4811      	ldr	r0, [pc, #68]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001466:	f004 fbce 	bl	8005c06 <HAL_UART_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001470:	f7ff fbe0 	bl	8000c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001474:	2100      	movs	r1, #0
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_USART3_UART_Init+0x90>)
 8001478:	f006 fb71 	bl	8007b5e <HAL_UARTEx_SetTxFifoThreshold>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001482:	f7ff fbd7 	bl	8000c34 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001486:	2100      	movs	r1, #0
 8001488:	4808      	ldr	r0, [pc, #32]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800148a:	f006 fba6 	bl	8007bda <HAL_UARTEx_SetRxFifoThreshold>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8001494:	f7ff fbce 	bl	8000c34 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8001498:	4804      	ldr	r0, [pc, #16]	; (80014ac <MX_USART3_UART_Init+0x90>)
 800149a:	f006 fb27 	bl	8007aec <HAL_UARTEx_DisableFifoMode>
 800149e:	4603      	mov	r3, r0
 80014a0:	2b00      	cmp	r3, #0
 80014a2:	d001      	beq.n	80014a8 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 80014a4:	f7ff fbc6 	bl	8000c34 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80014a8:	bf00      	nop
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	20000394 	.word	0x20000394
 80014b0:	40004800 	.word	0x40004800

080014b4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	b0a0      	sub	sp, #128	; 0x80
 80014b8:	af00      	add	r7, sp, #0
 80014ba:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014bc:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
 80014c4:	605a      	str	r2, [r3, #4]
 80014c6:	609a      	str	r2, [r3, #8]
 80014c8:	60da      	str	r2, [r3, #12]
 80014ca:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80014cc:	f107 0318 	add.w	r3, r7, #24
 80014d0:	2254      	movs	r2, #84	; 0x54
 80014d2:	2100      	movs	r1, #0
 80014d4:	4618      	mov	r0, r3
 80014d6:	f006 fdc4 	bl	8008062 <memset>
  if(uartHandle->Instance==USART2)
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4a45      	ldr	r2, [pc, #276]	; (80015f4 <HAL_UART_MspInit+0x140>)
 80014e0:	4293      	cmp	r3, r2
 80014e2:	d13f      	bne.n	8001564 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 80014e4:	2302      	movs	r3, #2
 80014e6:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 80014e8:	2300      	movs	r3, #0
 80014ea:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80014ec:	f107 0318 	add.w	r3, r7, #24
 80014f0:	4618      	mov	r0, r3
 80014f2:	f002 fcab 	bl	8003e4c <HAL_RCCEx_PeriphCLKConfig>
 80014f6:	4603      	mov	r3, r0
 80014f8:	2b00      	cmp	r3, #0
 80014fa:	d001      	beq.n	8001500 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 80014fc:	f7ff fb9a 	bl	8000c34 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001500:	4b3d      	ldr	r3, [pc, #244]	; (80015f8 <HAL_UART_MspInit+0x144>)
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	4a3c      	ldr	r2, [pc, #240]	; (80015f8 <HAL_UART_MspInit+0x144>)
 8001506:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800150a:	6593      	str	r3, [r2, #88]	; 0x58
 800150c:	4b3a      	ldr	r3, [pc, #232]	; (80015f8 <HAL_UART_MspInit+0x144>)
 800150e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001510:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001514:	617b      	str	r3, [r7, #20]
 8001516:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001518:	4b37      	ldr	r3, [pc, #220]	; (80015f8 <HAL_UART_MspInit+0x144>)
 800151a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800151c:	4a36      	ldr	r2, [pc, #216]	; (80015f8 <HAL_UART_MspInit+0x144>)
 800151e:	f043 0301 	orr.w	r3, r3, #1
 8001522:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001524:	4b34      	ldr	r3, [pc, #208]	; (80015f8 <HAL_UART_MspInit+0x144>)
 8001526:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001528:	f003 0301 	and.w	r3, r3, #1
 800152c:	613b      	str	r3, [r7, #16]
 800152e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001530:	230c      	movs	r3, #12
 8001532:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001534:	2302      	movs	r3, #2
 8001536:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001538:	2300      	movs	r3, #0
 800153a:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800153c:	2300      	movs	r3, #0
 800153e:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001540:	2307      	movs	r3, #7
 8001542:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001544:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001548:	4619      	mov	r1, r3
 800154a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800154e:	f001 fca5 	bl	8002e9c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001552:	2200      	movs	r2, #0
 8001554:	2100      	movs	r1, #0
 8001556:	2026      	movs	r0, #38	; 0x26
 8001558:	f001 fbb8 	bl	8002ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800155c:	2026      	movs	r0, #38	; 0x26
 800155e:	f001 fbcf 	bl	8002d00 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 8001562:	e043      	b.n	80015ec <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 8001564:	687b      	ldr	r3, [r7, #4]
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	4a24      	ldr	r2, [pc, #144]	; (80015fc <HAL_UART_MspInit+0x148>)
 800156a:	4293      	cmp	r3, r2
 800156c:	d13e      	bne.n	80015ec <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 800156e:	2304      	movs	r3, #4
 8001570:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001572:	2300      	movs	r3, #0
 8001574:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001576:	f107 0318 	add.w	r3, r7, #24
 800157a:	4618      	mov	r0, r3
 800157c:	f002 fc66 	bl	8003e4c <HAL_RCCEx_PeriphCLKConfig>
 8001580:	4603      	mov	r3, r0
 8001582:	2b00      	cmp	r3, #0
 8001584:	d001      	beq.n	800158a <HAL_UART_MspInit+0xd6>
      Error_Handler();
 8001586:	f7ff fb55 	bl	8000c34 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 800158a:	4b1b      	ldr	r3, [pc, #108]	; (80015f8 <HAL_UART_MspInit+0x144>)
 800158c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800158e:	4a1a      	ldr	r2, [pc, #104]	; (80015f8 <HAL_UART_MspInit+0x144>)
 8001590:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001594:	6593      	str	r3, [r2, #88]	; 0x58
 8001596:	4b18      	ldr	r3, [pc, #96]	; (80015f8 <HAL_UART_MspInit+0x144>)
 8001598:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800159a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800159e:	60fb      	str	r3, [r7, #12]
 80015a0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80015a2:	4b15      	ldr	r3, [pc, #84]	; (80015f8 <HAL_UART_MspInit+0x144>)
 80015a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015a6:	4a14      	ldr	r2, [pc, #80]	; (80015f8 <HAL_UART_MspInit+0x144>)
 80015a8:	f043 0304 	orr.w	r3, r3, #4
 80015ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80015ae:	4b12      	ldr	r3, [pc, #72]	; (80015f8 <HAL_UART_MspInit+0x144>)
 80015b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80015b2:	f003 0304 	and.w	r3, r3, #4
 80015b6:	60bb      	str	r3, [r7, #8]
 80015b8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 80015ba:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80015be:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c0:	2302      	movs	r3, #2
 80015c2:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c4:	2300      	movs	r3, #0
 80015c6:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015c8:	2300      	movs	r3, #0
 80015ca:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015cc:	2307      	movs	r3, #7
 80015ce:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015d0:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80015d4:	4619      	mov	r1, r3
 80015d6:	480a      	ldr	r0, [pc, #40]	; (8001600 <HAL_UART_MspInit+0x14c>)
 80015d8:	f001 fc60 	bl	8002e9c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80015dc:	2200      	movs	r2, #0
 80015de:	2100      	movs	r1, #0
 80015e0:	2027      	movs	r0, #39	; 0x27
 80015e2:	f001 fb73 	bl	8002ccc <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 80015e6:	2027      	movs	r0, #39	; 0x27
 80015e8:	f001 fb8a 	bl	8002d00 <HAL_NVIC_EnableIRQ>
}
 80015ec:	bf00      	nop
 80015ee:	3780      	adds	r7, #128	; 0x80
 80015f0:	46bd      	mov	sp, r7
 80015f2:	bd80      	pop	{r7, pc}
 80015f4:	40004400 	.word	0x40004400
 80015f8:	40021000 	.word	0x40021000
 80015fc:	40004800 	.word	0x40004800
 8001600:	48000800 	.word	0x48000800

08001604 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8001604:	b580      	push	{r7, lr}
 8001606:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8001608:	2224      	movs	r2, #36	; 0x24
 800160a:	2100      	movs	r1, #0
 800160c:	4816      	ldr	r0, [pc, #88]	; (8001668 <Shell_Init+0x64>)
 800160e:	f006 fd28 	bl	8008062 <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8001612:	2240      	movs	r2, #64	; 0x40
 8001614:	2100      	movs	r1, #0
 8001616:	4815      	ldr	r0, [pc, #84]	; (800166c <Shell_Init+0x68>)
 8001618:	f006 fd23 	bl	8008062 <memset>
 800161c:	4b14      	ldr	r3, [pc, #80]	; (8001670 <Shell_Init+0x6c>)
 800161e:	2200      	movs	r2, #0
 8001620:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8001622:	2240      	movs	r2, #64	; 0x40
 8001624:	2100      	movs	r1, #0
 8001626:	4813      	ldr	r0, [pc, #76]	; (8001674 <Shell_Init+0x70>)
 8001628:	f006 fd1b 	bl	8008062 <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800162c:	2201      	movs	r2, #1
 800162e:	4910      	ldr	r1, [pc, #64]	; (8001670 <Shell_Init+0x6c>)
 8001630:	4811      	ldr	r0, [pc, #68]	; (8001678 <Shell_Init+0x74>)
 8001632:	f004 fbcf 	bl	8005dd4 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 8001636:	4811      	ldr	r0, [pc, #68]	; (800167c <Shell_Init+0x78>)
 8001638:	f7fe fdfc 	bl	8000234 <strlen>
 800163c:	4603      	mov	r3, r0
 800163e:	b29a      	uxth	r2, r3
 8001640:	f04f 33ff 	mov.w	r3, #4294967295
 8001644:	490d      	ldr	r1, [pc, #52]	; (800167c <Shell_Init+0x78>)
 8001646:	480c      	ldr	r0, [pc, #48]	; (8001678 <Shell_Init+0x74>)
 8001648:	f004 fb2d 	bl	8005ca6 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 800164c:	480c      	ldr	r0, [pc, #48]	; (8001680 <Shell_Init+0x7c>)
 800164e:	f7fe fdf1 	bl	8000234 <strlen>
 8001652:	4603      	mov	r3, r0
 8001654:	b29a      	uxth	r2, r3
 8001656:	f04f 33ff 	mov.w	r3, #4294967295
 800165a:	4909      	ldr	r1, [pc, #36]	; (8001680 <Shell_Init+0x7c>)
 800165c:	4806      	ldr	r0, [pc, #24]	; (8001678 <Shell_Init+0x74>)
 800165e:	f004 fb22 	bl	8005ca6 <HAL_UART_Transmit>
}
 8001662:	bf00      	nop
 8001664:	bd80      	pop	{r7, pc}
 8001666:	bf00      	nop
 8001668:	200004b0 	.word	0x200004b0
 800166c:	2000046c 	.word	0x2000046c
 8001670:	20000428 	.word	0x20000428
 8001674:	2000042c 	.word	0x2000042c
 8001678:	20000304 	.word	0x20000304
 800167c:	20000020 	.word	0x20000020
 8001680:	20000004 	.word	0x20000004

08001684 <Shell_Loop>:

void Shell_Loop(void){
 8001684:	b580      	push	{r7, lr}
 8001686:	b082      	sub	sp, #8
 8001688:	af00      	add	r7, sp, #0
	if(uartRxReceived){
 800168a:	4b5f      	ldr	r3, [pc, #380]	; (8001808 <Shell_Loop+0x184>)
 800168c:	781b      	ldrb	r3, [r3, #0]
 800168e:	2b00      	cmp	r3, #0
 8001690:	d05b      	beq.n	800174a <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8001692:	4b5e      	ldr	r3, [pc, #376]	; (800180c <Shell_Loop+0x188>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b08      	cmp	r3, #8
 8001698:	d034      	beq.n	8001704 <Shell_Loop+0x80>
 800169a:	2b0d      	cmp	r3, #13
 800169c:	d142      	bne.n	8001724 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800169e:	f04f 33ff 	mov.w	r3, #4294967295
 80016a2:	2203      	movs	r2, #3
 80016a4:	495a      	ldr	r1, [pc, #360]	; (8001810 <Shell_Loop+0x18c>)
 80016a6:	485b      	ldr	r0, [pc, #364]	; (8001814 <Shell_Loop+0x190>)
 80016a8:	f004 fafd 	bl	8005ca6 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 80016ac:	4b5a      	ldr	r3, [pc, #360]	; (8001818 <Shell_Loop+0x194>)
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	4a5a      	ldr	r2, [pc, #360]	; (800181c <Shell_Loop+0x198>)
 80016b2:	2100      	movs	r1, #0
 80016b4:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 80016b6:	4b5a      	ldr	r3, [pc, #360]	; (8001820 <Shell_Loop+0x19c>)
 80016b8:	2200      	movs	r2, #0
 80016ba:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 80016bc:	4959      	ldr	r1, [pc, #356]	; (8001824 <Shell_Loop+0x1a0>)
 80016be:	4857      	ldr	r0, [pc, #348]	; (800181c <Shell_Loop+0x198>)
 80016c0:	f006 fcd8 	bl	8008074 <strtok>
 80016c4:	4603      	mov	r3, r0
 80016c6:	4a58      	ldr	r2, [pc, #352]	; (8001828 <Shell_Loop+0x1a4>)
 80016c8:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80016ca:	e010      	b.n	80016ee <Shell_Loop+0x6a>
				argv[argc++] = token;
 80016cc:	4b54      	ldr	r3, [pc, #336]	; (8001820 <Shell_Loop+0x19c>)
 80016ce:	681b      	ldr	r3, [r3, #0]
 80016d0:	1c5a      	adds	r2, r3, #1
 80016d2:	4953      	ldr	r1, [pc, #332]	; (8001820 <Shell_Loop+0x19c>)
 80016d4:	600a      	str	r2, [r1, #0]
 80016d6:	4a54      	ldr	r2, [pc, #336]	; (8001828 <Shell_Loop+0x1a4>)
 80016d8:	6812      	ldr	r2, [r2, #0]
 80016da:	4954      	ldr	r1, [pc, #336]	; (800182c <Shell_Loop+0x1a8>)
 80016dc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 80016e0:	4950      	ldr	r1, [pc, #320]	; (8001824 <Shell_Loop+0x1a0>)
 80016e2:	2000      	movs	r0, #0
 80016e4:	f006 fcc6 	bl	8008074 <strtok>
 80016e8:	4603      	mov	r3, r0
 80016ea:	4a4f      	ldr	r2, [pc, #316]	; (8001828 <Shell_Loop+0x1a4>)
 80016ec:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 80016ee:	4b4e      	ldr	r3, [pc, #312]	; (8001828 <Shell_Loop+0x1a4>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d1ea      	bne.n	80016cc <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 80016f6:	4b48      	ldr	r3, [pc, #288]	; (8001818 <Shell_Loop+0x194>)
 80016f8:	2200      	movs	r2, #0
 80016fa:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 80016fc:	4b4c      	ldr	r3, [pc, #304]	; (8001830 <Shell_Loop+0x1ac>)
 80016fe:	2201      	movs	r2, #1
 8001700:	601a      	str	r2, [r3, #0]
			break;
 8001702:	e01f      	b.n	8001744 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8001704:	4b44      	ldr	r3, [pc, #272]	; (8001818 <Shell_Loop+0x194>)
 8001706:	681b      	ldr	r3, [r3, #0]
 8001708:	1e5a      	subs	r2, r3, #1
 800170a:	4943      	ldr	r1, [pc, #268]	; (8001818 <Shell_Loop+0x194>)
 800170c:	600a      	str	r2, [r1, #0]
 800170e:	4a43      	ldr	r2, [pc, #268]	; (800181c <Shell_Loop+0x198>)
 8001710:	2100      	movs	r1, #0
 8001712:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8001714:	f04f 33ff 	mov.w	r3, #4294967295
 8001718:	2204      	movs	r2, #4
 800171a:	4946      	ldr	r1, [pc, #280]	; (8001834 <Shell_Loop+0x1b0>)
 800171c:	483d      	ldr	r0, [pc, #244]	; (8001814 <Shell_Loop+0x190>)
 800171e:	f004 fac2 	bl	8005ca6 <HAL_UART_Transmit>
			break;
 8001722:	e00f      	b.n	8001744 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8001724:	4b3c      	ldr	r3, [pc, #240]	; (8001818 <Shell_Loop+0x194>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	1c5a      	adds	r2, r3, #1
 800172a:	493b      	ldr	r1, [pc, #236]	; (8001818 <Shell_Loop+0x194>)
 800172c:	600a      	str	r2, [r1, #0]
 800172e:	4a37      	ldr	r2, [pc, #220]	; (800180c <Shell_Loop+0x188>)
 8001730:	7811      	ldrb	r1, [r2, #0]
 8001732:	4a3a      	ldr	r2, [pc, #232]	; (800181c <Shell_Loop+0x198>)
 8001734:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 8001736:	f04f 33ff 	mov.w	r3, #4294967295
 800173a:	2201      	movs	r2, #1
 800173c:	4933      	ldr	r1, [pc, #204]	; (800180c <Shell_Loop+0x188>)
 800173e:	4835      	ldr	r0, [pc, #212]	; (8001814 <Shell_Loop+0x190>)
 8001740:	f004 fab1 	bl	8005ca6 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 8001744:	4b30      	ldr	r3, [pc, #192]	; (8001808 <Shell_Loop+0x184>)
 8001746:	2200      	movs	r2, #0
 8001748:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 800174a:	4b39      	ldr	r3, [pc, #228]	; (8001830 <Shell_Loop+0x1ac>)
 800174c:	681b      	ldr	r3, [r3, #0]
 800174e:	2b00      	cmp	r3, #0
 8001750:	d056      	beq.n	8001800 <Shell_Loop+0x17c>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 8001752:	4b36      	ldr	r3, [pc, #216]	; (800182c <Shell_Loop+0x1a8>)
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	4938      	ldr	r1, [pc, #224]	; (8001838 <Shell_Loop+0x1b4>)
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fd61 	bl	8000220 <strcmp>
 800175e:	4603      	mov	r3, r0
 8001760:	2b00      	cmp	r3, #0
 8001762:	d107      	bne.n	8001774 <Shell_Loop+0xf0>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 8001764:	f04f 33ff 	mov.w	r3, #4294967295
 8001768:	221a      	movs	r2, #26
 800176a:	4934      	ldr	r1, [pc, #208]	; (800183c <Shell_Loop+0x1b8>)
 800176c:	4829      	ldr	r0, [pc, #164]	; (8001814 <Shell_Loop+0x190>)
 800176e:	f004 fa9a 	bl	8005ca6 <HAL_UART_Transmit>
 8001772:	e03b      	b.n	80017ec <Shell_Loop+0x168>
		}
		else if(strcmp(argv[0],"help")==0){
 8001774:	4b2d      	ldr	r3, [pc, #180]	; (800182c <Shell_Loop+0x1a8>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	4931      	ldr	r1, [pc, #196]	; (8001840 <Shell_Loop+0x1bc>)
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fd50 	bl	8000220 <strcmp>
 8001780:	4603      	mov	r3, r0
 8001782:	2b00      	cmp	r3, #0
 8001784:	d10e      	bne.n	80017a4 <Shell_Loop+0x120>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 8001786:	4a2f      	ldr	r2, [pc, #188]	; (8001844 <Shell_Loop+0x1c0>)
 8001788:	2140      	movs	r1, #64	; 0x40
 800178a:	482f      	ldr	r0, [pc, #188]	; (8001848 <Shell_Loop+0x1c4>)
 800178c:	f006 fbf2 	bl	8007f74 <sniprintf>
 8001790:	6038      	str	r0, [r7, #0]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8001792:	683b      	ldr	r3, [r7, #0]
 8001794:	b29a      	uxth	r2, r3
 8001796:	f04f 33ff 	mov.w	r3, #4294967295
 800179a:	492b      	ldr	r1, [pc, #172]	; (8001848 <Shell_Loop+0x1c4>)
 800179c:	481d      	ldr	r0, [pc, #116]	; (8001814 <Shell_Loop+0x190>)
 800179e:	f004 fa82 	bl	8005ca6 <HAL_UART_Transmit>
 80017a2:	e023      	b.n	80017ec <Shell_Loop+0x168>
		}
		else if(strcmp(argv[0], "speed") == 0)
 80017a4:	4b21      	ldr	r3, [pc, #132]	; (800182c <Shell_Loop+0x1a8>)
 80017a6:	681b      	ldr	r3, [r3, #0]
 80017a8:	4928      	ldr	r1, [pc, #160]	; (800184c <Shell_Loop+0x1c8>)
 80017aa:	4618      	mov	r0, r3
 80017ac:	f7fe fd38 	bl	8000220 <strcmp>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d113      	bne.n	80017de <Shell_Loop+0x15a>
		{
			uint16_t speedValue = atoi(argv[1]);
 80017b6:	4b1d      	ldr	r3, [pc, #116]	; (800182c <Shell_Loop+0x1a8>)
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f006 fa9a 	bl	8007cf4 <atoi>
 80017c0:	4603      	mov	r3, r0
 80017c2:	80fb      	strh	r3, [r7, #6]
			if(speedValue > MAX_DUTY_CYCLE)
 80017c4:	88fb      	ldrh	r3, [r7, #6]
 80017c6:	f241 0299 	movw	r2, #4249	; 0x1099
 80017ca:	4293      	cmp	r3, r2
 80017cc:	d902      	bls.n	80017d4 <Shell_Loop+0x150>
			{
				speedValue = MAX_DUTY_CYCLE;
 80017ce:	f241 0399 	movw	r3, #4249	; 0x1099
 80017d2:	80fb      	strh	r3, [r7, #6]
			}
			else if(speedValue < MIN_DUTY_CYCLE)
			{
				speedValue = MIN_DUTY_CYCLE;
			}
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, speedValue);
 80017d4:	4b1e      	ldr	r3, [pc, #120]	; (8001850 <Shell_Loop+0x1cc>)
 80017d6:	681b      	ldr	r3, [r3, #0]
 80017d8:	88fa      	ldrh	r2, [r7, #6]
 80017da:	635a      	str	r2, [r3, #52]	; 0x34
 80017dc:	e006      	b.n	80017ec <Shell_Loop+0x168>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80017de:	f04f 33ff 	mov.w	r3, #4294967295
 80017e2:	2214      	movs	r2, #20
 80017e4:	491b      	ldr	r1, [pc, #108]	; (8001854 <Shell_Loop+0x1d0>)
 80017e6:	480b      	ldr	r0, [pc, #44]	; (8001814 <Shell_Loop+0x190>)
 80017e8:	f004 fa5d 	bl	8005ca6 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80017ec:	f04f 33ff 	mov.w	r3, #4294967295
 80017f0:	221c      	movs	r2, #28
 80017f2:	4919      	ldr	r1, [pc, #100]	; (8001858 <Shell_Loop+0x1d4>)
 80017f4:	4807      	ldr	r0, [pc, #28]	; (8001814 <Shell_Loop+0x190>)
 80017f6:	f004 fa56 	bl	8005ca6 <HAL_UART_Transmit>
		newCmdReady = 0;
 80017fa:	4b0d      	ldr	r3, [pc, #52]	; (8001830 <Shell_Loop+0x1ac>)
 80017fc:	2200      	movs	r2, #0
 80017fe:	601a      	str	r2, [r3, #0]
	}
}
 8001800:	bf00      	nop
 8001802:	3708      	adds	r7, #8
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	20000424 	.word	0x20000424
 800180c:	20000428 	.word	0x20000428
 8001810:	20000088 	.word	0x20000088
 8001814:	20000304 	.word	0x20000304
 8001818:	200004ac 	.word	0x200004ac
 800181c:	2000046c 	.word	0x2000046c
 8001820:	200004d4 	.word	0x200004d4
 8001824:	080091ec 	.word	0x080091ec
 8001828:	200004d8 	.word	0x200004d8
 800182c:	200004b0 	.word	0x200004b0
 8001830:	200004dc 	.word	0x200004dc
 8001834:	2000008c 	.word	0x2000008c
 8001838:	080091f0 	.word	0x080091f0
 800183c:	200000a4 	.word	0x200000a4
 8001840:	08009200 	.word	0x08009200
 8001844:	08009208 	.word	0x08009208
 8001848:	2000042c 	.word	0x2000042c
 800184c:	08009230 	.word	0x08009230
 8001850:	2000026c 	.word	0x2000026c
 8001854:	20000090 	.word	0x20000090
 8001858:	20000004 	.word	0x20000004

0800185c <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 800185c:	b580      	push	{r7, lr}
 800185e:	b082      	sub	sp, #8
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8001864:	4b05      	ldr	r3, [pc, #20]	; (800187c <HAL_UART_RxCpltCallback+0x20>)
 8001866:	2201      	movs	r2, #1
 8001868:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800186a:	2201      	movs	r2, #1
 800186c:	4904      	ldr	r1, [pc, #16]	; (8001880 <HAL_UART_RxCpltCallback+0x24>)
 800186e:	4805      	ldr	r0, [pc, #20]	; (8001884 <HAL_UART_RxCpltCallback+0x28>)
 8001870:	f004 fab0 	bl	8005dd4 <HAL_UART_Receive_IT>
}
 8001874:	bf00      	nop
 8001876:	3708      	adds	r7, #8
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	20000424 	.word	0x20000424
 8001880:	20000428 	.word	0x20000428
 8001884:	20000304 	.word	0x20000304

08001888 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8001888:	480d      	ldr	r0, [pc, #52]	; (80018c0 <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 800188a:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800188c:	480d      	ldr	r0, [pc, #52]	; (80018c4 <LoopForever+0x6>)
  ldr r1, =_edata
 800188e:	490e      	ldr	r1, [pc, #56]	; (80018c8 <LoopForever+0xa>)
  ldr r2, =_sidata
 8001890:	4a0e      	ldr	r2, [pc, #56]	; (80018cc <LoopForever+0xe>)
  movs r3, #0
 8001892:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8001894:	e002      	b.n	800189c <LoopCopyDataInit>

08001896 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001896:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001898:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800189a:	3304      	adds	r3, #4

0800189c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800189c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800189e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80018a0:	d3f9      	bcc.n	8001896 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80018a2:	4a0b      	ldr	r2, [pc, #44]	; (80018d0 <LoopForever+0x12>)
  ldr r4, =_ebss
 80018a4:	4c0b      	ldr	r4, [pc, #44]	; (80018d4 <LoopForever+0x16>)
  movs r3, #0
 80018a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80018a8:	e001      	b.n	80018ae <LoopFillZerobss>

080018aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80018aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80018ac:	3204      	adds	r2, #4

080018ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80018ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80018b0:	d3fb      	bcc.n	80018aa <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 80018b2:	f7ff fb6d 	bl	8000f90 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80018b6:	f006 fc85 	bl	80081c4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 80018ba:	f7ff f8ff 	bl	8000abc <main>

080018be <LoopForever>:

LoopForever:
    b LoopForever
 80018be:	e7fe      	b.n	80018be <LoopForever>
  ldr   r0, =_estack
 80018c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80018c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80018c8:	20000124 	.word	0x20000124
  ldr r2, =_sidata
 80018cc:	0800946c 	.word	0x0800946c
  ldr r2, =_sbss
 80018d0:	20000124 	.word	0x20000124
  ldr r4, =_ebss
 80018d4:	20000630 	.word	0x20000630

080018d8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 80018d8:	e7fe      	b.n	80018d8 <ADC1_2_IRQHandler>

080018da <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80018da:	b580      	push	{r7, lr}
 80018dc:	b082      	sub	sp, #8
 80018de:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 80018e0:	2300      	movs	r3, #0
 80018e2:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018e4:	2003      	movs	r0, #3
 80018e6:	f001 f9e6 	bl	8002cb6 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80018ea:	200f      	movs	r0, #15
 80018ec:	f7ff f9cc 	bl	8000c88 <HAL_InitTick>
 80018f0:	4603      	mov	r3, r0
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d002      	beq.n	80018fc <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80018f6:	2301      	movs	r3, #1
 80018f8:	71fb      	strb	r3, [r7, #7]
 80018fa:	e001      	b.n	8001900 <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80018fc:	f7ff f9a0 	bl	8000c40 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 8001900:	79fb      	ldrb	r3, [r7, #7]

}
 8001902:	4618      	mov	r0, r3
 8001904:	3708      	adds	r7, #8
 8001906:	46bd      	mov	sp, r7
 8001908:	bd80      	pop	{r7, pc}
	...

0800190c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001910:	4b05      	ldr	r3, [pc, #20]	; (8001928 <HAL_IncTick+0x1c>)
 8001912:	681a      	ldr	r2, [r3, #0]
 8001914:	4b05      	ldr	r3, [pc, #20]	; (800192c <HAL_IncTick+0x20>)
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	4413      	add	r3, r2
 800191a:	4a03      	ldr	r2, [pc, #12]	; (8001928 <HAL_IncTick+0x1c>)
 800191c:	6013      	str	r3, [r2, #0]
}
 800191e:	bf00      	nop
 8001920:	46bd      	mov	sp, r7
 8001922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001926:	4770      	bx	lr
 8001928:	200004e0 	.word	0x200004e0
 800192c:	200000c4 	.word	0x200000c4

08001930 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001930:	b480      	push	{r7}
 8001932:	af00      	add	r7, sp, #0
  return uwTick;
 8001934:	4b03      	ldr	r3, [pc, #12]	; (8001944 <HAL_GetTick+0x14>)
 8001936:	681b      	ldr	r3, [r3, #0]
}
 8001938:	4618      	mov	r0, r3
 800193a:	46bd      	mov	sp, r7
 800193c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001940:	4770      	bx	lr
 8001942:	bf00      	nop
 8001944:	200004e0 	.word	0x200004e0

08001948 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001948:	b480      	push	{r7}
 800194a:	b083      	sub	sp, #12
 800194c:	af00      	add	r7, sp, #0
 800194e:	6078      	str	r0, [r7, #4]
 8001950:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	689b      	ldr	r3, [r3, #8]
 8001956:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800195a:	683b      	ldr	r3, [r7, #0]
 800195c:	431a      	orrs	r2, r3
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	609a      	str	r2, [r3, #8]
}
 8001962:	bf00      	nop
 8001964:	370c      	adds	r7, #12
 8001966:	46bd      	mov	sp, r7
 8001968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800196c:	4770      	bx	lr

0800196e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800196e:	b480      	push	{r7}
 8001970:	b083      	sub	sp, #12
 8001972:	af00      	add	r7, sp, #0
 8001974:	6078      	str	r0, [r7, #4]
 8001976:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	689b      	ldr	r3, [r3, #8]
 800197c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8001980:	683b      	ldr	r3, [r7, #0]
 8001982:	431a      	orrs	r2, r3
 8001984:	687b      	ldr	r3, [r7, #4]
 8001986:	609a      	str	r2, [r3, #8]
}
 8001988:	bf00      	nop
 800198a:	370c      	adds	r7, #12
 800198c:	46bd      	mov	sp, r7
 800198e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001992:	4770      	bx	lr

08001994 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8001994:	b480      	push	{r7}
 8001996:	b083      	sub	sp, #12
 8001998:	af00      	add	r7, sp, #0
 800199a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80019a4:	4618      	mov	r0, r3
 80019a6:	370c      	adds	r7, #12
 80019a8:	46bd      	mov	sp, r7
 80019aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ae:	4770      	bx	lr

080019b0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b087      	sub	sp, #28
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	60f8      	str	r0, [r7, #12]
 80019b8:	60b9      	str	r1, [r7, #8]
 80019ba:	607a      	str	r2, [r7, #4]
 80019bc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80019be:	68fb      	ldr	r3, [r7, #12]
 80019c0:	3360      	adds	r3, #96	; 0x60
 80019c2:	461a      	mov	r2, r3
 80019c4:	68bb      	ldr	r3, [r7, #8]
 80019c6:	009b      	lsls	r3, r3, #2
 80019c8:	4413      	add	r3, r2
 80019ca:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80019cc:	697b      	ldr	r3, [r7, #20]
 80019ce:	681a      	ldr	r2, [r3, #0]
 80019d0:	4b08      	ldr	r3, [pc, #32]	; (80019f4 <LL_ADC_SetOffset+0x44>)
 80019d2:	4013      	ands	r3, r2
 80019d4:	687a      	ldr	r2, [r7, #4]
 80019d6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80019da:	683a      	ldr	r2, [r7, #0]
 80019dc:	430a      	orrs	r2, r1
 80019de:	4313      	orrs	r3, r2
 80019e0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80019e4:	697b      	ldr	r3, [r7, #20]
 80019e6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80019e8:	bf00      	nop
 80019ea:	371c      	adds	r7, #28
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	03fff000 	.word	0x03fff000

080019f8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80019f8:	b480      	push	{r7}
 80019fa:	b085      	sub	sp, #20
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
 8001a00:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	3360      	adds	r3, #96	; 0x60
 8001a06:	461a      	mov	r2, r3
 8001a08:	683b      	ldr	r3, [r7, #0]
 8001a0a:	009b      	lsls	r3, r3, #2
 8001a0c:	4413      	add	r3, r2
 8001a0e:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8001a10:	68fb      	ldr	r3, [r7, #12]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8001a18:	4618      	mov	r0, r3
 8001a1a:	3714      	adds	r7, #20
 8001a1c:	46bd      	mov	sp, r7
 8001a1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a22:	4770      	bx	lr

08001a24 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8001a24:	b480      	push	{r7}
 8001a26:	b087      	sub	sp, #28
 8001a28:	af00      	add	r7, sp, #0
 8001a2a:	60f8      	str	r0, [r7, #12]
 8001a2c:	60b9      	str	r1, [r7, #8]
 8001a2e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	3360      	adds	r3, #96	; 0x60
 8001a34:	461a      	mov	r2, r3
 8001a36:	68bb      	ldr	r3, [r7, #8]
 8001a38:	009b      	lsls	r3, r3, #2
 8001a3a:	4413      	add	r3, r2
 8001a3c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a3e:	697b      	ldr	r3, [r7, #20]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001a46:	687b      	ldr	r3, [r7, #4]
 8001a48:	431a      	orrs	r2, r3
 8001a4a:	697b      	ldr	r3, [r7, #20]
 8001a4c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 8001a4e:	bf00      	nop
 8001a50:	371c      	adds	r7, #28
 8001a52:	46bd      	mov	sp, r7
 8001a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a58:	4770      	bx	lr

08001a5a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 8001a5a:	b480      	push	{r7}
 8001a5c:	b087      	sub	sp, #28
 8001a5e:	af00      	add	r7, sp, #0
 8001a60:	60f8      	str	r0, [r7, #12]
 8001a62:	60b9      	str	r1, [r7, #8]
 8001a64:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a66:	68fb      	ldr	r3, [r7, #12]
 8001a68:	3360      	adds	r3, #96	; 0x60
 8001a6a:	461a      	mov	r2, r3
 8001a6c:	68bb      	ldr	r3, [r7, #8]
 8001a6e:	009b      	lsls	r3, r3, #2
 8001a70:	4413      	add	r3, r2
 8001a72:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001a74:	697b      	ldr	r3, [r7, #20]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	431a      	orrs	r2, r3
 8001a80:	697b      	ldr	r3, [r7, #20]
 8001a82:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8001a84:	bf00      	nop
 8001a86:	371c      	adds	r7, #28
 8001a88:	46bd      	mov	sp, r7
 8001a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8e:	4770      	bx	lr

08001a90 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8001a90:	b480      	push	{r7}
 8001a92:	b087      	sub	sp, #28
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	60f8      	str	r0, [r7, #12]
 8001a98:	60b9      	str	r1, [r7, #8]
 8001a9a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8001a9c:	68fb      	ldr	r3, [r7, #12]
 8001a9e:	3360      	adds	r3, #96	; 0x60
 8001aa0:	461a      	mov	r2, r3
 8001aa2:	68bb      	ldr	r3, [r7, #8]
 8001aa4:	009b      	lsls	r3, r3, #2
 8001aa6:	4413      	add	r3, r2
 8001aa8:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001aaa:	697b      	ldr	r3, [r7, #20]
 8001aac:	681b      	ldr	r3, [r3, #0]
 8001aae:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8001ab2:	687b      	ldr	r3, [r7, #4]
 8001ab4:	431a      	orrs	r2, r3
 8001ab6:	697b      	ldr	r3, [r7, #20]
 8001ab8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 8001aba:	bf00      	nop
 8001abc:	371c      	adds	r7, #28
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ac4:	4770      	bx	lr

08001ac6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 8001ac6:	b480      	push	{r7}
 8001ac8:	b083      	sub	sp, #12
 8001aca:	af00      	add	r7, sp, #0
 8001acc:	6078      	str	r0, [r7, #4]
 8001ace:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 8001ad0:	687b      	ldr	r3, [r7, #4]
 8001ad2:	695b      	ldr	r3, [r3, #20]
 8001ad4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001ad8:	683b      	ldr	r3, [r7, #0]
 8001ada:	431a      	orrs	r2, r3
 8001adc:	687b      	ldr	r3, [r7, #4]
 8001ade:	615a      	str	r2, [r3, #20]
}
 8001ae0:	bf00      	nop
 8001ae2:	370c      	adds	r7, #12
 8001ae4:	46bd      	mov	sp, r7
 8001ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aea:	4770      	bx	lr

08001aec <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8001aec:	b480      	push	{r7}
 8001aee:	b087      	sub	sp, #28
 8001af0:	af00      	add	r7, sp, #0
 8001af2:	60f8      	str	r0, [r7, #12]
 8001af4:	60b9      	str	r1, [r7, #8]
 8001af6:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	3330      	adds	r3, #48	; 0x30
 8001afc:	461a      	mov	r2, r3
 8001afe:	68bb      	ldr	r3, [r7, #8]
 8001b00:	0a1b      	lsrs	r3, r3, #8
 8001b02:	009b      	lsls	r3, r3, #2
 8001b04:	f003 030c 	and.w	r3, r3, #12
 8001b08:	4413      	add	r3, r2
 8001b0a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b0c:	697b      	ldr	r3, [r7, #20]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	68bb      	ldr	r3, [r7, #8]
 8001b12:	f003 031f 	and.w	r3, r3, #31
 8001b16:	211f      	movs	r1, #31
 8001b18:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1c:	43db      	mvns	r3, r3
 8001b1e:	401a      	ands	r2, r3
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	0e9b      	lsrs	r3, r3, #26
 8001b24:	f003 011f 	and.w	r1, r3, #31
 8001b28:	68bb      	ldr	r3, [r7, #8]
 8001b2a:	f003 031f 	and.w	r3, r3, #31
 8001b2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001b32:	431a      	orrs	r2, r3
 8001b34:	697b      	ldr	r3, [r7, #20]
 8001b36:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 8001b38:	bf00      	nop
 8001b3a:	371c      	adds	r7, #28
 8001b3c:	46bd      	mov	sp, r7
 8001b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b42:	4770      	bx	lr

08001b44 <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 8001b44:	b480      	push	{r7}
 8001b46:	b087      	sub	sp, #28
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	60f8      	str	r0, [r7, #12]
 8001b4c:	60b9      	str	r1, [r7, #8]
 8001b4e:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001b50:	68fb      	ldr	r3, [r7, #12]
 8001b52:	3314      	adds	r3, #20
 8001b54:	461a      	mov	r2, r3
 8001b56:	68bb      	ldr	r3, [r7, #8]
 8001b58:	0e5b      	lsrs	r3, r3, #25
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	f003 0304 	and.w	r3, r3, #4
 8001b60:	4413      	add	r3, r2
 8001b62:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8001b64:	697b      	ldr	r3, [r7, #20]
 8001b66:	681a      	ldr	r2, [r3, #0]
 8001b68:	68bb      	ldr	r3, [r7, #8]
 8001b6a:	0d1b      	lsrs	r3, r3, #20
 8001b6c:	f003 031f 	and.w	r3, r3, #31
 8001b70:	2107      	movs	r1, #7
 8001b72:	fa01 f303 	lsl.w	r3, r1, r3
 8001b76:	43db      	mvns	r3, r3
 8001b78:	401a      	ands	r2, r3
 8001b7a:	68bb      	ldr	r3, [r7, #8]
 8001b7c:	0d1b      	lsrs	r3, r3, #20
 8001b7e:	f003 031f 	and.w	r3, r3, #31
 8001b82:	6879      	ldr	r1, [r7, #4]
 8001b84:	fa01 f303 	lsl.w	r3, r1, r3
 8001b88:	431a      	orrs	r2, r3
 8001b8a:	697b      	ldr	r3, [r7, #20]
 8001b8c:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001b8e:	bf00      	nop
 8001b90:	371c      	adds	r7, #28
 8001b92:	46bd      	mov	sp, r7
 8001b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b98:	4770      	bx	lr
	...

08001b9c <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001b9c:	b480      	push	{r7}
 8001b9e:	b085      	sub	sp, #20
 8001ba0:	af00      	add	r7, sp, #0
 8001ba2:	60f8      	str	r0, [r7, #12]
 8001ba4:	60b9      	str	r1, [r7, #8]
 8001ba6:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	4a0f      	ldr	r2, [pc, #60]	; (8001be8 <LL_ADC_SetChannelSingleDiff+0x4c>)
 8001bac:	4293      	cmp	r3, r2
 8001bae:	d10a      	bne.n	8001bc6 <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 8001bb0:	68fb      	ldr	r3, [r7, #12]
 8001bb2:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001bb6:	68bb      	ldr	r3, [r7, #8]
 8001bb8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bbc:	431a      	orrs	r2, r3
 8001bbe:	68fb      	ldr	r3, [r7, #12]
 8001bc0:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 8001bc4:	e00a      	b.n	8001bdc <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 8001bc6:	68fb      	ldr	r3, [r7, #12]
 8001bc8:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8001bd2:	43db      	mvns	r3, r3
 8001bd4:	401a      	ands	r2, r3
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 8001bdc:	bf00      	nop
 8001bde:	3714      	adds	r7, #20
 8001be0:	46bd      	mov	sp, r7
 8001be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001be6:	4770      	bx	lr
 8001be8:	407f0000 	.word	0x407f0000

08001bec <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8001bec:	b480      	push	{r7}
 8001bee:	b083      	sub	sp, #12
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	689b      	ldr	r3, [r3, #8]
 8001bf8:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8001bfc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c00:	687a      	ldr	r2, [r7, #4]
 8001c02:	6093      	str	r3, [r2, #8]
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001c10:	b480      	push	{r7}
 8001c12:	b083      	sub	sp, #12
 8001c14:	af00      	add	r7, sp, #0
 8001c16:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	689b      	ldr	r3, [r3, #8]
 8001c1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001c20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8001c24:	d101      	bne.n	8001c2a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8001c26:	2301      	movs	r3, #1
 8001c28:	e000      	b.n	8001c2c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001c2a:	2300      	movs	r3, #0
}
 8001c2c:	4618      	mov	r0, r3
 8001c2e:	370c      	adds	r7, #12
 8001c30:	46bd      	mov	sp, r7
 8001c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c36:	4770      	bx	lr

08001c38 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001c38:	b480      	push	{r7}
 8001c3a:	b083      	sub	sp, #12
 8001c3c:	af00      	add	r7, sp, #0
 8001c3e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8001c48:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001c4c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001c54:	bf00      	nop
 8001c56:	370c      	adds	r7, #12
 8001c58:	46bd      	mov	sp, r7
 8001c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5e:	4770      	bx	lr

08001c60 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001c60:	b480      	push	{r7}
 8001c62:	b083      	sub	sp, #12
 8001c64:	af00      	add	r7, sp, #0
 8001c66:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	689b      	ldr	r3, [r3, #8]
 8001c6c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001c70:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001c74:	d101      	bne.n	8001c7a <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8001c76:	2301      	movs	r3, #1
 8001c78:	e000      	b.n	8001c7c <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001c7a:	2300      	movs	r3, #0
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	370c      	adds	r7, #12
 8001c80:	46bd      	mov	sp, r7
 8001c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c86:	4770      	bx	lr

08001c88 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	b083      	sub	sp, #12
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	689b      	ldr	r3, [r3, #8]
 8001c94:	f003 0301 	and.w	r3, r3, #1
 8001c98:	2b01      	cmp	r3, #1
 8001c9a:	d101      	bne.n	8001ca0 <LL_ADC_IsEnabled+0x18>
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	e000      	b.n	8001ca2 <LL_ADC_IsEnabled+0x1a>
 8001ca0:	2300      	movs	r3, #0
}
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	370c      	adds	r7, #12
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cac:	4770      	bx	lr

08001cae <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cae:	b480      	push	{r7}
 8001cb0:	b083      	sub	sp, #12
 8001cb2:	af00      	add	r7, sp, #0
 8001cb4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	689b      	ldr	r3, [r3, #8]
 8001cba:	f003 0304 	and.w	r3, r3, #4
 8001cbe:	2b04      	cmp	r3, #4
 8001cc0:	d101      	bne.n	8001cc6 <LL_ADC_REG_IsConversionOngoing+0x18>
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e000      	b.n	8001cc8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001cc6:	2300      	movs	r3, #0
}
 8001cc8:	4618      	mov	r0, r3
 8001cca:	370c      	adds	r7, #12
 8001ccc:	46bd      	mov	sp, r7
 8001cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd2:	4770      	bx	lr

08001cd4 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	b083      	sub	sp, #12
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	689b      	ldr	r3, [r3, #8]
 8001ce0:	f003 0308 	and.w	r3, r3, #8
 8001ce4:	2b08      	cmp	r3, #8
 8001ce6:	d101      	bne.n	8001cec <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001ce8:	2301      	movs	r3, #1
 8001cea:	e000      	b.n	8001cee <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001cec:	2300      	movs	r3, #0
}
 8001cee:	4618      	mov	r0, r3
 8001cf0:	370c      	adds	r7, #12
 8001cf2:	46bd      	mov	sp, r7
 8001cf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf8:	4770      	bx	lr
	...

08001cfc <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001cfc:	b590      	push	{r4, r7, lr}
 8001cfe:	b089      	sub	sp, #36	; 0x24
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001d04:	2300      	movs	r3, #0
 8001d06:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001d08:	2300      	movs	r3, #0
 8001d0a:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	2b00      	cmp	r3, #0
 8001d10:	d101      	bne.n	8001d16 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8001d12:	2301      	movs	r3, #1
 8001d14:	e1af      	b.n	8002076 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d109      	bne.n	8001d38 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001d24:	6878      	ldr	r0, [r7, #4]
 8001d26:	f7fe fd3f 	bl	80007a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001d2a:	687b      	ldr	r3, [r7, #4]
 8001d2c:	2200      	movs	r2, #0
 8001d2e:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2200      	movs	r2, #0
 8001d34:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	681b      	ldr	r3, [r3, #0]
 8001d3c:	4618      	mov	r0, r3
 8001d3e:	f7ff ff67 	bl	8001c10 <LL_ADC_IsDeepPowerDownEnabled>
 8001d42:	4603      	mov	r3, r0
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d004      	beq.n	8001d52 <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	4618      	mov	r0, r3
 8001d4e:	f7ff ff4d 	bl	8001bec <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff82 	bl	8001c60 <LL_ADC_IsInternalRegulatorEnabled>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	d115      	bne.n	8001d8e <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7ff ff66 	bl	8001c38 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8001d6c:	4b9f      	ldr	r3, [pc, #636]	; (8001fec <HAL_ADC_Init+0x2f0>)
 8001d6e:	681b      	ldr	r3, [r3, #0]
 8001d70:	099b      	lsrs	r3, r3, #6
 8001d72:	4a9f      	ldr	r2, [pc, #636]	; (8001ff0 <HAL_ADC_Init+0x2f4>)
 8001d74:	fba2 2303 	umull	r2, r3, r2, r3
 8001d78:	099b      	lsrs	r3, r3, #6
 8001d7a:	3301      	adds	r3, #1
 8001d7c:	005b      	lsls	r3, r3, #1
 8001d7e:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d80:	e002      	b.n	8001d88 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	3b01      	subs	r3, #1
 8001d86:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8001d88:	68bb      	ldr	r3, [r7, #8]
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d1f9      	bne.n	8001d82 <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4618      	mov	r0, r3
 8001d94:	f7ff ff64 	bl	8001c60 <LL_ADC_IsInternalRegulatorEnabled>
 8001d98:	4603      	mov	r3, r0
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	d10d      	bne.n	8001dba <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001da2:	f043 0210 	orr.w	r2, r3, #16
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001dae:	f043 0201 	orr.w	r2, r3, #1
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8001db6:	2301      	movs	r3, #1
 8001db8:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4618      	mov	r0, r3
 8001dc0:	f7ff ff75 	bl	8001cae <LL_ADC_REG_IsConversionOngoing>
 8001dc4:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	2b00      	cmp	r3, #0
 8001dd0:	f040 8148 	bne.w	8002064 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8001dd4:	697b      	ldr	r3, [r7, #20]
 8001dd6:	2b00      	cmp	r3, #0
 8001dd8:	f040 8144 	bne.w	8002064 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001ddc:	687b      	ldr	r3, [r7, #4]
 8001dde:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001de0:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8001de4:	f043 0202 	orr.w	r2, r3, #2
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4618      	mov	r0, r3
 8001df2:	f7ff ff49 	bl	8001c88 <LL_ADC_IsEnabled>
 8001df6:	4603      	mov	r3, r0
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d141      	bne.n	8001e80 <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e04:	d004      	beq.n	8001e10 <HAL_ADC_Init+0x114>
 8001e06:	687b      	ldr	r3, [r7, #4]
 8001e08:	681b      	ldr	r3, [r3, #0]
 8001e0a:	4a7a      	ldr	r2, [pc, #488]	; (8001ff4 <HAL_ADC_Init+0x2f8>)
 8001e0c:	4293      	cmp	r3, r2
 8001e0e:	d10f      	bne.n	8001e30 <HAL_ADC_Init+0x134>
 8001e10:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8001e14:	f7ff ff38 	bl	8001c88 <LL_ADC_IsEnabled>
 8001e18:	4604      	mov	r4, r0
 8001e1a:	4876      	ldr	r0, [pc, #472]	; (8001ff4 <HAL_ADC_Init+0x2f8>)
 8001e1c:	f7ff ff34 	bl	8001c88 <LL_ADC_IsEnabled>
 8001e20:	4603      	mov	r3, r0
 8001e22:	4323      	orrs	r3, r4
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	bf0c      	ite	eq
 8001e28:	2301      	moveq	r3, #1
 8001e2a:	2300      	movne	r3, #0
 8001e2c:	b2db      	uxtb	r3, r3
 8001e2e:	e012      	b.n	8001e56 <HAL_ADC_Init+0x15a>
 8001e30:	4871      	ldr	r0, [pc, #452]	; (8001ff8 <HAL_ADC_Init+0x2fc>)
 8001e32:	f7ff ff29 	bl	8001c88 <LL_ADC_IsEnabled>
 8001e36:	4604      	mov	r4, r0
 8001e38:	4870      	ldr	r0, [pc, #448]	; (8001ffc <HAL_ADC_Init+0x300>)
 8001e3a:	f7ff ff25 	bl	8001c88 <LL_ADC_IsEnabled>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	431c      	orrs	r4, r3
 8001e42:	486f      	ldr	r0, [pc, #444]	; (8002000 <HAL_ADC_Init+0x304>)
 8001e44:	f7ff ff20 	bl	8001c88 <LL_ADC_IsEnabled>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	4323      	orrs	r3, r4
 8001e4c:	2b00      	cmp	r3, #0
 8001e4e:	bf0c      	ite	eq
 8001e50:	2301      	moveq	r3, #1
 8001e52:	2300      	movne	r3, #0
 8001e54:	b2db      	uxtb	r3, r3
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d012      	beq.n	8001e80 <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	681b      	ldr	r3, [r3, #0]
 8001e5e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001e62:	d004      	beq.n	8001e6e <HAL_ADC_Init+0x172>
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	681b      	ldr	r3, [r3, #0]
 8001e68:	4a62      	ldr	r2, [pc, #392]	; (8001ff4 <HAL_ADC_Init+0x2f8>)
 8001e6a:	4293      	cmp	r3, r2
 8001e6c:	d101      	bne.n	8001e72 <HAL_ADC_Init+0x176>
 8001e6e:	4a65      	ldr	r2, [pc, #404]	; (8002004 <HAL_ADC_Init+0x308>)
 8001e70:	e000      	b.n	8001e74 <HAL_ADC_Init+0x178>
 8001e72:	4a65      	ldr	r2, [pc, #404]	; (8002008 <HAL_ADC_Init+0x30c>)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	685b      	ldr	r3, [r3, #4]
 8001e78:	4619      	mov	r1, r3
 8001e7a:	4610      	mov	r0, r2
 8001e7c:	f7ff fd64 	bl	8001948 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	7f5b      	ldrb	r3, [r3, #29]
 8001e84:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8001e86:	687b      	ldr	r3, [r7, #4]
 8001e88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001e8a:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8001e90:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8001e92:	687b      	ldr	r3, [r7, #4]
 8001e94:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8001e96:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8001e98:	687b      	ldr	r3, [r7, #4]
 8001e9a:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001e9e:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8001ea0:	4313      	orrs	r3, r2
 8001ea2:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8001eaa:	2b01      	cmp	r3, #1
 8001eac:	d106      	bne.n	8001ebc <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	045b      	lsls	r3, r3, #17
 8001eb6:	69ba      	ldr	r2, [r7, #24]
 8001eb8:	4313      	orrs	r3, r2
 8001eba:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d009      	beq.n	8001ed8 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ec8:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ed0:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001ed2:	69ba      	ldr	r2, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	681b      	ldr	r3, [r3, #0]
 8001edc:	68da      	ldr	r2, [r3, #12]
 8001ede:	4b4b      	ldr	r3, [pc, #300]	; (800200c <HAL_ADC_Init+0x310>)
 8001ee0:	4013      	ands	r3, r2
 8001ee2:	687a      	ldr	r2, [r7, #4]
 8001ee4:	6812      	ldr	r2, [r2, #0]
 8001ee6:	69b9      	ldr	r1, [r7, #24]
 8001ee8:	430b      	orrs	r3, r1
 8001eea:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	681b      	ldr	r3, [r3, #0]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	681b      	ldr	r3, [r3, #0]
 8001f06:	4618      	mov	r0, r3
 8001f08:	f7ff fed1 	bl	8001cae <LL_ADC_REG_IsConversionOngoing>
 8001f0c:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4618      	mov	r0, r3
 8001f14:	f7ff fede 	bl	8001cd4 <LL_ADC_INJ_IsConversionOngoing>
 8001f18:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	2b00      	cmp	r3, #0
 8001f1e:	d17f      	bne.n	8002020 <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	2b00      	cmp	r3, #0
 8001f24:	d17c      	bne.n	8002020 <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f2a:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8001f32:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8001f34:	4313      	orrs	r3, r2
 8001f36:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	681b      	ldr	r3, [r3, #0]
 8001f3c:	68db      	ldr	r3, [r3, #12]
 8001f3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8001f42:	f023 0302 	bic.w	r3, r3, #2
 8001f46:	687a      	ldr	r2, [r7, #4]
 8001f48:	6812      	ldr	r2, [r2, #0]
 8001f4a:	69b9      	ldr	r1, [r7, #24]
 8001f4c:	430b      	orrs	r3, r1
 8001f4e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	691b      	ldr	r3, [r3, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	d017      	beq.n	8001f88 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f58:	687b      	ldr	r3, [r7, #4]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	691a      	ldr	r2, [r3, #16]
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8001f66:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001f70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001f74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001f78:	687a      	ldr	r2, [r7, #4]
 8001f7a:	6911      	ldr	r1, [r2, #16]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	6812      	ldr	r2, [r2, #0]
 8001f80:	430b      	orrs	r3, r1
 8001f82:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8001f86:	e013      	b.n	8001fb0 <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	691a      	ldr	r2, [r3, #16]
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8001f96:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8001fa0:	687a      	ldr	r2, [r7, #4]
 8001fa2:	6812      	ldr	r2, [r2, #0]
 8001fa4:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8001fa8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8001fac:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8001fb6:	2b01      	cmp	r3, #1
 8001fb8:	d12a      	bne.n	8002010 <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	681b      	ldr	r3, [r3, #0]
 8001fbe:	691b      	ldr	r3, [r3, #16]
 8001fc0:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8001fc4:	f023 0304 	bic.w	r3, r3, #4
 8001fc8:	687a      	ldr	r2, [r7, #4]
 8001fca:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8001fcc:	687a      	ldr	r2, [r7, #4]
 8001fce:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8001fd0:	4311      	orrs	r1, r2
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8001fd6:	4311      	orrs	r1, r2
 8001fd8:	687a      	ldr	r2, [r7, #4]
 8001fda:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8001fdc:	430a      	orrs	r2, r1
 8001fde:	431a      	orrs	r2, r3
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	f042 0201 	orr.w	r2, r2, #1
 8001fe8:	611a      	str	r2, [r3, #16]
 8001fea:	e019      	b.n	8002020 <HAL_ADC_Init+0x324>
 8001fec:	20000000 	.word	0x20000000
 8001ff0:	053e2d63 	.word	0x053e2d63
 8001ff4:	50000100 	.word	0x50000100
 8001ff8:	50000400 	.word	0x50000400
 8001ffc:	50000500 	.word	0x50000500
 8002000:	50000600 	.word	0x50000600
 8002004:	50000300 	.word	0x50000300
 8002008:	50000700 	.word	0x50000700
 800200c:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	691a      	ldr	r2, [r3, #16]
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f022 0201 	bic.w	r2, r2, #1
 800201e:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	695b      	ldr	r3, [r3, #20]
 8002024:	2b01      	cmp	r3, #1
 8002026:	d10c      	bne.n	8002042 <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	681b      	ldr	r3, [r3, #0]
 800202c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800202e:	f023 010f 	bic.w	r1, r3, #15
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	6a1b      	ldr	r3, [r3, #32]
 8002036:	1e5a      	subs	r2, r3, #1
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	430a      	orrs	r2, r1
 800203e:	631a      	str	r2, [r3, #48]	; 0x30
 8002040:	e007      	b.n	8002052 <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	f022 020f 	bic.w	r2, r2, #15
 8002050:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002056:	f023 0303 	bic.w	r3, r3, #3
 800205a:	f043 0201 	orr.w	r2, r3, #1
 800205e:	687b      	ldr	r3, [r7, #4]
 8002060:	65da      	str	r2, [r3, #92]	; 0x5c
 8002062:	e007      	b.n	8002074 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002068:	f043 0210 	orr.w	r2, r3, #16
 800206c:	687b      	ldr	r3, [r7, #4]
 800206e:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002070:	2301      	movs	r3, #1
 8002072:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002074:	7ffb      	ldrb	r3, [r7, #31]
}
 8002076:	4618      	mov	r0, r3
 8002078:	3724      	adds	r7, #36	; 0x24
 800207a:	46bd      	mov	sp, r7
 800207c:	bd90      	pop	{r4, r7, pc}
 800207e:	bf00      	nop

08002080 <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8002080:	b580      	push	{r7, lr}
 8002082:	b0b6      	sub	sp, #216	; 0xd8
 8002084:	af00      	add	r7, sp, #0
 8002086:	6078      	str	r0, [r7, #4]
 8002088:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800208a:	2300      	movs	r3, #0
 800208c:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 8002090:	2300      	movs	r3, #0
 8002092:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 800209a:	2b01      	cmp	r3, #1
 800209c:	d102      	bne.n	80020a4 <HAL_ADC_ConfigChannel+0x24>
 800209e:	2302      	movs	r3, #2
 80020a0:	f000 bc13 	b.w	80028ca <HAL_ADC_ConfigChannel+0x84a>
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	2201      	movs	r2, #1
 80020a8:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff fdfc 	bl	8001cae <LL_ADC_REG_IsConversionOngoing>
 80020b6:	4603      	mov	r3, r0
 80020b8:	2b00      	cmp	r3, #0
 80020ba:	f040 83f3 	bne.w	80028a4 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6818      	ldr	r0, [r3, #0]
 80020c2:	683b      	ldr	r3, [r7, #0]
 80020c4:	6859      	ldr	r1, [r3, #4]
 80020c6:	683b      	ldr	r3, [r7, #0]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	461a      	mov	r2, r3
 80020cc:	f7ff fd0e 	bl	8001aec <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 80020d0:	687b      	ldr	r3, [r7, #4]
 80020d2:	681b      	ldr	r3, [r3, #0]
 80020d4:	4618      	mov	r0, r3
 80020d6:	f7ff fdea 	bl	8001cae <LL_ADC_REG_IsConversionOngoing>
 80020da:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	4618      	mov	r0, r3
 80020e4:	f7ff fdf6 	bl	8001cd4 <LL_ADC_INJ_IsConversionOngoing>
 80020e8:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 80020ec:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 80020f0:	2b00      	cmp	r3, #0
 80020f2:	f040 81d9 	bne.w	80024a8 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 80020f6:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	f040 81d4 	bne.w	80024a8 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 8002100:	683b      	ldr	r3, [r7, #0]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002108:	d10f      	bne.n	800212a <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6818      	ldr	r0, [r3, #0]
 800210e:	683b      	ldr	r3, [r7, #0]
 8002110:	681b      	ldr	r3, [r3, #0]
 8002112:	2200      	movs	r2, #0
 8002114:	4619      	mov	r1, r3
 8002116:	f7ff fd15 	bl	8001b44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 8002122:	4618      	mov	r0, r3
 8002124:	f7ff fccf 	bl	8001ac6 <LL_ADC_SetSamplingTimeCommonConfig>
 8002128:	e00e      	b.n	8002148 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	6818      	ldr	r0, [r3, #0]
 800212e:	683b      	ldr	r3, [r7, #0]
 8002130:	6819      	ldr	r1, [r3, #0]
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	689b      	ldr	r3, [r3, #8]
 8002136:	461a      	mov	r2, r3
 8002138:	f7ff fd04 	bl	8001b44 <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	2100      	movs	r1, #0
 8002142:	4618      	mov	r0, r3
 8002144:	f7ff fcbf 	bl	8001ac6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	695a      	ldr	r2, [r3, #20]
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	68db      	ldr	r3, [r3, #12]
 8002152:	08db      	lsrs	r3, r3, #3
 8002154:	f003 0303 	and.w	r3, r3, #3
 8002158:	005b      	lsls	r3, r3, #1
 800215a:	fa02 f303 	lsl.w	r3, r2, r3
 800215e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 8002162:	683b      	ldr	r3, [r7, #0]
 8002164:	691b      	ldr	r3, [r3, #16]
 8002166:	2b04      	cmp	r3, #4
 8002168:	d022      	beq.n	80021b0 <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	6818      	ldr	r0, [r3, #0]
 800216e:	683b      	ldr	r3, [r7, #0]
 8002170:	6919      	ldr	r1, [r3, #16]
 8002172:	683b      	ldr	r3, [r7, #0]
 8002174:	681a      	ldr	r2, [r3, #0]
 8002176:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800217a:	f7ff fc19 	bl	80019b0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6818      	ldr	r0, [r3, #0]
 8002182:	683b      	ldr	r3, [r7, #0]
 8002184:	6919      	ldr	r1, [r3, #16]
 8002186:	683b      	ldr	r3, [r7, #0]
 8002188:	699b      	ldr	r3, [r3, #24]
 800218a:	461a      	mov	r2, r3
 800218c:	f7ff fc65 	bl	8001a5a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	6818      	ldr	r0, [r3, #0]
 8002194:	683b      	ldr	r3, [r7, #0]
 8002196:	6919      	ldr	r1, [r3, #16]
 8002198:	683b      	ldr	r3, [r7, #0]
 800219a:	7f1b      	ldrb	r3, [r3, #28]
 800219c:	2b01      	cmp	r3, #1
 800219e:	d102      	bne.n	80021a6 <HAL_ADC_ConfigChannel+0x126>
 80021a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80021a4:	e000      	b.n	80021a8 <HAL_ADC_ConfigChannel+0x128>
 80021a6:	2300      	movs	r3, #0
 80021a8:	461a      	mov	r2, r3
 80021aa:	f7ff fc71 	bl	8001a90 <LL_ADC_SetOffsetSaturation>
 80021ae:	e17b      	b.n	80024a8 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	2100      	movs	r1, #0
 80021b6:	4618      	mov	r0, r3
 80021b8:	f7ff fc1e 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 80021bc:	4603      	mov	r3, r0
 80021be:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d10a      	bne.n	80021dc <HAL_ADC_ConfigChannel+0x15c>
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	2100      	movs	r1, #0
 80021cc:	4618      	mov	r0, r3
 80021ce:	f7ff fc13 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 80021d2:	4603      	mov	r3, r0
 80021d4:	0e9b      	lsrs	r3, r3, #26
 80021d6:	f003 021f 	and.w	r2, r3, #31
 80021da:	e01e      	b.n	800221a <HAL_ADC_ConfigChannel+0x19a>
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	2100      	movs	r1, #0
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fc08 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021ee:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 80021f2:	fa93 f3a3 	rbit	r3, r3
 80021f6:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 80021fa:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80021fe:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8002202:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002206:	2b00      	cmp	r3, #0
 8002208:	d101      	bne.n	800220e <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 800220a:	2320      	movs	r3, #32
 800220c:	e004      	b.n	8002218 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 800220e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8002212:	fab3 f383 	clz	r3, r3
 8002216:	b2db      	uxtb	r3, r3
 8002218:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800221a:	683b      	ldr	r3, [r7, #0]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002222:	2b00      	cmp	r3, #0
 8002224:	d105      	bne.n	8002232 <HAL_ADC_ConfigChannel+0x1b2>
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	0e9b      	lsrs	r3, r3, #26
 800222c:	f003 031f 	and.w	r3, r3, #31
 8002230:	e018      	b.n	8002264 <HAL_ADC_ConfigChannel+0x1e4>
 8002232:	683b      	ldr	r3, [r7, #0]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800223a:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 800223e:	fa93 f3a3 	rbit	r3, r3
 8002242:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 8002246:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800224a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 800224e:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 8002252:	2b00      	cmp	r3, #0
 8002254:	d101      	bne.n	800225a <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 8002256:	2320      	movs	r3, #32
 8002258:	e004      	b.n	8002264 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 800225a:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 800225e:	fab3 f383 	clz	r3, r3
 8002262:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8002264:	429a      	cmp	r2, r3
 8002266:	d106      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	2200      	movs	r2, #0
 800226e:	2100      	movs	r1, #0
 8002270:	4618      	mov	r0, r3
 8002272:	f7ff fbd7 	bl	8001a24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	2101      	movs	r1, #1
 800227c:	4618      	mov	r0, r3
 800227e:	f7ff fbbb 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 8002282:	4603      	mov	r3, r0
 8002284:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002288:	2b00      	cmp	r3, #0
 800228a:	d10a      	bne.n	80022a2 <HAL_ADC_ConfigChannel+0x222>
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	681b      	ldr	r3, [r3, #0]
 8002290:	2101      	movs	r1, #1
 8002292:	4618      	mov	r0, r3
 8002294:	f7ff fbb0 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 8002298:	4603      	mov	r3, r0
 800229a:	0e9b      	lsrs	r3, r3, #26
 800229c:	f003 021f 	and.w	r2, r3, #31
 80022a0:	e01e      	b.n	80022e0 <HAL_ADC_ConfigChannel+0x260>
 80022a2:	687b      	ldr	r3, [r7, #4]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	2101      	movs	r1, #1
 80022a8:	4618      	mov	r0, r3
 80022aa:	f7ff fba5 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 80022ae:	4603      	mov	r3, r0
 80022b0:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b4:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 80022b8:	fa93 f3a3 	rbit	r3, r3
 80022bc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 80022c0:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80022c4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 80022c8:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022cc:	2b00      	cmp	r3, #0
 80022ce:	d101      	bne.n	80022d4 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 80022d0:	2320      	movs	r3, #32
 80022d2:	e004      	b.n	80022de <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 80022d4:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 80022d8:	fab3 f383 	clz	r3, r3
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	d105      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x278>
 80022ec:	683b      	ldr	r3, [r7, #0]
 80022ee:	681b      	ldr	r3, [r3, #0]
 80022f0:	0e9b      	lsrs	r3, r3, #26
 80022f2:	f003 031f 	and.w	r3, r3, #31
 80022f6:	e018      	b.n	800232a <HAL_ADC_ConfigChannel+0x2aa>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002300:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8002304:	fa93 f3a3 	rbit	r3, r3
 8002308:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 800230c:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8002310:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 8002314:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002318:	2b00      	cmp	r3, #0
 800231a:	d101      	bne.n	8002320 <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 800231c:	2320      	movs	r3, #32
 800231e:	e004      	b.n	800232a <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 8002320:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8002324:	fab3 f383 	clz	r3, r3
 8002328:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 800232a:	429a      	cmp	r2, r3
 800232c:	d106      	bne.n	800233c <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	2200      	movs	r2, #0
 8002334:	2101      	movs	r1, #1
 8002336:	4618      	mov	r0, r3
 8002338:	f7ff fb74 	bl	8001a24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	2102      	movs	r1, #2
 8002342:	4618      	mov	r0, r3
 8002344:	f7ff fb58 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 8002348:	4603      	mov	r3, r0
 800234a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800234e:	2b00      	cmp	r3, #0
 8002350:	d10a      	bne.n	8002368 <HAL_ADC_ConfigChannel+0x2e8>
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	2102      	movs	r1, #2
 8002358:	4618      	mov	r0, r3
 800235a:	f7ff fb4d 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 800235e:	4603      	mov	r3, r0
 8002360:	0e9b      	lsrs	r3, r3, #26
 8002362:	f003 021f 	and.w	r2, r3, #31
 8002366:	e01e      	b.n	80023a6 <HAL_ADC_ConfigChannel+0x326>
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	2102      	movs	r1, #2
 800236e:	4618      	mov	r0, r3
 8002370:	f7ff fb42 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 8002374:	4603      	mov	r3, r0
 8002376:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800237a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800237e:	fa93 f3a3 	rbit	r3, r3
 8002382:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8002386:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800238a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800238e:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 8002392:	2b00      	cmp	r3, #0
 8002394:	d101      	bne.n	800239a <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8002396:	2320      	movs	r3, #32
 8002398:	e004      	b.n	80023a4 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 800239a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800239e:	fab3 f383 	clz	r3, r3
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80023ae:	2b00      	cmp	r3, #0
 80023b0:	d105      	bne.n	80023be <HAL_ADC_ConfigChannel+0x33e>
 80023b2:	683b      	ldr	r3, [r7, #0]
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	0e9b      	lsrs	r3, r3, #26
 80023b8:	f003 031f 	and.w	r3, r3, #31
 80023bc:	e016      	b.n	80023ec <HAL_ADC_ConfigChannel+0x36c>
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80023c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80023ca:	fa93 f3a3 	rbit	r3, r3
 80023ce:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 80023d0:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80023d2:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 80023d6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023da:	2b00      	cmp	r3, #0
 80023dc:	d101      	bne.n	80023e2 <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 80023de:	2320      	movs	r3, #32
 80023e0:	e004      	b.n	80023ec <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 80023e2:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023e6:	fab3 f383 	clz	r3, r3
 80023ea:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d106      	bne.n	80023fe <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	2200      	movs	r2, #0
 80023f6:	2102      	movs	r1, #2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fb13 	bl	8001a24 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	2103      	movs	r1, #3
 8002404:	4618      	mov	r0, r3
 8002406:	f7ff faf7 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 800240a:	4603      	mov	r3, r0
 800240c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002410:	2b00      	cmp	r3, #0
 8002412:	d10a      	bne.n	800242a <HAL_ADC_ConfigChannel+0x3aa>
 8002414:	687b      	ldr	r3, [r7, #4]
 8002416:	681b      	ldr	r3, [r3, #0]
 8002418:	2103      	movs	r1, #3
 800241a:	4618      	mov	r0, r3
 800241c:	f7ff faec 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 8002420:	4603      	mov	r3, r0
 8002422:	0e9b      	lsrs	r3, r3, #26
 8002424:	f003 021f 	and.w	r2, r3, #31
 8002428:	e017      	b.n	800245a <HAL_ADC_ConfigChannel+0x3da>
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	681b      	ldr	r3, [r3, #0]
 800242e:	2103      	movs	r1, #3
 8002430:	4618      	mov	r0, r3
 8002432:	f7ff fae1 	bl	80019f8 <LL_ADC_GetOffsetChannel>
 8002436:	4603      	mov	r3, r0
 8002438:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800243a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800243c:	fa93 f3a3 	rbit	r3, r3
 8002440:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 8002442:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002444:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 8002446:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002448:	2b00      	cmp	r3, #0
 800244a:	d101      	bne.n	8002450 <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 800244c:	2320      	movs	r3, #32
 800244e:	e003      	b.n	8002458 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 8002450:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002452:	fab3 f383 	clz	r3, r3
 8002456:	b2db      	uxtb	r3, r3
 8002458:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800245a:	683b      	ldr	r3, [r7, #0]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002462:	2b00      	cmp	r3, #0
 8002464:	d105      	bne.n	8002472 <HAL_ADC_ConfigChannel+0x3f2>
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	0e9b      	lsrs	r3, r3, #26
 800246c:	f003 031f 	and.w	r3, r3, #31
 8002470:	e011      	b.n	8002496 <HAL_ADC_ConfigChannel+0x416>
 8002472:	683b      	ldr	r3, [r7, #0]
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002478:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800247a:	fa93 f3a3 	rbit	r3, r3
 800247e:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 8002480:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002482:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8002484:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002486:	2b00      	cmp	r3, #0
 8002488:	d101      	bne.n	800248e <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 800248a:	2320      	movs	r3, #32
 800248c:	e003      	b.n	8002496 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800248e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002490:	fab3 f383 	clz	r3, r3
 8002494:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8002496:	429a      	cmp	r2, r3
 8002498:	d106      	bne.n	80024a8 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	2200      	movs	r2, #0
 80024a0:	2103      	movs	r1, #3
 80024a2:	4618      	mov	r0, r3
 80024a4:	f7ff fabe 	bl	8001a24 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4618      	mov	r0, r3
 80024ae:	f7ff fbeb 	bl	8001c88 <LL_ADC_IsEnabled>
 80024b2:	4603      	mov	r3, r0
 80024b4:	2b00      	cmp	r3, #0
 80024b6:	f040 813d 	bne.w	8002734 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6819      	ldr	r1, [r3, #0]
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
 80024c6:	461a      	mov	r2, r3
 80024c8:	f7ff fb68 	bl	8001b9c <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 80024cc:	683b      	ldr	r3, [r7, #0]
 80024ce:	68db      	ldr	r3, [r3, #12]
 80024d0:	4aa2      	ldr	r2, [pc, #648]	; (800275c <HAL_ADC_ConfigChannel+0x6dc>)
 80024d2:	4293      	cmp	r3, r2
 80024d4:	f040 812e 	bne.w	8002734 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80024dc:	683b      	ldr	r3, [r7, #0]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80024e4:	2b00      	cmp	r3, #0
 80024e6:	d10b      	bne.n	8002500 <HAL_ADC_ConfigChannel+0x480>
 80024e8:	683b      	ldr	r3, [r7, #0]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	0e9b      	lsrs	r3, r3, #26
 80024ee:	3301      	adds	r3, #1
 80024f0:	f003 031f 	and.w	r3, r3, #31
 80024f4:	2b09      	cmp	r3, #9
 80024f6:	bf94      	ite	ls
 80024f8:	2301      	movls	r3, #1
 80024fa:	2300      	movhi	r3, #0
 80024fc:	b2db      	uxtb	r3, r3
 80024fe:	e019      	b.n	8002534 <HAL_ADC_ConfigChannel+0x4b4>
 8002500:	683b      	ldr	r3, [r7, #0]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002506:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002508:	fa93 f3a3 	rbit	r3, r3
 800250c:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 800250e:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002510:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 8002512:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8002514:	2b00      	cmp	r3, #0
 8002516:	d101      	bne.n	800251c <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 8002518:	2320      	movs	r3, #32
 800251a:	e003      	b.n	8002524 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 800251c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800251e:	fab3 f383 	clz	r3, r3
 8002522:	b2db      	uxtb	r3, r3
 8002524:	3301      	adds	r3, #1
 8002526:	f003 031f 	and.w	r3, r3, #31
 800252a:	2b09      	cmp	r3, #9
 800252c:	bf94      	ite	ls
 800252e:	2301      	movls	r3, #1
 8002530:	2300      	movhi	r3, #0
 8002532:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002534:	2b00      	cmp	r3, #0
 8002536:	d079      	beq.n	800262c <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002538:	683b      	ldr	r3, [r7, #0]
 800253a:	681b      	ldr	r3, [r3, #0]
 800253c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002540:	2b00      	cmp	r3, #0
 8002542:	d107      	bne.n	8002554 <HAL_ADC_ConfigChannel+0x4d4>
 8002544:	683b      	ldr	r3, [r7, #0]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	0e9b      	lsrs	r3, r3, #26
 800254a:	3301      	adds	r3, #1
 800254c:	069b      	lsls	r3, r3, #26
 800254e:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002552:	e015      	b.n	8002580 <HAL_ADC_ConfigChannel+0x500>
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	681b      	ldr	r3, [r3, #0]
 8002558:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800255a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800255c:	fa93 f3a3 	rbit	r3, r3
 8002560:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 8002562:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002564:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8002566:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002568:	2b00      	cmp	r3, #0
 800256a:	d101      	bne.n	8002570 <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 800256c:	2320      	movs	r3, #32
 800256e:	e003      	b.n	8002578 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 8002570:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002572:	fab3 f383 	clz	r3, r3
 8002576:	b2db      	uxtb	r3, r3
 8002578:	3301      	adds	r3, #1
 800257a:	069b      	lsls	r3, r3, #26
 800257c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002580:	683b      	ldr	r3, [r7, #0]
 8002582:	681b      	ldr	r3, [r3, #0]
 8002584:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002588:	2b00      	cmp	r3, #0
 800258a:	d109      	bne.n	80025a0 <HAL_ADC_ConfigChannel+0x520>
 800258c:	683b      	ldr	r3, [r7, #0]
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	0e9b      	lsrs	r3, r3, #26
 8002592:	3301      	adds	r3, #1
 8002594:	f003 031f 	and.w	r3, r3, #31
 8002598:	2101      	movs	r1, #1
 800259a:	fa01 f303 	lsl.w	r3, r1, r3
 800259e:	e017      	b.n	80025d0 <HAL_ADC_ConfigChannel+0x550>
 80025a0:	683b      	ldr	r3, [r7, #0]
 80025a2:	681b      	ldr	r3, [r3, #0]
 80025a4:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80025a8:	fa93 f3a3 	rbit	r3, r3
 80025ac:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 80025ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b0:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 80025b2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	d101      	bne.n	80025bc <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 80025b8:	2320      	movs	r3, #32
 80025ba:	e003      	b.n	80025c4 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 80025bc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80025be:	fab3 f383 	clz	r3, r3
 80025c2:	b2db      	uxtb	r3, r3
 80025c4:	3301      	adds	r3, #1
 80025c6:	f003 031f 	and.w	r3, r3, #31
 80025ca:	2101      	movs	r1, #1
 80025cc:	fa01 f303 	lsl.w	r3, r1, r3
 80025d0:	ea42 0103 	orr.w	r1, r2, r3
 80025d4:	683b      	ldr	r3, [r7, #0]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80025dc:	2b00      	cmp	r3, #0
 80025de:	d10a      	bne.n	80025f6 <HAL_ADC_ConfigChannel+0x576>
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	0e9b      	lsrs	r3, r3, #26
 80025e6:	3301      	adds	r3, #1
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4613      	mov	r3, r2
 80025ee:	005b      	lsls	r3, r3, #1
 80025f0:	4413      	add	r3, r2
 80025f2:	051b      	lsls	r3, r3, #20
 80025f4:	e018      	b.n	8002628 <HAL_ADC_ConfigChannel+0x5a8>
 80025f6:	683b      	ldr	r3, [r7, #0]
 80025f8:	681b      	ldr	r3, [r3, #0]
 80025fa:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80025fc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80025fe:	fa93 f3a3 	rbit	r3, r3
 8002602:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 8002604:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002606:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 8002608:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800260a:	2b00      	cmp	r3, #0
 800260c:	d101      	bne.n	8002612 <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 800260e:	2320      	movs	r3, #32
 8002610:	e003      	b.n	800261a <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 8002612:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002614:	fab3 f383 	clz	r3, r3
 8002618:	b2db      	uxtb	r3, r3
 800261a:	3301      	adds	r3, #1
 800261c:	f003 021f 	and.w	r2, r3, #31
 8002620:	4613      	mov	r3, r2
 8002622:	005b      	lsls	r3, r3, #1
 8002624:	4413      	add	r3, r2
 8002626:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002628:	430b      	orrs	r3, r1
 800262a:	e07e      	b.n	800272a <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800262c:	683b      	ldr	r3, [r7, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8002634:	2b00      	cmp	r3, #0
 8002636:	d107      	bne.n	8002648 <HAL_ADC_ConfigChannel+0x5c8>
 8002638:	683b      	ldr	r3, [r7, #0]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	0e9b      	lsrs	r3, r3, #26
 800263e:	3301      	adds	r3, #1
 8002640:	069b      	lsls	r3, r3, #26
 8002642:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002646:	e015      	b.n	8002674 <HAL_ADC_ConfigChannel+0x5f4>
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800264e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002650:	fa93 f3a3 	rbit	r3, r3
 8002654:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 8002656:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002658:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 800265a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800265c:	2b00      	cmp	r3, #0
 800265e:	d101      	bne.n	8002664 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 8002660:	2320      	movs	r3, #32
 8002662:	e003      	b.n	800266c <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8002664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002666:	fab3 f383 	clz	r3, r3
 800266a:	b2db      	uxtb	r3, r3
 800266c:	3301      	adds	r3, #1
 800266e:	069b      	lsls	r3, r3, #26
 8002670:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800267c:	2b00      	cmp	r3, #0
 800267e:	d109      	bne.n	8002694 <HAL_ADC_ConfigChannel+0x614>
 8002680:	683b      	ldr	r3, [r7, #0]
 8002682:	681b      	ldr	r3, [r3, #0]
 8002684:	0e9b      	lsrs	r3, r3, #26
 8002686:	3301      	adds	r3, #1
 8002688:	f003 031f 	and.w	r3, r3, #31
 800268c:	2101      	movs	r1, #1
 800268e:	fa01 f303 	lsl.w	r3, r1, r3
 8002692:	e017      	b.n	80026c4 <HAL_ADC_ConfigChannel+0x644>
 8002694:	683b      	ldr	r3, [r7, #0]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800269a:	6a3b      	ldr	r3, [r7, #32]
 800269c:	fa93 f3a3 	rbit	r3, r3
 80026a0:	61fb      	str	r3, [r7, #28]
  return result;
 80026a2:	69fb      	ldr	r3, [r7, #28]
 80026a4:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 80026a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d101      	bne.n	80026b0 <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 80026ac:	2320      	movs	r3, #32
 80026ae:	e003      	b.n	80026b8 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 80026b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026b2:	fab3 f383 	clz	r3, r3
 80026b6:	b2db      	uxtb	r3, r3
 80026b8:	3301      	adds	r3, #1
 80026ba:	f003 031f 	and.w	r3, r3, #31
 80026be:	2101      	movs	r1, #1
 80026c0:	fa01 f303 	lsl.w	r3, r1, r3
 80026c4:	ea42 0103 	orr.w	r1, r2, r3
 80026c8:	683b      	ldr	r3, [r7, #0]
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80026d0:	2b00      	cmp	r3, #0
 80026d2:	d10d      	bne.n	80026f0 <HAL_ADC_ConfigChannel+0x670>
 80026d4:	683b      	ldr	r3, [r7, #0]
 80026d6:	681b      	ldr	r3, [r3, #0]
 80026d8:	0e9b      	lsrs	r3, r3, #26
 80026da:	3301      	adds	r3, #1
 80026dc:	f003 021f 	and.w	r2, r3, #31
 80026e0:	4613      	mov	r3, r2
 80026e2:	005b      	lsls	r3, r3, #1
 80026e4:	4413      	add	r3, r2
 80026e6:	3b1e      	subs	r3, #30
 80026e8:	051b      	lsls	r3, r3, #20
 80026ea:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80026ee:	e01b      	b.n	8002728 <HAL_ADC_ConfigChannel+0x6a8>
 80026f0:	683b      	ldr	r3, [r7, #0]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80026f6:	697b      	ldr	r3, [r7, #20]
 80026f8:	fa93 f3a3 	rbit	r3, r3
 80026fc:	613b      	str	r3, [r7, #16]
  return result;
 80026fe:	693b      	ldr	r3, [r7, #16]
 8002700:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 8002702:	69bb      	ldr	r3, [r7, #24]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d101      	bne.n	800270c <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 8002708:	2320      	movs	r3, #32
 800270a:	e003      	b.n	8002714 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 800270c:	69bb      	ldr	r3, [r7, #24]
 800270e:	fab3 f383 	clz	r3, r3
 8002712:	b2db      	uxtb	r3, r3
 8002714:	3301      	adds	r3, #1
 8002716:	f003 021f 	and.w	r2, r3, #31
 800271a:	4613      	mov	r3, r2
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	4413      	add	r3, r2
 8002720:	3b1e      	subs	r3, #30
 8002722:	051b      	lsls	r3, r3, #20
 8002724:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002728:	430b      	orrs	r3, r1
 800272a:	683a      	ldr	r2, [r7, #0]
 800272c:	6892      	ldr	r2, [r2, #8]
 800272e:	4619      	mov	r1, r3
 8002730:	f7ff fa08 	bl	8001b44 <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	681a      	ldr	r2, [r3, #0]
 8002738:	4b09      	ldr	r3, [pc, #36]	; (8002760 <HAL_ADC_ConfigChannel+0x6e0>)
 800273a:	4013      	ands	r3, r2
 800273c:	2b00      	cmp	r3, #0
 800273e:	f000 80be 	beq.w	80028be <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800274a:	d004      	beq.n	8002756 <HAL_ADC_ConfigChannel+0x6d6>
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	4a04      	ldr	r2, [pc, #16]	; (8002764 <HAL_ADC_ConfigChannel+0x6e4>)
 8002752:	4293      	cmp	r3, r2
 8002754:	d10a      	bne.n	800276c <HAL_ADC_ConfigChannel+0x6ec>
 8002756:	4b04      	ldr	r3, [pc, #16]	; (8002768 <HAL_ADC_ConfigChannel+0x6e8>)
 8002758:	e009      	b.n	800276e <HAL_ADC_ConfigChannel+0x6ee>
 800275a:	bf00      	nop
 800275c:	407f0000 	.word	0x407f0000
 8002760:	80080000 	.word	0x80080000
 8002764:	50000100 	.word	0x50000100
 8002768:	50000300 	.word	0x50000300
 800276c:	4b59      	ldr	r3, [pc, #356]	; (80028d4 <HAL_ADC_ConfigChannel+0x854>)
 800276e:	4618      	mov	r0, r3
 8002770:	f7ff f910 	bl	8001994 <LL_ADC_GetCommonPathInternalCh>
 8002774:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8002778:	683b      	ldr	r3, [r7, #0]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a56      	ldr	r2, [pc, #344]	; (80028d8 <HAL_ADC_ConfigChannel+0x858>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d004      	beq.n	800278c <HAL_ADC_ConfigChannel+0x70c>
 8002782:	683b      	ldr	r3, [r7, #0]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	4a55      	ldr	r2, [pc, #340]	; (80028dc <HAL_ADC_ConfigChannel+0x85c>)
 8002788:	4293      	cmp	r3, r2
 800278a:	d13a      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800278c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002790:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002794:	2b00      	cmp	r3, #0
 8002796:	d134      	bne.n	8002802 <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027a0:	d005      	beq.n	80027ae <HAL_ADC_ConfigChannel+0x72e>
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	4a4e      	ldr	r2, [pc, #312]	; (80028e0 <HAL_ADC_ConfigChannel+0x860>)
 80027a8:	4293      	cmp	r3, r2
 80027aa:	f040 8085 	bne.w	80028b8 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80027b6:	d004      	beq.n	80027c2 <HAL_ADC_ConfigChannel+0x742>
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	681b      	ldr	r3, [r3, #0]
 80027bc:	4a49      	ldr	r2, [pc, #292]	; (80028e4 <HAL_ADC_ConfigChannel+0x864>)
 80027be:	4293      	cmp	r3, r2
 80027c0:	d101      	bne.n	80027c6 <HAL_ADC_ConfigChannel+0x746>
 80027c2:	4a49      	ldr	r2, [pc, #292]	; (80028e8 <HAL_ADC_ConfigChannel+0x868>)
 80027c4:	e000      	b.n	80027c8 <HAL_ADC_ConfigChannel+0x748>
 80027c6:	4a43      	ldr	r2, [pc, #268]	; (80028d4 <HAL_ADC_ConfigChannel+0x854>)
 80027c8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80027cc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027d0:	4619      	mov	r1, r3
 80027d2:	4610      	mov	r0, r2
 80027d4:	f7ff f8cb 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80027d8:	4b44      	ldr	r3, [pc, #272]	; (80028ec <HAL_ADC_ConfigChannel+0x86c>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	099b      	lsrs	r3, r3, #6
 80027de:	4a44      	ldr	r2, [pc, #272]	; (80028f0 <HAL_ADC_ConfigChannel+0x870>)
 80027e0:	fba2 2303 	umull	r2, r3, r2, r3
 80027e4:	099b      	lsrs	r3, r3, #6
 80027e6:	1c5a      	adds	r2, r3, #1
 80027e8:	4613      	mov	r3, r2
 80027ea:	005b      	lsls	r3, r3, #1
 80027ec:	4413      	add	r3, r2
 80027ee:	009b      	lsls	r3, r3, #2
 80027f0:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027f2:	e002      	b.n	80027fa <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	2b00      	cmp	r3, #0
 80027fe:	d1f9      	bne.n	80027f4 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002800:	e05a      	b.n	80028b8 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002802:	683b      	ldr	r3, [r7, #0]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	4a3b      	ldr	r2, [pc, #236]	; (80028f4 <HAL_ADC_ConfigChannel+0x874>)
 8002808:	4293      	cmp	r3, r2
 800280a:	d125      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x7d8>
 800280c:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002810:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002814:	2b00      	cmp	r3, #0
 8002816:	d11f      	bne.n	8002858 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	4a31      	ldr	r2, [pc, #196]	; (80028e4 <HAL_ADC_ConfigChannel+0x864>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d104      	bne.n	800282c <HAL_ADC_ConfigChannel+0x7ac>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4a34      	ldr	r2, [pc, #208]	; (80028f8 <HAL_ADC_ConfigChannel+0x878>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d047      	beq.n	80028bc <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002834:	d004      	beq.n	8002840 <HAL_ADC_ConfigChannel+0x7c0>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	4a2a      	ldr	r2, [pc, #168]	; (80028e4 <HAL_ADC_ConfigChannel+0x864>)
 800283c:	4293      	cmp	r3, r2
 800283e:	d101      	bne.n	8002844 <HAL_ADC_ConfigChannel+0x7c4>
 8002840:	4a29      	ldr	r2, [pc, #164]	; (80028e8 <HAL_ADC_ConfigChannel+0x868>)
 8002842:	e000      	b.n	8002846 <HAL_ADC_ConfigChannel+0x7c6>
 8002844:	4a23      	ldr	r2, [pc, #140]	; (80028d4 <HAL_ADC_ConfigChannel+0x854>)
 8002846:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800284a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800284e:	4619      	mov	r1, r3
 8002850:	4610      	mov	r0, r2
 8002852:	f7ff f88c 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8002856:	e031      	b.n	80028bc <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 8002858:	683b      	ldr	r3, [r7, #0]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a27      	ldr	r2, [pc, #156]	; (80028fc <HAL_ADC_ConfigChannel+0x87c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d12d      	bne.n	80028be <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 8002862:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002866:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800286a:	2b00      	cmp	r3, #0
 800286c:	d127      	bne.n	80028be <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	681b      	ldr	r3, [r3, #0]
 8002872:	4a1c      	ldr	r2, [pc, #112]	; (80028e4 <HAL_ADC_ConfigChannel+0x864>)
 8002874:	4293      	cmp	r3, r2
 8002876:	d022      	beq.n	80028be <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002880:	d004      	beq.n	800288c <HAL_ADC_ConfigChannel+0x80c>
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	681b      	ldr	r3, [r3, #0]
 8002886:	4a17      	ldr	r2, [pc, #92]	; (80028e4 <HAL_ADC_ConfigChannel+0x864>)
 8002888:	4293      	cmp	r3, r2
 800288a:	d101      	bne.n	8002890 <HAL_ADC_ConfigChannel+0x810>
 800288c:	4a16      	ldr	r2, [pc, #88]	; (80028e8 <HAL_ADC_ConfigChannel+0x868>)
 800288e:	e000      	b.n	8002892 <HAL_ADC_ConfigChannel+0x812>
 8002890:	4a10      	ldr	r2, [pc, #64]	; (80028d4 <HAL_ADC_ConfigChannel+0x854>)
 8002892:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8002896:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800289a:	4619      	mov	r1, r3
 800289c:	4610      	mov	r0, r2
 800289e:	f7ff f866 	bl	800196e <LL_ADC_SetCommonPathInternalCh>
 80028a2:	e00c      	b.n	80028be <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80028a8:	f043 0220 	orr.w	r2, r3, #32
 80028ac:	687b      	ldr	r3, [r7, #4]
 80028ae:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 80028b0:	2301      	movs	r3, #1
 80028b2:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 80028b6:	e002      	b.n	80028be <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 80028b8:	bf00      	nop
 80028ba:	e000      	b.n	80028be <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80028bc:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	2200      	movs	r2, #0
 80028c2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 80028c6:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	37d8      	adds	r7, #216	; 0xd8
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	50000700 	.word	0x50000700
 80028d8:	c3210000 	.word	0xc3210000
 80028dc:	90c00010 	.word	0x90c00010
 80028e0:	50000600 	.word	0x50000600
 80028e4:	50000100 	.word	0x50000100
 80028e8:	50000300 	.word	0x50000300
 80028ec:	20000000 	.word	0x20000000
 80028f0:	053e2d63 	.word	0x053e2d63
 80028f4:	c7520000 	.word	0xc7520000
 80028f8:	50000500 	.word	0x50000500
 80028fc:	cb840000 	.word	0xcb840000

08002900 <LL_ADC_IsEnabled>:
{
 8002900:	b480      	push	{r7}
 8002902:	b083      	sub	sp, #12
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	689b      	ldr	r3, [r3, #8]
 800290c:	f003 0301 	and.w	r3, r3, #1
 8002910:	2b01      	cmp	r3, #1
 8002912:	d101      	bne.n	8002918 <LL_ADC_IsEnabled+0x18>
 8002914:	2301      	movs	r3, #1
 8002916:	e000      	b.n	800291a <LL_ADC_IsEnabled+0x1a>
 8002918:	2300      	movs	r3, #0
}
 800291a:	4618      	mov	r0, r3
 800291c:	370c      	adds	r7, #12
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr

08002926 <LL_ADC_REG_IsConversionOngoing>:
{
 8002926:	b480      	push	{r7}
 8002928:	b083      	sub	sp, #12
 800292a:	af00      	add	r7, sp, #0
 800292c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 800292e:	687b      	ldr	r3, [r7, #4]
 8002930:	689b      	ldr	r3, [r3, #8]
 8002932:	f003 0304 	and.w	r3, r3, #4
 8002936:	2b04      	cmp	r3, #4
 8002938:	d101      	bne.n	800293e <LL_ADC_REG_IsConversionOngoing+0x18>
 800293a:	2301      	movs	r3, #1
 800293c:	e000      	b.n	8002940 <LL_ADC_REG_IsConversionOngoing+0x1a>
 800293e:	2300      	movs	r3, #0
}
 8002940:	4618      	mov	r0, r3
 8002942:	370c      	adds	r7, #12
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 800294c:	b590      	push	{r4, r7, lr}
 800294e:	b0a1      	sub	sp, #132	; 0x84
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002956:	2300      	movs	r3, #0
 8002958:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002962:	2b01      	cmp	r3, #1
 8002964:	d101      	bne.n	800296a <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002966:	2302      	movs	r3, #2
 8002968:	e0e7      	b.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	2201      	movs	r2, #1
 800296e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8002972:	2300      	movs	r3, #0
 8002974:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8002976:	2300      	movs	r3, #0
 8002978:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	681b      	ldr	r3, [r3, #0]
 800297e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002982:	d102      	bne.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002984:	4b6f      	ldr	r3, [pc, #444]	; (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002986:	60bb      	str	r3, [r7, #8]
 8002988:	e009      	b.n	800299e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a6e      	ldr	r2, [pc, #440]	; (8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d102      	bne.n	800299a <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8002994:	4b6d      	ldr	r3, [pc, #436]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002996:	60bb      	str	r3, [r7, #8]
 8002998:	e001      	b.n	800299e <HAL_ADCEx_MultiModeConfigChannel+0x52>
 800299a:	2300      	movs	r3, #0
 800299c:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800299e:	68bb      	ldr	r3, [r7, #8]
 80029a0:	2b00      	cmp	r3, #0
 80029a2:	d10b      	bne.n	80029bc <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80029a8:	f043 0220 	orr.w	r2, r3, #32
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	2200      	movs	r2, #0
 80029b4:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 80029b8:	2301      	movs	r3, #1
 80029ba:	e0be      	b.n	8002b3a <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	4618      	mov	r0, r3
 80029c0:	f7ff ffb1 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>
 80029c4:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029c6:	687b      	ldr	r3, [r7, #4]
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7ff ffab 	bl	8002926 <LL_ADC_REG_IsConversionOngoing>
 80029d0:	4603      	mov	r3, r0
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	f040 80a0 	bne.w	8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029d8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80029da:	2b00      	cmp	r3, #0
 80029dc:	f040 809c 	bne.w	8002b18 <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80029e8:	d004      	beq.n	80029f4 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	4a55      	ldr	r2, [pc, #340]	; (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 80029f0:	4293      	cmp	r3, r2
 80029f2:	d101      	bne.n	80029f8 <HAL_ADCEx_MultiModeConfigChannel+0xac>
 80029f4:	4b56      	ldr	r3, [pc, #344]	; (8002b50 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 80029f6:	e000      	b.n	80029fa <HAL_ADCEx_MultiModeConfigChannel+0xae>
 80029f8:	4b56      	ldr	r3, [pc, #344]	; (8002b54 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 80029fa:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	d04b      	beq.n	8002a9c <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8002a04:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a06:	689b      	ldr	r3, [r3, #8]
 8002a08:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	6859      	ldr	r1, [r3, #4]
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002a16:	035b      	lsls	r3, r3, #13
 8002a18:	430b      	orrs	r3, r1
 8002a1a:	431a      	orrs	r2, r3
 8002a1c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a1e:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002a28:	d004      	beq.n	8002a34 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a45      	ldr	r2, [pc, #276]	; (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d10f      	bne.n	8002a54 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8002a34:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002a38:	f7ff ff62 	bl	8002900 <LL_ADC_IsEnabled>
 8002a3c:	4604      	mov	r4, r0
 8002a3e:	4841      	ldr	r0, [pc, #260]	; (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002a40:	f7ff ff5e 	bl	8002900 <LL_ADC_IsEnabled>
 8002a44:	4603      	mov	r3, r0
 8002a46:	4323      	orrs	r3, r4
 8002a48:	2b00      	cmp	r3, #0
 8002a4a:	bf0c      	ite	eq
 8002a4c:	2301      	moveq	r3, #1
 8002a4e:	2300      	movne	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	e012      	b.n	8002a7a <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8002a54:	483c      	ldr	r0, [pc, #240]	; (8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002a56:	f7ff ff53 	bl	8002900 <LL_ADC_IsEnabled>
 8002a5a:	4604      	mov	r4, r0
 8002a5c:	483b      	ldr	r0, [pc, #236]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002a5e:	f7ff ff4f 	bl	8002900 <LL_ADC_IsEnabled>
 8002a62:	4603      	mov	r3, r0
 8002a64:	431c      	orrs	r4, r3
 8002a66:	483c      	ldr	r0, [pc, #240]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002a68:	f7ff ff4a 	bl	8002900 <LL_ADC_IsEnabled>
 8002a6c:	4603      	mov	r3, r0
 8002a6e:	4323      	orrs	r3, r4
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bf0c      	ite	eq
 8002a74:	2301      	moveq	r3, #1
 8002a76:	2300      	movne	r3, #0
 8002a78:	b2db      	uxtb	r3, r3
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d056      	beq.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a7e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a80:	689b      	ldr	r3, [r3, #8]
 8002a82:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002a86:	f023 030f 	bic.w	r3, r3, #15
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	6811      	ldr	r1, [r2, #0]
 8002a8e:	683a      	ldr	r2, [r7, #0]
 8002a90:	6892      	ldr	r2, [r2, #8]
 8002a92:	430a      	orrs	r2, r1
 8002a94:	431a      	orrs	r2, r3
 8002a96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a98:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a9a:	e047      	b.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8002a9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002a9e:	689b      	ldr	r3, [r3, #8]
 8002aa0:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002aa4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002aa6:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002ab0:	d004      	beq.n	8002abc <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	4a23      	ldr	r2, [pc, #140]	; (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ab8:	4293      	cmp	r3, r2
 8002aba:	d10f      	bne.n	8002adc <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8002abc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ac0:	f7ff ff1e 	bl	8002900 <LL_ADC_IsEnabled>
 8002ac4:	4604      	mov	r4, r0
 8002ac6:	481f      	ldr	r0, [pc, #124]	; (8002b44 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8002ac8:	f7ff ff1a 	bl	8002900 <LL_ADC_IsEnabled>
 8002acc:	4603      	mov	r3, r0
 8002ace:	4323      	orrs	r3, r4
 8002ad0:	2b00      	cmp	r3, #0
 8002ad2:	bf0c      	ite	eq
 8002ad4:	2301      	moveq	r3, #1
 8002ad6:	2300      	movne	r3, #0
 8002ad8:	b2db      	uxtb	r3, r3
 8002ada:	e012      	b.n	8002b02 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8002adc:	481a      	ldr	r0, [pc, #104]	; (8002b48 <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8002ade:	f7ff ff0f 	bl	8002900 <LL_ADC_IsEnabled>
 8002ae2:	4604      	mov	r4, r0
 8002ae4:	4819      	ldr	r0, [pc, #100]	; (8002b4c <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8002ae6:	f7ff ff0b 	bl	8002900 <LL_ADC_IsEnabled>
 8002aea:	4603      	mov	r3, r0
 8002aec:	431c      	orrs	r4, r3
 8002aee:	481a      	ldr	r0, [pc, #104]	; (8002b58 <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8002af0:	f7ff ff06 	bl	8002900 <LL_ADC_IsEnabled>
 8002af4:	4603      	mov	r3, r0
 8002af6:	4323      	orrs	r3, r4
 8002af8:	2b00      	cmp	r3, #0
 8002afa:	bf0c      	ite	eq
 8002afc:	2301      	moveq	r3, #1
 8002afe:	2300      	movne	r3, #0
 8002b00:	b2db      	uxtb	r3, r3
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d012      	beq.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002b06:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8002b0e:	f023 030f 	bic.w	r3, r3, #15
 8002b12:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8002b14:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b16:	e009      	b.n	8002b2c <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002b1c:	f043 0220 	orr.w	r2, r3, #32
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002b24:	2301      	movs	r3, #1
 8002b26:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8002b2a:	e000      	b.n	8002b2e <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002b2c:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2200      	movs	r2, #0
 8002b32:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8002b36:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8002b3a:	4618      	mov	r0, r3
 8002b3c:	3784      	adds	r7, #132	; 0x84
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd90      	pop	{r4, r7, pc}
 8002b42:	bf00      	nop
 8002b44:	50000100 	.word	0x50000100
 8002b48:	50000400 	.word	0x50000400
 8002b4c:	50000500 	.word	0x50000500
 8002b50:	50000300 	.word	0x50000300
 8002b54:	50000700 	.word	0x50000700
 8002b58:	50000600 	.word	0x50000600

08002b5c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b5c:	b480      	push	{r7}
 8002b5e:	b085      	sub	sp, #20
 8002b60:	af00      	add	r7, sp, #0
 8002b62:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	f003 0307 	and.w	r3, r3, #7
 8002b6a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b6c:	4b0c      	ldr	r3, [pc, #48]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b72:	68ba      	ldr	r2, [r7, #8]
 8002b74:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b78:	4013      	ands	r3, r2
 8002b7a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b80:	68bb      	ldr	r3, [r7, #8]
 8002b82:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002b84:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002b88:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b8c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b8e:	4a04      	ldr	r2, [pc, #16]	; (8002ba0 <__NVIC_SetPriorityGrouping+0x44>)
 8002b90:	68bb      	ldr	r3, [r7, #8]
 8002b92:	60d3      	str	r3, [r2, #12]
}
 8002b94:	bf00      	nop
 8002b96:	3714      	adds	r7, #20
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9e:	4770      	bx	lr
 8002ba0:	e000ed00 	.word	0xe000ed00

08002ba4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ba8:	4b04      	ldr	r3, [pc, #16]	; (8002bbc <__NVIC_GetPriorityGrouping+0x18>)
 8002baa:	68db      	ldr	r3, [r3, #12]
 8002bac:	0a1b      	lsrs	r3, r3, #8
 8002bae:	f003 0307 	and.w	r3, r3, #7
}
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	46bd      	mov	sp, r7
 8002bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bba:	4770      	bx	lr
 8002bbc:	e000ed00 	.word	0xe000ed00

08002bc0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b083      	sub	sp, #12
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	4603      	mov	r3, r0
 8002bc8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bce:	2b00      	cmp	r3, #0
 8002bd0:	db0b      	blt.n	8002bea <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002bd2:	79fb      	ldrb	r3, [r7, #7]
 8002bd4:	f003 021f 	and.w	r2, r3, #31
 8002bd8:	4907      	ldr	r1, [pc, #28]	; (8002bf8 <__NVIC_EnableIRQ+0x38>)
 8002bda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bde:	095b      	lsrs	r3, r3, #5
 8002be0:	2001      	movs	r0, #1
 8002be2:	fa00 f202 	lsl.w	r2, r0, r2
 8002be6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002bea:	bf00      	nop
 8002bec:	370c      	adds	r7, #12
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf4:	4770      	bx	lr
 8002bf6:	bf00      	nop
 8002bf8:	e000e100 	.word	0xe000e100

08002bfc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	b083      	sub	sp, #12
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	4603      	mov	r3, r0
 8002c04:	6039      	str	r1, [r7, #0]
 8002c06:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002c08:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	db0a      	blt.n	8002c26 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	b2da      	uxtb	r2, r3
 8002c14:	490c      	ldr	r1, [pc, #48]	; (8002c48 <__NVIC_SetPriority+0x4c>)
 8002c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c1a:	0112      	lsls	r2, r2, #4
 8002c1c:	b2d2      	uxtb	r2, r2
 8002c1e:	440b      	add	r3, r1
 8002c20:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002c24:	e00a      	b.n	8002c3c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	b2da      	uxtb	r2, r3
 8002c2a:	4908      	ldr	r1, [pc, #32]	; (8002c4c <__NVIC_SetPriority+0x50>)
 8002c2c:	79fb      	ldrb	r3, [r7, #7]
 8002c2e:	f003 030f 	and.w	r3, r3, #15
 8002c32:	3b04      	subs	r3, #4
 8002c34:	0112      	lsls	r2, r2, #4
 8002c36:	b2d2      	uxtb	r2, r2
 8002c38:	440b      	add	r3, r1
 8002c3a:	761a      	strb	r2, [r3, #24]
}
 8002c3c:	bf00      	nop
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c46:	4770      	bx	lr
 8002c48:	e000e100 	.word	0xe000e100
 8002c4c:	e000ed00 	.word	0xe000ed00

08002c50 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002c50:	b480      	push	{r7}
 8002c52:	b089      	sub	sp, #36	; 0x24
 8002c54:	af00      	add	r7, sp, #0
 8002c56:	60f8      	str	r0, [r7, #12]
 8002c58:	60b9      	str	r1, [r7, #8]
 8002c5a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	f003 0307 	and.w	r3, r3, #7
 8002c62:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c64:	69fb      	ldr	r3, [r7, #28]
 8002c66:	f1c3 0307 	rsb	r3, r3, #7
 8002c6a:	2b04      	cmp	r3, #4
 8002c6c:	bf28      	it	cs
 8002c6e:	2304      	movcs	r3, #4
 8002c70:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c72:	69fb      	ldr	r3, [r7, #28]
 8002c74:	3304      	adds	r3, #4
 8002c76:	2b06      	cmp	r3, #6
 8002c78:	d902      	bls.n	8002c80 <NVIC_EncodePriority+0x30>
 8002c7a:	69fb      	ldr	r3, [r7, #28]
 8002c7c:	3b03      	subs	r3, #3
 8002c7e:	e000      	b.n	8002c82 <NVIC_EncodePriority+0x32>
 8002c80:	2300      	movs	r3, #0
 8002c82:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c84:	f04f 32ff 	mov.w	r2, #4294967295
 8002c88:	69bb      	ldr	r3, [r7, #24]
 8002c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8e:	43da      	mvns	r2, r3
 8002c90:	68bb      	ldr	r3, [r7, #8]
 8002c92:	401a      	ands	r2, r3
 8002c94:	697b      	ldr	r3, [r7, #20]
 8002c96:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c98:	f04f 31ff 	mov.w	r1, #4294967295
 8002c9c:	697b      	ldr	r3, [r7, #20]
 8002c9e:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca2:	43d9      	mvns	r1, r3
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ca8:	4313      	orrs	r3, r2
         );
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	3724      	adds	r7, #36	; 0x24
 8002cae:	46bd      	mov	sp, r7
 8002cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cb4:	4770      	bx	lr

08002cb6 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cbe:	6878      	ldr	r0, [r7, #4]
 8002cc0:	f7ff ff4c 	bl	8002b5c <__NVIC_SetPriorityGrouping>
}
 8002cc4:	bf00      	nop
 8002cc6:	3708      	adds	r7, #8
 8002cc8:	46bd      	mov	sp, r7
 8002cca:	bd80      	pop	{r7, pc}

08002ccc <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b086      	sub	sp, #24
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	4603      	mov	r3, r0
 8002cd4:	60b9      	str	r1, [r7, #8]
 8002cd6:	607a      	str	r2, [r7, #4]
 8002cd8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cda:	f7ff ff63 	bl	8002ba4 <__NVIC_GetPriorityGrouping>
 8002cde:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ce0:	687a      	ldr	r2, [r7, #4]
 8002ce2:	68b9      	ldr	r1, [r7, #8]
 8002ce4:	6978      	ldr	r0, [r7, #20]
 8002ce6:	f7ff ffb3 	bl	8002c50 <NVIC_EncodePriority>
 8002cea:	4602      	mov	r2, r0
 8002cec:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cf0:	4611      	mov	r1, r2
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	f7ff ff82 	bl	8002bfc <__NVIC_SetPriority>
}
 8002cf8:	bf00      	nop
 8002cfa:	3718      	adds	r7, #24
 8002cfc:	46bd      	mov	sp, r7
 8002cfe:	bd80      	pop	{r7, pc}

08002d00 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d00:	b580      	push	{r7, lr}
 8002d02:	b082      	sub	sp, #8
 8002d04:	af00      	add	r7, sp, #0
 8002d06:	4603      	mov	r3, r0
 8002d08:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002d0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7ff ff56 	bl	8002bc0 <__NVIC_EnableIRQ>
}
 8002d14:	bf00      	nop
 8002d16:	3708      	adds	r7, #8
 8002d18:	46bd      	mov	sp, r7
 8002d1a:	bd80      	pop	{r7, pc}

08002d1c <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002d1c:	b480      	push	{r7}
 8002d1e:	b085      	sub	sp, #20
 8002d20:	af00      	add	r7, sp, #0
 8002d22:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002d24:	2300      	movs	r3, #0
 8002d26:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b02      	cmp	r3, #2
 8002d32:	d005      	beq.n	8002d40 <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2204      	movs	r2, #4
 8002d38:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	73fb      	strb	r3, [r7, #15]
 8002d3e:	e037      	b.n	8002db0 <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 020e 	bic.w	r2, r2, #14
 8002d4e:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002d5a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002d5e:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	687b      	ldr	r3, [r7, #4]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f022 0201 	bic.w	r2, r2, #1
 8002d6e:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d74:	f003 021f 	and.w	r2, r3, #31
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d7c:	2101      	movs	r1, #1
 8002d7e:	fa01 f202 	lsl.w	r2, r1, r2
 8002d82:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002d88:	687a      	ldr	r2, [r7, #4]
 8002d8a:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002d8c:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8002d8e:	687b      	ldr	r3, [r7, #4]
 8002d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d00c      	beq.n	8002db0 <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002d9a:	681a      	ldr	r2, [r3, #0]
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002da0:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002da4:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002daa:	687a      	ldr	r2, [r7, #4]
 8002dac:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002dae:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002db0:	687b      	ldr	r3, [r7, #4]
 8002db2:	2201      	movs	r2, #1
 8002db4:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	2200      	movs	r2, #0
 8002dbc:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 8002dc0:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dc2:	4618      	mov	r0, r3
 8002dc4:	3714      	adds	r7, #20
 8002dc6:	46bd      	mov	sp, r7
 8002dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dcc:	4770      	bx	lr

08002dce <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002dce:	b580      	push	{r7, lr}
 8002dd0:	b084      	sub	sp, #16
 8002dd2:	af00      	add	r7, sp, #0
 8002dd4:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8002de0:	b2db      	uxtb	r3, r3
 8002de2:	2b02      	cmp	r3, #2
 8002de4:	d00d      	beq.n	8002e02 <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002de6:	687b      	ldr	r3, [r7, #4]
 8002de8:	2204      	movs	r2, #4
 8002dea:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	2201      	movs	r2, #1
 8002df0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	2200      	movs	r2, #0
 8002df8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 8002dfc:	2301      	movs	r3, #1
 8002dfe:	73fb      	strb	r3, [r7, #15]
 8002e00:	e047      	b.n	8002e92 <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	681a      	ldr	r2, [r3, #0]
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f022 020e 	bic.w	r2, r2, #14
 8002e10:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	681a      	ldr	r2, [r3, #0]
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	f022 0201 	bic.w	r2, r2, #1
 8002e20:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002e2c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e30:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e36:	f003 021f 	and.w	r2, r3, #31
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e3e:	2101      	movs	r1, #1
 8002e40:	fa01 f202 	lsl.w	r2, r1, r2
 8002e44:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e4a:	687a      	ldr	r2, [r7, #4]
 8002e4c:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002e4e:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	d00c      	beq.n	8002e72 <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5c:	681a      	ldr	r2, [r3, #0]
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e62:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e66:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8002e70:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	2201      	movs	r2, #1
 8002e76:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2200      	movs	r2, #0
 8002e7e:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d003      	beq.n	8002e92 <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002e8e:	6878      	ldr	r0, [r7, #4]
 8002e90:	4798      	blx	r3
    }
  }
  return status;
 8002e92:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e94:	4618      	mov	r0, r3
 8002e96:	3710      	adds	r7, #16
 8002e98:	46bd      	mov	sp, r7
 8002e9a:	bd80      	pop	{r7, pc}

08002e9c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b087      	sub	sp, #28
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	6078      	str	r0, [r7, #4]
 8002ea4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002ea6:	2300      	movs	r3, #0
 8002ea8:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 8002eaa:	e15a      	b.n	8003162 <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002eac:	683b      	ldr	r3, [r7, #0]
 8002eae:	681a      	ldr	r2, [r3, #0]
 8002eb0:	2101      	movs	r1, #1
 8002eb2:	697b      	ldr	r3, [r7, #20]
 8002eb4:	fa01 f303 	lsl.w	r3, r1, r3
 8002eb8:	4013      	ands	r3, r2
 8002eba:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 814c 	beq.w	800315c <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 0303 	and.w	r3, r3, #3
 8002ecc:	2b01      	cmp	r3, #1
 8002ece:	d005      	beq.n	8002edc <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002ed0:	683b      	ldr	r3, [r7, #0]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8002ed8:	2b02      	cmp	r3, #2
 8002eda:	d130      	bne.n	8002f3e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	689b      	ldr	r3, [r3, #8]
 8002ee0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002ee2:	697b      	ldr	r3, [r7, #20]
 8002ee4:	005b      	lsls	r3, r3, #1
 8002ee6:	2203      	movs	r2, #3
 8002ee8:	fa02 f303 	lsl.w	r3, r2, r3
 8002eec:	43db      	mvns	r3, r3
 8002eee:	693a      	ldr	r2, [r7, #16]
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	68da      	ldr	r2, [r3, #12]
 8002ef8:	697b      	ldr	r3, [r7, #20]
 8002efa:	005b      	lsls	r3, r3, #1
 8002efc:	fa02 f303 	lsl.w	r3, r2, r3
 8002f00:	693a      	ldr	r2, [r7, #16]
 8002f02:	4313      	orrs	r3, r2
 8002f04:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	693a      	ldr	r2, [r7, #16]
 8002f0a:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002f12:	2201      	movs	r2, #1
 8002f14:	697b      	ldr	r3, [r7, #20]
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	693a      	ldr	r2, [r7, #16]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002f22:	683b      	ldr	r3, [r7, #0]
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	091b      	lsrs	r3, r3, #4
 8002f28:	f003 0201 	and.w	r2, r3, #1
 8002f2c:	697b      	ldr	r3, [r7, #20]
 8002f2e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f32:	693a      	ldr	r2, [r7, #16]
 8002f34:	4313      	orrs	r3, r2
 8002f36:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	693a      	ldr	r2, [r7, #16]
 8002f3c:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f003 0303 	and.w	r3, r3, #3
 8002f46:	2b03      	cmp	r3, #3
 8002f48:	d017      	beq.n	8002f7a <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	68db      	ldr	r3, [r3, #12]
 8002f4e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	005b      	lsls	r3, r3, #1
 8002f54:	2203      	movs	r2, #3
 8002f56:	fa02 f303 	lsl.w	r3, r2, r3
 8002f5a:	43db      	mvns	r3, r3
 8002f5c:	693a      	ldr	r2, [r7, #16]
 8002f5e:	4013      	ands	r3, r2
 8002f60:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	689a      	ldr	r2, [r3, #8]
 8002f66:	697b      	ldr	r3, [r7, #20]
 8002f68:	005b      	lsls	r3, r3, #1
 8002f6a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f6e:	693a      	ldr	r2, [r7, #16]
 8002f70:	4313      	orrs	r3, r2
 8002f72:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	693a      	ldr	r2, [r7, #16]
 8002f78:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	f003 0303 	and.w	r3, r3, #3
 8002f82:	2b02      	cmp	r3, #2
 8002f84:	d123      	bne.n	8002fce <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	08da      	lsrs	r2, r3, #3
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	3208      	adds	r2, #8
 8002f8e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002f92:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002f94:	697b      	ldr	r3, [r7, #20]
 8002f96:	f003 0307 	and.w	r3, r3, #7
 8002f9a:	009b      	lsls	r3, r3, #2
 8002f9c:	220f      	movs	r2, #15
 8002f9e:	fa02 f303 	lsl.w	r3, r2, r3
 8002fa2:	43db      	mvns	r3, r3
 8002fa4:	693a      	ldr	r2, [r7, #16]
 8002fa6:	4013      	ands	r3, r2
 8002fa8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002faa:	683b      	ldr	r3, [r7, #0]
 8002fac:	691a      	ldr	r2, [r3, #16]
 8002fae:	697b      	ldr	r3, [r7, #20]
 8002fb0:	f003 0307 	and.w	r3, r3, #7
 8002fb4:	009b      	lsls	r3, r3, #2
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	693a      	ldr	r2, [r7, #16]
 8002fbc:	4313      	orrs	r3, r2
 8002fbe:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	08da      	lsrs	r2, r3, #3
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3208      	adds	r2, #8
 8002fc8:	6939      	ldr	r1, [r7, #16]
 8002fca:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002fd4:	697b      	ldr	r3, [r7, #20]
 8002fd6:	005b      	lsls	r3, r3, #1
 8002fd8:	2203      	movs	r2, #3
 8002fda:	fa02 f303 	lsl.w	r3, r2, r3
 8002fde:	43db      	mvns	r3, r3
 8002fe0:	693a      	ldr	r2, [r7, #16]
 8002fe2:	4013      	ands	r3, r2
 8002fe4:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	685b      	ldr	r3, [r3, #4]
 8002fea:	f003 0203 	and.w	r2, r3, #3
 8002fee:	697b      	ldr	r3, [r7, #20]
 8002ff0:	005b      	lsls	r3, r3, #1
 8002ff2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ff6:	693a      	ldr	r2, [r7, #16]
 8002ff8:	4313      	orrs	r3, r2
 8002ffa:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	693a      	ldr	r2, [r7, #16]
 8003000:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8003002:	683b      	ldr	r3, [r7, #0]
 8003004:	685b      	ldr	r3, [r3, #4]
 8003006:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800300a:	2b00      	cmp	r3, #0
 800300c:	f000 80a6 	beq.w	800315c <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003010:	4b5b      	ldr	r3, [pc, #364]	; (8003180 <HAL_GPIO_Init+0x2e4>)
 8003012:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003014:	4a5a      	ldr	r2, [pc, #360]	; (8003180 <HAL_GPIO_Init+0x2e4>)
 8003016:	f043 0301 	orr.w	r3, r3, #1
 800301a:	6613      	str	r3, [r2, #96]	; 0x60
 800301c:	4b58      	ldr	r3, [pc, #352]	; (8003180 <HAL_GPIO_Init+0x2e4>)
 800301e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003020:	f003 0301 	and.w	r3, r3, #1
 8003024:	60bb      	str	r3, [r7, #8]
 8003026:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003028:	4a56      	ldr	r2, [pc, #344]	; (8003184 <HAL_GPIO_Init+0x2e8>)
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	089b      	lsrs	r3, r3, #2
 800302e:	3302      	adds	r3, #2
 8003030:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003034:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8003036:	697b      	ldr	r3, [r7, #20]
 8003038:	f003 0303 	and.w	r3, r3, #3
 800303c:	009b      	lsls	r3, r3, #2
 800303e:	220f      	movs	r2, #15
 8003040:	fa02 f303 	lsl.w	r3, r2, r3
 8003044:	43db      	mvns	r3, r3
 8003046:	693a      	ldr	r2, [r7, #16]
 8003048:	4013      	ands	r3, r2
 800304a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8003052:	d01f      	beq.n	8003094 <HAL_GPIO_Init+0x1f8>
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	4a4c      	ldr	r2, [pc, #304]	; (8003188 <HAL_GPIO_Init+0x2ec>)
 8003058:	4293      	cmp	r3, r2
 800305a:	d019      	beq.n	8003090 <HAL_GPIO_Init+0x1f4>
 800305c:	687b      	ldr	r3, [r7, #4]
 800305e:	4a4b      	ldr	r2, [pc, #300]	; (800318c <HAL_GPIO_Init+0x2f0>)
 8003060:	4293      	cmp	r3, r2
 8003062:	d013      	beq.n	800308c <HAL_GPIO_Init+0x1f0>
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	4a4a      	ldr	r2, [pc, #296]	; (8003190 <HAL_GPIO_Init+0x2f4>)
 8003068:	4293      	cmp	r3, r2
 800306a:	d00d      	beq.n	8003088 <HAL_GPIO_Init+0x1ec>
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	4a49      	ldr	r2, [pc, #292]	; (8003194 <HAL_GPIO_Init+0x2f8>)
 8003070:	4293      	cmp	r3, r2
 8003072:	d007      	beq.n	8003084 <HAL_GPIO_Init+0x1e8>
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	4a48      	ldr	r2, [pc, #288]	; (8003198 <HAL_GPIO_Init+0x2fc>)
 8003078:	4293      	cmp	r3, r2
 800307a:	d101      	bne.n	8003080 <HAL_GPIO_Init+0x1e4>
 800307c:	2305      	movs	r3, #5
 800307e:	e00a      	b.n	8003096 <HAL_GPIO_Init+0x1fa>
 8003080:	2306      	movs	r3, #6
 8003082:	e008      	b.n	8003096 <HAL_GPIO_Init+0x1fa>
 8003084:	2304      	movs	r3, #4
 8003086:	e006      	b.n	8003096 <HAL_GPIO_Init+0x1fa>
 8003088:	2303      	movs	r3, #3
 800308a:	e004      	b.n	8003096 <HAL_GPIO_Init+0x1fa>
 800308c:	2302      	movs	r3, #2
 800308e:	e002      	b.n	8003096 <HAL_GPIO_Init+0x1fa>
 8003090:	2301      	movs	r3, #1
 8003092:	e000      	b.n	8003096 <HAL_GPIO_Init+0x1fa>
 8003094:	2300      	movs	r3, #0
 8003096:	697a      	ldr	r2, [r7, #20]
 8003098:	f002 0203 	and.w	r2, r2, #3
 800309c:	0092      	lsls	r2, r2, #2
 800309e:	4093      	lsls	r3, r2
 80030a0:	693a      	ldr	r2, [r7, #16]
 80030a2:	4313      	orrs	r3, r2
 80030a4:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80030a6:	4937      	ldr	r1, [pc, #220]	; (8003184 <HAL_GPIO_Init+0x2e8>)
 80030a8:	697b      	ldr	r3, [r7, #20]
 80030aa:	089b      	lsrs	r3, r3, #2
 80030ac:	3302      	adds	r3, #2
 80030ae:	693a      	ldr	r2, [r7, #16]
 80030b0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80030b4:	4b39      	ldr	r3, [pc, #228]	; (800319c <HAL_GPIO_Init+0x300>)
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	43db      	mvns	r3, r3
 80030be:	693a      	ldr	r2, [r7, #16]
 80030c0:	4013      	ands	r3, r2
 80030c2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d003      	beq.n	80030d8 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 80030d0:	693a      	ldr	r2, [r7, #16]
 80030d2:	68fb      	ldr	r3, [r7, #12]
 80030d4:	4313      	orrs	r3, r2
 80030d6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 80030d8:	4a30      	ldr	r2, [pc, #192]	; (800319c <HAL_GPIO_Init+0x300>)
 80030da:	693b      	ldr	r3, [r7, #16]
 80030dc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 80030de:	4b2f      	ldr	r3, [pc, #188]	; (800319c <HAL_GPIO_Init+0x300>)
 80030e0:	68db      	ldr	r3, [r3, #12]
 80030e2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	43db      	mvns	r3, r3
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	4013      	ands	r3, r2
 80030ec:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d003      	beq.n	8003102 <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 80030fa:	693a      	ldr	r2, [r7, #16]
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	4313      	orrs	r3, r2
 8003100:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8003102:	4a26      	ldr	r2, [pc, #152]	; (800319c <HAL_GPIO_Init+0x300>)
 8003104:	693b      	ldr	r3, [r7, #16]
 8003106:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8003108:	4b24      	ldr	r3, [pc, #144]	; (800319c <HAL_GPIO_Init+0x300>)
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 800310e:	68fb      	ldr	r3, [r7, #12]
 8003110:	43db      	mvns	r3, r3
 8003112:	693a      	ldr	r2, [r7, #16]
 8003114:	4013      	ands	r3, r2
 8003116:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003118:	683b      	ldr	r3, [r7, #0]
 800311a:	685b      	ldr	r3, [r3, #4]
 800311c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d003      	beq.n	800312c <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8003124:	693a      	ldr	r2, [r7, #16]
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	4313      	orrs	r3, r2
 800312a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 800312c:	4a1b      	ldr	r2, [pc, #108]	; (800319c <HAL_GPIO_Init+0x300>)
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8003132:	4b1a      	ldr	r3, [pc, #104]	; (800319c <HAL_GPIO_Init+0x300>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8003138:	68fb      	ldr	r3, [r7, #12]
 800313a:	43db      	mvns	r3, r3
 800313c:	693a      	ldr	r2, [r7, #16]
 800313e:	4013      	ands	r3, r2
 8003140:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003142:	683b      	ldr	r3, [r7, #0]
 8003144:	685b      	ldr	r3, [r3, #4]
 8003146:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800314a:	2b00      	cmp	r3, #0
 800314c:	d003      	beq.n	8003156 <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 800314e:	693a      	ldr	r2, [r7, #16]
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	4313      	orrs	r3, r2
 8003154:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8003156:	4a11      	ldr	r2, [pc, #68]	; (800319c <HAL_GPIO_Init+0x300>)
 8003158:	693b      	ldr	r3, [r7, #16]
 800315a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 800315c:	697b      	ldr	r3, [r7, #20]
 800315e:	3301      	adds	r3, #1
 8003160:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681a      	ldr	r2, [r3, #0]
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	fa22 f303 	lsr.w	r3, r2, r3
 800316c:	2b00      	cmp	r3, #0
 800316e:	f47f ae9d 	bne.w	8002eac <HAL_GPIO_Init+0x10>
  }
}
 8003172:	bf00      	nop
 8003174:	bf00      	nop
 8003176:	371c      	adds	r7, #28
 8003178:	46bd      	mov	sp, r7
 800317a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800317e:	4770      	bx	lr
 8003180:	40021000 	.word	0x40021000
 8003184:	40010000 	.word	0x40010000
 8003188:	48000400 	.word	0x48000400
 800318c:	48000800 	.word	0x48000800
 8003190:	48000c00 	.word	0x48000c00
 8003194:	48001000 	.word	0x48001000
 8003198:	48001400 	.word	0x48001400
 800319c:	40010400 	.word	0x40010400

080031a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80031a0:	b480      	push	{r7}
 80031a2:	b083      	sub	sp, #12
 80031a4:	af00      	add	r7, sp, #0
 80031a6:	6078      	str	r0, [r7, #4]
 80031a8:	460b      	mov	r3, r1
 80031aa:	807b      	strh	r3, [r7, #2]
 80031ac:	4613      	mov	r3, r2
 80031ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80031b0:	787b      	ldrb	r3, [r7, #1]
 80031b2:	2b00      	cmp	r3, #0
 80031b4:	d003      	beq.n	80031be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 80031b6:	887a      	ldrh	r2, [r7, #2]
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 80031bc:	e002      	b.n	80031c4 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 80031be:	887a      	ldrh	r2, [r7, #2]
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	629a      	str	r2, [r3, #40]	; 0x28
}
 80031c4:	bf00      	nop
 80031c6:	370c      	adds	r7, #12
 80031c8:	46bd      	mov	sp, r7
 80031ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ce:	4770      	bx	lr

080031d0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80031da:	4b08      	ldr	r3, [pc, #32]	; (80031fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031dc:	695a      	ldr	r2, [r3, #20]
 80031de:	88fb      	ldrh	r3, [r7, #6]
 80031e0:	4013      	ands	r3, r2
 80031e2:	2b00      	cmp	r3, #0
 80031e4:	d006      	beq.n	80031f4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80031e6:	4a05      	ldr	r2, [pc, #20]	; (80031fc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80031e8:	88fb      	ldrh	r3, [r7, #6]
 80031ea:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80031ec:	88fb      	ldrh	r3, [r7, #6]
 80031ee:	4618      	mov	r0, r3
 80031f0:	f000 f806 	bl	8003200 <HAL_GPIO_EXTI_Callback>
  }
}
 80031f4:	bf00      	nop
 80031f6:	3708      	adds	r7, #8
 80031f8:	46bd      	mov	sp, r7
 80031fa:	bd80      	pop	{r7, pc}
 80031fc:	40010400 	.word	0x40010400

08003200 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003200:	b480      	push	{r7}
 8003202:	b083      	sub	sp, #12
 8003204:	af00      	add	r7, sp, #0
 8003206:	4603      	mov	r3, r0
 8003208:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800320a:	bf00      	nop
 800320c:	370c      	adds	r7, #12
 800320e:	46bd      	mov	sp, r7
 8003210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003214:	4770      	bx	lr
	...

08003218 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8003218:	b480      	push	{r7}
 800321a:	b085      	sub	sp, #20
 800321c:	af00      	add	r7, sp, #0
 800321e:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2b00      	cmp	r3, #0
 8003224:	d141      	bne.n	80032aa <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8003226:	4b4b      	ldr	r3, [pc, #300]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800322e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003232:	d131      	bne.n	8003298 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003234:	4b47      	ldr	r3, [pc, #284]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003236:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800323a:	4a46      	ldr	r2, [pc, #280]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800323c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003240:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8003244:	4b43      	ldr	r3, [pc, #268]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800324c:	4a41      	ldr	r2, [pc, #260]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800324e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003252:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8003254:	4b40      	ldr	r3, [pc, #256]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	2232      	movs	r2, #50	; 0x32
 800325a:	fb02 f303 	mul.w	r3, r2, r3
 800325e:	4a3f      	ldr	r2, [pc, #252]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x144>)
 8003260:	fba2 2303 	umull	r2, r3, r2, r3
 8003264:	0c9b      	lsrs	r3, r3, #18
 8003266:	3301      	adds	r3, #1
 8003268:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 800326a:	e002      	b.n	8003272 <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	3b01      	subs	r3, #1
 8003270:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8003272:	4b38      	ldr	r3, [pc, #224]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003274:	695b      	ldr	r3, [r3, #20]
 8003276:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800327a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800327e:	d102      	bne.n	8003286 <HAL_PWREx_ControlVoltageScaling+0x6e>
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	2b00      	cmp	r3, #0
 8003284:	d1f2      	bne.n	800326c <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003286:	4b33      	ldr	r3, [pc, #204]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003288:	695b      	ldr	r3, [r3, #20]
 800328a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800328e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003292:	d158      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e057      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003298:	4b2e      	ldr	r3, [pc, #184]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800329a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800329e:	4a2d      	ldr	r2, [pc, #180]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032a0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80032a4:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 80032a8:	e04d      	b.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80032b0:	d141      	bne.n	8003336 <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 80032b2:	4b28      	ldr	r3, [pc, #160]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80032ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80032be:	d131      	bne.n	8003324 <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 80032c0:	4b24      	ldr	r3, [pc, #144]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80032c6:	4a23      	ldr	r2, [pc, #140]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032c8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032cc:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 80032d0:	4b20      	ldr	r3, [pc, #128]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80032d8:	4a1e      	ldr	r2, [pc, #120]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 80032da:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80032de:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 80032e0:	4b1d      	ldr	r3, [pc, #116]	; (8003358 <HAL_PWREx_ControlVoltageScaling+0x140>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	2232      	movs	r2, #50	; 0x32
 80032e6:	fb02 f303 	mul.w	r3, r2, r3
 80032ea:	4a1c      	ldr	r2, [pc, #112]	; (800335c <HAL_PWREx_ControlVoltageScaling+0x144>)
 80032ec:	fba2 2303 	umull	r2, r3, r2, r3
 80032f0:	0c9b      	lsrs	r3, r3, #18
 80032f2:	3301      	adds	r3, #1
 80032f4:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032f6:	e002      	b.n	80032fe <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	3b01      	subs	r3, #1
 80032fc:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80032fe:	4b15      	ldr	r3, [pc, #84]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003300:	695b      	ldr	r3, [r3, #20]
 8003302:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003306:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800330a:	d102      	bne.n	8003312 <HAL_PWREx_ControlVoltageScaling+0xfa>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	2b00      	cmp	r3, #0
 8003310:	d1f2      	bne.n	80032f8 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8003312:	4b10      	ldr	r3, [pc, #64]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003314:	695b      	ldr	r3, [r3, #20]
 8003316:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800331a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800331e:	d112      	bne.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8003320:	2303      	movs	r3, #3
 8003322:	e011      	b.n	8003348 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8003324:	4b0b      	ldr	r3, [pc, #44]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003326:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800332a:	4a0a      	ldr	r2, [pc, #40]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 800332c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003330:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8003334:	e007      	b.n	8003346 <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8003336:	4b07      	ldr	r3, [pc, #28]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 800333e:	4a05      	ldr	r2, [pc, #20]	; (8003354 <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8003340:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003344:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8003346:	2300      	movs	r3, #0
}
 8003348:	4618      	mov	r0, r3
 800334a:	3714      	adds	r7, #20
 800334c:	46bd      	mov	sp, r7
 800334e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003352:	4770      	bx	lr
 8003354:	40007000 	.word	0x40007000
 8003358:	20000000 	.word	0x20000000
 800335c:	431bde83 	.word	0x431bde83

08003360 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8003360:	b480      	push	{r7}
 8003362:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8003364:	4b05      	ldr	r3, [pc, #20]	; (800337c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a04      	ldr	r2, [pc, #16]	; (800337c <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 800336a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800336e:	6093      	str	r3, [r2, #8]
}
 8003370:	bf00      	nop
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
 800337a:	bf00      	nop
 800337c:	40007000 	.word	0x40007000

08003380 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003380:	b580      	push	{r7, lr}
 8003382:	b088      	sub	sp, #32
 8003384:	af00      	add	r7, sp, #0
 8003386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2b00      	cmp	r3, #0
 800338c:	d101      	bne.n	8003392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800338e:	2301      	movs	r3, #1
 8003390:	e306      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0301 	and.w	r3, r3, #1
 800339a:	2b00      	cmp	r3, #0
 800339c:	d075      	beq.n	800348a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 800339e:	4b97      	ldr	r3, [pc, #604]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033a0:	689b      	ldr	r3, [r3, #8]
 80033a2:	f003 030c 	and.w	r3, r3, #12
 80033a6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80033a8:	4b94      	ldr	r3, [pc, #592]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033aa:	68db      	ldr	r3, [r3, #12]
 80033ac:	f003 0303 	and.w	r3, r3, #3
 80033b0:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 80033b2:	69bb      	ldr	r3, [r7, #24]
 80033b4:	2b0c      	cmp	r3, #12
 80033b6:	d102      	bne.n	80033be <HAL_RCC_OscConfig+0x3e>
 80033b8:	697b      	ldr	r3, [r7, #20]
 80033ba:	2b03      	cmp	r3, #3
 80033bc:	d002      	beq.n	80033c4 <HAL_RCC_OscConfig+0x44>
 80033be:	69bb      	ldr	r3, [r7, #24]
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	d10b      	bne.n	80033dc <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033c4:	4b8d      	ldr	r3, [pc, #564]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d05b      	beq.n	8003488 <HAL_RCC_OscConfig+0x108>
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	685b      	ldr	r3, [r3, #4]
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d157      	bne.n	8003488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e2e1      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80033e4:	d106      	bne.n	80033f4 <HAL_RCC_OscConfig+0x74>
 80033e6:	4b85      	ldr	r3, [pc, #532]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a84      	ldr	r2, [pc, #528]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80033ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80033f0:	6013      	str	r3, [r2, #0]
 80033f2:	e01d      	b.n	8003430 <HAL_RCC_OscConfig+0xb0>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80033fc:	d10c      	bne.n	8003418 <HAL_RCC_OscConfig+0x98>
 80033fe:	4b7f      	ldr	r3, [pc, #508]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	4a7e      	ldr	r2, [pc, #504]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003408:	6013      	str	r3, [r2, #0]
 800340a:	4b7c      	ldr	r3, [pc, #496]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	4a7b      	ldr	r2, [pc, #492]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003414:	6013      	str	r3, [r2, #0]
 8003416:	e00b      	b.n	8003430 <HAL_RCC_OscConfig+0xb0>
 8003418:	4b78      	ldr	r3, [pc, #480]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	4a77      	ldr	r2, [pc, #476]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800341e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003422:	6013      	str	r3, [r2, #0]
 8003424:	4b75      	ldr	r3, [pc, #468]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a74      	ldr	r2, [pc, #464]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800342a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800342e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	2b00      	cmp	r3, #0
 8003436:	d013      	beq.n	8003460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003438:	f7fe fa7a 	bl	8001930 <HAL_GetTick>
 800343c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 800343e:	e008      	b.n	8003452 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003440:	f7fe fa76 	bl	8001930 <HAL_GetTick>
 8003444:	4602      	mov	r2, r0
 8003446:	693b      	ldr	r3, [r7, #16]
 8003448:	1ad3      	subs	r3, r2, r3
 800344a:	2b64      	cmp	r3, #100	; 0x64
 800344c:	d901      	bls.n	8003452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800344e:	2303      	movs	r3, #3
 8003450:	e2a6      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003452:	4b6a      	ldr	r3, [pc, #424]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800345a:	2b00      	cmp	r3, #0
 800345c:	d0f0      	beq.n	8003440 <HAL_RCC_OscConfig+0xc0>
 800345e:	e014      	b.n	800348a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003460:	f7fe fa66 	bl	8001930 <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003466:	e008      	b.n	800347a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003468:	f7fe fa62 	bl	8001930 <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b64      	cmp	r3, #100	; 0x64
 8003474:	d901      	bls.n	800347a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e292      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 800347a:	4b60      	ldr	r3, [pc, #384]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003482:	2b00      	cmp	r3, #0
 8003484:	d1f0      	bne.n	8003468 <HAL_RCC_OscConfig+0xe8>
 8003486:	e000      	b.n	800348a <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f003 0302 	and.w	r3, r3, #2
 8003492:	2b00      	cmp	r3, #0
 8003494:	d075      	beq.n	8003582 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003496:	4b59      	ldr	r3, [pc, #356]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003498:	689b      	ldr	r3, [r3, #8]
 800349a:	f003 030c 	and.w	r3, r3, #12
 800349e:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 80034a0:	4b56      	ldr	r3, [pc, #344]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0303 	and.w	r3, r3, #3
 80034a8:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 80034aa:	69bb      	ldr	r3, [r7, #24]
 80034ac:	2b0c      	cmp	r3, #12
 80034ae:	d102      	bne.n	80034b6 <HAL_RCC_OscConfig+0x136>
 80034b0:	697b      	ldr	r3, [r7, #20]
 80034b2:	2b02      	cmp	r3, #2
 80034b4:	d002      	beq.n	80034bc <HAL_RCC_OscConfig+0x13c>
 80034b6:	69bb      	ldr	r3, [r7, #24]
 80034b8:	2b04      	cmp	r3, #4
 80034ba:	d11f      	bne.n	80034fc <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80034bc:	4b4f      	ldr	r3, [pc, #316]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80034c4:	2b00      	cmp	r3, #0
 80034c6:	d005      	beq.n	80034d4 <HAL_RCC_OscConfig+0x154>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	68db      	ldr	r3, [r3, #12]
 80034cc:	2b00      	cmp	r3, #0
 80034ce:	d101      	bne.n	80034d4 <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 80034d0:	2301      	movs	r3, #1
 80034d2:	e265      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d4:	4b49      	ldr	r3, [pc, #292]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034d6:	685b      	ldr	r3, [r3, #4]
 80034d8:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	691b      	ldr	r3, [r3, #16]
 80034e0:	061b      	lsls	r3, r3, #24
 80034e2:	4946      	ldr	r1, [pc, #280]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80034e4:	4313      	orrs	r3, r2
 80034e6:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 80034e8:	4b45      	ldr	r3, [pc, #276]	; (8003600 <HAL_RCC_OscConfig+0x280>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd fbcb 	bl	8000c88 <HAL_InitTick>
 80034f2:	4603      	mov	r3, r0
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	d043      	beq.n	8003580 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 80034f8:	2301      	movs	r3, #1
 80034fa:	e251      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	68db      	ldr	r3, [r3, #12]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d023      	beq.n	800354c <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003504:	4b3d      	ldr	r3, [pc, #244]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	4a3c      	ldr	r2, [pc, #240]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800350a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800350e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003510:	f7fe fa0e 	bl	8001930 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003518:	f7fe fa0a 	bl	8001930 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b02      	cmp	r3, #2
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e23a      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800352a:	4b34      	ldr	r3, [pc, #208]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003532:	2b00      	cmp	r3, #0
 8003534:	d0f0      	beq.n	8003518 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003536:	4b31      	ldr	r3, [pc, #196]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003538:	685b      	ldr	r3, [r3, #4]
 800353a:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	691b      	ldr	r3, [r3, #16]
 8003542:	061b      	lsls	r3, r3, #24
 8003544:	492d      	ldr	r1, [pc, #180]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003546:	4313      	orrs	r3, r2
 8003548:	604b      	str	r3, [r1, #4]
 800354a:	e01a      	b.n	8003582 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800354c:	4b2b      	ldr	r3, [pc, #172]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	4a2a      	ldr	r2, [pc, #168]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003552:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003556:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003558:	f7fe f9ea 	bl	8001930 <HAL_GetTick>
 800355c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 800355e:	e008      	b.n	8003572 <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003560:	f7fe f9e6 	bl	8001930 <HAL_GetTick>
 8003564:	4602      	mov	r2, r0
 8003566:	693b      	ldr	r3, [r7, #16]
 8003568:	1ad3      	subs	r3, r2, r3
 800356a:	2b02      	cmp	r3, #2
 800356c:	d901      	bls.n	8003572 <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 800356e:	2303      	movs	r3, #3
 8003570:	e216      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003572:	4b22      	ldr	r3, [pc, #136]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003574:	681b      	ldr	r3, [r3, #0]
 8003576:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800357a:	2b00      	cmp	r3, #0
 800357c:	d1f0      	bne.n	8003560 <HAL_RCC_OscConfig+0x1e0>
 800357e:	e000      	b.n	8003582 <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003580:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f003 0308 	and.w	r3, r3, #8
 800358a:	2b00      	cmp	r3, #0
 800358c:	d041      	beq.n	8003612 <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	695b      	ldr	r3, [r3, #20]
 8003592:	2b00      	cmp	r3, #0
 8003594:	d01c      	beq.n	80035d0 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003596:	4b19      	ldr	r3, [pc, #100]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 8003598:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800359c:	4a17      	ldr	r2, [pc, #92]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 800359e:	f043 0301 	orr.w	r3, r3, #1
 80035a2:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035a6:	f7fe f9c3 	bl	8001930 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035ae:	f7fe f9bf 	bl	8001930 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e1ef      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 80035c0:	4b0e      	ldr	r3, [pc, #56]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80035c2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035c6:	f003 0302 	and.w	r3, r3, #2
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d0ef      	beq.n	80035ae <HAL_RCC_OscConfig+0x22e>
 80035ce:	e020      	b.n	8003612 <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80035d0:	4b0a      	ldr	r3, [pc, #40]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80035d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80035d6:	4a09      	ldr	r2, [pc, #36]	; (80035fc <HAL_RCC_OscConfig+0x27c>)
 80035d8:	f023 0301 	bic.w	r3, r3, #1
 80035dc:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e0:	f7fe f9a6 	bl	8001930 <HAL_GetTick>
 80035e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 80035e6:	e00d      	b.n	8003604 <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035e8:	f7fe f9a2 	bl	8001930 <HAL_GetTick>
 80035ec:	4602      	mov	r2, r0
 80035ee:	693b      	ldr	r3, [r7, #16]
 80035f0:	1ad3      	subs	r3, r2, r3
 80035f2:	2b02      	cmp	r3, #2
 80035f4:	d906      	bls.n	8003604 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80035f6:	2303      	movs	r3, #3
 80035f8:	e1d2      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
 80035fa:	bf00      	nop
 80035fc:	40021000 	.word	0x40021000
 8003600:	200000c0 	.word	0x200000c0
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003604:	4b8c      	ldr	r3, [pc, #560]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003606:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d1ea      	bne.n	80035e8 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 0304 	and.w	r3, r3, #4
 800361a:	2b00      	cmp	r3, #0
 800361c:	f000 80a6 	beq.w	800376c <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003620:	2300      	movs	r3, #0
 8003622:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8003624:	4b84      	ldr	r3, [pc, #528]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003626:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003628:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800362c:	2b00      	cmp	r3, #0
 800362e:	d101      	bne.n	8003634 <HAL_RCC_OscConfig+0x2b4>
 8003630:	2301      	movs	r3, #1
 8003632:	e000      	b.n	8003636 <HAL_RCC_OscConfig+0x2b6>
 8003634:	2300      	movs	r3, #0
 8003636:	2b00      	cmp	r3, #0
 8003638:	d00d      	beq.n	8003656 <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800363a:	4b7f      	ldr	r3, [pc, #508]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 800363c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800363e:	4a7e      	ldr	r2, [pc, #504]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003640:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003644:	6593      	str	r3, [r2, #88]	; 0x58
 8003646:	4b7c      	ldr	r3, [pc, #496]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003648:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800364a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800364e:	60fb      	str	r3, [r7, #12]
 8003650:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8003652:	2301      	movs	r3, #1
 8003654:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003656:	4b79      	ldr	r3, [pc, #484]	; (800383c <HAL_RCC_OscConfig+0x4bc>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800365e:	2b00      	cmp	r3, #0
 8003660:	d118      	bne.n	8003694 <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003662:	4b76      	ldr	r3, [pc, #472]	; (800383c <HAL_RCC_OscConfig+0x4bc>)
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	4a75      	ldr	r2, [pc, #468]	; (800383c <HAL_RCC_OscConfig+0x4bc>)
 8003668:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800366c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800366e:	f7fe f95f 	bl	8001930 <HAL_GetTick>
 8003672:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003674:	e008      	b.n	8003688 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003676:	f7fe f95b 	bl	8001930 <HAL_GetTick>
 800367a:	4602      	mov	r2, r0
 800367c:	693b      	ldr	r3, [r7, #16]
 800367e:	1ad3      	subs	r3, r2, r3
 8003680:	2b02      	cmp	r3, #2
 8003682:	d901      	bls.n	8003688 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8003684:	2303      	movs	r3, #3
 8003686:	e18b      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003688:	4b6c      	ldr	r3, [pc, #432]	; (800383c <HAL_RCC_OscConfig+0x4bc>)
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003690:	2b00      	cmp	r3, #0
 8003692:	d0f0      	beq.n	8003676 <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	689b      	ldr	r3, [r3, #8]
 8003698:	2b01      	cmp	r3, #1
 800369a:	d108      	bne.n	80036ae <HAL_RCC_OscConfig+0x32e>
 800369c:	4b66      	ldr	r3, [pc, #408]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 800369e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036a2:	4a65      	ldr	r2, [pc, #404]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036a4:	f043 0301 	orr.w	r3, r3, #1
 80036a8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036ac:	e024      	b.n	80036f8 <HAL_RCC_OscConfig+0x378>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	689b      	ldr	r3, [r3, #8]
 80036b2:	2b05      	cmp	r3, #5
 80036b4:	d110      	bne.n	80036d8 <HAL_RCC_OscConfig+0x358>
 80036b6:	4b60      	ldr	r3, [pc, #384]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036bc:	4a5e      	ldr	r2, [pc, #376]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036be:	f043 0304 	orr.w	r3, r3, #4
 80036c2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036c6:	4b5c      	ldr	r3, [pc, #368]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036cc:	4a5a      	ldr	r2, [pc, #360]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036ce:	f043 0301 	orr.w	r3, r3, #1
 80036d2:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036d6:	e00f      	b.n	80036f8 <HAL_RCC_OscConfig+0x378>
 80036d8:	4b57      	ldr	r3, [pc, #348]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036da:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036de:	4a56      	ldr	r2, [pc, #344]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036e0:	f023 0301 	bic.w	r3, r3, #1
 80036e4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 80036e8:	4b53      	ldr	r3, [pc, #332]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036ea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80036ee:	4a52      	ldr	r2, [pc, #328]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80036f0:	f023 0304 	bic.w	r3, r3, #4
 80036f4:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	689b      	ldr	r3, [r3, #8]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d016      	beq.n	800372e <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003700:	f7fe f916 	bl	8001930 <HAL_GetTick>
 8003704:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003706:	e00a      	b.n	800371e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003708:	f7fe f912 	bl	8001930 <HAL_GetTick>
 800370c:	4602      	mov	r2, r0
 800370e:	693b      	ldr	r3, [r7, #16]
 8003710:	1ad3      	subs	r3, r2, r3
 8003712:	f241 3288 	movw	r2, #5000	; 0x1388
 8003716:	4293      	cmp	r3, r2
 8003718:	d901      	bls.n	800371e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800371a:	2303      	movs	r3, #3
 800371c:	e140      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800371e:	4b46      	ldr	r3, [pc, #280]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003720:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003724:	f003 0302 	and.w	r3, r3, #2
 8003728:	2b00      	cmp	r3, #0
 800372a:	d0ed      	beq.n	8003708 <HAL_RCC_OscConfig+0x388>
 800372c:	e015      	b.n	800375a <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372e:	f7fe f8ff 	bl	8001930 <HAL_GetTick>
 8003732:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003734:	e00a      	b.n	800374c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003736:	f7fe f8fb 	bl	8001930 <HAL_GetTick>
 800373a:	4602      	mov	r2, r0
 800373c:	693b      	ldr	r3, [r7, #16]
 800373e:	1ad3      	subs	r3, r2, r3
 8003740:	f241 3288 	movw	r2, #5000	; 0x1388
 8003744:	4293      	cmp	r3, r2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e129      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800374c:	4b3a      	ldr	r3, [pc, #232]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 800374e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003752:	f003 0302 	and.w	r3, r3, #2
 8003756:	2b00      	cmp	r3, #0
 8003758:	d1ed      	bne.n	8003736 <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800375a:	7ffb      	ldrb	r3, [r7, #31]
 800375c:	2b01      	cmp	r3, #1
 800375e:	d105      	bne.n	800376c <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003760:	4b35      	ldr	r3, [pc, #212]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003762:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003764:	4a34      	ldr	r2, [pc, #208]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003766:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800376a:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	681b      	ldr	r3, [r3, #0]
 8003770:	f003 0320 	and.w	r3, r3, #32
 8003774:	2b00      	cmp	r3, #0
 8003776:	d03c      	beq.n	80037f2 <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	699b      	ldr	r3, [r3, #24]
 800377c:	2b00      	cmp	r3, #0
 800377e:	d01c      	beq.n	80037ba <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003780:	4b2d      	ldr	r3, [pc, #180]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003782:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8003786:	4a2c      	ldr	r2, [pc, #176]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003788:	f043 0301 	orr.w	r3, r3, #1
 800378c:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003790:	f7fe f8ce 	bl	8001930 <HAL_GetTick>
 8003794:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 8003796:	e008      	b.n	80037aa <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8003798:	f7fe f8ca 	bl	8001930 <HAL_GetTick>
 800379c:	4602      	mov	r2, r0
 800379e:	693b      	ldr	r3, [r7, #16]
 80037a0:	1ad3      	subs	r3, r2, r3
 80037a2:	2b02      	cmp	r3, #2
 80037a4:	d901      	bls.n	80037aa <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80037a6:	2303      	movs	r3, #3
 80037a8:	e0fa      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80037aa:	4b23      	ldr	r3, [pc, #140]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037ac:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0ef      	beq.n	8003798 <HAL_RCC_OscConfig+0x418>
 80037b8:	e01b      	b.n	80037f2 <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 80037ba:	4b1f      	ldr	r3, [pc, #124]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037bc:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037c0:	4a1d      	ldr	r2, [pc, #116]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037c2:	f023 0301 	bic.w	r3, r3, #1
 80037c6:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037ca:	f7fe f8b1 	bl	8001930 <HAL_GetTick>
 80037ce:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037d0:	e008      	b.n	80037e4 <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80037d2:	f7fe f8ad 	bl	8001930 <HAL_GetTick>
 80037d6:	4602      	mov	r2, r0
 80037d8:	693b      	ldr	r3, [r7, #16]
 80037da:	1ad3      	subs	r3, r2, r3
 80037dc:	2b02      	cmp	r3, #2
 80037de:	d901      	bls.n	80037e4 <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 80037e0:	2303      	movs	r3, #3
 80037e2:	e0dd      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 80037e4:	4b14      	ldr	r3, [pc, #80]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037e6:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80037ea:	f003 0302 	and.w	r3, r3, #2
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d1ef      	bne.n	80037d2 <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	69db      	ldr	r3, [r3, #28]
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	f000 80d1 	beq.w	800399e <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037fc:	4b0e      	ldr	r3, [pc, #56]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 80037fe:	689b      	ldr	r3, [r3, #8]
 8003800:	f003 030c 	and.w	r3, r3, #12
 8003804:	2b0c      	cmp	r3, #12
 8003806:	f000 808b 	beq.w	8003920 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	69db      	ldr	r3, [r3, #28]
 800380e:	2b02      	cmp	r3, #2
 8003810:	d15e      	bne.n	80038d0 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003812:	4b09      	ldr	r3, [pc, #36]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4a08      	ldr	r2, [pc, #32]	; (8003838 <HAL_RCC_OscConfig+0x4b8>)
 8003818:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800381c:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800381e:	f7fe f887 	bl	8001930 <HAL_GetTick>
 8003822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003824:	e00c      	b.n	8003840 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003826:	f7fe f883 	bl	8001930 <HAL_GetTick>
 800382a:	4602      	mov	r2, r0
 800382c:	693b      	ldr	r3, [r7, #16]
 800382e:	1ad3      	subs	r3, r2, r3
 8003830:	2b02      	cmp	r3, #2
 8003832:	d905      	bls.n	8003840 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 8003834:	2303      	movs	r3, #3
 8003836:	e0b3      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
 8003838:	40021000 	.word	0x40021000
 800383c:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003840:	4b59      	ldr	r3, [pc, #356]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003848:	2b00      	cmp	r3, #0
 800384a:	d1ec      	bne.n	8003826 <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800384c:	4b56      	ldr	r3, [pc, #344]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 800384e:	68da      	ldr	r2, [r3, #12]
 8003850:	4b56      	ldr	r3, [pc, #344]	; (80039ac <HAL_RCC_OscConfig+0x62c>)
 8003852:	4013      	ands	r3, r2
 8003854:	687a      	ldr	r2, [r7, #4]
 8003856:	6a11      	ldr	r1, [r2, #32]
 8003858:	687a      	ldr	r2, [r7, #4]
 800385a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800385c:	3a01      	subs	r2, #1
 800385e:	0112      	lsls	r2, r2, #4
 8003860:	4311      	orrs	r1, r2
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	6a92      	ldr	r2, [r2, #40]	; 0x28
 8003866:	0212      	lsls	r2, r2, #8
 8003868:	4311      	orrs	r1, r2
 800386a:	687a      	ldr	r2, [r7, #4]
 800386c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 800386e:	0852      	lsrs	r2, r2, #1
 8003870:	3a01      	subs	r2, #1
 8003872:	0552      	lsls	r2, r2, #21
 8003874:	4311      	orrs	r1, r2
 8003876:	687a      	ldr	r2, [r7, #4]
 8003878:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800387a:	0852      	lsrs	r2, r2, #1
 800387c:	3a01      	subs	r2, #1
 800387e:	0652      	lsls	r2, r2, #25
 8003880:	4311      	orrs	r1, r2
 8003882:	687a      	ldr	r2, [r7, #4]
 8003884:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003886:	06d2      	lsls	r2, r2, #27
 8003888:	430a      	orrs	r2, r1
 800388a:	4947      	ldr	r1, [pc, #284]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 800388c:	4313      	orrs	r3, r2
 800388e:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003890:	4b45      	ldr	r3, [pc, #276]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	4a44      	ldr	r2, [pc, #272]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 8003896:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800389a:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 800389c:	4b42      	ldr	r3, [pc, #264]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 800389e:	68db      	ldr	r3, [r3, #12]
 80038a0:	4a41      	ldr	r2, [pc, #260]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038a2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038a6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038a8:	f7fe f842 	bl	8001930 <HAL_GetTick>
 80038ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038ae:	e008      	b.n	80038c2 <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80038b0:	f7fe f83e 	bl	8001930 <HAL_GetTick>
 80038b4:	4602      	mov	r2, r0
 80038b6:	693b      	ldr	r3, [r7, #16]
 80038b8:	1ad3      	subs	r3, r2, r3
 80038ba:	2b02      	cmp	r3, #2
 80038bc:	d901      	bls.n	80038c2 <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 80038be:	2303      	movs	r3, #3
 80038c0:	e06e      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80038c2:	4b39      	ldr	r3, [pc, #228]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d0f0      	beq.n	80038b0 <HAL_RCC_OscConfig+0x530>
 80038ce:	e066      	b.n	800399e <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80038d0:	4b35      	ldr	r3, [pc, #212]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a34      	ldr	r2, [pc, #208]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80038da:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 80038dc:	4b32      	ldr	r3, [pc, #200]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038de:	68db      	ldr	r3, [r3, #12]
 80038e0:	4a31      	ldr	r2, [pc, #196]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038e2:	f023 0303 	bic.w	r3, r3, #3
 80038e6:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 80038e8:	4b2f      	ldr	r3, [pc, #188]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038ea:	68db      	ldr	r3, [r3, #12]
 80038ec:	4a2e      	ldr	r2, [pc, #184]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 80038ee:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 80038f2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80038f6:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f8:	f7fe f81a 	bl	8001930 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 80038fe:	e008      	b.n	8003912 <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003900:	f7fe f816 	bl	8001930 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	2b02      	cmp	r3, #2
 800390c:	d901      	bls.n	8003912 <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 800390e:	2303      	movs	r3, #3
 8003910:	e046      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003912:	4b25      	ldr	r3, [pc, #148]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800391a:	2b00      	cmp	r3, #0
 800391c:	d1f0      	bne.n	8003900 <HAL_RCC_OscConfig+0x580>
 800391e:	e03e      	b.n	800399e <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	69db      	ldr	r3, [r3, #28]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d101      	bne.n	800392c <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e039      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 800392c:	4b1e      	ldr	r3, [pc, #120]	; (80039a8 <HAL_RCC_OscConfig+0x628>)
 800392e:	68db      	ldr	r3, [r3, #12]
 8003930:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003932:	697b      	ldr	r3, [r7, #20]
 8003934:	f003 0203 	and.w	r2, r3, #3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6a1b      	ldr	r3, [r3, #32]
 800393c:	429a      	cmp	r2, r3
 800393e:	d12c      	bne.n	800399a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003940:	697b      	ldr	r3, [r7, #20]
 8003942:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800394a:	3b01      	subs	r3, #1
 800394c:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800394e:	429a      	cmp	r2, r3
 8003950:	d123      	bne.n	800399a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 8003952:	697b      	ldr	r3, [r7, #20]
 8003954:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800395c:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 800395e:	429a      	cmp	r2, r3
 8003960:	d11b      	bne.n	800399a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800396c:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800396e:	429a      	cmp	r2, r3
 8003970:	d113      	bne.n	800399a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003972:	697b      	ldr	r3, [r7, #20]
 8003974:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800397c:	085b      	lsrs	r3, r3, #1
 800397e:	3b01      	subs	r3, #1
 8003980:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d109      	bne.n	800399a <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003986:	697b      	ldr	r3, [r7, #20]
 8003988:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003990:	085b      	lsrs	r3, r3, #1
 8003992:	3b01      	subs	r3, #1
 8003994:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003996:	429a      	cmp	r2, r3
 8003998:	d001      	beq.n	800399e <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e000      	b.n	80039a0 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 800399e:	2300      	movs	r3, #0
}
 80039a0:	4618      	mov	r0, r3
 80039a2:	3720      	adds	r7, #32
 80039a4:	46bd      	mov	sp, r7
 80039a6:	bd80      	pop	{r7, pc}
 80039a8:	40021000 	.word	0x40021000
 80039ac:	019f800c 	.word	0x019f800c

080039b0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	b086      	sub	sp, #24
 80039b4:	af00      	add	r7, sp, #0
 80039b6:	6078      	str	r0, [r7, #4]
 80039b8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 80039ba:	2300      	movs	r3, #0
 80039bc:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d101      	bne.n	80039c8 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80039c4:	2301      	movs	r3, #1
 80039c6:	e11e      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80039c8:	4b91      	ldr	r3, [pc, #580]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 030f 	and.w	r3, r3, #15
 80039d0:	683a      	ldr	r2, [r7, #0]
 80039d2:	429a      	cmp	r2, r3
 80039d4:	d910      	bls.n	80039f8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80039d6:	4b8e      	ldr	r3, [pc, #568]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	f023 020f 	bic.w	r2, r3, #15
 80039de:	498c      	ldr	r1, [pc, #560]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 80039e0:	683b      	ldr	r3, [r7, #0]
 80039e2:	4313      	orrs	r3, r2
 80039e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80039e6:	4b8a      	ldr	r3, [pc, #552]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f003 030f 	and.w	r3, r3, #15
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	429a      	cmp	r2, r3
 80039f2:	d001      	beq.n	80039f8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80039f4:	2301      	movs	r3, #1
 80039f6:	e106      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	2b00      	cmp	r3, #0
 8003a02:	d073      	beq.n	8003aec <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	685b      	ldr	r3, [r3, #4]
 8003a08:	2b03      	cmp	r3, #3
 8003a0a:	d129      	bne.n	8003a60 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003a0c:	4b81      	ldr	r3, [pc, #516]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d101      	bne.n	8003a1c <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8003a18:	2301      	movs	r3, #1
 8003a1a:	e0f4      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8003a1c:	f000 f9d0 	bl	8003dc0 <RCC_GetSysClockFreqFromPLLSource>
 8003a20:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 8003a22:	693b      	ldr	r3, [r7, #16]
 8003a24:	4a7c      	ldr	r2, [pc, #496]	; (8003c18 <HAL_RCC_ClockConfig+0x268>)
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d93f      	bls.n	8003aaa <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a2a:	4b7a      	ldr	r3, [pc, #488]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d009      	beq.n	8003a4a <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d033      	beq.n	8003aaa <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	d12f      	bne.n	8003aaa <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a4a:	4b72      	ldr	r3, [pc, #456]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a4c:	689b      	ldr	r3, [r3, #8]
 8003a4e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a52:	4a70      	ldr	r2, [pc, #448]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a54:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003a58:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 8003a5a:	2380      	movs	r3, #128	; 0x80
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e024      	b.n	8003aaa <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	2b02      	cmp	r3, #2
 8003a66:	d107      	bne.n	8003a78 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a68:	4b6a      	ldr	r3, [pc, #424]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d109      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a74:	2301      	movs	r3, #1
 8003a76:	e0c6      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003a78:	4b66      	ldr	r3, [pc, #408]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 8003a84:	2301      	movs	r3, #1
 8003a86:	e0be      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 8003a88:	f000 f8ce 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003a8c:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 8003a8e:	693b      	ldr	r3, [r7, #16]
 8003a90:	4a61      	ldr	r2, [pc, #388]	; (8003c18 <HAL_RCC_ClockConfig+0x268>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d909      	bls.n	8003aaa <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8003a96:	4b5f      	ldr	r3, [pc, #380]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003a98:	689b      	ldr	r3, [r3, #8]
 8003a9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a9e:	4a5d      	ldr	r2, [pc, #372]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003aa0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003aa4:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 8003aa6:	2380      	movs	r3, #128	; 0x80
 8003aa8:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003aaa:	4b5a      	ldr	r3, [pc, #360]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003aac:	689b      	ldr	r3, [r3, #8]
 8003aae:	f023 0203 	bic.w	r2, r3, #3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	685b      	ldr	r3, [r3, #4]
 8003ab6:	4957      	ldr	r1, [pc, #348]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003ab8:	4313      	orrs	r3, r2
 8003aba:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003abc:	f7fd ff38 	bl	8001930 <HAL_GetTick>
 8003ac0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ac2:	e00a      	b.n	8003ada <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003ac4:	f7fd ff34 	bl	8001930 <HAL_GetTick>
 8003ac8:	4602      	mov	r2, r0
 8003aca:	68fb      	ldr	r3, [r7, #12]
 8003acc:	1ad3      	subs	r3, r2, r3
 8003ace:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d901      	bls.n	8003ada <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 8003ad6:	2303      	movs	r3, #3
 8003ad8:	e095      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003ada:	4b4e      	ldr	r3, [pc, #312]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	f003 020c 	and.w	r2, r3, #12
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	685b      	ldr	r3, [r3, #4]
 8003ae6:	009b      	lsls	r3, r3, #2
 8003ae8:	429a      	cmp	r2, r3
 8003aea:	d1eb      	bne.n	8003ac4 <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	f003 0302 	and.w	r3, r3, #2
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d023      	beq.n	8003b40 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	f003 0304 	and.w	r3, r3, #4
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d005      	beq.n	8003b10 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003b04:	4b43      	ldr	r3, [pc, #268]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	4a42      	ldr	r2, [pc, #264]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b0a:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b0e:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f003 0308 	and.w	r3, r3, #8
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d007      	beq.n	8003b2c <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8003b1c:	4b3d      	ldr	r3, [pc, #244]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8003b24:	4a3b      	ldr	r2, [pc, #236]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b26:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8003b2a:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b2c:	4b39      	ldr	r3, [pc, #228]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	689b      	ldr	r3, [r3, #8]
 8003b38:	4936      	ldr	r1, [pc, #216]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b3a:	4313      	orrs	r3, r2
 8003b3c:	608b      	str	r3, [r1, #8]
 8003b3e:	e008      	b.n	8003b52 <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8003b40:	697b      	ldr	r3, [r7, #20]
 8003b42:	2b80      	cmp	r3, #128	; 0x80
 8003b44:	d105      	bne.n	8003b52 <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 8003b46:	4b33      	ldr	r3, [pc, #204]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b48:	689b      	ldr	r3, [r3, #8]
 8003b4a:	4a32      	ldr	r2, [pc, #200]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003b4c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b50:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003b52:	4b2f      	ldr	r3, [pc, #188]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f003 030f 	and.w	r3, r3, #15
 8003b5a:	683a      	ldr	r2, [r7, #0]
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d21d      	bcs.n	8003b9c <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003b60:	4b2b      	ldr	r3, [pc, #172]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f023 020f 	bic.w	r2, r3, #15
 8003b68:	4929      	ldr	r1, [pc, #164]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 8003b6a:	683b      	ldr	r3, [r7, #0]
 8003b6c:	4313      	orrs	r3, r2
 8003b6e:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8003b70:	f7fd fede 	bl	8001930 <HAL_GetTick>
 8003b74:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b76:	e00a      	b.n	8003b8e <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b78:	f7fd feda 	bl	8001930 <HAL_GetTick>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	1ad3      	subs	r3, r2, r3
 8003b82:	f241 3288 	movw	r2, #5000	; 0x1388
 8003b86:	4293      	cmp	r3, r2
 8003b88:	d901      	bls.n	8003b8e <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 8003b8a:	2303      	movs	r3, #3
 8003b8c:	e03b      	b.n	8003c06 <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003b8e:	4b20      	ldr	r3, [pc, #128]	; (8003c10 <HAL_RCC_ClockConfig+0x260>)
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	f003 030f 	and.w	r3, r3, #15
 8003b96:	683a      	ldr	r2, [r7, #0]
 8003b98:	429a      	cmp	r2, r3
 8003b9a:	d1ed      	bne.n	8003b78 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f003 0304 	and.w	r3, r3, #4
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d008      	beq.n	8003bba <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003ba8:	4b1a      	ldr	r3, [pc, #104]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003baa:	689b      	ldr	r3, [r3, #8]
 8003bac:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	68db      	ldr	r3, [r3, #12]
 8003bb4:	4917      	ldr	r1, [pc, #92]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f003 0308 	and.w	r3, r3, #8
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d009      	beq.n	8003bda <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003bc6:	4b13      	ldr	r3, [pc, #76]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003bc8:	689b      	ldr	r3, [r3, #8]
 8003bca:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	691b      	ldr	r3, [r3, #16]
 8003bd2:	00db      	lsls	r3, r3, #3
 8003bd4:	490f      	ldr	r1, [pc, #60]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8003bda:	f000 f825 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8003bde:	4602      	mov	r2, r0
 8003be0:	4b0c      	ldr	r3, [pc, #48]	; (8003c14 <HAL_RCC_ClockConfig+0x264>)
 8003be2:	689b      	ldr	r3, [r3, #8]
 8003be4:	091b      	lsrs	r3, r3, #4
 8003be6:	f003 030f 	and.w	r3, r3, #15
 8003bea:	490c      	ldr	r1, [pc, #48]	; (8003c1c <HAL_RCC_ClockConfig+0x26c>)
 8003bec:	5ccb      	ldrb	r3, [r1, r3]
 8003bee:	f003 031f 	and.w	r3, r3, #31
 8003bf2:	fa22 f303 	lsr.w	r3, r2, r3
 8003bf6:	4a0a      	ldr	r2, [pc, #40]	; (8003c20 <HAL_RCC_ClockConfig+0x270>)
 8003bf8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8003bfa:	4b0a      	ldr	r3, [pc, #40]	; (8003c24 <HAL_RCC_ClockConfig+0x274>)
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	4618      	mov	r0, r3
 8003c00:	f7fd f842 	bl	8000c88 <HAL_InitTick>
 8003c04:	4603      	mov	r3, r0
}
 8003c06:	4618      	mov	r0, r3
 8003c08:	3718      	adds	r7, #24
 8003c0a:	46bd      	mov	sp, r7
 8003c0c:	bd80      	pop	{r7, pc}
 8003c0e:	bf00      	nop
 8003c10:	40022000 	.word	0x40022000
 8003c14:	40021000 	.word	0x40021000
 8003c18:	04c4b400 	.word	0x04c4b400
 8003c1c:	08009238 	.word	0x08009238
 8003c20:	20000000 	.word	0x20000000
 8003c24:	200000c0 	.word	0x200000c0

08003c28 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c28:	b480      	push	{r7}
 8003c2a:	b087      	sub	sp, #28
 8003c2c:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8003c2e:	4b2c      	ldr	r3, [pc, #176]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 030c 	and.w	r3, r3, #12
 8003c36:	2b04      	cmp	r3, #4
 8003c38:	d102      	bne.n	8003c40 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8003c3a:	4b2a      	ldr	r3, [pc, #168]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c3c:	613b      	str	r3, [r7, #16]
 8003c3e:	e047      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8003c40:	4b27      	ldr	r3, [pc, #156]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c42:	689b      	ldr	r3, [r3, #8]
 8003c44:	f003 030c 	and.w	r3, r3, #12
 8003c48:	2b08      	cmp	r3, #8
 8003c4a:	d102      	bne.n	8003c52 <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8003c4c:	4b26      	ldr	r3, [pc, #152]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c4e:	613b      	str	r3, [r7, #16]
 8003c50:	e03e      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 8003c52:	4b23      	ldr	r3, [pc, #140]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	f003 030c 	and.w	r3, r3, #12
 8003c5a:	2b0c      	cmp	r3, #12
 8003c5c:	d136      	bne.n	8003ccc <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003c5e:	4b20      	ldr	r3, [pc, #128]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c60:	68db      	ldr	r3, [r3, #12]
 8003c62:	f003 0303 	and.w	r3, r3, #3
 8003c66:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003c68:	4b1d      	ldr	r3, [pc, #116]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	091b      	lsrs	r3, r3, #4
 8003c6e:	f003 030f 	and.w	r3, r3, #15
 8003c72:	3301      	adds	r3, #1
 8003c74:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	2b03      	cmp	r3, #3
 8003c7a:	d10c      	bne.n	8003c96 <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c7c:	4a1a      	ldr	r2, [pc, #104]	; (8003ce8 <HAL_RCC_GetSysClockFreq+0xc0>)
 8003c7e:	68bb      	ldr	r3, [r7, #8]
 8003c80:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c84:	4a16      	ldr	r2, [pc, #88]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003c86:	68d2      	ldr	r2, [r2, #12]
 8003c88:	0a12      	lsrs	r2, r2, #8
 8003c8a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003c8e:	fb02 f303 	mul.w	r3, r2, r3
 8003c92:	617b      	str	r3, [r7, #20]
      break;
 8003c94:	e00c      	b.n	8003cb0 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003c96:	4a13      	ldr	r2, [pc, #76]	; (8003ce4 <HAL_RCC_GetSysClockFreq+0xbc>)
 8003c98:	68bb      	ldr	r3, [r7, #8]
 8003c9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8003c9e:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003ca0:	68d2      	ldr	r2, [r2, #12]
 8003ca2:	0a12      	lsrs	r2, r2, #8
 8003ca4:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003ca8:	fb02 f303 	mul.w	r3, r2, r3
 8003cac:	617b      	str	r3, [r7, #20]
      break;
 8003cae:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003cb0:	4b0b      	ldr	r3, [pc, #44]	; (8003ce0 <HAL_RCC_GetSysClockFreq+0xb8>)
 8003cb2:	68db      	ldr	r3, [r3, #12]
 8003cb4:	0e5b      	lsrs	r3, r3, #25
 8003cb6:	f003 0303 	and.w	r3, r3, #3
 8003cba:	3301      	adds	r3, #1
 8003cbc:	005b      	lsls	r3, r3, #1
 8003cbe:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8003cc0:	697a      	ldr	r2, [r7, #20]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cc8:	613b      	str	r3, [r7, #16]
 8003cca:	e001      	b.n	8003cd0 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8003ccc:	2300      	movs	r3, #0
 8003cce:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8003cd0:	693b      	ldr	r3, [r7, #16]
}
 8003cd2:	4618      	mov	r0, r3
 8003cd4:	371c      	adds	r7, #28
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cdc:	4770      	bx	lr
 8003cde:	bf00      	nop
 8003ce0:	40021000 	.word	0x40021000
 8003ce4:	00f42400 	.word	0x00f42400
 8003ce8:	016e3600 	.word	0x016e3600

08003cec <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cec:	b480      	push	{r7}
 8003cee:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cf0:	4b03      	ldr	r3, [pc, #12]	; (8003d00 <HAL_RCC_GetHCLKFreq+0x14>)
 8003cf2:	681b      	ldr	r3, [r3, #0]
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	46bd      	mov	sp, r7
 8003cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cfc:	4770      	bx	lr
 8003cfe:	bf00      	nop
 8003d00:	20000000 	.word	0x20000000

08003d04 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8003d08:	f7ff fff0 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	4b06      	ldr	r3, [pc, #24]	; (8003d28 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d10:	689b      	ldr	r3, [r3, #8]
 8003d12:	0a1b      	lsrs	r3, r3, #8
 8003d14:	f003 0307 	and.w	r3, r3, #7
 8003d18:	4904      	ldr	r1, [pc, #16]	; (8003d2c <HAL_RCC_GetPCLK1Freq+0x28>)
 8003d1a:	5ccb      	ldrb	r3, [r1, r3]
 8003d1c:	f003 031f 	and.w	r3, r3, #31
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40021000 	.word	0x40021000
 8003d2c:	08009248 	.word	0x08009248

08003d30 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d30:	b580      	push	{r7, lr}
 8003d32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 8003d34:	f7ff ffda 	bl	8003cec <HAL_RCC_GetHCLKFreq>
 8003d38:	4602      	mov	r2, r0
 8003d3a:	4b06      	ldr	r3, [pc, #24]	; (8003d54 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d3c:	689b      	ldr	r3, [r3, #8]
 8003d3e:	0adb      	lsrs	r3, r3, #11
 8003d40:	f003 0307 	and.w	r3, r3, #7
 8003d44:	4904      	ldr	r1, [pc, #16]	; (8003d58 <HAL_RCC_GetPCLK2Freq+0x28>)
 8003d46:	5ccb      	ldrb	r3, [r1, r3]
 8003d48:	f003 031f 	and.w	r3, r3, #31
 8003d4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d50:	4618      	mov	r0, r3
 8003d52:	bd80      	pop	{r7, pc}
 8003d54:	40021000 	.word	0x40021000
 8003d58:	08009248 	.word	0x08009248

08003d5c <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	b083      	sub	sp, #12
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
 8003d64:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d66:	687b      	ldr	r3, [r7, #4]
 8003d68:	220f      	movs	r2, #15
 8003d6a:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 8003d6c:	4b12      	ldr	r3, [pc, #72]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f003 0203 	and.w	r2, r3, #3
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 8003d78:	4b0f      	ldr	r3, [pc, #60]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 8003d84:	4b0c      	ldr	r3, [pc, #48]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d86:	689b      	ldr	r3, [r3, #8]
 8003d88:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 8003d90:	4b09      	ldr	r3, [pc, #36]	; (8003db8 <HAL_RCC_GetClockConfig+0x5c>)
 8003d92:	689b      	ldr	r3, [r3, #8]
 8003d94:	08db      	lsrs	r3, r3, #3
 8003d96:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 8003d9e:	4b07      	ldr	r3, [pc, #28]	; (8003dbc <HAL_RCC_GetClockConfig+0x60>)
 8003da0:	681b      	ldr	r3, [r3, #0]
 8003da2:	f003 020f 	and.w	r2, r3, #15
 8003da6:	683b      	ldr	r3, [r7, #0]
 8003da8:	601a      	str	r2, [r3, #0]
}
 8003daa:	bf00      	nop
 8003dac:	370c      	adds	r7, #12
 8003dae:	46bd      	mov	sp, r7
 8003db0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	40021000 	.word	0x40021000
 8003dbc:	40022000 	.word	0x40022000

08003dc0 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	b087      	sub	sp, #28
 8003dc4:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 8003dc6:	4b1e      	ldr	r3, [pc, #120]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dc8:	68db      	ldr	r3, [r3, #12]
 8003dca:	f003 0303 	and.w	r3, r3, #3
 8003dce:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8003dd0:	4b1b      	ldr	r3, [pc, #108]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dd2:	68db      	ldr	r3, [r3, #12]
 8003dd4:	091b      	lsrs	r3, r3, #4
 8003dd6:	f003 030f 	and.w	r3, r3, #15
 8003dda:	3301      	adds	r3, #1
 8003ddc:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8003dde:	693b      	ldr	r3, [r7, #16]
 8003de0:	2b03      	cmp	r3, #3
 8003de2:	d10c      	bne.n	8003dfe <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003de4:	4a17      	ldr	r2, [pc, #92]	; (8003e44 <RCC_GetSysClockFreqFromPLLSource+0x84>)
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003dec:	4a14      	ldr	r2, [pc, #80]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003dee:	68d2      	ldr	r2, [r2, #12]
 8003df0:	0a12      	lsrs	r2, r2, #8
 8003df2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003df6:	fb02 f303 	mul.w	r3, r2, r3
 8003dfa:	617b      	str	r3, [r7, #20]
    break;
 8003dfc:	e00c      	b.n	8003e18 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8003dfe:	4a12      	ldr	r2, [pc, #72]	; (8003e48 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e06:	4a0e      	ldr	r2, [pc, #56]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e08:	68d2      	ldr	r2, [r2, #12]
 8003e0a:	0a12      	lsrs	r2, r2, #8
 8003e0c:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8003e10:	fb02 f303 	mul.w	r3, r2, r3
 8003e14:	617b      	str	r3, [r7, #20]
    break;
 8003e16:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8003e18:	4b09      	ldr	r3, [pc, #36]	; (8003e40 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8003e1a:	68db      	ldr	r3, [r3, #12]
 8003e1c:	0e5b      	lsrs	r3, r3, #25
 8003e1e:	f003 0303 	and.w	r3, r3, #3
 8003e22:	3301      	adds	r3, #1
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8003e28:	697a      	ldr	r2, [r7, #20]
 8003e2a:	68bb      	ldr	r3, [r7, #8]
 8003e2c:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e30:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 8003e32:	687b      	ldr	r3, [r7, #4]
}
 8003e34:	4618      	mov	r0, r3
 8003e36:	371c      	adds	r7, #28
 8003e38:	46bd      	mov	sp, r7
 8003e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3e:	4770      	bx	lr
 8003e40:	40021000 	.word	0x40021000
 8003e44:	016e3600 	.word	0x016e3600
 8003e48:	00f42400 	.word	0x00f42400

08003e4c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8003e4c:	b580      	push	{r7, lr}
 8003e4e:	b086      	sub	sp, #24
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 8003e54:	2300      	movs	r3, #0
 8003e56:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8003e58:	2300      	movs	r3, #0
 8003e5a:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	f000 8098 	beq.w	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003e6a:	2300      	movs	r3, #0
 8003e6c:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003e6e:	4b43      	ldr	r3, [pc, #268]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e72:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e76:	2b00      	cmp	r3, #0
 8003e78:	d10d      	bne.n	8003e96 <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003e7a:	4b40      	ldr	r3, [pc, #256]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e7e:	4a3f      	ldr	r2, [pc, #252]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e80:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003e84:	6593      	str	r3, [r2, #88]	; 0x58
 8003e86:	4b3d      	ldr	r3, [pc, #244]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003e88:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e8a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003e8e:	60bb      	str	r3, [r7, #8]
 8003e90:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003e92:	2301      	movs	r3, #1
 8003e94:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003e96:	4b3a      	ldr	r3, [pc, #232]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a39      	ldr	r2, [pc, #228]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003e9c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003ea0:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 8003ea2:	f7fd fd45 	bl	8001930 <HAL_GetTick>
 8003ea6:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ea8:	e009      	b.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003eaa:	f7fd fd41 	bl	8001930 <HAL_GetTick>
 8003eae:	4602      	mov	r2, r0
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	1ad3      	subs	r3, r2, r3
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	d902      	bls.n	8003ebe <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8003eb8:	2303      	movs	r3, #3
 8003eba:	74fb      	strb	r3, [r7, #19]
        break;
 8003ebc:	e005      	b.n	8003eca <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8003ebe:	4b30      	ldr	r3, [pc, #192]	; (8003f80 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d0ef      	beq.n	8003eaa <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8003eca:	7cfb      	ldrb	r3, [r7, #19]
 8003ecc:	2b00      	cmp	r3, #0
 8003ece:	d159      	bne.n	8003f84 <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8003ed0:	4b2a      	ldr	r3, [pc, #168]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003ed2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ed6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003eda:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8003edc:	697b      	ldr	r3, [r7, #20]
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d01e      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003ee6:	697a      	ldr	r2, [r7, #20]
 8003ee8:	429a      	cmp	r2, r3
 8003eea:	d019      	beq.n	8003f20 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8003eec:	4b23      	ldr	r3, [pc, #140]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ef2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003ef6:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8003ef8:	4b20      	ldr	r3, [pc, #128]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003efa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003efe:	4a1f      	ldr	r2, [pc, #124]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f00:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f04:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8003f08:	4b1c      	ldr	r3, [pc, #112]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f0e:	4a1b      	ldr	r2, [pc, #108]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f10:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003f14:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8003f18:	4a18      	ldr	r2, [pc, #96]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f1a:	697b      	ldr	r3, [r7, #20]
 8003f1c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8003f20:	697b      	ldr	r3, [r7, #20]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d016      	beq.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f2a:	f7fd fd01 	bl	8001930 <HAL_GetTick>
 8003f2e:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f30:	e00b      	b.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003f32:	f7fd fcfd 	bl	8001930 <HAL_GetTick>
 8003f36:	4602      	mov	r2, r0
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	1ad3      	subs	r3, r2, r3
 8003f3c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d902      	bls.n	8003f4a <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	74fb      	strb	r3, [r7, #19]
            break;
 8003f48:	e006      	b.n	8003f58 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003f4a:	4b0c      	ldr	r3, [pc, #48]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f4c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f50:	f003 0302 	and.w	r3, r3, #2
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d0ec      	beq.n	8003f32 <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 8003f58:	7cfb      	ldrb	r3, [r7, #19]
 8003f5a:	2b00      	cmp	r3, #0
 8003f5c:	d10b      	bne.n	8003f76 <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003f5e:	4b07      	ldr	r3, [pc, #28]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f64:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003f6c:	4903      	ldr	r1, [pc, #12]	; (8003f7c <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8003f6e:	4313      	orrs	r3, r2
 8003f70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 8003f74:	e008      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8003f76:	7cfb      	ldrb	r3, [r7, #19]
 8003f78:	74bb      	strb	r3, [r7, #18]
 8003f7a:	e005      	b.n	8003f88 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 8003f7c:	40021000 	.word	0x40021000
 8003f80:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8003f84:	7cfb      	ldrb	r3, [r7, #19]
 8003f86:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003f88:	7c7b      	ldrb	r3, [r7, #17]
 8003f8a:	2b01      	cmp	r3, #1
 8003f8c:	d105      	bne.n	8003f9a <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003f8e:	4ba7      	ldr	r3, [pc, #668]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f92:	4aa6      	ldr	r2, [pc, #664]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003f94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003f98:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f003 0301 	and.w	r3, r3, #1
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d00a      	beq.n	8003fbc <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003fa6:	4ba1      	ldr	r3, [pc, #644]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fa8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fac:	f023 0203 	bic.w	r2, r3, #3
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	685b      	ldr	r3, [r3, #4]
 8003fb4:	499d      	ldr	r1, [pc, #628]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fb6:	4313      	orrs	r3, r2
 8003fb8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	f003 0302 	and.w	r3, r3, #2
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00a      	beq.n	8003fde <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8003fc8:	4b98      	ldr	r3, [pc, #608]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003fce:	f023 020c 	bic.w	r2, r3, #12
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	689b      	ldr	r3, [r3, #8]
 8003fd6:	4995      	ldr	r1, [pc, #596]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fd8:	4313      	orrs	r3, r2
 8003fda:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d00a      	beq.n	8004000 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8003fea:	4b90      	ldr	r3, [pc, #576]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003fec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ff0:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	498c      	ldr	r1, [pc, #560]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004000:	687b      	ldr	r3, [r7, #4]
 8004002:	681b      	ldr	r3, [r3, #0]
 8004004:	f003 0308 	and.w	r3, r3, #8
 8004008:	2b00      	cmp	r3, #0
 800400a:	d00a      	beq.n	8004022 <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800400c:	4b87      	ldr	r3, [pc, #540]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800400e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004012:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	691b      	ldr	r3, [r3, #16]
 800401a:	4984      	ldr	r1, [pc, #528]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800401c:	4313      	orrs	r3, r2
 800401e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f003 0310 	and.w	r3, r3, #16
 800402a:	2b00      	cmp	r3, #0
 800402c:	d00a      	beq.n	8004044 <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800402e:	4b7f      	ldr	r3, [pc, #508]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004030:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004034:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	695b      	ldr	r3, [r3, #20]
 800403c:	497b      	ldr	r1, [pc, #492]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800403e:	4313      	orrs	r3, r2
 8004040:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	f003 0320 	and.w	r3, r3, #32
 800404c:	2b00      	cmp	r3, #0
 800404e:	d00a      	beq.n	8004066 <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004050:	4b76      	ldr	r3, [pc, #472]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004052:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004056:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	699b      	ldr	r3, [r3, #24]
 800405e:	4973      	ldr	r1, [pc, #460]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004060:	4313      	orrs	r3, r2
 8004062:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	681b      	ldr	r3, [r3, #0]
 800406a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800406e:	2b00      	cmp	r3, #0
 8004070:	d00a      	beq.n	8004088 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004072:	4b6e      	ldr	r3, [pc, #440]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004074:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004078:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	69db      	ldr	r3, [r3, #28]
 8004080:	496a      	ldr	r1, [pc, #424]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004082:	4313      	orrs	r3, r2
 8004084:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004090:	2b00      	cmp	r3, #0
 8004092:	d00a      	beq.n	80040aa <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004094:	4b65      	ldr	r3, [pc, #404]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004096:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800409a:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	6a1b      	ldr	r3, [r3, #32]
 80040a2:	4962      	ldr	r1, [pc, #392]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040a4:	4313      	orrs	r3, r2
 80040a6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d00a      	beq.n	80040cc <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80040b6:	4b5d      	ldr	r3, [pc, #372]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040b8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80040bc:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040c4:	4959      	ldr	r1, [pc, #356]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040c6:	4313      	orrs	r3, r2
 80040c8:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d00a      	beq.n	80040ee <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80040d8:	4b54      	ldr	r3, [pc, #336]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040da:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80040de:	f023 0203 	bic.w	r2, r3, #3
 80040e2:	687b      	ldr	r3, [r7, #4]
 80040e4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040e6:	4951      	ldr	r1, [pc, #324]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040e8:	4313      	orrs	r3, r2
 80040ea:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d00a      	beq.n	8004110 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80040fa:	4b4c      	ldr	r3, [pc, #304]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80040fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004100:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004108:	4948      	ldr	r1, [pc, #288]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800410a:	4313      	orrs	r3, r2
 800410c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004118:	2b00      	cmp	r3, #0
 800411a:	d015      	beq.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800411c:	4b43      	ldr	r3, [pc, #268]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800411e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004122:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800412a:	4940      	ldr	r1, [pc, #256]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800412c:	4313      	orrs	r3, r2
 800412e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800413a:	d105      	bne.n	8004148 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800413c:	4b3b      	ldr	r3, [pc, #236]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800413e:	68db      	ldr	r3, [r3, #12]
 8004140:	4a3a      	ldr	r2, [pc, #232]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004142:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004146:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004150:	2b00      	cmp	r3, #0
 8004152:	d015      	beq.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8004154:	4b35      	ldr	r3, [pc, #212]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004156:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800415a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004162:	4932      	ldr	r1, [pc, #200]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004164:	4313      	orrs	r3, r2
 8004166:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800416e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004172:	d105      	bne.n	8004180 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004174:	4b2d      	ldr	r3, [pc, #180]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004176:	68db      	ldr	r3, [r3, #12]
 8004178:	4a2c      	ldr	r2, [pc, #176]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800417a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800417e:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004188:	2b00      	cmp	r3, #0
 800418a:	d015      	beq.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 800418c:	4b27      	ldr	r3, [pc, #156]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800418e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004192:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800419a:	4924      	ldr	r1, [pc, #144]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800419c:	4313      	orrs	r3, r2
 800419e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041a6:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80041aa:	d105      	bne.n	80041b8 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041ac:	4b1f      	ldr	r3, [pc, #124]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ae:	68db      	ldr	r3, [r3, #12]
 80041b0:	4a1e      	ldr	r2, [pc, #120]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041b2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041b6:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d015      	beq.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80041c4:	4b19      	ldr	r3, [pc, #100]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041c6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80041ca:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d2:	4916      	ldr	r1, [pc, #88]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041d4:	4313      	orrs	r3, r2
 80041d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041de:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80041e2:	d105      	bne.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80041e4:	4b11      	ldr	r3, [pc, #68]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041e6:	68db      	ldr	r3, [r3, #12]
 80041e8:	4a10      	ldr	r2, [pc, #64]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041ea:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80041ee:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 80041f0:	687b      	ldr	r3, [r7, #4]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d019      	beq.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 80041fc:	4b0b      	ldr	r3, [pc, #44]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80041fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004202:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	4908      	ldr	r1, [pc, #32]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800420c:	4313      	orrs	r3, r2
 800420e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004216:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800421a:	d109      	bne.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800421c:	4b03      	ldr	r3, [pc, #12]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800421e:	68db      	ldr	r3, [r3, #12]
 8004220:	4a02      	ldr	r2, [pc, #8]	; (800422c <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8004222:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004226:	60d3      	str	r3, [r2, #12]
 8004228:	e002      	b.n	8004230 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 800422a:	bf00      	nop
 800422c:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004238:	2b00      	cmp	r3, #0
 800423a:	d015      	beq.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 800423c:	4b29      	ldr	r3, [pc, #164]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800423e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004242:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800424a:	4926      	ldr	r1, [pc, #152]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800424c:	4313      	orrs	r3, r2
 800424e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004256:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800425a:	d105      	bne.n	8004268 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 800425c:	4b21      	ldr	r3, [pc, #132]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800425e:	68db      	ldr	r3, [r3, #12]
 8004260:	4a20      	ldr	r2, [pc, #128]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004262:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004266:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004270:	2b00      	cmp	r3, #0
 8004272:	d015      	beq.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8004274:	4b1b      	ldr	r3, [pc, #108]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004276:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800427a:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004282:	4918      	ldr	r1, [pc, #96]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004284:	4313      	orrs	r3, r2
 8004286:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800428e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004292:	d105      	bne.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8004294:	4b13      	ldr	r3, [pc, #76]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8004296:	68db      	ldr	r3, [r3, #12]
 8004298:	4a12      	ldr	r2, [pc, #72]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 800429a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800429e:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d015      	beq.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 80042ac:	4b0d      	ldr	r3, [pc, #52]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ae:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80042b2:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042ba:	490a      	ldr	r1, [pc, #40]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042bc:	4313      	orrs	r3, r2
 80042be:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 80042c2:	687b      	ldr	r3, [r7, #4]
 80042c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80042c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80042ca:	d105      	bne.n	80042d8 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80042cc:	4b05      	ldr	r3, [pc, #20]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042ce:	68db      	ldr	r3, [r3, #12]
 80042d0:	4a04      	ldr	r2, [pc, #16]	; (80042e4 <HAL_RCCEx_PeriphCLKConfig+0x498>)
 80042d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80042d6:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 80042d8:	7cbb      	ldrb	r3, [r7, #18]
}
 80042da:	4618      	mov	r0, r3
 80042dc:	3718      	adds	r7, #24
 80042de:	46bd      	mov	sp, r7
 80042e0:	bd80      	pop	{r7, pc}
 80042e2:	bf00      	nop
 80042e4:	40021000 	.word	0x40021000

080042e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b082      	sub	sp, #8
 80042ec:	af00      	add	r7, sp, #0
 80042ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d101      	bne.n	80042fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80042f6:	2301      	movs	r3, #1
 80042f8:	e049      	b.n	800438e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004300:	b2db      	uxtb	r3, r3
 8004302:	2b00      	cmp	r3, #0
 8004304:	d106      	bne.n	8004314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f000 f841 	bl	8004396 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	2202      	movs	r2, #2
 8004318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681a      	ldr	r2, [r3, #0]
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	3304      	adds	r3, #4
 8004324:	4619      	mov	r1, r3
 8004326:	4610      	mov	r0, r2
 8004328:	f000 fcde 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	2201      	movs	r2, #1
 8004330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2201      	movs	r2, #1
 8004338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	2201      	movs	r2, #1
 8004340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2201      	movs	r2, #1
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2201      	movs	r2, #1
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	2201      	movs	r2, #1
 8004358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2201      	movs	r2, #1
 8004360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	2201      	movs	r2, #1
 8004368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	2201      	movs	r2, #1
 8004370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	2201      	movs	r2, #1
 8004378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2201      	movs	r2, #1
 8004380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800438c:	2300      	movs	r3, #0
}
 800438e:	4618      	mov	r0, r3
 8004390:	3708      	adds	r7, #8
 8004392:	46bd      	mov	sp, r7
 8004394:	bd80      	pop	{r7, pc}

08004396 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004396:	b480      	push	{r7}
 8004398:	b083      	sub	sp, #12
 800439a:	af00      	add	r7, sp, #0
 800439c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800439e:	bf00      	nop
 80043a0:	370c      	adds	r7, #12
 80043a2:	46bd      	mov	sp, r7
 80043a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043a8:	4770      	bx	lr
	...

080043ac <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80043ac:	b480      	push	{r7}
 80043ae:	b085      	sub	sp, #20
 80043b0:	af00      	add	r7, sp, #0
 80043b2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043ba:	b2db      	uxtb	r3, r3
 80043bc:	2b01      	cmp	r3, #1
 80043be:	d001      	beq.n	80043c4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e054      	b.n	800446e <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	2202      	movs	r2, #2
 80043c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	68da      	ldr	r2, [r3, #12]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a26      	ldr	r2, [pc, #152]	; (800447c <HAL_TIM_Base_Start_IT+0xd0>)
 80043e2:	4293      	cmp	r3, r2
 80043e4:	d022      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x80>
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043ee:	d01d      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x80>
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	4a22      	ldr	r2, [pc, #136]	; (8004480 <HAL_TIM_Base_Start_IT+0xd4>)
 80043f6:	4293      	cmp	r3, r2
 80043f8:	d018      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x80>
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	4a21      	ldr	r2, [pc, #132]	; (8004484 <HAL_TIM_Base_Start_IT+0xd8>)
 8004400:	4293      	cmp	r3, r2
 8004402:	d013      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x80>
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	4a1f      	ldr	r2, [pc, #124]	; (8004488 <HAL_TIM_Base_Start_IT+0xdc>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00e      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x80>
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	4a1e      	ldr	r2, [pc, #120]	; (800448c <HAL_TIM_Base_Start_IT+0xe0>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d009      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x80>
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	4a1c      	ldr	r2, [pc, #112]	; (8004490 <HAL_TIM_Base_Start_IT+0xe4>)
 800441e:	4293      	cmp	r3, r2
 8004420:	d004      	beq.n	800442c <HAL_TIM_Base_Start_IT+0x80>
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	4a1b      	ldr	r2, [pc, #108]	; (8004494 <HAL_TIM_Base_Start_IT+0xe8>)
 8004428:	4293      	cmp	r3, r2
 800442a:	d115      	bne.n	8004458 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	689a      	ldr	r2, [r3, #8]
 8004432:	4b19      	ldr	r3, [pc, #100]	; (8004498 <HAL_TIM_Base_Start_IT+0xec>)
 8004434:	4013      	ands	r3, r2
 8004436:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	2b06      	cmp	r3, #6
 800443c:	d015      	beq.n	800446a <HAL_TIM_Base_Start_IT+0xbe>
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004444:	d011      	beq.n	800446a <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f042 0201 	orr.w	r2, r2, #1
 8004454:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004456:	e008      	b.n	800446a <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	681b      	ldr	r3, [r3, #0]
 800445c:	681a      	ldr	r2, [r3, #0]
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	f042 0201 	orr.w	r2, r2, #1
 8004466:	601a      	str	r2, [r3, #0]
 8004468:	e000      	b.n	800446c <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800446a:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800446c:	2300      	movs	r3, #0
}
 800446e:	4618      	mov	r0, r3
 8004470:	3714      	adds	r7, #20
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
 800447a:	bf00      	nop
 800447c:	40012c00 	.word	0x40012c00
 8004480:	40000400 	.word	0x40000400
 8004484:	40000800 	.word	0x40000800
 8004488:	40000c00 	.word	0x40000c00
 800448c:	40013400 	.word	0x40013400
 8004490:	40014000 	.word	0x40014000
 8004494:	40015000 	.word	0x40015000
 8004498:	00010007 	.word	0x00010007

0800449c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800449c:	b580      	push	{r7, lr}
 800449e:	b082      	sub	sp, #8
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d101      	bne.n	80044ae <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80044aa:	2301      	movs	r3, #1
 80044ac:	e049      	b.n	8004542 <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044b4:	b2db      	uxtb	r3, r3
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d106      	bne.n	80044c8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	2200      	movs	r2, #0
 80044be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f7fc fe74 	bl	80011b0 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	2202      	movs	r2, #2
 80044cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	3304      	adds	r3, #4
 80044d8:	4619      	mov	r1, r3
 80044da:	4610      	mov	r0, r2
 80044dc:	f000 fc04 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2201      	movs	r2, #1
 80044ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	2201      	movs	r2, #1
 80044fc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2201      	movs	r2, #1
 8004504:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	2201      	movs	r2, #1
 800450c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	2201      	movs	r2, #1
 8004514:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	3708      	adds	r7, #8
 8004546:	46bd      	mov	sp, r7
 8004548:	bd80      	pop	{r7, pc}
	...

0800454c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800454c:	b580      	push	{r7, lr}
 800454e:	b084      	sub	sp, #16
 8004550:	af00      	add	r7, sp, #0
 8004552:	6078      	str	r0, [r7, #4]
 8004554:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d109      	bne.n	8004570 <HAL_TIM_PWM_Start+0x24>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004562:	b2db      	uxtb	r3, r3
 8004564:	2b01      	cmp	r3, #1
 8004566:	bf14      	ite	ne
 8004568:	2301      	movne	r3, #1
 800456a:	2300      	moveq	r3, #0
 800456c:	b2db      	uxtb	r3, r3
 800456e:	e03c      	b.n	80045ea <HAL_TIM_PWM_Start+0x9e>
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	2b04      	cmp	r3, #4
 8004574:	d109      	bne.n	800458a <HAL_TIM_PWM_Start+0x3e>
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800457c:	b2db      	uxtb	r3, r3
 800457e:	2b01      	cmp	r3, #1
 8004580:	bf14      	ite	ne
 8004582:	2301      	movne	r3, #1
 8004584:	2300      	moveq	r3, #0
 8004586:	b2db      	uxtb	r3, r3
 8004588:	e02f      	b.n	80045ea <HAL_TIM_PWM_Start+0x9e>
 800458a:	683b      	ldr	r3, [r7, #0]
 800458c:	2b08      	cmp	r3, #8
 800458e:	d109      	bne.n	80045a4 <HAL_TIM_PWM_Start+0x58>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004596:	b2db      	uxtb	r3, r3
 8004598:	2b01      	cmp	r3, #1
 800459a:	bf14      	ite	ne
 800459c:	2301      	movne	r3, #1
 800459e:	2300      	moveq	r3, #0
 80045a0:	b2db      	uxtb	r3, r3
 80045a2:	e022      	b.n	80045ea <HAL_TIM_PWM_Start+0x9e>
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	2b0c      	cmp	r3, #12
 80045a8:	d109      	bne.n	80045be <HAL_TIM_PWM_Start+0x72>
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045b0:	b2db      	uxtb	r3, r3
 80045b2:	2b01      	cmp	r3, #1
 80045b4:	bf14      	ite	ne
 80045b6:	2301      	movne	r3, #1
 80045b8:	2300      	moveq	r3, #0
 80045ba:	b2db      	uxtb	r3, r3
 80045bc:	e015      	b.n	80045ea <HAL_TIM_PWM_Start+0x9e>
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	2b10      	cmp	r3, #16
 80045c2:	d109      	bne.n	80045d8 <HAL_TIM_PWM_Start+0x8c>
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045ca:	b2db      	uxtb	r3, r3
 80045cc:	2b01      	cmp	r3, #1
 80045ce:	bf14      	ite	ne
 80045d0:	2301      	movne	r3, #1
 80045d2:	2300      	moveq	r3, #0
 80045d4:	b2db      	uxtb	r3, r3
 80045d6:	e008      	b.n	80045ea <HAL_TIM_PWM_Start+0x9e>
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045de:	b2db      	uxtb	r3, r3
 80045e0:	2b01      	cmp	r3, #1
 80045e2:	bf14      	ite	ne
 80045e4:	2301      	movne	r3, #1
 80045e6:	2300      	moveq	r3, #0
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b00      	cmp	r3, #0
 80045ec:	d001      	beq.n	80045f2 <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 80045ee:	2301      	movs	r3, #1
 80045f0:	e0a6      	b.n	8004740 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80045f2:	683b      	ldr	r3, [r7, #0]
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d104      	bne.n	8004602 <HAL_TIM_PWM_Start+0xb6>
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2202      	movs	r2, #2
 80045fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004600:	e023      	b.n	800464a <HAL_TIM_PWM_Start+0xfe>
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	2b04      	cmp	r3, #4
 8004606:	d104      	bne.n	8004612 <HAL_TIM_PWM_Start+0xc6>
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	2202      	movs	r2, #2
 800460c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004610:	e01b      	b.n	800464a <HAL_TIM_PWM_Start+0xfe>
 8004612:	683b      	ldr	r3, [r7, #0]
 8004614:	2b08      	cmp	r3, #8
 8004616:	d104      	bne.n	8004622 <HAL_TIM_PWM_Start+0xd6>
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2202      	movs	r2, #2
 800461c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004620:	e013      	b.n	800464a <HAL_TIM_PWM_Start+0xfe>
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	2b0c      	cmp	r3, #12
 8004626:	d104      	bne.n	8004632 <HAL_TIM_PWM_Start+0xe6>
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	2202      	movs	r2, #2
 800462c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8004630:	e00b      	b.n	800464a <HAL_TIM_PWM_Start+0xfe>
 8004632:	683b      	ldr	r3, [r7, #0]
 8004634:	2b10      	cmp	r3, #16
 8004636:	d104      	bne.n	8004642 <HAL_TIM_PWM_Start+0xf6>
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2202      	movs	r2, #2
 800463c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004640:	e003      	b.n	800464a <HAL_TIM_PWM_Start+0xfe>
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	2202      	movs	r2, #2
 8004646:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	681b      	ldr	r3, [r3, #0]
 800464e:	2201      	movs	r2, #1
 8004650:	6839      	ldr	r1, [r7, #0]
 8004652:	4618      	mov	r0, r3
 8004654:	f000 ff8e 	bl	8005574 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	4a3a      	ldr	r2, [pc, #232]	; (8004748 <HAL_TIM_PWM_Start+0x1fc>)
 800465e:	4293      	cmp	r3, r2
 8004660:	d018      	beq.n	8004694 <HAL_TIM_PWM_Start+0x148>
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	4a39      	ldr	r2, [pc, #228]	; (800474c <HAL_TIM_PWM_Start+0x200>)
 8004668:	4293      	cmp	r3, r2
 800466a:	d013      	beq.n	8004694 <HAL_TIM_PWM_Start+0x148>
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	4a37      	ldr	r2, [pc, #220]	; (8004750 <HAL_TIM_PWM_Start+0x204>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d00e      	beq.n	8004694 <HAL_TIM_PWM_Start+0x148>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4a36      	ldr	r2, [pc, #216]	; (8004754 <HAL_TIM_PWM_Start+0x208>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d009      	beq.n	8004694 <HAL_TIM_PWM_Start+0x148>
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	4a34      	ldr	r2, [pc, #208]	; (8004758 <HAL_TIM_PWM_Start+0x20c>)
 8004686:	4293      	cmp	r3, r2
 8004688:	d004      	beq.n	8004694 <HAL_TIM_PWM_Start+0x148>
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	4a33      	ldr	r2, [pc, #204]	; (800475c <HAL_TIM_PWM_Start+0x210>)
 8004690:	4293      	cmp	r3, r2
 8004692:	d101      	bne.n	8004698 <HAL_TIM_PWM_Start+0x14c>
 8004694:	2301      	movs	r3, #1
 8004696:	e000      	b.n	800469a <HAL_TIM_PWM_Start+0x14e>
 8004698:	2300      	movs	r3, #0
 800469a:	2b00      	cmp	r3, #0
 800469c:	d007      	beq.n	80046ae <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80046ac:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	4a25      	ldr	r2, [pc, #148]	; (8004748 <HAL_TIM_PWM_Start+0x1fc>)
 80046b4:	4293      	cmp	r3, r2
 80046b6:	d022      	beq.n	80046fe <HAL_TIM_PWM_Start+0x1b2>
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c0:	d01d      	beq.n	80046fe <HAL_TIM_PWM_Start+0x1b2>
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	681b      	ldr	r3, [r3, #0]
 80046c6:	4a26      	ldr	r2, [pc, #152]	; (8004760 <HAL_TIM_PWM_Start+0x214>)
 80046c8:	4293      	cmp	r3, r2
 80046ca:	d018      	beq.n	80046fe <HAL_TIM_PWM_Start+0x1b2>
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	4a24      	ldr	r2, [pc, #144]	; (8004764 <HAL_TIM_PWM_Start+0x218>)
 80046d2:	4293      	cmp	r3, r2
 80046d4:	d013      	beq.n	80046fe <HAL_TIM_PWM_Start+0x1b2>
 80046d6:	687b      	ldr	r3, [r7, #4]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	4a23      	ldr	r2, [pc, #140]	; (8004768 <HAL_TIM_PWM_Start+0x21c>)
 80046dc:	4293      	cmp	r3, r2
 80046de:	d00e      	beq.n	80046fe <HAL_TIM_PWM_Start+0x1b2>
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	4a19      	ldr	r2, [pc, #100]	; (800474c <HAL_TIM_PWM_Start+0x200>)
 80046e6:	4293      	cmp	r3, r2
 80046e8:	d009      	beq.n	80046fe <HAL_TIM_PWM_Start+0x1b2>
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4a18      	ldr	r2, [pc, #96]	; (8004750 <HAL_TIM_PWM_Start+0x204>)
 80046f0:	4293      	cmp	r3, r2
 80046f2:	d004      	beq.n	80046fe <HAL_TIM_PWM_Start+0x1b2>
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	4a18      	ldr	r2, [pc, #96]	; (800475c <HAL_TIM_PWM_Start+0x210>)
 80046fa:	4293      	cmp	r3, r2
 80046fc:	d115      	bne.n	800472a <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	689a      	ldr	r2, [r3, #8]
 8004704:	4b19      	ldr	r3, [pc, #100]	; (800476c <HAL_TIM_PWM_Start+0x220>)
 8004706:	4013      	ands	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	2b06      	cmp	r3, #6
 800470e:	d015      	beq.n	800473c <HAL_TIM_PWM_Start+0x1f0>
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004716:	d011      	beq.n	800473c <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	681a      	ldr	r2, [r3, #0]
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	681b      	ldr	r3, [r3, #0]
 8004722:	f042 0201 	orr.w	r2, r2, #1
 8004726:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004728:	e008      	b.n	800473c <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	f042 0201 	orr.w	r2, r2, #1
 8004738:	601a      	str	r2, [r3, #0]
 800473a:	e000      	b.n	800473e <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800473c:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800473e:	2300      	movs	r3, #0
}
 8004740:	4618      	mov	r0, r3
 8004742:	3710      	adds	r7, #16
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	40012c00 	.word	0x40012c00
 800474c:	40013400 	.word	0x40013400
 8004750:	40014000 	.word	0x40014000
 8004754:	40014400 	.word	0x40014400
 8004758:	40014800 	.word	0x40014800
 800475c:	40015000 	.word	0x40015000
 8004760:	40000400 	.word	0x40000400
 8004764:	40000800 	.word	0x40000800
 8004768:	40000c00 	.word	0x40000c00
 800476c:	00010007 	.word	0x00010007

08004770 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004770:	b580      	push	{r7, lr}
 8004772:	b082      	sub	sp, #8
 8004774:	af00      	add	r7, sp, #0
 8004776:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681b      	ldr	r3, [r3, #0]
 800477c:	691b      	ldr	r3, [r3, #16]
 800477e:	f003 0302 	and.w	r3, r3, #2
 8004782:	2b02      	cmp	r3, #2
 8004784:	d122      	bne.n	80047cc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	68db      	ldr	r3, [r3, #12]
 800478c:	f003 0302 	and.w	r3, r3, #2
 8004790:	2b02      	cmp	r3, #2
 8004792:	d11b      	bne.n	80047cc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f06f 0202 	mvn.w	r2, #2
 800479c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	2201      	movs	r2, #1
 80047a2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	699b      	ldr	r3, [r3, #24]
 80047aa:	f003 0303 	and.w	r3, r3, #3
 80047ae:	2b00      	cmp	r3, #0
 80047b0:	d003      	beq.n	80047ba <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80047b2:	6878      	ldr	r0, [r7, #4]
 80047b4:	f000 fa7a 	bl	8004cac <HAL_TIM_IC_CaptureCallback>
 80047b8:	e005      	b.n	80047c6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80047ba:	6878      	ldr	r0, [r7, #4]
 80047bc:	f000 fa6c 	bl	8004c98 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047c0:	6878      	ldr	r0, [r7, #4]
 80047c2:	f000 fa7d 	bl	8004cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	2200      	movs	r2, #0
 80047ca:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	691b      	ldr	r3, [r3, #16]
 80047d2:	f003 0304 	and.w	r3, r3, #4
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d122      	bne.n	8004820 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	68db      	ldr	r3, [r3, #12]
 80047e0:	f003 0304 	and.w	r3, r3, #4
 80047e4:	2b04      	cmp	r3, #4
 80047e6:	d11b      	bne.n	8004820 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f06f 0204 	mvn.w	r2, #4
 80047f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2202      	movs	r2, #2
 80047f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	681b      	ldr	r3, [r3, #0]
 80047fc:	699b      	ldr	r3, [r3, #24]
 80047fe:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004802:	2b00      	cmp	r3, #0
 8004804:	d003      	beq.n	800480e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004806:	6878      	ldr	r0, [r7, #4]
 8004808:	f000 fa50 	bl	8004cac <HAL_TIM_IC_CaptureCallback>
 800480c:	e005      	b.n	800481a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800480e:	6878      	ldr	r0, [r7, #4]
 8004810:	f000 fa42 	bl	8004c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004814:	6878      	ldr	r0, [r7, #4]
 8004816:	f000 fa53 	bl	8004cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	2200      	movs	r2, #0
 800481e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	691b      	ldr	r3, [r3, #16]
 8004826:	f003 0308 	and.w	r3, r3, #8
 800482a:	2b08      	cmp	r3, #8
 800482c:	d122      	bne.n	8004874 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	681b      	ldr	r3, [r3, #0]
 8004832:	68db      	ldr	r3, [r3, #12]
 8004834:	f003 0308 	and.w	r3, r3, #8
 8004838:	2b08      	cmp	r3, #8
 800483a:	d11b      	bne.n	8004874 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	681b      	ldr	r3, [r3, #0]
 8004840:	f06f 0208 	mvn.w	r2, #8
 8004844:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	2204      	movs	r2, #4
 800484a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	69db      	ldr	r3, [r3, #28]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b00      	cmp	r3, #0
 8004858:	d003      	beq.n	8004862 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800485a:	6878      	ldr	r0, [r7, #4]
 800485c:	f000 fa26 	bl	8004cac <HAL_TIM_IC_CaptureCallback>
 8004860:	e005      	b.n	800486e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fa18 	bl	8004c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004868:	6878      	ldr	r0, [r7, #4]
 800486a:	f000 fa29 	bl	8004cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	2200      	movs	r2, #0
 8004872:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691b      	ldr	r3, [r3, #16]
 800487a:	f003 0310 	and.w	r3, r3, #16
 800487e:	2b10      	cmp	r3, #16
 8004880:	d122      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	68db      	ldr	r3, [r3, #12]
 8004888:	f003 0310 	and.w	r3, r3, #16
 800488c:	2b10      	cmp	r3, #16
 800488e:	d11b      	bne.n	80048c8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f06f 0210 	mvn.w	r2, #16
 8004898:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2208      	movs	r2, #8
 800489e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	69db      	ldr	r3, [r3, #28]
 80048a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d003      	beq.n	80048b6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f000 f9fc 	bl	8004cac <HAL_TIM_IC_CaptureCallback>
 80048b4:	e005      	b.n	80048c2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f000 f9ee 	bl	8004c98 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80048bc:	6878      	ldr	r0, [r7, #4]
 80048be:	f000 f9ff 	bl	8004cc0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2200      	movs	r2, #0
 80048c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	691b      	ldr	r3, [r3, #16]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b01      	cmp	r3, #1
 80048d4:	d10e      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	68db      	ldr	r3, [r3, #12]
 80048dc:	f003 0301 	and.w	r3, r3, #1
 80048e0:	2b01      	cmp	r3, #1
 80048e2:	d107      	bne.n	80048f4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	f06f 0201 	mvn.w	r2, #1
 80048ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80048ee:	6878      	ldr	r0, [r7, #4]
 80048f0:	f7fc f98e 	bl	8000c10 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	681b      	ldr	r3, [r3, #0]
 80048f8:	691b      	ldr	r3, [r3, #16]
 80048fa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80048fe:	2b80      	cmp	r3, #128	; 0x80
 8004900:	d10e      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	68db      	ldr	r3, [r3, #12]
 8004908:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800490c:	2b80      	cmp	r3, #128	; 0x80
 800490e:	d107      	bne.n	8004920 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004918:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800491a:	6878      	ldr	r0, [r7, #4]
 800491c:	f001 f912 	bl	8005b44 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800492a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800492e:	d10e      	bne.n	800494e <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800493a:	2b80      	cmp	r3, #128	; 0x80
 800493c:	d107      	bne.n	800494e <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8004946:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8004948:	6878      	ldr	r0, [r7, #4]
 800494a:	f001 f905 	bl	8005b58 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	691b      	ldr	r3, [r3, #16]
 8004954:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004958:	2b40      	cmp	r3, #64	; 0x40
 800495a:	d10e      	bne.n	800497a <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	681b      	ldr	r3, [r3, #0]
 8004960:	68db      	ldr	r3, [r3, #12]
 8004962:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004966:	2b40      	cmp	r3, #64	; 0x40
 8004968:	d107      	bne.n	800497a <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004972:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004974:	6878      	ldr	r0, [r7, #4]
 8004976:	f000 f9ad 	bl	8004cd4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	681b      	ldr	r3, [r3, #0]
 800497e:	691b      	ldr	r3, [r3, #16]
 8004980:	f003 0320 	and.w	r3, r3, #32
 8004984:	2b20      	cmp	r3, #32
 8004986:	d10e      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	681b      	ldr	r3, [r3, #0]
 800498c:	68db      	ldr	r3, [r3, #12]
 800498e:	f003 0320 	and.w	r3, r3, #32
 8004992:	2b20      	cmp	r3, #32
 8004994:	d107      	bne.n	80049a6 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	f06f 0220 	mvn.w	r2, #32
 800499e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80049a0:	6878      	ldr	r0, [r7, #4]
 80049a2:	f001 f8c5 	bl	8005b30 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	681b      	ldr	r3, [r3, #0]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049b0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049b4:	d10f      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	68db      	ldr	r3, [r3, #12]
 80049bc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049c0:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80049c4:	d107      	bne.n	80049d6 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 80049ce:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 80049d0:	6878      	ldr	r0, [r7, #4]
 80049d2:	f001 f8cb 	bl	8005b6c <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	691b      	ldr	r3, [r3, #16]
 80049dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049e0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049e4:	d10f      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	681b      	ldr	r3, [r3, #0]
 80049ea:	68db      	ldr	r3, [r3, #12]
 80049ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80049f0:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80049f4:	d107      	bne.n	8004a06 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 80049fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8004a00:	6878      	ldr	r0, [r7, #4]
 8004a02:	f001 f8bd 	bl	8005b80 <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	691b      	ldr	r3, [r3, #16]
 8004a0c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a10:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a14:	d10f      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	68db      	ldr	r3, [r3, #12]
 8004a1c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004a20:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004a24:	d107      	bne.n	8004a36 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 8004a2e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 8004a30:	6878      	ldr	r0, [r7, #4]
 8004a32:	f001 f8af 	bl	8005b94 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	691b      	ldr	r3, [r3, #16]
 8004a3c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a40:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a44:	d10f      	bne.n	8004a66 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	68db      	ldr	r3, [r3, #12]
 8004a4c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004a50:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8004a54:	d107      	bne.n	8004a66 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 8004a5e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 8004a60:	6878      	ldr	r0, [r7, #4]
 8004a62:	f001 f8a1 	bl	8005ba8 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004a66:	bf00      	nop
 8004a68:	3708      	adds	r7, #8
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bd80      	pop	{r7, pc}
	...

08004a70 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004a70:	b580      	push	{r7, lr}
 8004a72:	b086      	sub	sp, #24
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	60f8      	str	r0, [r7, #12]
 8004a78:	60b9      	str	r1, [r7, #8]
 8004a7a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004a86:	2b01      	cmp	r3, #1
 8004a88:	d101      	bne.n	8004a8e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004a8a:	2302      	movs	r3, #2
 8004a8c:	e0ff      	b.n	8004c8e <HAL_TIM_PWM_ConfigChannel+0x21e>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	2201      	movs	r2, #1
 8004a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	2b14      	cmp	r3, #20
 8004a9a:	f200 80f0 	bhi.w	8004c7e <HAL_TIM_PWM_ConfigChannel+0x20e>
 8004a9e:	a201      	add	r2, pc, #4	; (adr r2, 8004aa4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004aa0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004aa4:	08004af9 	.word	0x08004af9
 8004aa8:	08004c7f 	.word	0x08004c7f
 8004aac:	08004c7f 	.word	0x08004c7f
 8004ab0:	08004c7f 	.word	0x08004c7f
 8004ab4:	08004b39 	.word	0x08004b39
 8004ab8:	08004c7f 	.word	0x08004c7f
 8004abc:	08004c7f 	.word	0x08004c7f
 8004ac0:	08004c7f 	.word	0x08004c7f
 8004ac4:	08004b7b 	.word	0x08004b7b
 8004ac8:	08004c7f 	.word	0x08004c7f
 8004acc:	08004c7f 	.word	0x08004c7f
 8004ad0:	08004c7f 	.word	0x08004c7f
 8004ad4:	08004bbb 	.word	0x08004bbb
 8004ad8:	08004c7f 	.word	0x08004c7f
 8004adc:	08004c7f 	.word	0x08004c7f
 8004ae0:	08004c7f 	.word	0x08004c7f
 8004ae4:	08004bfd 	.word	0x08004bfd
 8004ae8:	08004c7f 	.word	0x08004c7f
 8004aec:	08004c7f 	.word	0x08004c7f
 8004af0:	08004c7f 	.word	0x08004c7f
 8004af4:	08004c3d 	.word	0x08004c3d
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	68b9      	ldr	r1, [r7, #8]
 8004afe:	4618      	mov	r0, r3
 8004b00:	f000 f99a 	bl	8004e38 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	699a      	ldr	r2, [r3, #24]
 8004b0a:	68fb      	ldr	r3, [r7, #12]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	f042 0208 	orr.w	r2, r2, #8
 8004b12:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004b14:	68fb      	ldr	r3, [r7, #12]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	699a      	ldr	r2, [r3, #24]
 8004b1a:	68fb      	ldr	r3, [r7, #12]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	f022 0204 	bic.w	r2, r2, #4
 8004b22:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	6999      	ldr	r1, [r3, #24]
 8004b2a:	68bb      	ldr	r3, [r7, #8]
 8004b2c:	691a      	ldr	r2, [r3, #16]
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	430a      	orrs	r2, r1
 8004b34:	619a      	str	r2, [r3, #24]
      break;
 8004b36:	e0a5      	b.n	8004c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	68b9      	ldr	r1, [r7, #8]
 8004b3e:	4618      	mov	r0, r3
 8004b40:	f000 fa14 	bl	8004f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004b44:	68fb      	ldr	r3, [r7, #12]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	699a      	ldr	r2, [r3, #24]
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004b52:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	699a      	ldr	r2, [r3, #24]
 8004b5a:	68fb      	ldr	r3, [r7, #12]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b62:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	681b      	ldr	r3, [r3, #0]
 8004b68:	6999      	ldr	r1, [r3, #24]
 8004b6a:	68bb      	ldr	r3, [r7, #8]
 8004b6c:	691b      	ldr	r3, [r3, #16]
 8004b6e:	021a      	lsls	r2, r3, #8
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	430a      	orrs	r2, r1
 8004b76:	619a      	str	r2, [r3, #24]
      break;
 8004b78:	e084      	b.n	8004c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	681b      	ldr	r3, [r3, #0]
 8004b7e:	68b9      	ldr	r1, [r7, #8]
 8004b80:	4618      	mov	r0, r3
 8004b82:	f000 fa87 	bl	8005094 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	69da      	ldr	r2, [r3, #28]
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f042 0208 	orr.w	r2, r2, #8
 8004b94:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	69da      	ldr	r2, [r3, #28]
 8004b9c:	68fb      	ldr	r3, [r7, #12]
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	f022 0204 	bic.w	r2, r2, #4
 8004ba4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	69d9      	ldr	r1, [r3, #28]
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	691a      	ldr	r2, [r3, #16]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	430a      	orrs	r2, r1
 8004bb6:	61da      	str	r2, [r3, #28]
      break;
 8004bb8:	e064      	b.n	8004c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	68b9      	ldr	r1, [r7, #8]
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f000 faf9 	bl	80051b8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	69da      	ldr	r2, [r3, #28]
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	681b      	ldr	r3, [r3, #0]
 8004bd0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004bd4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	681b      	ldr	r3, [r3, #0]
 8004bda:	69da      	ldr	r2, [r3, #28]
 8004bdc:	68fb      	ldr	r3, [r7, #12]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69d9      	ldr	r1, [r3, #28]
 8004bec:	68bb      	ldr	r3, [r7, #8]
 8004bee:	691b      	ldr	r3, [r3, #16]
 8004bf0:	021a      	lsls	r2, r3, #8
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	430a      	orrs	r2, r1
 8004bf8:	61da      	str	r2, [r3, #28]
      break;
 8004bfa:	e043      	b.n	8004c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	68b9      	ldr	r1, [r7, #8]
 8004c02:	4618      	mov	r0, r3
 8004c04:	f000 fb6c 	bl	80052e0 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	681b      	ldr	r3, [r3, #0]
 8004c12:	f042 0208 	orr.w	r2, r2, #8
 8004c16:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	f022 0204 	bic.w	r2, r2, #4
 8004c26:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c2e:	68bb      	ldr	r3, [r7, #8]
 8004c30:	691a      	ldr	r2, [r3, #16]
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	681b      	ldr	r3, [r3, #0]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c3a:	e023      	b.n	8004c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	68b9      	ldr	r1, [r7, #8]
 8004c42:	4618      	mov	r0, r3
 8004c44:	f000 fbb6 	bl	80053b4 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 8004c48:	68fb      	ldr	r3, [r7, #12]
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004c56:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8004c5e:	68fb      	ldr	r3, [r7, #12]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c66:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 8004c68:	68fb      	ldr	r3, [r7, #12]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	6d19      	ldr	r1, [r3, #80]	; 0x50
 8004c6e:	68bb      	ldr	r3, [r7, #8]
 8004c70:	691b      	ldr	r3, [r3, #16]
 8004c72:	021a      	lsls	r2, r3, #8
 8004c74:	68fb      	ldr	r3, [r7, #12]
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	430a      	orrs	r2, r1
 8004c7a:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 8004c7c:	e002      	b.n	8004c84 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 8004c7e:	2301      	movs	r3, #1
 8004c80:	75fb      	strb	r3, [r7, #23]
      break;
 8004c82:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c8c:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c8e:	4618      	mov	r0, r3
 8004c90:	3718      	adds	r7, #24
 8004c92:	46bd      	mov	sp, r7
 8004c94:	bd80      	pop	{r7, pc}
 8004c96:	bf00      	nop

08004c98 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004c98:	b480      	push	{r7}
 8004c9a:	b083      	sub	sp, #12
 8004c9c:	af00      	add	r7, sp, #0
 8004c9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004ca0:	bf00      	nop
 8004ca2:	370c      	adds	r7, #12
 8004ca4:	46bd      	mov	sp, r7
 8004ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004caa:	4770      	bx	lr

08004cac <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004cac:	b480      	push	{r7}
 8004cae:	b083      	sub	sp, #12
 8004cb0:	af00      	add	r7, sp, #0
 8004cb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004cc8:	bf00      	nop
 8004cca:	370c      	adds	r7, #12
 8004ccc:	46bd      	mov	sp, r7
 8004cce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd2:	4770      	bx	lr

08004cd4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004cd4:	b480      	push	{r7}
 8004cd6:	b083      	sub	sp, #12
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004cdc:	bf00      	nop
 8004cde:	370c      	adds	r7, #12
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce6:	4770      	bx	lr

08004ce8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004ce8:	b480      	push	{r7}
 8004cea:	b085      	sub	sp, #20
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	6078      	str	r0, [r7, #4]
 8004cf0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	4a46      	ldr	r2, [pc, #280]	; (8004e14 <TIM_Base_SetConfig+0x12c>)
 8004cfc:	4293      	cmp	r3, r2
 8004cfe:	d017      	beq.n	8004d30 <TIM_Base_SetConfig+0x48>
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d06:	d013      	beq.n	8004d30 <TIM_Base_SetConfig+0x48>
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	4a43      	ldr	r2, [pc, #268]	; (8004e18 <TIM_Base_SetConfig+0x130>)
 8004d0c:	4293      	cmp	r3, r2
 8004d0e:	d00f      	beq.n	8004d30 <TIM_Base_SetConfig+0x48>
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	4a42      	ldr	r2, [pc, #264]	; (8004e1c <TIM_Base_SetConfig+0x134>)
 8004d14:	4293      	cmp	r3, r2
 8004d16:	d00b      	beq.n	8004d30 <TIM_Base_SetConfig+0x48>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	4a41      	ldr	r2, [pc, #260]	; (8004e20 <TIM_Base_SetConfig+0x138>)
 8004d1c:	4293      	cmp	r3, r2
 8004d1e:	d007      	beq.n	8004d30 <TIM_Base_SetConfig+0x48>
 8004d20:	687b      	ldr	r3, [r7, #4]
 8004d22:	4a40      	ldr	r2, [pc, #256]	; (8004e24 <TIM_Base_SetConfig+0x13c>)
 8004d24:	4293      	cmp	r3, r2
 8004d26:	d003      	beq.n	8004d30 <TIM_Base_SetConfig+0x48>
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	4a3f      	ldr	r2, [pc, #252]	; (8004e28 <TIM_Base_SetConfig+0x140>)
 8004d2c:	4293      	cmp	r3, r2
 8004d2e:	d108      	bne.n	8004d42 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004d30:	68fb      	ldr	r3, [r7, #12]
 8004d32:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004d36:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004d38:	683b      	ldr	r3, [r7, #0]
 8004d3a:	685b      	ldr	r3, [r3, #4]
 8004d3c:	68fa      	ldr	r2, [r7, #12]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	4a33      	ldr	r2, [pc, #204]	; (8004e14 <TIM_Base_SetConfig+0x12c>)
 8004d46:	4293      	cmp	r3, r2
 8004d48:	d023      	beq.n	8004d92 <TIM_Base_SetConfig+0xaa>
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004d50:	d01f      	beq.n	8004d92 <TIM_Base_SetConfig+0xaa>
 8004d52:	687b      	ldr	r3, [r7, #4]
 8004d54:	4a30      	ldr	r2, [pc, #192]	; (8004e18 <TIM_Base_SetConfig+0x130>)
 8004d56:	4293      	cmp	r3, r2
 8004d58:	d01b      	beq.n	8004d92 <TIM_Base_SetConfig+0xaa>
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	4a2f      	ldr	r2, [pc, #188]	; (8004e1c <TIM_Base_SetConfig+0x134>)
 8004d5e:	4293      	cmp	r3, r2
 8004d60:	d017      	beq.n	8004d92 <TIM_Base_SetConfig+0xaa>
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	4a2e      	ldr	r2, [pc, #184]	; (8004e20 <TIM_Base_SetConfig+0x138>)
 8004d66:	4293      	cmp	r3, r2
 8004d68:	d013      	beq.n	8004d92 <TIM_Base_SetConfig+0xaa>
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	4a2d      	ldr	r2, [pc, #180]	; (8004e24 <TIM_Base_SetConfig+0x13c>)
 8004d6e:	4293      	cmp	r3, r2
 8004d70:	d00f      	beq.n	8004d92 <TIM_Base_SetConfig+0xaa>
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	4a2d      	ldr	r2, [pc, #180]	; (8004e2c <TIM_Base_SetConfig+0x144>)
 8004d76:	4293      	cmp	r3, r2
 8004d78:	d00b      	beq.n	8004d92 <TIM_Base_SetConfig+0xaa>
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	4a2c      	ldr	r2, [pc, #176]	; (8004e30 <TIM_Base_SetConfig+0x148>)
 8004d7e:	4293      	cmp	r3, r2
 8004d80:	d007      	beq.n	8004d92 <TIM_Base_SetConfig+0xaa>
 8004d82:	687b      	ldr	r3, [r7, #4]
 8004d84:	4a2b      	ldr	r2, [pc, #172]	; (8004e34 <TIM_Base_SetConfig+0x14c>)
 8004d86:	4293      	cmp	r3, r2
 8004d88:	d003      	beq.n	8004d92 <TIM_Base_SetConfig+0xaa>
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	4a26      	ldr	r2, [pc, #152]	; (8004e28 <TIM_Base_SetConfig+0x140>)
 8004d8e:	4293      	cmp	r3, r2
 8004d90:	d108      	bne.n	8004da4 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004d92:	68fb      	ldr	r3, [r7, #12]
 8004d94:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d98:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004d9a:	683b      	ldr	r3, [r7, #0]
 8004d9c:	68db      	ldr	r3, [r3, #12]
 8004d9e:	68fa      	ldr	r2, [r7, #12]
 8004da0:	4313      	orrs	r3, r2
 8004da2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004da4:	68fb      	ldr	r3, [r7, #12]
 8004da6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004daa:	683b      	ldr	r3, [r7, #0]
 8004dac:	695b      	ldr	r3, [r3, #20]
 8004dae:	4313      	orrs	r3, r2
 8004db0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004db2:	687b      	ldr	r3, [r7, #4]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004db8:	683b      	ldr	r3, [r7, #0]
 8004dba:	689a      	ldr	r2, [r3, #8]
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004dc0:	683b      	ldr	r3, [r7, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	4a12      	ldr	r2, [pc, #72]	; (8004e14 <TIM_Base_SetConfig+0x12c>)
 8004dcc:	4293      	cmp	r3, r2
 8004dce:	d013      	beq.n	8004df8 <TIM_Base_SetConfig+0x110>
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	4a14      	ldr	r2, [pc, #80]	; (8004e24 <TIM_Base_SetConfig+0x13c>)
 8004dd4:	4293      	cmp	r3, r2
 8004dd6:	d00f      	beq.n	8004df8 <TIM_Base_SetConfig+0x110>
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	4a14      	ldr	r2, [pc, #80]	; (8004e2c <TIM_Base_SetConfig+0x144>)
 8004ddc:	4293      	cmp	r3, r2
 8004dde:	d00b      	beq.n	8004df8 <TIM_Base_SetConfig+0x110>
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	4a13      	ldr	r2, [pc, #76]	; (8004e30 <TIM_Base_SetConfig+0x148>)
 8004de4:	4293      	cmp	r3, r2
 8004de6:	d007      	beq.n	8004df8 <TIM_Base_SetConfig+0x110>
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	4a12      	ldr	r2, [pc, #72]	; (8004e34 <TIM_Base_SetConfig+0x14c>)
 8004dec:	4293      	cmp	r3, r2
 8004dee:	d003      	beq.n	8004df8 <TIM_Base_SetConfig+0x110>
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	4a0d      	ldr	r2, [pc, #52]	; (8004e28 <TIM_Base_SetConfig+0x140>)
 8004df4:	4293      	cmp	r3, r2
 8004df6:	d103      	bne.n	8004e00 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004df8:	683b      	ldr	r3, [r7, #0]
 8004dfa:	691a      	ldr	r2, [r3, #16]
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	615a      	str	r2, [r3, #20]
}
 8004e06:	bf00      	nop
 8004e08:	3714      	adds	r7, #20
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	40012c00 	.word	0x40012c00
 8004e18:	40000400 	.word	0x40000400
 8004e1c:	40000800 	.word	0x40000800
 8004e20:	40000c00 	.word	0x40000c00
 8004e24:	40013400 	.word	0x40013400
 8004e28:	40015000 	.word	0x40015000
 8004e2c:	40014000 	.word	0x40014000
 8004e30:	40014400 	.word	0x40014400
 8004e34:	40014800 	.word	0x40014800

08004e38 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004e38:	b480      	push	{r7}
 8004e3a:	b087      	sub	sp, #28
 8004e3c:	af00      	add	r7, sp, #0
 8004e3e:	6078      	str	r0, [r7, #4]
 8004e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	6a1b      	ldr	r3, [r3, #32]
 8004e46:	f023 0201 	bic.w	r2, r3, #1
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004e4e:	687b      	ldr	r3, [r7, #4]
 8004e50:	6a1b      	ldr	r3, [r3, #32]
 8004e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	685b      	ldr	r3, [r3, #4]
 8004e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004e60:	68fb      	ldr	r3, [r7, #12]
 8004e62:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e66:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004e6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	f023 0303 	bic.w	r3, r3, #3
 8004e72:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004e74:	683b      	ldr	r3, [r7, #0]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	68fa      	ldr	r2, [r7, #12]
 8004e7a:	4313      	orrs	r3, r2
 8004e7c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004e7e:	697b      	ldr	r3, [r7, #20]
 8004e80:	f023 0302 	bic.w	r3, r3, #2
 8004e84:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004e86:	683b      	ldr	r3, [r7, #0]
 8004e88:	689b      	ldr	r3, [r3, #8]
 8004e8a:	697a      	ldr	r2, [r7, #20]
 8004e8c:	4313      	orrs	r3, r2
 8004e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	4a30      	ldr	r2, [pc, #192]	; (8004f54 <TIM_OC1_SetConfig+0x11c>)
 8004e94:	4293      	cmp	r3, r2
 8004e96:	d013      	beq.n	8004ec0 <TIM_OC1_SetConfig+0x88>
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	4a2f      	ldr	r2, [pc, #188]	; (8004f58 <TIM_OC1_SetConfig+0x120>)
 8004e9c:	4293      	cmp	r3, r2
 8004e9e:	d00f      	beq.n	8004ec0 <TIM_OC1_SetConfig+0x88>
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	4a2e      	ldr	r2, [pc, #184]	; (8004f5c <TIM_OC1_SetConfig+0x124>)
 8004ea4:	4293      	cmp	r3, r2
 8004ea6:	d00b      	beq.n	8004ec0 <TIM_OC1_SetConfig+0x88>
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	4a2d      	ldr	r2, [pc, #180]	; (8004f60 <TIM_OC1_SetConfig+0x128>)
 8004eac:	4293      	cmp	r3, r2
 8004eae:	d007      	beq.n	8004ec0 <TIM_OC1_SetConfig+0x88>
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	4a2c      	ldr	r2, [pc, #176]	; (8004f64 <TIM_OC1_SetConfig+0x12c>)
 8004eb4:	4293      	cmp	r3, r2
 8004eb6:	d003      	beq.n	8004ec0 <TIM_OC1_SetConfig+0x88>
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	4a2b      	ldr	r2, [pc, #172]	; (8004f68 <TIM_OC1_SetConfig+0x130>)
 8004ebc:	4293      	cmp	r3, r2
 8004ebe:	d10c      	bne.n	8004eda <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004ec0:	697b      	ldr	r3, [r7, #20]
 8004ec2:	f023 0308 	bic.w	r3, r3, #8
 8004ec6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	68db      	ldr	r3, [r3, #12]
 8004ecc:	697a      	ldr	r2, [r7, #20]
 8004ece:	4313      	orrs	r3, r2
 8004ed0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	f023 0304 	bic.w	r3, r3, #4
 8004ed8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004eda:	687b      	ldr	r3, [r7, #4]
 8004edc:	4a1d      	ldr	r2, [pc, #116]	; (8004f54 <TIM_OC1_SetConfig+0x11c>)
 8004ede:	4293      	cmp	r3, r2
 8004ee0:	d013      	beq.n	8004f0a <TIM_OC1_SetConfig+0xd2>
 8004ee2:	687b      	ldr	r3, [r7, #4]
 8004ee4:	4a1c      	ldr	r2, [pc, #112]	; (8004f58 <TIM_OC1_SetConfig+0x120>)
 8004ee6:	4293      	cmp	r3, r2
 8004ee8:	d00f      	beq.n	8004f0a <TIM_OC1_SetConfig+0xd2>
 8004eea:	687b      	ldr	r3, [r7, #4]
 8004eec:	4a1b      	ldr	r2, [pc, #108]	; (8004f5c <TIM_OC1_SetConfig+0x124>)
 8004eee:	4293      	cmp	r3, r2
 8004ef0:	d00b      	beq.n	8004f0a <TIM_OC1_SetConfig+0xd2>
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	4a1a      	ldr	r2, [pc, #104]	; (8004f60 <TIM_OC1_SetConfig+0x128>)
 8004ef6:	4293      	cmp	r3, r2
 8004ef8:	d007      	beq.n	8004f0a <TIM_OC1_SetConfig+0xd2>
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	4a19      	ldr	r2, [pc, #100]	; (8004f64 <TIM_OC1_SetConfig+0x12c>)
 8004efe:	4293      	cmp	r3, r2
 8004f00:	d003      	beq.n	8004f0a <TIM_OC1_SetConfig+0xd2>
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	4a18      	ldr	r2, [pc, #96]	; (8004f68 <TIM_OC1_SetConfig+0x130>)
 8004f06:	4293      	cmp	r3, r2
 8004f08:	d111      	bne.n	8004f2e <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004f0a:	693b      	ldr	r3, [r7, #16]
 8004f0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004f10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004f12:	693b      	ldr	r3, [r7, #16]
 8004f14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004f18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	695b      	ldr	r3, [r3, #20]
 8004f1e:	693a      	ldr	r2, [r7, #16]
 8004f20:	4313      	orrs	r3, r2
 8004f22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004f24:	683b      	ldr	r3, [r7, #0]
 8004f26:	699b      	ldr	r3, [r3, #24]
 8004f28:	693a      	ldr	r2, [r7, #16]
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	693a      	ldr	r2, [r7, #16]
 8004f32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	68fa      	ldr	r2, [r7, #12]
 8004f38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	685a      	ldr	r2, [r3, #4]
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	697a      	ldr	r2, [r7, #20]
 8004f46:	621a      	str	r2, [r3, #32]
}
 8004f48:	bf00      	nop
 8004f4a:	371c      	adds	r7, #28
 8004f4c:	46bd      	mov	sp, r7
 8004f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f52:	4770      	bx	lr
 8004f54:	40012c00 	.word	0x40012c00
 8004f58:	40013400 	.word	0x40013400
 8004f5c:	40014000 	.word	0x40014000
 8004f60:	40014400 	.word	0x40014400
 8004f64:	40014800 	.word	0x40014800
 8004f68:	40015000 	.word	0x40015000

08004f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004f6c:	b480      	push	{r7}
 8004f6e:	b087      	sub	sp, #28
 8004f70:	af00      	add	r7, sp, #0
 8004f72:	6078      	str	r0, [r7, #4]
 8004f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	6a1b      	ldr	r3, [r3, #32]
 8004f7a:	f023 0210 	bic.w	r2, r3, #16
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	685b      	ldr	r3, [r3, #4]
 8004f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8004f9a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004f9e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004fa6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	021b      	lsls	r3, r3, #8
 8004fae:	68fa      	ldr	r2, [r7, #12]
 8004fb0:	4313      	orrs	r3, r2
 8004fb2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004fb4:	697b      	ldr	r3, [r7, #20]
 8004fb6:	f023 0320 	bic.w	r3, r3, #32
 8004fba:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004fbc:	683b      	ldr	r3, [r7, #0]
 8004fbe:	689b      	ldr	r3, [r3, #8]
 8004fc0:	011b      	lsls	r3, r3, #4
 8004fc2:	697a      	ldr	r2, [r7, #20]
 8004fc4:	4313      	orrs	r3, r2
 8004fc6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	4a2c      	ldr	r2, [pc, #176]	; (800507c <TIM_OC2_SetConfig+0x110>)
 8004fcc:	4293      	cmp	r3, r2
 8004fce:	d007      	beq.n	8004fe0 <TIM_OC2_SetConfig+0x74>
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	4a2b      	ldr	r2, [pc, #172]	; (8005080 <TIM_OC2_SetConfig+0x114>)
 8004fd4:	4293      	cmp	r3, r2
 8004fd6:	d003      	beq.n	8004fe0 <TIM_OC2_SetConfig+0x74>
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	4a2a      	ldr	r2, [pc, #168]	; (8005084 <TIM_OC2_SetConfig+0x118>)
 8004fdc:	4293      	cmp	r3, r2
 8004fde:	d10d      	bne.n	8004ffc <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004fe0:	697b      	ldr	r3, [r7, #20]
 8004fe2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004fe6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	68db      	ldr	r3, [r3, #12]
 8004fec:	011b      	lsls	r3, r3, #4
 8004fee:	697a      	ldr	r2, [r7, #20]
 8004ff0:	4313      	orrs	r3, r2
 8004ff2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004ff4:	697b      	ldr	r3, [r7, #20]
 8004ff6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ffa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	4a1f      	ldr	r2, [pc, #124]	; (800507c <TIM_OC2_SetConfig+0x110>)
 8005000:	4293      	cmp	r3, r2
 8005002:	d013      	beq.n	800502c <TIM_OC2_SetConfig+0xc0>
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	4a1e      	ldr	r2, [pc, #120]	; (8005080 <TIM_OC2_SetConfig+0x114>)
 8005008:	4293      	cmp	r3, r2
 800500a:	d00f      	beq.n	800502c <TIM_OC2_SetConfig+0xc0>
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	4a1e      	ldr	r2, [pc, #120]	; (8005088 <TIM_OC2_SetConfig+0x11c>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00b      	beq.n	800502c <TIM_OC2_SetConfig+0xc0>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	4a1d      	ldr	r2, [pc, #116]	; (800508c <TIM_OC2_SetConfig+0x120>)
 8005018:	4293      	cmp	r3, r2
 800501a:	d007      	beq.n	800502c <TIM_OC2_SetConfig+0xc0>
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	4a1c      	ldr	r2, [pc, #112]	; (8005090 <TIM_OC2_SetConfig+0x124>)
 8005020:	4293      	cmp	r3, r2
 8005022:	d003      	beq.n	800502c <TIM_OC2_SetConfig+0xc0>
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	4a17      	ldr	r2, [pc, #92]	; (8005084 <TIM_OC2_SetConfig+0x118>)
 8005028:	4293      	cmp	r3, r2
 800502a:	d113      	bne.n	8005054 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005032:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005034:	693b      	ldr	r3, [r7, #16]
 8005036:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800503a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800503c:	683b      	ldr	r3, [r7, #0]
 800503e:	695b      	ldr	r3, [r3, #20]
 8005040:	009b      	lsls	r3, r3, #2
 8005042:	693a      	ldr	r2, [r7, #16]
 8005044:	4313      	orrs	r3, r2
 8005046:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005048:	683b      	ldr	r3, [r7, #0]
 800504a:	699b      	ldr	r3, [r3, #24]
 800504c:	009b      	lsls	r3, r3, #2
 800504e:	693a      	ldr	r2, [r7, #16]
 8005050:	4313      	orrs	r3, r2
 8005052:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	693a      	ldr	r2, [r7, #16]
 8005058:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800505a:	687b      	ldr	r3, [r7, #4]
 800505c:	68fa      	ldr	r2, [r7, #12]
 800505e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	685a      	ldr	r2, [r3, #4]
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005068:	687b      	ldr	r3, [r7, #4]
 800506a:	697a      	ldr	r2, [r7, #20]
 800506c:	621a      	str	r2, [r3, #32]
}
 800506e:	bf00      	nop
 8005070:	371c      	adds	r7, #28
 8005072:	46bd      	mov	sp, r7
 8005074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005078:	4770      	bx	lr
 800507a:	bf00      	nop
 800507c:	40012c00 	.word	0x40012c00
 8005080:	40013400 	.word	0x40013400
 8005084:	40015000 	.word	0x40015000
 8005088:	40014000 	.word	0x40014000
 800508c:	40014400 	.word	0x40014400
 8005090:	40014800 	.word	0x40014800

08005094 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005094:	b480      	push	{r7}
 8005096:	b087      	sub	sp, #28
 8005098:	af00      	add	r7, sp, #0
 800509a:	6078      	str	r0, [r7, #4]
 800509c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	6a1b      	ldr	r3, [r3, #32]
 80050a2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a1b      	ldr	r3, [r3, #32]
 80050ae:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	69db      	ldr	r3, [r3, #28]
 80050ba:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80050bc:	68fb      	ldr	r3, [r7, #12]
 80050be:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050c6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80050c8:	68fb      	ldr	r3, [r7, #12]
 80050ca:	f023 0303 	bic.w	r3, r3, #3
 80050ce:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050d0:	683b      	ldr	r3, [r7, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68fa      	ldr	r2, [r7, #12]
 80050d6:	4313      	orrs	r3, r2
 80050d8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80050e0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80050e2:	683b      	ldr	r3, [r7, #0]
 80050e4:	689b      	ldr	r3, [r3, #8]
 80050e6:	021b      	lsls	r3, r3, #8
 80050e8:	697a      	ldr	r2, [r7, #20]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	4a2b      	ldr	r2, [pc, #172]	; (80051a0 <TIM_OC3_SetConfig+0x10c>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d007      	beq.n	8005106 <TIM_OC3_SetConfig+0x72>
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	4a2a      	ldr	r2, [pc, #168]	; (80051a4 <TIM_OC3_SetConfig+0x110>)
 80050fa:	4293      	cmp	r3, r2
 80050fc:	d003      	beq.n	8005106 <TIM_OC3_SetConfig+0x72>
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	4a29      	ldr	r2, [pc, #164]	; (80051a8 <TIM_OC3_SetConfig+0x114>)
 8005102:	4293      	cmp	r3, r2
 8005104:	d10d      	bne.n	8005122 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800510c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	68db      	ldr	r3, [r3, #12]
 8005112:	021b      	lsls	r3, r3, #8
 8005114:	697a      	ldr	r2, [r7, #20]
 8005116:	4313      	orrs	r3, r2
 8005118:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800511a:	697b      	ldr	r3, [r7, #20]
 800511c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005120:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	4a1e      	ldr	r2, [pc, #120]	; (80051a0 <TIM_OC3_SetConfig+0x10c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d013      	beq.n	8005152 <TIM_OC3_SetConfig+0xbe>
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	4a1d      	ldr	r2, [pc, #116]	; (80051a4 <TIM_OC3_SetConfig+0x110>)
 800512e:	4293      	cmp	r3, r2
 8005130:	d00f      	beq.n	8005152 <TIM_OC3_SetConfig+0xbe>
 8005132:	687b      	ldr	r3, [r7, #4]
 8005134:	4a1d      	ldr	r2, [pc, #116]	; (80051ac <TIM_OC3_SetConfig+0x118>)
 8005136:	4293      	cmp	r3, r2
 8005138:	d00b      	beq.n	8005152 <TIM_OC3_SetConfig+0xbe>
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a1c      	ldr	r2, [pc, #112]	; (80051b0 <TIM_OC3_SetConfig+0x11c>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d007      	beq.n	8005152 <TIM_OC3_SetConfig+0xbe>
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	4a1b      	ldr	r2, [pc, #108]	; (80051b4 <TIM_OC3_SetConfig+0x120>)
 8005146:	4293      	cmp	r3, r2
 8005148:	d003      	beq.n	8005152 <TIM_OC3_SetConfig+0xbe>
 800514a:	687b      	ldr	r3, [r7, #4]
 800514c:	4a16      	ldr	r2, [pc, #88]	; (80051a8 <TIM_OC3_SetConfig+0x114>)
 800514e:	4293      	cmp	r3, r2
 8005150:	d113      	bne.n	800517a <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005152:	693b      	ldr	r3, [r7, #16]
 8005154:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005158:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800515a:	693b      	ldr	r3, [r7, #16]
 800515c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005160:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005162:	683b      	ldr	r3, [r7, #0]
 8005164:	695b      	ldr	r3, [r3, #20]
 8005166:	011b      	lsls	r3, r3, #4
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	4313      	orrs	r3, r2
 800516c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800516e:	683b      	ldr	r3, [r7, #0]
 8005170:	699b      	ldr	r3, [r3, #24]
 8005172:	011b      	lsls	r3, r3, #4
 8005174:	693a      	ldr	r2, [r7, #16]
 8005176:	4313      	orrs	r3, r2
 8005178:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	693a      	ldr	r2, [r7, #16]
 800517e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	68fa      	ldr	r2, [r7, #12]
 8005184:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	685a      	ldr	r2, [r3, #4]
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	697a      	ldr	r2, [r7, #20]
 8005192:	621a      	str	r2, [r3, #32]
}
 8005194:	bf00      	nop
 8005196:	371c      	adds	r7, #28
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr
 80051a0:	40012c00 	.word	0x40012c00
 80051a4:	40013400 	.word	0x40013400
 80051a8:	40015000 	.word	0x40015000
 80051ac:	40014000 	.word	0x40014000
 80051b0:	40014400 	.word	0x40014400
 80051b4:	40014800 	.word	0x40014800

080051b8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b087      	sub	sp, #28
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
 80051c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	6a1b      	ldr	r3, [r3, #32]
 80051c6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a1b      	ldr	r3, [r3, #32]
 80051d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	685b      	ldr	r3, [r3, #4]
 80051d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80051da:	687b      	ldr	r3, [r7, #4]
 80051dc:	69db      	ldr	r3, [r3, #28]
 80051de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80051e6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051f2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051f4:	683b      	ldr	r3, [r7, #0]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	021b      	lsls	r3, r3, #8
 80051fa:	68fa      	ldr	r2, [r7, #12]
 80051fc:	4313      	orrs	r3, r2
 80051fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005200:	697b      	ldr	r3, [r7, #20]
 8005202:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005206:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005208:	683b      	ldr	r3, [r7, #0]
 800520a:	689b      	ldr	r3, [r3, #8]
 800520c:	031b      	lsls	r3, r3, #12
 800520e:	697a      	ldr	r2, [r7, #20]
 8005210:	4313      	orrs	r3, r2
 8005212:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	4a2c      	ldr	r2, [pc, #176]	; (80052c8 <TIM_OC4_SetConfig+0x110>)
 8005218:	4293      	cmp	r3, r2
 800521a:	d007      	beq.n	800522c <TIM_OC4_SetConfig+0x74>
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	4a2b      	ldr	r2, [pc, #172]	; (80052cc <TIM_OC4_SetConfig+0x114>)
 8005220:	4293      	cmp	r3, r2
 8005222:	d003      	beq.n	800522c <TIM_OC4_SetConfig+0x74>
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	4a2a      	ldr	r2, [pc, #168]	; (80052d0 <TIM_OC4_SetConfig+0x118>)
 8005228:	4293      	cmp	r3, r2
 800522a:	d10d      	bne.n	8005248 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 800522c:	697b      	ldr	r3, [r7, #20]
 800522e:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005232:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8005234:	683b      	ldr	r3, [r7, #0]
 8005236:	68db      	ldr	r3, [r3, #12]
 8005238:	031b      	lsls	r3, r3, #12
 800523a:	697a      	ldr	r2, [r7, #20]
 800523c:	4313      	orrs	r3, r2
 800523e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8005240:	697b      	ldr	r3, [r7, #20]
 8005242:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005246:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	4a1f      	ldr	r2, [pc, #124]	; (80052c8 <TIM_OC4_SetConfig+0x110>)
 800524c:	4293      	cmp	r3, r2
 800524e:	d013      	beq.n	8005278 <TIM_OC4_SetConfig+0xc0>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	4a1e      	ldr	r2, [pc, #120]	; (80052cc <TIM_OC4_SetConfig+0x114>)
 8005254:	4293      	cmp	r3, r2
 8005256:	d00f      	beq.n	8005278 <TIM_OC4_SetConfig+0xc0>
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	4a1e      	ldr	r2, [pc, #120]	; (80052d4 <TIM_OC4_SetConfig+0x11c>)
 800525c:	4293      	cmp	r3, r2
 800525e:	d00b      	beq.n	8005278 <TIM_OC4_SetConfig+0xc0>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	4a1d      	ldr	r2, [pc, #116]	; (80052d8 <TIM_OC4_SetConfig+0x120>)
 8005264:	4293      	cmp	r3, r2
 8005266:	d007      	beq.n	8005278 <TIM_OC4_SetConfig+0xc0>
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	4a1c      	ldr	r2, [pc, #112]	; (80052dc <TIM_OC4_SetConfig+0x124>)
 800526c:	4293      	cmp	r3, r2
 800526e:	d003      	beq.n	8005278 <TIM_OC4_SetConfig+0xc0>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	4a17      	ldr	r2, [pc, #92]	; (80052d0 <TIM_OC4_SetConfig+0x118>)
 8005274:	4293      	cmp	r3, r2
 8005276:	d113      	bne.n	80052a0 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800527e:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8005286:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005288:	683b      	ldr	r3, [r7, #0]
 800528a:	695b      	ldr	r3, [r3, #20]
 800528c:	019b      	lsls	r3, r3, #6
 800528e:	693a      	ldr	r2, [r7, #16]
 8005290:	4313      	orrs	r3, r2
 8005292:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	699b      	ldr	r3, [r3, #24]
 8005298:	019b      	lsls	r3, r3, #6
 800529a:	693a      	ldr	r2, [r7, #16]
 800529c:	4313      	orrs	r3, r2
 800529e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	693a      	ldr	r2, [r7, #16]
 80052a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	68fa      	ldr	r2, [r7, #12]
 80052aa:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80052ac:	683b      	ldr	r3, [r7, #0]
 80052ae:	685a      	ldr	r2, [r3, #4]
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	697a      	ldr	r2, [r7, #20]
 80052b8:	621a      	str	r2, [r3, #32]
}
 80052ba:	bf00      	nop
 80052bc:	371c      	adds	r7, #28
 80052be:	46bd      	mov	sp, r7
 80052c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c4:	4770      	bx	lr
 80052c6:	bf00      	nop
 80052c8:	40012c00 	.word	0x40012c00
 80052cc:	40013400 	.word	0x40013400
 80052d0:	40015000 	.word	0x40015000
 80052d4:	40014000 	.word	0x40014000
 80052d8:	40014400 	.word	0x40014400
 80052dc:	40014800 	.word	0x40014800

080052e0 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80052e0:	b480      	push	{r7}
 80052e2:	b087      	sub	sp, #28
 80052e4:	af00      	add	r7, sp, #0
 80052e6:	6078      	str	r0, [r7, #4]
 80052e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	6a1b      	ldr	r3, [r3, #32]
 80052ee:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	6a1b      	ldr	r3, [r3, #32]
 80052fa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	685b      	ldr	r3, [r3, #4]
 8005300:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005306:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800530e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005312:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005314:	683b      	ldr	r3, [r7, #0]
 8005316:	681b      	ldr	r3, [r3, #0]
 8005318:	68fa      	ldr	r2, [r7, #12]
 800531a:	4313      	orrs	r3, r2
 800531c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 800531e:	693b      	ldr	r3, [r7, #16]
 8005320:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8005324:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8005326:	683b      	ldr	r3, [r7, #0]
 8005328:	689b      	ldr	r3, [r3, #8]
 800532a:	041b      	lsls	r3, r3, #16
 800532c:	693a      	ldr	r2, [r7, #16]
 800532e:	4313      	orrs	r3, r2
 8005330:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	4a19      	ldr	r2, [pc, #100]	; (800539c <TIM_OC5_SetConfig+0xbc>)
 8005336:	4293      	cmp	r3, r2
 8005338:	d013      	beq.n	8005362 <TIM_OC5_SetConfig+0x82>
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	4a18      	ldr	r2, [pc, #96]	; (80053a0 <TIM_OC5_SetConfig+0xc0>)
 800533e:	4293      	cmp	r3, r2
 8005340:	d00f      	beq.n	8005362 <TIM_OC5_SetConfig+0x82>
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	4a17      	ldr	r2, [pc, #92]	; (80053a4 <TIM_OC5_SetConfig+0xc4>)
 8005346:	4293      	cmp	r3, r2
 8005348:	d00b      	beq.n	8005362 <TIM_OC5_SetConfig+0x82>
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	4a16      	ldr	r2, [pc, #88]	; (80053a8 <TIM_OC5_SetConfig+0xc8>)
 800534e:	4293      	cmp	r3, r2
 8005350:	d007      	beq.n	8005362 <TIM_OC5_SetConfig+0x82>
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	4a15      	ldr	r2, [pc, #84]	; (80053ac <TIM_OC5_SetConfig+0xcc>)
 8005356:	4293      	cmp	r3, r2
 8005358:	d003      	beq.n	8005362 <TIM_OC5_SetConfig+0x82>
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	4a14      	ldr	r2, [pc, #80]	; (80053b0 <TIM_OC5_SetConfig+0xd0>)
 800535e:	4293      	cmp	r3, r2
 8005360:	d109      	bne.n	8005376 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8005362:	697b      	ldr	r3, [r7, #20]
 8005364:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005368:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 800536a:	683b      	ldr	r3, [r7, #0]
 800536c:	695b      	ldr	r3, [r3, #20]
 800536e:	021b      	lsls	r3, r3, #8
 8005370:	697a      	ldr	r2, [r7, #20]
 8005372:	4313      	orrs	r3, r2
 8005374:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	697a      	ldr	r2, [r7, #20]
 800537a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	68fa      	ldr	r2, [r7, #12]
 8005380:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8005382:	683b      	ldr	r3, [r7, #0]
 8005384:	685a      	ldr	r2, [r3, #4]
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	693a      	ldr	r2, [r7, #16]
 800538e:	621a      	str	r2, [r3, #32]
}
 8005390:	bf00      	nop
 8005392:	371c      	adds	r7, #28
 8005394:	46bd      	mov	sp, r7
 8005396:	f85d 7b04 	ldr.w	r7, [sp], #4
 800539a:	4770      	bx	lr
 800539c:	40012c00 	.word	0x40012c00
 80053a0:	40013400 	.word	0x40013400
 80053a4:	40014000 	.word	0x40014000
 80053a8:	40014400 	.word	0x40014400
 80053ac:	40014800 	.word	0x40014800
 80053b0:	40015000 	.word	0x40015000

080053b4 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 80053b4:	b480      	push	{r7}
 80053b6:	b087      	sub	sp, #28
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	6078      	str	r0, [r7, #4]
 80053bc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	6a1b      	ldr	r3, [r3, #32]
 80053ce:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053da:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 80053dc:	68fb      	ldr	r3, [r7, #12]
 80053de:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80053e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80053e6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80053e8:	683b      	ldr	r3, [r7, #0]
 80053ea:	681b      	ldr	r3, [r3, #0]
 80053ec:	021b      	lsls	r3, r3, #8
 80053ee:	68fa      	ldr	r2, [r7, #12]
 80053f0:	4313      	orrs	r3, r2
 80053f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 80053f4:	693b      	ldr	r3, [r7, #16]
 80053f6:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 80053fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 80053fc:	683b      	ldr	r3, [r7, #0]
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	051b      	lsls	r3, r3, #20
 8005402:	693a      	ldr	r2, [r7, #16]
 8005404:	4313      	orrs	r3, r2
 8005406:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	4a1a      	ldr	r2, [pc, #104]	; (8005474 <TIM_OC6_SetConfig+0xc0>)
 800540c:	4293      	cmp	r3, r2
 800540e:	d013      	beq.n	8005438 <TIM_OC6_SetConfig+0x84>
 8005410:	687b      	ldr	r3, [r7, #4]
 8005412:	4a19      	ldr	r2, [pc, #100]	; (8005478 <TIM_OC6_SetConfig+0xc4>)
 8005414:	4293      	cmp	r3, r2
 8005416:	d00f      	beq.n	8005438 <TIM_OC6_SetConfig+0x84>
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	4a18      	ldr	r2, [pc, #96]	; (800547c <TIM_OC6_SetConfig+0xc8>)
 800541c:	4293      	cmp	r3, r2
 800541e:	d00b      	beq.n	8005438 <TIM_OC6_SetConfig+0x84>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	4a17      	ldr	r2, [pc, #92]	; (8005480 <TIM_OC6_SetConfig+0xcc>)
 8005424:	4293      	cmp	r3, r2
 8005426:	d007      	beq.n	8005438 <TIM_OC6_SetConfig+0x84>
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	4a16      	ldr	r2, [pc, #88]	; (8005484 <TIM_OC6_SetConfig+0xd0>)
 800542c:	4293      	cmp	r3, r2
 800542e:	d003      	beq.n	8005438 <TIM_OC6_SetConfig+0x84>
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	4a15      	ldr	r2, [pc, #84]	; (8005488 <TIM_OC6_SetConfig+0xd4>)
 8005434:	4293      	cmp	r3, r2
 8005436:	d109      	bne.n	800544c <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8005438:	697b      	ldr	r3, [r7, #20]
 800543a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800543e:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	695b      	ldr	r3, [r3, #20]
 8005444:	029b      	lsls	r3, r3, #10
 8005446:	697a      	ldr	r2, [r7, #20]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800544c:	687b      	ldr	r3, [r7, #4]
 800544e:	697a      	ldr	r2, [r7, #20]
 8005450:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	68fa      	ldr	r2, [r7, #12]
 8005456:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	685a      	ldr	r2, [r3, #4]
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	693a      	ldr	r2, [r7, #16]
 8005464:	621a      	str	r2, [r3, #32]
}
 8005466:	bf00      	nop
 8005468:	371c      	adds	r7, #28
 800546a:	46bd      	mov	sp, r7
 800546c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005470:	4770      	bx	lr
 8005472:	bf00      	nop
 8005474:	40012c00 	.word	0x40012c00
 8005478:	40013400 	.word	0x40013400
 800547c:	40014000 	.word	0x40014000
 8005480:	40014400 	.word	0x40014400
 8005484:	40014800 	.word	0x40014800
 8005488:	40015000 	.word	0x40015000

0800548c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 800548c:	b480      	push	{r7}
 800548e:	b087      	sub	sp, #28
 8005490:	af00      	add	r7, sp, #0
 8005492:	60f8      	str	r0, [r7, #12]
 8005494:	60b9      	str	r1, [r7, #8]
 8005496:	607a      	str	r2, [r7, #4]
 8005498:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6a1b      	ldr	r3, [r3, #32]
 800549e:	f023 0201 	bic.w	r2, r3, #1
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	699b      	ldr	r3, [r3, #24]
 80054aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	6a1b      	ldr	r3, [r3, #32]
 80054b0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80054b2:	68fb      	ldr	r3, [r7, #12]
 80054b4:	4a28      	ldr	r2, [pc, #160]	; (8005558 <TIM_TI1_SetConfig+0xcc>)
 80054b6:	4293      	cmp	r3, r2
 80054b8:	d01b      	beq.n	80054f2 <TIM_TI1_SetConfig+0x66>
 80054ba:	68fb      	ldr	r3, [r7, #12]
 80054bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054c0:	d017      	beq.n	80054f2 <TIM_TI1_SetConfig+0x66>
 80054c2:	68fb      	ldr	r3, [r7, #12]
 80054c4:	4a25      	ldr	r2, [pc, #148]	; (800555c <TIM_TI1_SetConfig+0xd0>)
 80054c6:	4293      	cmp	r3, r2
 80054c8:	d013      	beq.n	80054f2 <TIM_TI1_SetConfig+0x66>
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	4a24      	ldr	r2, [pc, #144]	; (8005560 <TIM_TI1_SetConfig+0xd4>)
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d00f      	beq.n	80054f2 <TIM_TI1_SetConfig+0x66>
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	4a23      	ldr	r2, [pc, #140]	; (8005564 <TIM_TI1_SetConfig+0xd8>)
 80054d6:	4293      	cmp	r3, r2
 80054d8:	d00b      	beq.n	80054f2 <TIM_TI1_SetConfig+0x66>
 80054da:	68fb      	ldr	r3, [r7, #12]
 80054dc:	4a22      	ldr	r2, [pc, #136]	; (8005568 <TIM_TI1_SetConfig+0xdc>)
 80054de:	4293      	cmp	r3, r2
 80054e0:	d007      	beq.n	80054f2 <TIM_TI1_SetConfig+0x66>
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	4a21      	ldr	r2, [pc, #132]	; (800556c <TIM_TI1_SetConfig+0xe0>)
 80054e6:	4293      	cmp	r3, r2
 80054e8:	d003      	beq.n	80054f2 <TIM_TI1_SetConfig+0x66>
 80054ea:	68fb      	ldr	r3, [r7, #12]
 80054ec:	4a20      	ldr	r2, [pc, #128]	; (8005570 <TIM_TI1_SetConfig+0xe4>)
 80054ee:	4293      	cmp	r3, r2
 80054f0:	d101      	bne.n	80054f6 <TIM_TI1_SetConfig+0x6a>
 80054f2:	2301      	movs	r3, #1
 80054f4:	e000      	b.n	80054f8 <TIM_TI1_SetConfig+0x6c>
 80054f6:	2300      	movs	r3, #0
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d008      	beq.n	800550e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80054fc:	697b      	ldr	r3, [r7, #20]
 80054fe:	f023 0303 	bic.w	r3, r3, #3
 8005502:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005504:	697a      	ldr	r2, [r7, #20]
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	4313      	orrs	r3, r2
 800550a:	617b      	str	r3, [r7, #20]
 800550c:	e003      	b.n	8005516 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800550e:	697b      	ldr	r3, [r7, #20]
 8005510:	f043 0301 	orr.w	r3, r3, #1
 8005514:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005516:	697b      	ldr	r3, [r7, #20]
 8005518:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800551c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800551e:	683b      	ldr	r3, [r7, #0]
 8005520:	011b      	lsls	r3, r3, #4
 8005522:	b2db      	uxtb	r3, r3
 8005524:	697a      	ldr	r2, [r7, #20]
 8005526:	4313      	orrs	r3, r2
 8005528:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800552a:	693b      	ldr	r3, [r7, #16]
 800552c:	f023 030a 	bic.w	r3, r3, #10
 8005530:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	f003 030a 	and.w	r3, r3, #10
 8005538:	693a      	ldr	r2, [r7, #16]
 800553a:	4313      	orrs	r3, r2
 800553c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	697a      	ldr	r2, [r7, #20]
 8005542:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005544:	68fb      	ldr	r3, [r7, #12]
 8005546:	693a      	ldr	r2, [r7, #16]
 8005548:	621a      	str	r2, [r3, #32]
}
 800554a:	bf00      	nop
 800554c:	371c      	adds	r7, #28
 800554e:	46bd      	mov	sp, r7
 8005550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005554:	4770      	bx	lr
 8005556:	bf00      	nop
 8005558:	40012c00 	.word	0x40012c00
 800555c:	40000400 	.word	0x40000400
 8005560:	40000800 	.word	0x40000800
 8005564:	40000c00 	.word	0x40000c00
 8005568:	40013400 	.word	0x40013400
 800556c:	40014000 	.word	0x40014000
 8005570:	40015000 	.word	0x40015000

08005574 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8005574:	b480      	push	{r7}
 8005576:	b087      	sub	sp, #28
 8005578:	af00      	add	r7, sp, #0
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	60b9      	str	r1, [r7, #8]
 800557e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005580:	68bb      	ldr	r3, [r7, #8]
 8005582:	f003 031f 	and.w	r3, r3, #31
 8005586:	2201      	movs	r2, #1
 8005588:	fa02 f303 	lsl.w	r3, r2, r3
 800558c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	6a1a      	ldr	r2, [r3, #32]
 8005592:	697b      	ldr	r3, [r7, #20]
 8005594:	43db      	mvns	r3, r3
 8005596:	401a      	ands	r2, r3
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	6a1a      	ldr	r2, [r3, #32]
 80055a0:	68bb      	ldr	r3, [r7, #8]
 80055a2:	f003 031f 	and.w	r3, r3, #31
 80055a6:	6879      	ldr	r1, [r7, #4]
 80055a8:	fa01 f303 	lsl.w	r3, r1, r3
 80055ac:	431a      	orrs	r2, r3
 80055ae:	68fb      	ldr	r3, [r7, #12]
 80055b0:	621a      	str	r2, [r3, #32]
}
 80055b2:	bf00      	nop
 80055b4:	371c      	adds	r7, #28
 80055b6:	46bd      	mov	sp, r7
 80055b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055bc:	4770      	bx	lr

080055be <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 80055be:	b580      	push	{r7, lr}
 80055c0:	b08a      	sub	sp, #40	; 0x28
 80055c2:	af00      	add	r7, sp, #0
 80055c4:	6078      	str	r0, [r7, #4]
 80055c6:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d101      	bne.n	80055d2 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 80055ce:	2301      	movs	r3, #1
 80055d0:	e0a0      	b.n	8005714 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80055d8:	b2db      	uxtb	r3, r3
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d106      	bne.n	80055ec <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	2200      	movs	r2, #0
 80055e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 80055e6:	6878      	ldr	r0, [r7, #4]
 80055e8:	f7fb fe02 	bl	80011f0 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2202      	movs	r2, #2
 80055f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	681a      	ldr	r2, [r3, #0]
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	3304      	adds	r3, #4
 80055fc:	4619      	mov	r1, r3
 80055fe:	4610      	mov	r0, r2
 8005600:	f7ff fb72 	bl	8004ce8 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	6818      	ldr	r0, [r3, #0]
 8005608:	683b      	ldr	r3, [r7, #0]
 800560a:	6819      	ldr	r1, [r3, #0]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	689b      	ldr	r3, [r3, #8]
 8005610:	2203      	movs	r2, #3
 8005612:	f7ff ff3b 	bl	800548c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	699a      	ldr	r2, [r3, #24]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f022 020c 	bic.w	r2, r2, #12
 8005624:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	6999      	ldr	r1, [r3, #24]
 800562c:	683b      	ldr	r3, [r7, #0]
 800562e:	685a      	ldr	r2, [r3, #4]
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	681b      	ldr	r3, [r3, #0]
 8005634:	430a      	orrs	r2, r1
 8005636:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	685a      	ldr	r2, [r3, #4]
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8005646:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	689b      	ldr	r3, [r3, #8]
 800564e:	687a      	ldr	r2, [r7, #4]
 8005650:	6812      	ldr	r2, [r2, #0]
 8005652:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 8005656:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800565a:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	689a      	ldr	r2, [r3, #8]
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800566a:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	689b      	ldr	r3, [r3, #8]
 8005672:	687a      	ldr	r2, [r7, #4]
 8005674:	6812      	ldr	r2, [r2, #0]
 8005676:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800567a:	f023 0307 	bic.w	r3, r3, #7
 800567e:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	689a      	ldr	r2, [r3, #8]
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	681b      	ldr	r3, [r3, #0]
 800568a:	f042 0204 	orr.w	r2, r2, #4
 800568e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8005690:	2300      	movs	r3, #0
 8005692:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8005694:	2300      	movs	r3, #0
 8005696:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8005698:	2370      	movs	r3, #112	; 0x70
 800569a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800569c:	2300      	movs	r3, #0
 800569e:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80056a0:	2300      	movs	r3, #0
 80056a2:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 80056a4:	2300      	movs	r3, #0
 80056a6:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 80056a8:	683b      	ldr	r3, [r7, #0]
 80056aa:	68db      	ldr	r3, [r3, #12]
 80056ac:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f107 020c 	add.w	r2, r7, #12
 80056b6:	4611      	mov	r1, r2
 80056b8:	4618      	mov	r0, r3
 80056ba:	f7ff fc57 	bl	8004f6c <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	685b      	ldr	r3, [r3, #4]
 80056c4:	687a      	ldr	r2, [r7, #4]
 80056c6:	6812      	ldr	r2, [r2, #0]
 80056c8:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 80056cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056d0:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	685a      	ldr	r2, [r3, #4]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 80056e0:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	2201      	movs	r2, #1
 80056e6:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2201      	movs	r2, #1
 80056ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	2201      	movs	r2, #1
 80056f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2201      	movs	r2, #1
 80056fe:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	2201      	movs	r2, #1
 800570e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005712:	2300      	movs	r3, #0
}
 8005714:	4618      	mov	r0, r3
 8005716:	3728      	adds	r7, #40	; 0x28
 8005718:	46bd      	mov	sp, r7
 800571a:	bd80      	pop	{r7, pc}

0800571c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800571c:	b580      	push	{r7, lr}
 800571e:	b084      	sub	sp, #16
 8005720:	af00      	add	r7, sp, #0
 8005722:	6078      	str	r0, [r7, #4]
 8005724:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005726:	683b      	ldr	r3, [r7, #0]
 8005728:	2b00      	cmp	r3, #0
 800572a:	d109      	bne.n	8005740 <HAL_TIMEx_PWMN_Start+0x24>
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005732:	b2db      	uxtb	r3, r3
 8005734:	2b01      	cmp	r3, #1
 8005736:	bf14      	ite	ne
 8005738:	2301      	movne	r3, #1
 800573a:	2300      	moveq	r3, #0
 800573c:	b2db      	uxtb	r3, r3
 800573e:	e022      	b.n	8005786 <HAL_TIMEx_PWMN_Start+0x6a>
 8005740:	683b      	ldr	r3, [r7, #0]
 8005742:	2b04      	cmp	r3, #4
 8005744:	d109      	bne.n	800575a <HAL_TIMEx_PWMN_Start+0x3e>
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800574c:	b2db      	uxtb	r3, r3
 800574e:	2b01      	cmp	r3, #1
 8005750:	bf14      	ite	ne
 8005752:	2301      	movne	r3, #1
 8005754:	2300      	moveq	r3, #0
 8005756:	b2db      	uxtb	r3, r3
 8005758:	e015      	b.n	8005786 <HAL_TIMEx_PWMN_Start+0x6a>
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	2b08      	cmp	r3, #8
 800575e:	d109      	bne.n	8005774 <HAL_TIMEx_PWMN_Start+0x58>
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 8005766:	b2db      	uxtb	r3, r3
 8005768:	2b01      	cmp	r3, #1
 800576a:	bf14      	ite	ne
 800576c:	2301      	movne	r3, #1
 800576e:	2300      	moveq	r3, #0
 8005770:	b2db      	uxtb	r3, r3
 8005772:	e008      	b.n	8005786 <HAL_TIMEx_PWMN_Start+0x6a>
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 800577a:	b2db      	uxtb	r3, r3
 800577c:	2b01      	cmp	r3, #1
 800577e:	bf14      	ite	ne
 8005780:	2301      	movne	r3, #1
 8005782:	2300      	moveq	r3, #0
 8005784:	b2db      	uxtb	r3, r3
 8005786:	2b00      	cmp	r3, #0
 8005788:	d001      	beq.n	800578e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800578a:	2301      	movs	r3, #1
 800578c:	e073      	b.n	8005876 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d104      	bne.n	800579e <HAL_TIMEx_PWMN_Start+0x82>
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	2202      	movs	r2, #2
 8005798:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800579c:	e013      	b.n	80057c6 <HAL_TIMEx_PWMN_Start+0xaa>
 800579e:	683b      	ldr	r3, [r7, #0]
 80057a0:	2b04      	cmp	r3, #4
 80057a2:	d104      	bne.n	80057ae <HAL_TIMEx_PWMN_Start+0x92>
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2202      	movs	r2, #2
 80057a8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80057ac:	e00b      	b.n	80057c6 <HAL_TIMEx_PWMN_Start+0xaa>
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	2b08      	cmp	r3, #8
 80057b2:	d104      	bne.n	80057be <HAL_TIMEx_PWMN_Start+0xa2>
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2202      	movs	r2, #2
 80057b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80057bc:	e003      	b.n	80057c6 <HAL_TIMEx_PWMN_Start+0xaa>
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	2202      	movs	r2, #2
 80057c2:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	681b      	ldr	r3, [r3, #0]
 80057ca:	2204      	movs	r2, #4
 80057cc:	6839      	ldr	r1, [r7, #0]
 80057ce:	4618      	mov	r0, r3
 80057d0:	f000 f9f4 	bl	8005bbc <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	681b      	ldr	r3, [r3, #0]
 80057d8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80057e2:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	4a25      	ldr	r2, [pc, #148]	; (8005880 <HAL_TIMEx_PWMN_Start+0x164>)
 80057ea:	4293      	cmp	r3, r2
 80057ec:	d022      	beq.n	8005834 <HAL_TIMEx_PWMN_Start+0x118>
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057f6:	d01d      	beq.n	8005834 <HAL_TIMEx_PWMN_Start+0x118>
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	4a21      	ldr	r2, [pc, #132]	; (8005884 <HAL_TIMEx_PWMN_Start+0x168>)
 80057fe:	4293      	cmp	r3, r2
 8005800:	d018      	beq.n	8005834 <HAL_TIMEx_PWMN_Start+0x118>
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	4a20      	ldr	r2, [pc, #128]	; (8005888 <HAL_TIMEx_PWMN_Start+0x16c>)
 8005808:	4293      	cmp	r3, r2
 800580a:	d013      	beq.n	8005834 <HAL_TIMEx_PWMN_Start+0x118>
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	4a1e      	ldr	r2, [pc, #120]	; (800588c <HAL_TIMEx_PWMN_Start+0x170>)
 8005812:	4293      	cmp	r3, r2
 8005814:	d00e      	beq.n	8005834 <HAL_TIMEx_PWMN_Start+0x118>
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	4a1d      	ldr	r2, [pc, #116]	; (8005890 <HAL_TIMEx_PWMN_Start+0x174>)
 800581c:	4293      	cmp	r3, r2
 800581e:	d009      	beq.n	8005834 <HAL_TIMEx_PWMN_Start+0x118>
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	681b      	ldr	r3, [r3, #0]
 8005824:	4a1b      	ldr	r2, [pc, #108]	; (8005894 <HAL_TIMEx_PWMN_Start+0x178>)
 8005826:	4293      	cmp	r3, r2
 8005828:	d004      	beq.n	8005834 <HAL_TIMEx_PWMN_Start+0x118>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	4a1a      	ldr	r2, [pc, #104]	; (8005898 <HAL_TIMEx_PWMN_Start+0x17c>)
 8005830:	4293      	cmp	r3, r2
 8005832:	d115      	bne.n	8005860 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	689a      	ldr	r2, [r3, #8]
 800583a:	4b18      	ldr	r3, [pc, #96]	; (800589c <HAL_TIMEx_PWMN_Start+0x180>)
 800583c:	4013      	ands	r3, r2
 800583e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005840:	68fb      	ldr	r3, [r7, #12]
 8005842:	2b06      	cmp	r3, #6
 8005844:	d015      	beq.n	8005872 <HAL_TIMEx_PWMN_Start+0x156>
 8005846:	68fb      	ldr	r3, [r7, #12]
 8005848:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800584c:	d011      	beq.n	8005872 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	681a      	ldr	r2, [r3, #0]
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	681b      	ldr	r3, [r3, #0]
 8005858:	f042 0201 	orr.w	r2, r2, #1
 800585c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800585e:	e008      	b.n	8005872 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	681a      	ldr	r2, [r3, #0]
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	f042 0201 	orr.w	r2, r2, #1
 800586e:	601a      	str	r2, [r3, #0]
 8005870:	e000      	b.n	8005874 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005872:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005874:	2300      	movs	r3, #0
}
 8005876:	4618      	mov	r0, r3
 8005878:	3710      	adds	r7, #16
 800587a:	46bd      	mov	sp, r7
 800587c:	bd80      	pop	{r7, pc}
 800587e:	bf00      	nop
 8005880:	40012c00 	.word	0x40012c00
 8005884:	40000400 	.word	0x40000400
 8005888:	40000800 	.word	0x40000800
 800588c:	40000c00 	.word	0x40000c00
 8005890:	40013400 	.word	0x40013400
 8005894:	40014000 	.word	0x40014000
 8005898:	40015000 	.word	0x40015000
 800589c:	00010007 	.word	0x00010007

080058a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80058a0:	b480      	push	{r7}
 80058a2:	b085      	sub	sp, #20
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058b0:	2b01      	cmp	r3, #1
 80058b2:	d101      	bne.n	80058b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80058b4:	2302      	movs	r3, #2
 80058b6:	e074      	b.n	80059a2 <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	2201      	movs	r2, #1
 80058bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	2202      	movs	r2, #2
 80058c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	685b      	ldr	r3, [r3, #4]
 80058ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	689b      	ldr	r3, [r3, #8]
 80058d6:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 80058d8:	687b      	ldr	r3, [r7, #4]
 80058da:	681b      	ldr	r3, [r3, #0]
 80058dc:	4a34      	ldr	r2, [pc, #208]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80058de:	4293      	cmp	r3, r2
 80058e0:	d009      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	4a33      	ldr	r2, [pc, #204]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80058e8:	4293      	cmp	r3, r2
 80058ea:	d004      	beq.n	80058f6 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	4a31      	ldr	r2, [pc, #196]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d108      	bne.n	8005908 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 80058f6:	68fb      	ldr	r3, [r7, #12]
 80058f8:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 80058fc:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 80058fe:	683b      	ldr	r3, [r7, #0]
 8005900:	685b      	ldr	r3, [r3, #4]
 8005902:	68fa      	ldr	r2, [r7, #12]
 8005904:	4313      	orrs	r3, r2
 8005906:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800590e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005912:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8005914:	683b      	ldr	r3, [r7, #0]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	68fa      	ldr	r2, [r7, #12]
 800591a:	4313      	orrs	r3, r2
 800591c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	4a21      	ldr	r2, [pc, #132]	; (80059b0 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800592c:	4293      	cmp	r3, r2
 800592e:	d022      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	681b      	ldr	r3, [r3, #0]
 8005934:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005938:	d01d      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800593a:	687b      	ldr	r3, [r7, #4]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4a1f      	ldr	r2, [pc, #124]	; (80059bc <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 8005940:	4293      	cmp	r3, r2
 8005942:	d018      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	4a1d      	ldr	r2, [pc, #116]	; (80059c0 <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 800594a:	4293      	cmp	r3, r2
 800594c:	d013      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	4a1c      	ldr	r2, [pc, #112]	; (80059c4 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8005954:	4293      	cmp	r3, r2
 8005956:	d00e      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	681b      	ldr	r3, [r3, #0]
 800595c:	4a15      	ldr	r2, [pc, #84]	; (80059b4 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800595e:	4293      	cmp	r3, r2
 8005960:	d009      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	4a18      	ldr	r2, [pc, #96]	; (80059c8 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 8005968:	4293      	cmp	r3, r2
 800596a:	d004      	beq.n	8005976 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	4a11      	ldr	r2, [pc, #68]	; (80059b8 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8005972:	4293      	cmp	r3, r2
 8005974:	d10c      	bne.n	8005990 <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005976:	68bb      	ldr	r3, [r7, #8]
 8005978:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800597c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800597e:	683b      	ldr	r3, [r7, #0]
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	68ba      	ldr	r2, [r7, #8]
 8005984:	4313      	orrs	r3, r2
 8005986:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	68ba      	ldr	r2, [r7, #8]
 800598e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	2201      	movs	r2, #1
 8005994:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	2200      	movs	r2, #0
 800599c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80059a0:	2300      	movs	r3, #0
}
 80059a2:	4618      	mov	r0, r3
 80059a4:	3714      	adds	r7, #20
 80059a6:	46bd      	mov	sp, r7
 80059a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ac:	4770      	bx	lr
 80059ae:	bf00      	nop
 80059b0:	40012c00 	.word	0x40012c00
 80059b4:	40013400 	.word	0x40013400
 80059b8:	40015000 	.word	0x40015000
 80059bc:	40000400 	.word	0x40000400
 80059c0:	40000800 	.word	0x40000800
 80059c4:	40000c00 	.word	0x40000c00
 80059c8:	40014000 	.word	0x40014000

080059cc <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80059cc:	b480      	push	{r7}
 80059ce:	b085      	sub	sp, #20
 80059d0:	af00      	add	r7, sp, #0
 80059d2:	6078      	str	r0, [r7, #4]
 80059d4:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80059d6:	2300      	movs	r3, #0
 80059d8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80059da:	687b      	ldr	r3, [r7, #4]
 80059dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80059e0:	2b01      	cmp	r3, #1
 80059e2:	d101      	bne.n	80059e8 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80059e4:	2302      	movs	r3, #2
 80059e6:	e096      	b.n	8005b16 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	2201      	movs	r2, #1
 80059ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	68db      	ldr	r3, [r3, #12]
 80059fa:	4313      	orrs	r3, r2
 80059fc:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 80059fe:	68fb      	ldr	r3, [r7, #12]
 8005a00:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005a04:	683b      	ldr	r3, [r7, #0]
 8005a06:	689b      	ldr	r3, [r3, #8]
 8005a08:	4313      	orrs	r3, r2
 8005a0a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8005a12:	683b      	ldr	r3, [r7, #0]
 8005a14:	685b      	ldr	r3, [r3, #4]
 8005a16:	4313      	orrs	r3, r2
 8005a18:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8005a20:	683b      	ldr	r3, [r7, #0]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4313      	orrs	r3, r2
 8005a26:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005a2e:	683b      	ldr	r3, [r7, #0]
 8005a30:	691b      	ldr	r3, [r3, #16]
 8005a32:	4313      	orrs	r3, r2
 8005a34:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8005a36:	68fb      	ldr	r3, [r7, #12]
 8005a38:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8005a3c:	683b      	ldr	r3, [r7, #0]
 8005a3e:	695b      	ldr	r3, [r3, #20]
 8005a40:	4313      	orrs	r3, r2
 8005a42:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8005a4a:	683b      	ldr	r3, [r7, #0]
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	4313      	orrs	r3, r2
 8005a50:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8005a58:	683b      	ldr	r3, [r7, #0]
 8005a5a:	699b      	ldr	r3, [r3, #24]
 8005a5c:	041b      	lsls	r3, r3, #16
 8005a5e:	4313      	orrs	r3, r2
 8005a60:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	4a2f      	ldr	r2, [pc, #188]	; (8005b24 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005a68:	4293      	cmp	r3, r2
 8005a6a:	d009      	beq.n	8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	4a2d      	ldr	r2, [pc, #180]	; (8005b28 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005a72:	4293      	cmp	r3, r2
 8005a74:	d004      	beq.n	8005a80 <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	4a2c      	ldr	r2, [pc, #176]	; (8005b2c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005a7c:	4293      	cmp	r3, r2
 8005a7e:	d106      	bne.n	8005a8e <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005a86:	683b      	ldr	r3, [r7, #0]
 8005a88:	69db      	ldr	r3, [r3, #28]
 8005a8a:	4313      	orrs	r3, r2
 8005a8c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a24      	ldr	r2, [pc, #144]	; (8005b24 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d009      	beq.n	8005aac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a22      	ldr	r2, [pc, #136]	; (8005b28 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d004      	beq.n	8005aac <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a21      	ldr	r2, [pc, #132]	; (8005b2c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d12b      	bne.n	8005b04 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 8005aac:	68fb      	ldr	r3, [r7, #12]
 8005aae:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 8005ab2:	683b      	ldr	r3, [r7, #0]
 8005ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005ab6:	051b      	lsls	r3, r3, #20
 8005ab8:	4313      	orrs	r3, r2
 8005aba:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 8005abc:	68fb      	ldr	r3, [r7, #12]
 8005abe:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 8005ac2:	683b      	ldr	r3, [r7, #0]
 8005ac4:	6a1b      	ldr	r3, [r3, #32]
 8005ac6:	4313      	orrs	r3, r2
 8005ac8:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 8005ad0:	683b      	ldr	r3, [r7, #0]
 8005ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ad4:	4313      	orrs	r3, r2
 8005ad6:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a11      	ldr	r2, [pc, #68]	; (8005b24 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d009      	beq.n	8005af6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	4a10      	ldr	r2, [pc, #64]	; (8005b28 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8005ae8:	4293      	cmp	r3, r2
 8005aea:	d004      	beq.n	8005af6 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	4a0e      	ldr	r2, [pc, #56]	; (8005b2c <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 8005af2:	4293      	cmp	r3, r2
 8005af4:	d106      	bne.n	8005b04 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8005af6:	68fb      	ldr	r3, [r7, #12]
 8005af8:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005afc:	683b      	ldr	r3, [r7, #0]
 8005afe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005b00:	4313      	orrs	r3, r2
 8005b02:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	681b      	ldr	r3, [r3, #0]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2200      	movs	r2, #0
 8005b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005b14:	2300      	movs	r3, #0
}
 8005b16:	4618      	mov	r0, r3
 8005b18:	3714      	adds	r7, #20
 8005b1a:	46bd      	mov	sp, r7
 8005b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b20:	4770      	bx	lr
 8005b22:	bf00      	nop
 8005b24:	40012c00 	.word	0x40012c00
 8005b28:	40013400 	.word	0x40013400
 8005b2c:	40015000 	.word	0x40015000

08005b30 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b083      	sub	sp, #12
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8005b38:	bf00      	nop
 8005b3a:	370c      	adds	r7, #12
 8005b3c:	46bd      	mov	sp, r7
 8005b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b42:	4770      	bx	lr

08005b44 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005b44:	b480      	push	{r7}
 8005b46:	b083      	sub	sp, #12
 8005b48:	af00      	add	r7, sp, #0
 8005b4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005b4c:	bf00      	nop
 8005b4e:	370c      	adds	r7, #12
 8005b50:	46bd      	mov	sp, r7
 8005b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b56:	4770      	bx	lr

08005b58 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8005b58:	b480      	push	{r7}
 8005b5a:	b083      	sub	sp, #12
 8005b5c:	af00      	add	r7, sp, #0
 8005b5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8005b60:	bf00      	nop
 8005b62:	370c      	adds	r7, #12
 8005b64:	46bd      	mov	sp, r7
 8005b66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b6a:	4770      	bx	lr

08005b6c <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 8005b6c:	b480      	push	{r7}
 8005b6e:	b083      	sub	sp, #12
 8005b70:	af00      	add	r7, sp, #0
 8005b72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 8005b74:	bf00      	nop
 8005b76:	370c      	adds	r7, #12
 8005b78:	46bd      	mov	sp, r7
 8005b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b7e:	4770      	bx	lr

08005b80 <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 8005b80:	b480      	push	{r7}
 8005b82:	b083      	sub	sp, #12
 8005b84:	af00      	add	r7, sp, #0
 8005b86:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 8005b88:	bf00      	nop
 8005b8a:	370c      	adds	r7, #12
 8005b8c:	46bd      	mov	sp, r7
 8005b8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b92:	4770      	bx	lr

08005b94 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 8005b94:	b480      	push	{r7}
 8005b96:	b083      	sub	sp, #12
 8005b98:	af00      	add	r7, sp, #0
 8005b9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 8005b9c:	bf00      	nop
 8005b9e:	370c      	adds	r7, #12
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 8005ba8:	b480      	push	{r7}
 8005baa:	b083      	sub	sp, #12
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 8005bb0:	bf00      	nop
 8005bb2:	370c      	adds	r7, #12
 8005bb4:	46bd      	mov	sp, r7
 8005bb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bba:	4770      	bx	lr

08005bbc <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 8005bbc:	b480      	push	{r7}
 8005bbe:	b087      	sub	sp, #28
 8005bc0:	af00      	add	r7, sp, #0
 8005bc2:	60f8      	str	r0, [r7, #12]
 8005bc4:	60b9      	str	r1, [r7, #8]
 8005bc6:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	f003 031f 	and.w	r3, r3, #31
 8005bce:	2204      	movs	r2, #4
 8005bd0:	fa02 f303 	lsl.w	r3, r2, r3
 8005bd4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	6a1a      	ldr	r2, [r3, #32]
 8005bda:	697b      	ldr	r3, [r7, #20]
 8005bdc:	43db      	mvns	r3, r3
 8005bde:	401a      	ands	r2, r3
 8005be0:	68fb      	ldr	r3, [r7, #12]
 8005be2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005be4:	68fb      	ldr	r3, [r7, #12]
 8005be6:	6a1a      	ldr	r2, [r3, #32]
 8005be8:	68bb      	ldr	r3, [r7, #8]
 8005bea:	f003 031f 	and.w	r3, r3, #31
 8005bee:	6879      	ldr	r1, [r7, #4]
 8005bf0:	fa01 f303 	lsl.w	r3, r1, r3
 8005bf4:	431a      	orrs	r2, r3
 8005bf6:	68fb      	ldr	r3, [r7, #12]
 8005bf8:	621a      	str	r2, [r3, #32]
}
 8005bfa:	bf00      	nop
 8005bfc:	371c      	adds	r7, #28
 8005bfe:	46bd      	mov	sp, r7
 8005c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c04:	4770      	bx	lr

08005c06 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005c06:	b580      	push	{r7, lr}
 8005c08:	b082      	sub	sp, #8
 8005c0a:	af00      	add	r7, sp, #0
 8005c0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d101      	bne.n	8005c18 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005c14:	2301      	movs	r3, #1
 8005c16:	e042      	b.n	8005c9e <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005c1e:	2b00      	cmp	r3, #0
 8005c20:	d106      	bne.n	8005c30 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2200      	movs	r2, #0
 8005c26:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005c2a:	6878      	ldr	r0, [r7, #4]
 8005c2c:	f7fb fc42 	bl	80014b4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005c30:	687b      	ldr	r3, [r7, #4]
 8005c32:	2224      	movs	r2, #36	; 0x24
 8005c34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	681a      	ldr	r2, [r3, #0]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005c48:	6878      	ldr	r0, [r7, #4]
 8005c4a:	f000 fc51 	bl	80064f0 <UART_SetConfig>
 8005c4e:	4603      	mov	r3, r0
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	d101      	bne.n	8005c58 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8005c54:	2301      	movs	r3, #1
 8005c56:	e022      	b.n	8005c9e <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	d002      	beq.n	8005c66 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8005c60:	6878      	ldr	r0, [r7, #4]
 8005c62:	f000 ff41 	bl	8006ae8 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	685a      	ldr	r2, [r3, #4]
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005c74:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	689a      	ldr	r2, [r3, #8]
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005c84:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f042 0201 	orr.w	r2, r2, #1
 8005c94:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005c96:	6878      	ldr	r0, [r7, #4]
 8005c98:	f000 ffc8 	bl	8006c2c <UART_CheckIdleState>
 8005c9c:	4603      	mov	r3, r0
}
 8005c9e:	4618      	mov	r0, r3
 8005ca0:	3708      	adds	r7, #8
 8005ca2:	46bd      	mov	sp, r7
 8005ca4:	bd80      	pop	{r7, pc}

08005ca6 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005ca6:	b580      	push	{r7, lr}
 8005ca8:	b08a      	sub	sp, #40	; 0x28
 8005caa:	af02      	add	r7, sp, #8
 8005cac:	60f8      	str	r0, [r7, #12]
 8005cae:	60b9      	str	r1, [r7, #8]
 8005cb0:	603b      	str	r3, [r7, #0]
 8005cb2:	4613      	mov	r3, r2
 8005cb4:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005cbc:	2b20      	cmp	r3, #32
 8005cbe:	f040 8083 	bne.w	8005dc8 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 8005cc2:	68bb      	ldr	r3, [r7, #8]
 8005cc4:	2b00      	cmp	r3, #0
 8005cc6:	d002      	beq.n	8005cce <HAL_UART_Transmit+0x28>
 8005cc8:	88fb      	ldrh	r3, [r7, #6]
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d101      	bne.n	8005cd2 <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8005cce:	2301      	movs	r3, #1
 8005cd0:	e07b      	b.n	8005dca <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	d101      	bne.n	8005ce0 <HAL_UART_Transmit+0x3a>
 8005cdc:	2302      	movs	r3, #2
 8005cde:	e074      	b.n	8005dca <HAL_UART_Transmit+0x124>
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	2201      	movs	r2, #1
 8005ce4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005ce8:	68fb      	ldr	r3, [r7, #12]
 8005cea:	2200      	movs	r2, #0
 8005cec:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	2221      	movs	r2, #33	; 0x21
 8005cf4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005cf8:	f7fb fe1a 	bl	8001930 <HAL_GetTick>
 8005cfc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8005cfe:	68fb      	ldr	r3, [r7, #12]
 8005d00:	88fa      	ldrh	r2, [r7, #6]
 8005d02:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	88fa      	ldrh	r2, [r7, #6]
 8005d0a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d0e:	68fb      	ldr	r3, [r7, #12]
 8005d10:	689b      	ldr	r3, [r3, #8]
 8005d12:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d16:	d108      	bne.n	8005d2a <HAL_UART_Transmit+0x84>
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	691b      	ldr	r3, [r3, #16]
 8005d1c:	2b00      	cmp	r3, #0
 8005d1e:	d104      	bne.n	8005d2a <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 8005d20:	2300      	movs	r3, #0
 8005d22:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005d24:	68bb      	ldr	r3, [r7, #8]
 8005d26:	61bb      	str	r3, [r7, #24]
 8005d28:	e003      	b.n	8005d32 <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8005d2a:	68bb      	ldr	r3, [r7, #8]
 8005d2c:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005d2e:	2300      	movs	r3, #0
 8005d30:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	2200      	movs	r2, #0
 8005d36:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8005d3a:	e02c      	b.n	8005d96 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	9300      	str	r3, [sp, #0]
 8005d40:	697b      	ldr	r3, [r7, #20]
 8005d42:	2200      	movs	r2, #0
 8005d44:	2180      	movs	r1, #128	; 0x80
 8005d46:	68f8      	ldr	r0, [r7, #12]
 8005d48:	f000 ffbb 	bl	8006cc2 <UART_WaitOnFlagUntilTimeout>
 8005d4c:	4603      	mov	r3, r0
 8005d4e:	2b00      	cmp	r3, #0
 8005d50:	d001      	beq.n	8005d56 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 8005d52:	2303      	movs	r3, #3
 8005d54:	e039      	b.n	8005dca <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8005d56:	69fb      	ldr	r3, [r7, #28]
 8005d58:	2b00      	cmp	r3, #0
 8005d5a:	d10b      	bne.n	8005d74 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005d5c:	69bb      	ldr	r3, [r7, #24]
 8005d5e:	881b      	ldrh	r3, [r3, #0]
 8005d60:	461a      	mov	r2, r3
 8005d62:	68fb      	ldr	r3, [r7, #12]
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005d6a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8005d6c:	69bb      	ldr	r3, [r7, #24]
 8005d6e:	3302      	adds	r3, #2
 8005d70:	61bb      	str	r3, [r7, #24]
 8005d72:	e007      	b.n	8005d84 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8005d74:	69fb      	ldr	r3, [r7, #28]
 8005d76:	781a      	ldrb	r2, [r3, #0]
 8005d78:	68fb      	ldr	r3, [r7, #12]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8005d7e:	69fb      	ldr	r3, [r7, #28]
 8005d80:	3301      	adds	r3, #1
 8005d82:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d8a:	b29b      	uxth	r3, r3
 8005d8c:	3b01      	subs	r3, #1
 8005d8e:	b29a      	uxth	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8005d96:	68fb      	ldr	r3, [r7, #12]
 8005d98:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8005d9c:	b29b      	uxth	r3, r3
 8005d9e:	2b00      	cmp	r3, #0
 8005da0:	d1cc      	bne.n	8005d3c <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005da2:	683b      	ldr	r3, [r7, #0]
 8005da4:	9300      	str	r3, [sp, #0]
 8005da6:	697b      	ldr	r3, [r7, #20]
 8005da8:	2200      	movs	r2, #0
 8005daa:	2140      	movs	r1, #64	; 0x40
 8005dac:	68f8      	ldr	r0, [r7, #12]
 8005dae:	f000 ff88 	bl	8006cc2 <UART_WaitOnFlagUntilTimeout>
 8005db2:	4603      	mov	r3, r0
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d001      	beq.n	8005dbc <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 8005db8:	2303      	movs	r3, #3
 8005dba:	e006      	b.n	8005dca <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	2220      	movs	r2, #32
 8005dc0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	e000      	b.n	8005dca <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8005dc8:	2302      	movs	r3, #2
  }
}
 8005dca:	4618      	mov	r0, r3
 8005dcc:	3720      	adds	r7, #32
 8005dce:	46bd      	mov	sp, r7
 8005dd0:	bd80      	pop	{r7, pc}
	...

08005dd4 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005dd4:	b580      	push	{r7, lr}
 8005dd6:	b08a      	sub	sp, #40	; 0x28
 8005dd8:	af00      	add	r7, sp, #0
 8005dda:	60f8      	str	r0, [r7, #12]
 8005ddc:	60b9      	str	r1, [r7, #8]
 8005dde:	4613      	mov	r3, r2
 8005de0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005de2:	68fb      	ldr	r3, [r7, #12]
 8005de4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005de8:	2b20      	cmp	r3, #32
 8005dea:	d142      	bne.n	8005e72 <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8005dec:	68bb      	ldr	r3, [r7, #8]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d002      	beq.n	8005df8 <HAL_UART_Receive_IT+0x24>
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	2b00      	cmp	r3, #0
 8005df6:	d101      	bne.n	8005dfc <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8005df8:	2301      	movs	r3, #1
 8005dfa:	e03b      	b.n	8005e74 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8005dfc:	68fb      	ldr	r3, [r7, #12]
 8005dfe:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8005e02:	2b01      	cmp	r3, #1
 8005e04:	d101      	bne.n	8005e0a <HAL_UART_Receive_IT+0x36>
 8005e06:	2302      	movs	r3, #2
 8005e08:	e034      	b.n	8005e74 <HAL_UART_Receive_IT+0xa0>
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	2201      	movs	r2, #1
 8005e0e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e12:	68fb      	ldr	r3, [r7, #12]
 8005e14:	2200      	movs	r2, #0
 8005e16:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8005e18:	68fb      	ldr	r3, [r7, #12]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	4a17      	ldr	r2, [pc, #92]	; (8005e7c <HAL_UART_Receive_IT+0xa8>)
 8005e1e:	4293      	cmp	r3, r2
 8005e20:	d01f      	beq.n	8005e62 <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	685b      	ldr	r3, [r3, #4]
 8005e28:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	d018      	beq.n	8005e62 <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8005e30:	68fb      	ldr	r3, [r7, #12]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e36:	697b      	ldr	r3, [r7, #20]
 8005e38:	e853 3f00 	ldrex	r3, [r3]
 8005e3c:	613b      	str	r3, [r7, #16]
   return(result);
 8005e3e:	693b      	ldr	r3, [r7, #16]
 8005e40:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8005e44:	627b      	str	r3, [r7, #36]	; 0x24
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	681b      	ldr	r3, [r3, #0]
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005e4e:	623b      	str	r3, [r7, #32]
 8005e50:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e52:	69f9      	ldr	r1, [r7, #28]
 8005e54:	6a3a      	ldr	r2, [r7, #32]
 8005e56:	e841 2300 	strex	r3, r2, [r1]
 8005e5a:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e5c:	69bb      	ldr	r3, [r7, #24]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d1e6      	bne.n	8005e30 <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005e62:	88fb      	ldrh	r3, [r7, #6]
 8005e64:	461a      	mov	r2, r3
 8005e66:	68b9      	ldr	r1, [r7, #8]
 8005e68:	68f8      	ldr	r0, [r7, #12]
 8005e6a:	f000 fff3 	bl	8006e54 <UART_Start_Receive_IT>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	e000      	b.n	8005e74 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 8005e72:	2302      	movs	r3, #2
  }
}
 8005e74:	4618      	mov	r0, r3
 8005e76:	3728      	adds	r7, #40	; 0x28
 8005e78:	46bd      	mov	sp, r7
 8005e7a:	bd80      	pop	{r7, pc}
 8005e7c:	40008000 	.word	0x40008000

08005e80 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b0ba      	sub	sp, #232	; 0xe8
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	69db      	ldr	r3, [r3, #28]
 8005e8e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	681b      	ldr	r3, [r3, #0]
 8005e98:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	681b      	ldr	r3, [r3, #0]
 8005ea0:	689b      	ldr	r3, [r3, #8]
 8005ea2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8005ea6:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 8005eaa:	f640 030f 	movw	r3, #2063	; 0x80f
 8005eae:	4013      	ands	r3, r2
 8005eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 8005eb4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005eb8:	2b00      	cmp	r3, #0
 8005eba:	d11b      	bne.n	8005ef4 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8005ebc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d015      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8005ec8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ecc:	f003 0320 	and.w	r3, r3, #32
 8005ed0:	2b00      	cmp	r3, #0
 8005ed2:	d105      	bne.n	8005ee0 <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8005ed4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005ed8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d009      	beq.n	8005ef4 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	f000 82d6 	beq.w	8006496 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8005eea:	687b      	ldr	r3, [r7, #4]
 8005eec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eee:	6878      	ldr	r0, [r7, #4]
 8005ef0:	4798      	blx	r3
      }
      return;
 8005ef2:	e2d0      	b.n	8006496 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8005ef4:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	f000 811f 	beq.w	800613c <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8005efe:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005f02:	4b8b      	ldr	r3, [pc, #556]	; (8006130 <HAL_UART_IRQHandler+0x2b0>)
 8005f04:	4013      	ands	r3, r2
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d106      	bne.n	8005f18 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8005f0a:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8005f0e:	4b89      	ldr	r3, [pc, #548]	; (8006134 <HAL_UART_IRQHandler+0x2b4>)
 8005f10:	4013      	ands	r3, r2
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	f000 8112 	beq.w	800613c <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8005f18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f1c:	f003 0301 	and.w	r3, r3, #1
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d011      	beq.n	8005f48 <HAL_UART_IRQHandler+0xc8>
 8005f24:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005f28:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d00b      	beq.n	8005f48 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	681b      	ldr	r3, [r3, #0]
 8005f34:	2201      	movs	r2, #1
 8005f36:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f3e:	f043 0201 	orr.w	r2, r3, #1
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f4c:	f003 0302 	and.w	r3, r3, #2
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	d011      	beq.n	8005f78 <HAL_UART_IRQHandler+0xf8>
 8005f54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f58:	f003 0301 	and.w	r3, r3, #1
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d00b      	beq.n	8005f78 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	2202      	movs	r2, #2
 8005f66:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f6e:	f043 0204 	orr.w	r2, r3, #4
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8005f78:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005f7c:	f003 0304 	and.w	r3, r3, #4
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d011      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x128>
 8005f84:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8005f88:	f003 0301 	and.w	r3, r3, #1
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d00b      	beq.n	8005fa8 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	2204      	movs	r2, #4
 8005f96:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005f9e:	f043 0202 	orr.w	r2, r3, #2
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8005fa8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fac:	f003 0308 	and.w	r3, r3, #8
 8005fb0:	2b00      	cmp	r3, #0
 8005fb2:	d017      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005fb8:	f003 0320 	and.w	r3, r3, #32
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d105      	bne.n	8005fcc <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8005fc0:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8005fc4:	4b5a      	ldr	r3, [pc, #360]	; (8006130 <HAL_UART_IRQHandler+0x2b0>)
 8005fc6:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d00b      	beq.n	8005fe4 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	2208      	movs	r2, #8
 8005fd2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005fda:	f043 0208 	orr.w	r2, r3, #8
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8005fe4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8005fe8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005fec:	2b00      	cmp	r3, #0
 8005fee:	d012      	beq.n	8006016 <HAL_UART_IRQHandler+0x196>
 8005ff0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8005ff4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005ff8:	2b00      	cmp	r3, #0
 8005ffa:	d00c      	beq.n	8006016 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8005ffc:	687b      	ldr	r3, [r7, #4]
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006004:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800600c:	f043 0220 	orr.w	r2, r3, #32
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006016:	687b      	ldr	r3, [r7, #4]
 8006018:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800601c:	2b00      	cmp	r3, #0
 800601e:	f000 823c 	beq.w	800649a <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8006022:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006026:	f003 0320 	and.w	r3, r3, #32
 800602a:	2b00      	cmp	r3, #0
 800602c:	d013      	beq.n	8006056 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 800602e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006032:	f003 0320 	and.w	r3, r3, #32
 8006036:	2b00      	cmp	r3, #0
 8006038:	d105      	bne.n	8006046 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 800603a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800603e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006042:	2b00      	cmp	r3, #0
 8006044:	d007      	beq.n	8006056 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800604a:	2b00      	cmp	r3, #0
 800604c:	d003      	beq.n	8006056 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006052:	6878      	ldr	r0, [r7, #4]
 8006054:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8006056:	687b      	ldr	r3, [r7, #4]
 8006058:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800605c:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800606a:	2b40      	cmp	r3, #64	; 0x40
 800606c:	d005      	beq.n	800607a <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800606e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006072:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8006076:	2b00      	cmp	r3, #0
 8006078:	d04f      	beq.n	800611a <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800607a:	6878      	ldr	r0, [r7, #4]
 800607c:	f001 f814 	bl	80070a8 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	681b      	ldr	r3, [r3, #0]
 8006084:	689b      	ldr	r3, [r3, #8]
 8006086:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800608a:	2b40      	cmp	r3, #64	; 0x40
 800608c:	d141      	bne.n	8006112 <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	681b      	ldr	r3, [r3, #0]
 8006092:	3308      	adds	r3, #8
 8006094:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006098:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800609c:	e853 3f00 	ldrex	r3, [r3]
 80060a0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80060a4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80060a8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80060ac:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	681b      	ldr	r3, [r3, #0]
 80060b4:	3308      	adds	r3, #8
 80060b6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80060ba:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80060be:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80060c2:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80060c6:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80060ca:	e841 2300 	strex	r3, r2, [r1]
 80060ce:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80060d2:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	d1d9      	bne.n	800608e <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d013      	beq.n	800610a <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060e6:	4a14      	ldr	r2, [pc, #80]	; (8006138 <HAL_UART_IRQHandler+0x2b8>)
 80060e8:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fc fe6d 	bl	8002dce <HAL_DMA_Abort_IT>
 80060f4:	4603      	mov	r3, r0
 80060f6:	2b00      	cmp	r3, #0
 80060f8:	d017      	beq.n	800612a <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80060fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006100:	687a      	ldr	r2, [r7, #4]
 8006102:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8006104:	4610      	mov	r0, r2
 8006106:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006108:	e00f      	b.n	800612a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f9da 	bl	80064c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006110:	e00b      	b.n	800612a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f9d6 	bl	80064c4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006118:	e007      	b.n	800612a <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800611a:	6878      	ldr	r0, [r7, #4]
 800611c:	f000 f9d2 	bl	80064c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	2200      	movs	r2, #0
 8006124:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8006128:	e1b7      	b.n	800649a <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612a:	bf00      	nop
    return;
 800612c:	e1b5      	b.n	800649a <HAL_UART_IRQHandler+0x61a>
 800612e:	bf00      	nop
 8006130:	10000001 	.word	0x10000001
 8006134:	04000120 	.word	0x04000120
 8006138:	08007175 	.word	0x08007175

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8006140:	2b01      	cmp	r3, #1
 8006142:	f040 814a 	bne.w	80063da <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8006146:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800614a:	f003 0310 	and.w	r3, r3, #16
 800614e:	2b00      	cmp	r3, #0
 8006150:	f000 8143 	beq.w	80063da <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8006154:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006158:	f003 0310 	and.w	r3, r3, #16
 800615c:	2b00      	cmp	r3, #0
 800615e:	f000 813c 	beq.w	80063da <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	2210      	movs	r2, #16
 8006168:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800616a:	687b      	ldr	r3, [r7, #4]
 800616c:	681b      	ldr	r3, [r3, #0]
 800616e:	689b      	ldr	r3, [r3, #8]
 8006170:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006174:	2b40      	cmp	r3, #64	; 0x40
 8006176:	f040 80b5 	bne.w	80062e4 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	685b      	ldr	r3, [r3, #4]
 8006182:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006186:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800618a:	2b00      	cmp	r3, #0
 800618c:	f000 8187 	beq.w	800649e <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8006196:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800619a:	429a      	cmp	r2, r3
 800619c:	f080 817f 	bcs.w	800649e <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80061a6:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	f003 0320 	and.w	r3, r3, #32
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	f040 8086 	bne.w	80062c8 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	681b      	ldr	r3, [r3, #0]
 80061c0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80061c8:	e853 3f00 	ldrex	r3, [r3]
 80061cc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80061d0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80061d4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80061d8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	461a      	mov	r2, r3
 80061e2:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 80061e6:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 80061ea:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ee:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80061f2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80061f6:	e841 2300 	strex	r3, r2, [r1]
 80061fa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80061fe:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006202:	2b00      	cmp	r3, #0
 8006204:	d1da      	bne.n	80061bc <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	3308      	adds	r3, #8
 800620c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800620e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006210:	e853 3f00 	ldrex	r3, [r3]
 8006214:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006216:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006218:	f023 0301 	bic.w	r3, r3, #1
 800621c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	3308      	adds	r3, #8
 8006226:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800622a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800622e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006230:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006232:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006236:	e841 2300 	strex	r3, r2, [r1]
 800623a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800623c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800623e:	2b00      	cmp	r3, #0
 8006240:	d1e1      	bne.n	8006206 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006242:	687b      	ldr	r3, [r7, #4]
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	3308      	adds	r3, #8
 8006248:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800624c:	e853 3f00 	ldrex	r3, [r3]
 8006250:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006252:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006254:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006258:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	3308      	adds	r3, #8
 8006262:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006266:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006268:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800626c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800626e:	e841 2300 	strex	r3, r2, [r1]
 8006272:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006274:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006276:	2b00      	cmp	r3, #0
 8006278:	d1e3      	bne.n	8006242 <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	2220      	movs	r2, #32
 800627e:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	2200      	movs	r2, #0
 8006286:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800628e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006290:	e853 3f00 	ldrex	r3, [r3]
 8006294:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006296:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006298:	f023 0310 	bic.w	r3, r3, #16
 800629c:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	461a      	mov	r2, r3
 80062a6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80062aa:	65bb      	str	r3, [r7, #88]	; 0x58
 80062ac:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80062ae:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80062b0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80062b2:	e841 2300 	strex	r3, r2, [r1]
 80062b6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80062b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80062ba:	2b00      	cmp	r3, #0
 80062bc:	d1e4      	bne.n	8006288 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80062c2:	4618      	mov	r0, r3
 80062c4:	f7fc fd2a 	bl	8002d1c <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062d4:	b29b      	uxth	r3, r3
 80062d6:	1ad3      	subs	r3, r2, r3
 80062d8:	b29b      	uxth	r3, r3
 80062da:	4619      	mov	r1, r3
 80062dc:	6878      	ldr	r0, [r7, #4]
 80062de:	f000 f8fb 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80062e2:	e0dc      	b.n	800649e <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062f0:	b29b      	uxth	r3, r3
 80062f2:	1ad3      	subs	r3, r2, r3
 80062f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80062fe:	b29b      	uxth	r3, r3
 8006300:	2b00      	cmp	r3, #0
 8006302:	f000 80ce 	beq.w	80064a2 <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8006306:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800630a:	2b00      	cmp	r3, #0
 800630c:	f000 80c9 	beq.w	80064a2 <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006316:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006318:	e853 3f00 	ldrex	r3, [r3]
 800631c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800631e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006320:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006324:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006328:	687b      	ldr	r3, [r7, #4]
 800632a:	681b      	ldr	r3, [r3, #0]
 800632c:	461a      	mov	r2, r3
 800632e:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8006332:	647b      	str	r3, [r7, #68]	; 0x44
 8006334:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006336:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006338:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800633a:	e841 2300 	strex	r3, r2, [r1]
 800633e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006340:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006342:	2b00      	cmp	r3, #0
 8006344:	d1e4      	bne.n	8006310 <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	3308      	adds	r3, #8
 800634c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800634e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006350:	e853 3f00 	ldrex	r3, [r3]
 8006354:	623b      	str	r3, [r7, #32]
   return(result);
 8006356:	6a3b      	ldr	r3, [r7, #32]
 8006358:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800635c:	f023 0301 	bic.w	r3, r3, #1
 8006360:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	3308      	adds	r3, #8
 800636a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800636e:	633a      	str	r2, [r7, #48]	; 0x30
 8006370:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006372:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006374:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006376:	e841 2300 	strex	r3, r2, [r1]
 800637a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800637c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800637e:	2b00      	cmp	r3, #0
 8006380:	d1e1      	bne.n	8006346 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	2220      	movs	r2, #32
 8006386:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800639c:	693b      	ldr	r3, [r7, #16]
 800639e:	e853 3f00 	ldrex	r3, [r3]
 80063a2:	60fb      	str	r3, [r7, #12]
   return(result);
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	f023 0310 	bic.w	r3, r3, #16
 80063aa:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	681b      	ldr	r3, [r3, #0]
 80063b2:	461a      	mov	r2, r3
 80063b4:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80063b8:	61fb      	str	r3, [r7, #28]
 80063ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063bc:	69b9      	ldr	r1, [r7, #24]
 80063be:	69fa      	ldr	r2, [r7, #28]
 80063c0:	e841 2300 	strex	r3, r2, [r1]
 80063c4:	617b      	str	r3, [r7, #20]
   return(result);
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	2b00      	cmp	r3, #0
 80063ca:	d1e4      	bne.n	8006396 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063cc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80063d0:	4619      	mov	r1, r3
 80063d2:	6878      	ldr	r0, [r7, #4]
 80063d4:	f000 f880 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 80063d8:	e063      	b.n	80064a2 <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 80063da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80063de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80063e2:	2b00      	cmp	r3, #0
 80063e4:	d00e      	beq.n	8006404 <HAL_UART_IRQHandler+0x584>
 80063e6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80063ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063ee:	2b00      	cmp	r3, #0
 80063f0:	d008      	beq.n	8006404 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	681b      	ldr	r3, [r3, #0]
 80063f6:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80063fa:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 80063fc:	6878      	ldr	r0, [r7, #4]
 80063fe:	f001 fb57 	bl	8007ab0 <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006402:	e051      	b.n	80064a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8006404:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006408:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800640c:	2b00      	cmp	r3, #0
 800640e:	d014      	beq.n	800643a <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8006410:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006414:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006418:	2b00      	cmp	r3, #0
 800641a:	d105      	bne.n	8006428 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 800641c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006420:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006424:	2b00      	cmp	r3, #0
 8006426:	d008      	beq.n	800643a <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800642c:	2b00      	cmp	r3, #0
 800642e:	d03a      	beq.n	80064a6 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006434:	6878      	ldr	r0, [r7, #4]
 8006436:	4798      	blx	r3
    }
    return;
 8006438:	e035      	b.n	80064a6 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800643a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800643e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006442:	2b00      	cmp	r3, #0
 8006444:	d009      	beq.n	800645a <HAL_UART_IRQHandler+0x5da>
 8006446:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800644a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f000 fea4 	bl	80071a0 <UART_EndTransmit_IT>
    return;
 8006458:	e026      	b.n	80064a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 800645a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800645e:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8006462:	2b00      	cmp	r3, #0
 8006464:	d009      	beq.n	800647a <HAL_UART_IRQHandler+0x5fa>
 8006466:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800646a:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 800646e:	2b00      	cmp	r3, #0
 8006470:	d003      	beq.n	800647a <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f001 fb30 	bl	8007ad8 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006478:	e016      	b.n	80064a8 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 800647a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800647e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8006482:	2b00      	cmp	r3, #0
 8006484:	d010      	beq.n	80064a8 <HAL_UART_IRQHandler+0x628>
 8006486:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800648a:	2b00      	cmp	r3, #0
 800648c:	da0c      	bge.n	80064a8 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 800648e:	6878      	ldr	r0, [r7, #4]
 8006490:	f001 fb18 	bl	8007ac4 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8006494:	e008      	b.n	80064a8 <HAL_UART_IRQHandler+0x628>
      return;
 8006496:	bf00      	nop
 8006498:	e006      	b.n	80064a8 <HAL_UART_IRQHandler+0x628>
    return;
 800649a:	bf00      	nop
 800649c:	e004      	b.n	80064a8 <HAL_UART_IRQHandler+0x628>
      return;
 800649e:	bf00      	nop
 80064a0:	e002      	b.n	80064a8 <HAL_UART_IRQHandler+0x628>
      return;
 80064a2:	bf00      	nop
 80064a4:	e000      	b.n	80064a8 <HAL_UART_IRQHandler+0x628>
    return;
 80064a6:	bf00      	nop
  }
}
 80064a8:	37e8      	adds	r7, #232	; 0xe8
 80064aa:	46bd      	mov	sp, r7
 80064ac:	bd80      	pop	{r7, pc}
 80064ae:	bf00      	nop

080064b0 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80064b0:	b480      	push	{r7}
 80064b2:	b083      	sub	sp, #12
 80064b4:	af00      	add	r7, sp, #0
 80064b6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 80064b8:	bf00      	nop
 80064ba:	370c      	adds	r7, #12
 80064bc:	46bd      	mov	sp, r7
 80064be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c2:	4770      	bx	lr

080064c4 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80064c4:	b480      	push	{r7}
 80064c6:	b083      	sub	sp, #12
 80064c8:	af00      	add	r7, sp, #0
 80064ca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 80064cc:	bf00      	nop
 80064ce:	370c      	adds	r7, #12
 80064d0:	46bd      	mov	sp, r7
 80064d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064d6:	4770      	bx	lr

080064d8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80064d8:	b480      	push	{r7}
 80064da:	b083      	sub	sp, #12
 80064dc:	af00      	add	r7, sp, #0
 80064de:	6078      	str	r0, [r7, #4]
 80064e0:	460b      	mov	r3, r1
 80064e2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80064e4:	bf00      	nop
 80064e6:	370c      	adds	r7, #12
 80064e8:	46bd      	mov	sp, r7
 80064ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ee:	4770      	bx	lr

080064f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80064f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80064f4:	b08c      	sub	sp, #48	; 0x30
 80064f6:	af00      	add	r7, sp, #0
 80064f8:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80064fa:	2300      	movs	r3, #0
 80064fc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006500:	697b      	ldr	r3, [r7, #20]
 8006502:	689a      	ldr	r2, [r3, #8]
 8006504:	697b      	ldr	r3, [r7, #20]
 8006506:	691b      	ldr	r3, [r3, #16]
 8006508:	431a      	orrs	r2, r3
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	695b      	ldr	r3, [r3, #20]
 800650e:	431a      	orrs	r2, r3
 8006510:	697b      	ldr	r3, [r7, #20]
 8006512:	69db      	ldr	r3, [r3, #28]
 8006514:	4313      	orrs	r3, r2
 8006516:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006518:	697b      	ldr	r3, [r7, #20]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	681a      	ldr	r2, [r3, #0]
 800651e:	4baa      	ldr	r3, [pc, #680]	; (80067c8 <UART_SetConfig+0x2d8>)
 8006520:	4013      	ands	r3, r2
 8006522:	697a      	ldr	r2, [r7, #20]
 8006524:	6812      	ldr	r2, [r2, #0]
 8006526:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006528:	430b      	orrs	r3, r1
 800652a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800652c:	697b      	ldr	r3, [r7, #20]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	685b      	ldr	r3, [r3, #4]
 8006532:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	68da      	ldr	r2, [r3, #12]
 800653a:	697b      	ldr	r3, [r7, #20]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	430a      	orrs	r2, r1
 8006540:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006542:	697b      	ldr	r3, [r7, #20]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006548:	697b      	ldr	r3, [r7, #20]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a9f      	ldr	r2, [pc, #636]	; (80067cc <UART_SetConfig+0x2dc>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d004      	beq.n	800655c <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006552:	697b      	ldr	r3, [r7, #20]
 8006554:	6a1b      	ldr	r3, [r3, #32]
 8006556:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006558:	4313      	orrs	r3, r2
 800655a:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800655c:	697b      	ldr	r3, [r7, #20]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	689b      	ldr	r3, [r3, #8]
 8006562:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 8006566:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 800656a:	697a      	ldr	r2, [r7, #20]
 800656c:	6812      	ldr	r2, [r2, #0]
 800656e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006570:	430b      	orrs	r3, r1
 8006572:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	681b      	ldr	r3, [r3, #0]
 8006578:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800657a:	f023 010f 	bic.w	r1, r3, #15
 800657e:	697b      	ldr	r3, [r7, #20]
 8006580:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006582:	697b      	ldr	r3, [r7, #20]
 8006584:	681b      	ldr	r3, [r3, #0]
 8006586:	430a      	orrs	r2, r1
 8006588:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4a90      	ldr	r2, [pc, #576]	; (80067d0 <UART_SetConfig+0x2e0>)
 8006590:	4293      	cmp	r3, r2
 8006592:	d125      	bne.n	80065e0 <UART_SetConfig+0xf0>
 8006594:	4b8f      	ldr	r3, [pc, #572]	; (80067d4 <UART_SetConfig+0x2e4>)
 8006596:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800659a:	f003 0303 	and.w	r3, r3, #3
 800659e:	2b03      	cmp	r3, #3
 80065a0:	d81a      	bhi.n	80065d8 <UART_SetConfig+0xe8>
 80065a2:	a201      	add	r2, pc, #4	; (adr r2, 80065a8 <UART_SetConfig+0xb8>)
 80065a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065a8:	080065b9 	.word	0x080065b9
 80065ac:	080065c9 	.word	0x080065c9
 80065b0:	080065c1 	.word	0x080065c1
 80065b4:	080065d1 	.word	0x080065d1
 80065b8:	2301      	movs	r3, #1
 80065ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065be:	e116      	b.n	80067ee <UART_SetConfig+0x2fe>
 80065c0:	2302      	movs	r3, #2
 80065c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065c6:	e112      	b.n	80067ee <UART_SetConfig+0x2fe>
 80065c8:	2304      	movs	r3, #4
 80065ca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065ce:	e10e      	b.n	80067ee <UART_SetConfig+0x2fe>
 80065d0:	2308      	movs	r3, #8
 80065d2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065d6:	e10a      	b.n	80067ee <UART_SetConfig+0x2fe>
 80065d8:	2310      	movs	r3, #16
 80065da:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80065de:	e106      	b.n	80067ee <UART_SetConfig+0x2fe>
 80065e0:	697b      	ldr	r3, [r7, #20]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	4a7c      	ldr	r2, [pc, #496]	; (80067d8 <UART_SetConfig+0x2e8>)
 80065e6:	4293      	cmp	r3, r2
 80065e8:	d138      	bne.n	800665c <UART_SetConfig+0x16c>
 80065ea:	4b7a      	ldr	r3, [pc, #488]	; (80067d4 <UART_SetConfig+0x2e4>)
 80065ec:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80065f0:	f003 030c 	and.w	r3, r3, #12
 80065f4:	2b0c      	cmp	r3, #12
 80065f6:	d82d      	bhi.n	8006654 <UART_SetConfig+0x164>
 80065f8:	a201      	add	r2, pc, #4	; (adr r2, 8006600 <UART_SetConfig+0x110>)
 80065fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80065fe:	bf00      	nop
 8006600:	08006635 	.word	0x08006635
 8006604:	08006655 	.word	0x08006655
 8006608:	08006655 	.word	0x08006655
 800660c:	08006655 	.word	0x08006655
 8006610:	08006645 	.word	0x08006645
 8006614:	08006655 	.word	0x08006655
 8006618:	08006655 	.word	0x08006655
 800661c:	08006655 	.word	0x08006655
 8006620:	0800663d 	.word	0x0800663d
 8006624:	08006655 	.word	0x08006655
 8006628:	08006655 	.word	0x08006655
 800662c:	08006655 	.word	0x08006655
 8006630:	0800664d 	.word	0x0800664d
 8006634:	2300      	movs	r3, #0
 8006636:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800663a:	e0d8      	b.n	80067ee <UART_SetConfig+0x2fe>
 800663c:	2302      	movs	r3, #2
 800663e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006642:	e0d4      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006644:	2304      	movs	r3, #4
 8006646:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800664a:	e0d0      	b.n	80067ee <UART_SetConfig+0x2fe>
 800664c:	2308      	movs	r3, #8
 800664e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006652:	e0cc      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006654:	2310      	movs	r3, #16
 8006656:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800665a:	e0c8      	b.n	80067ee <UART_SetConfig+0x2fe>
 800665c:	697b      	ldr	r3, [r7, #20]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	4a5e      	ldr	r2, [pc, #376]	; (80067dc <UART_SetConfig+0x2ec>)
 8006662:	4293      	cmp	r3, r2
 8006664:	d125      	bne.n	80066b2 <UART_SetConfig+0x1c2>
 8006666:	4b5b      	ldr	r3, [pc, #364]	; (80067d4 <UART_SetConfig+0x2e4>)
 8006668:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800666c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006670:	2b30      	cmp	r3, #48	; 0x30
 8006672:	d016      	beq.n	80066a2 <UART_SetConfig+0x1b2>
 8006674:	2b30      	cmp	r3, #48	; 0x30
 8006676:	d818      	bhi.n	80066aa <UART_SetConfig+0x1ba>
 8006678:	2b20      	cmp	r3, #32
 800667a:	d00a      	beq.n	8006692 <UART_SetConfig+0x1a2>
 800667c:	2b20      	cmp	r3, #32
 800667e:	d814      	bhi.n	80066aa <UART_SetConfig+0x1ba>
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <UART_SetConfig+0x19a>
 8006684:	2b10      	cmp	r3, #16
 8006686:	d008      	beq.n	800669a <UART_SetConfig+0x1aa>
 8006688:	e00f      	b.n	80066aa <UART_SetConfig+0x1ba>
 800668a:	2300      	movs	r3, #0
 800668c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006690:	e0ad      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006692:	2302      	movs	r3, #2
 8006694:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006698:	e0a9      	b.n	80067ee <UART_SetConfig+0x2fe>
 800669a:	2304      	movs	r3, #4
 800669c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a0:	e0a5      	b.n	80067ee <UART_SetConfig+0x2fe>
 80066a2:	2308      	movs	r3, #8
 80066a4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066a8:	e0a1      	b.n	80067ee <UART_SetConfig+0x2fe>
 80066aa:	2310      	movs	r3, #16
 80066ac:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066b0:	e09d      	b.n	80067ee <UART_SetConfig+0x2fe>
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	4a4a      	ldr	r2, [pc, #296]	; (80067e0 <UART_SetConfig+0x2f0>)
 80066b8:	4293      	cmp	r3, r2
 80066ba:	d125      	bne.n	8006708 <UART_SetConfig+0x218>
 80066bc:	4b45      	ldr	r3, [pc, #276]	; (80067d4 <UART_SetConfig+0x2e4>)
 80066be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80066c2:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80066c6:	2bc0      	cmp	r3, #192	; 0xc0
 80066c8:	d016      	beq.n	80066f8 <UART_SetConfig+0x208>
 80066ca:	2bc0      	cmp	r3, #192	; 0xc0
 80066cc:	d818      	bhi.n	8006700 <UART_SetConfig+0x210>
 80066ce:	2b80      	cmp	r3, #128	; 0x80
 80066d0:	d00a      	beq.n	80066e8 <UART_SetConfig+0x1f8>
 80066d2:	2b80      	cmp	r3, #128	; 0x80
 80066d4:	d814      	bhi.n	8006700 <UART_SetConfig+0x210>
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d002      	beq.n	80066e0 <UART_SetConfig+0x1f0>
 80066da:	2b40      	cmp	r3, #64	; 0x40
 80066dc:	d008      	beq.n	80066f0 <UART_SetConfig+0x200>
 80066de:	e00f      	b.n	8006700 <UART_SetConfig+0x210>
 80066e0:	2300      	movs	r3, #0
 80066e2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066e6:	e082      	b.n	80067ee <UART_SetConfig+0x2fe>
 80066e8:	2302      	movs	r3, #2
 80066ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066ee:	e07e      	b.n	80067ee <UART_SetConfig+0x2fe>
 80066f0:	2304      	movs	r3, #4
 80066f2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066f6:	e07a      	b.n	80067ee <UART_SetConfig+0x2fe>
 80066f8:	2308      	movs	r3, #8
 80066fa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80066fe:	e076      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006700:	2310      	movs	r3, #16
 8006702:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006706:	e072      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006708:	697b      	ldr	r3, [r7, #20]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	4a35      	ldr	r2, [pc, #212]	; (80067e4 <UART_SetConfig+0x2f4>)
 800670e:	4293      	cmp	r3, r2
 8006710:	d12a      	bne.n	8006768 <UART_SetConfig+0x278>
 8006712:	4b30      	ldr	r3, [pc, #192]	; (80067d4 <UART_SetConfig+0x2e4>)
 8006714:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006718:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800671c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006720:	d01a      	beq.n	8006758 <UART_SetConfig+0x268>
 8006722:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006726:	d81b      	bhi.n	8006760 <UART_SetConfig+0x270>
 8006728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800672c:	d00c      	beq.n	8006748 <UART_SetConfig+0x258>
 800672e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006732:	d815      	bhi.n	8006760 <UART_SetConfig+0x270>
 8006734:	2b00      	cmp	r3, #0
 8006736:	d003      	beq.n	8006740 <UART_SetConfig+0x250>
 8006738:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800673c:	d008      	beq.n	8006750 <UART_SetConfig+0x260>
 800673e:	e00f      	b.n	8006760 <UART_SetConfig+0x270>
 8006740:	2300      	movs	r3, #0
 8006742:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006746:	e052      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006748:	2302      	movs	r3, #2
 800674a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800674e:	e04e      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006750:	2304      	movs	r3, #4
 8006752:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006756:	e04a      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006758:	2308      	movs	r3, #8
 800675a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800675e:	e046      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006760:	2310      	movs	r3, #16
 8006762:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8006766:	e042      	b.n	80067ee <UART_SetConfig+0x2fe>
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	681b      	ldr	r3, [r3, #0]
 800676c:	4a17      	ldr	r2, [pc, #92]	; (80067cc <UART_SetConfig+0x2dc>)
 800676e:	4293      	cmp	r3, r2
 8006770:	d13a      	bne.n	80067e8 <UART_SetConfig+0x2f8>
 8006772:	4b18      	ldr	r3, [pc, #96]	; (80067d4 <UART_SetConfig+0x2e4>)
 8006774:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006778:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800677c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006780:	d01a      	beq.n	80067b8 <UART_SetConfig+0x2c8>
 8006782:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006786:	d81b      	bhi.n	80067c0 <UART_SetConfig+0x2d0>
 8006788:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800678c:	d00c      	beq.n	80067a8 <UART_SetConfig+0x2b8>
 800678e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006792:	d815      	bhi.n	80067c0 <UART_SetConfig+0x2d0>
 8006794:	2b00      	cmp	r3, #0
 8006796:	d003      	beq.n	80067a0 <UART_SetConfig+0x2b0>
 8006798:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800679c:	d008      	beq.n	80067b0 <UART_SetConfig+0x2c0>
 800679e:	e00f      	b.n	80067c0 <UART_SetConfig+0x2d0>
 80067a0:	2300      	movs	r3, #0
 80067a2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067a6:	e022      	b.n	80067ee <UART_SetConfig+0x2fe>
 80067a8:	2302      	movs	r3, #2
 80067aa:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067ae:	e01e      	b.n	80067ee <UART_SetConfig+0x2fe>
 80067b0:	2304      	movs	r3, #4
 80067b2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067b6:	e01a      	b.n	80067ee <UART_SetConfig+0x2fe>
 80067b8:	2308      	movs	r3, #8
 80067ba:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067be:	e016      	b.n	80067ee <UART_SetConfig+0x2fe>
 80067c0:	2310      	movs	r3, #16
 80067c2:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80067c6:	e012      	b.n	80067ee <UART_SetConfig+0x2fe>
 80067c8:	cfff69f3 	.word	0xcfff69f3
 80067cc:	40008000 	.word	0x40008000
 80067d0:	40013800 	.word	0x40013800
 80067d4:	40021000 	.word	0x40021000
 80067d8:	40004400 	.word	0x40004400
 80067dc:	40004800 	.word	0x40004800
 80067e0:	40004c00 	.word	0x40004c00
 80067e4:	40005000 	.word	0x40005000
 80067e8:	2310      	movs	r3, #16
 80067ea:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80067ee:	697b      	ldr	r3, [r7, #20]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	4aae      	ldr	r2, [pc, #696]	; (8006aac <UART_SetConfig+0x5bc>)
 80067f4:	4293      	cmp	r3, r2
 80067f6:	f040 8097 	bne.w	8006928 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80067fa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 80067fe:	2b08      	cmp	r3, #8
 8006800:	d823      	bhi.n	800684a <UART_SetConfig+0x35a>
 8006802:	a201      	add	r2, pc, #4	; (adr r2, 8006808 <UART_SetConfig+0x318>)
 8006804:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006808:	0800682d 	.word	0x0800682d
 800680c:	0800684b 	.word	0x0800684b
 8006810:	08006835 	.word	0x08006835
 8006814:	0800684b 	.word	0x0800684b
 8006818:	0800683b 	.word	0x0800683b
 800681c:	0800684b 	.word	0x0800684b
 8006820:	0800684b 	.word	0x0800684b
 8006824:	0800684b 	.word	0x0800684b
 8006828:	08006843 	.word	0x08006843
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800682c:	f7fd fa6a 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8006830:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006832:	e010      	b.n	8006856 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006834:	4b9e      	ldr	r3, [pc, #632]	; (8006ab0 <UART_SetConfig+0x5c0>)
 8006836:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006838:	e00d      	b.n	8006856 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800683a:	f7fd f9f5 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 800683e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006840:	e009      	b.n	8006856 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006842:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006846:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006848:	e005      	b.n	8006856 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 800684a:	2300      	movs	r3, #0
 800684c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800684e:	2301      	movs	r3, #1
 8006850:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006854:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006856:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006858:	2b00      	cmp	r3, #0
 800685a:	f000 8130 	beq.w	8006abe <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800685e:	697b      	ldr	r3, [r7, #20]
 8006860:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006862:	4a94      	ldr	r2, [pc, #592]	; (8006ab4 <UART_SetConfig+0x5c4>)
 8006864:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006868:	461a      	mov	r2, r3
 800686a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800686c:	fbb3 f3f2 	udiv	r3, r3, r2
 8006870:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006872:	697b      	ldr	r3, [r7, #20]
 8006874:	685a      	ldr	r2, [r3, #4]
 8006876:	4613      	mov	r3, r2
 8006878:	005b      	lsls	r3, r3, #1
 800687a:	4413      	add	r3, r2
 800687c:	69ba      	ldr	r2, [r7, #24]
 800687e:	429a      	cmp	r2, r3
 8006880:	d305      	bcc.n	800688e <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8006882:	697b      	ldr	r3, [r7, #20]
 8006884:	685b      	ldr	r3, [r3, #4]
 8006886:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8006888:	69ba      	ldr	r2, [r7, #24]
 800688a:	429a      	cmp	r2, r3
 800688c:	d903      	bls.n	8006896 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 800688e:	2301      	movs	r3, #1
 8006890:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006894:	e113      	b.n	8006abe <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006896:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006898:	2200      	movs	r2, #0
 800689a:	60bb      	str	r3, [r7, #8]
 800689c:	60fa      	str	r2, [r7, #12]
 800689e:	697b      	ldr	r3, [r7, #20]
 80068a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80068a2:	4a84      	ldr	r2, [pc, #528]	; (8006ab4 <UART_SetConfig+0x5c4>)
 80068a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80068a8:	b29b      	uxth	r3, r3
 80068aa:	2200      	movs	r2, #0
 80068ac:	603b      	str	r3, [r7, #0]
 80068ae:	607a      	str	r2, [r7, #4]
 80068b0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80068b4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80068b8:	f7f9 fd1a 	bl	80002f0 <__aeabi_uldivmod>
 80068bc:	4602      	mov	r2, r0
 80068be:	460b      	mov	r3, r1
 80068c0:	4610      	mov	r0, r2
 80068c2:	4619      	mov	r1, r3
 80068c4:	f04f 0200 	mov.w	r2, #0
 80068c8:	f04f 0300 	mov.w	r3, #0
 80068cc:	020b      	lsls	r3, r1, #8
 80068ce:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80068d2:	0202      	lsls	r2, r0, #8
 80068d4:	6979      	ldr	r1, [r7, #20]
 80068d6:	6849      	ldr	r1, [r1, #4]
 80068d8:	0849      	lsrs	r1, r1, #1
 80068da:	2000      	movs	r0, #0
 80068dc:	460c      	mov	r4, r1
 80068de:	4605      	mov	r5, r0
 80068e0:	eb12 0804 	adds.w	r8, r2, r4
 80068e4:	eb43 0905 	adc.w	r9, r3, r5
 80068e8:	697b      	ldr	r3, [r7, #20]
 80068ea:	685b      	ldr	r3, [r3, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	469a      	mov	sl, r3
 80068f0:	4693      	mov	fp, r2
 80068f2:	4652      	mov	r2, sl
 80068f4:	465b      	mov	r3, fp
 80068f6:	4640      	mov	r0, r8
 80068f8:	4649      	mov	r1, r9
 80068fa:	f7f9 fcf9 	bl	80002f0 <__aeabi_uldivmod>
 80068fe:	4602      	mov	r2, r0
 8006900:	460b      	mov	r3, r1
 8006902:	4613      	mov	r3, r2
 8006904:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8006906:	6a3b      	ldr	r3, [r7, #32]
 8006908:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800690c:	d308      	bcc.n	8006920 <UART_SetConfig+0x430>
 800690e:	6a3b      	ldr	r3, [r7, #32]
 8006910:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006914:	d204      	bcs.n	8006920 <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8006916:	697b      	ldr	r3, [r7, #20]
 8006918:	681b      	ldr	r3, [r3, #0]
 800691a:	6a3a      	ldr	r2, [r7, #32]
 800691c:	60da      	str	r2, [r3, #12]
 800691e:	e0ce      	b.n	8006abe <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 8006920:	2301      	movs	r3, #1
 8006922:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8006926:	e0ca      	b.n	8006abe <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	69db      	ldr	r3, [r3, #28]
 800692c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006930:	d166      	bne.n	8006a00 <UART_SetConfig+0x510>
  {
    switch (clocksource)
 8006932:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006936:	2b08      	cmp	r3, #8
 8006938:	d827      	bhi.n	800698a <UART_SetConfig+0x49a>
 800693a:	a201      	add	r2, pc, #4	; (adr r2, 8006940 <UART_SetConfig+0x450>)
 800693c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006940:	08006965 	.word	0x08006965
 8006944:	0800696d 	.word	0x0800696d
 8006948:	08006975 	.word	0x08006975
 800694c:	0800698b 	.word	0x0800698b
 8006950:	0800697b 	.word	0x0800697b
 8006954:	0800698b 	.word	0x0800698b
 8006958:	0800698b 	.word	0x0800698b
 800695c:	0800698b 	.word	0x0800698b
 8006960:	08006983 	.word	0x08006983
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006964:	f7fd f9ce 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8006968:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800696a:	e014      	b.n	8006996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800696c:	f7fd f9e0 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 8006970:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006972:	e010      	b.n	8006996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006974:	4b4e      	ldr	r3, [pc, #312]	; (8006ab0 <UART_SetConfig+0x5c0>)
 8006976:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006978:	e00d      	b.n	8006996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800697a:	f7fd f955 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 800697e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006980:	e009      	b.n	8006996 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006982:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006986:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006988:	e005      	b.n	8006996 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 800698a:	2300      	movs	r3, #0
 800698c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800698e:	2301      	movs	r3, #1
 8006990:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006994:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8006996:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006998:	2b00      	cmp	r3, #0
 800699a:	f000 8090 	beq.w	8006abe <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800699e:	697b      	ldr	r3, [r7, #20]
 80069a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069a2:	4a44      	ldr	r2, [pc, #272]	; (8006ab4 <UART_SetConfig+0x5c4>)
 80069a4:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80069a8:	461a      	mov	r2, r3
 80069aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80069ac:	fbb3 f3f2 	udiv	r3, r3, r2
 80069b0:	005a      	lsls	r2, r3, #1
 80069b2:	697b      	ldr	r3, [r7, #20]
 80069b4:	685b      	ldr	r3, [r3, #4]
 80069b6:	085b      	lsrs	r3, r3, #1
 80069b8:	441a      	add	r2, r3
 80069ba:	697b      	ldr	r3, [r7, #20]
 80069bc:	685b      	ldr	r3, [r3, #4]
 80069be:	fbb2 f3f3 	udiv	r3, r2, r3
 80069c2:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80069c4:	6a3b      	ldr	r3, [r7, #32]
 80069c6:	2b0f      	cmp	r3, #15
 80069c8:	d916      	bls.n	80069f8 <UART_SetConfig+0x508>
 80069ca:	6a3b      	ldr	r3, [r7, #32]
 80069cc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80069d0:	d212      	bcs.n	80069f8 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80069d2:	6a3b      	ldr	r3, [r7, #32]
 80069d4:	b29b      	uxth	r3, r3
 80069d6:	f023 030f 	bic.w	r3, r3, #15
 80069da:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80069dc:	6a3b      	ldr	r3, [r7, #32]
 80069de:	085b      	lsrs	r3, r3, #1
 80069e0:	b29b      	uxth	r3, r3
 80069e2:	f003 0307 	and.w	r3, r3, #7
 80069e6:	b29a      	uxth	r2, r3
 80069e8:	8bfb      	ldrh	r3, [r7, #30]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 80069ee:	697b      	ldr	r3, [r7, #20]
 80069f0:	681b      	ldr	r3, [r3, #0]
 80069f2:	8bfa      	ldrh	r2, [r7, #30]
 80069f4:	60da      	str	r2, [r3, #12]
 80069f6:	e062      	b.n	8006abe <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 80069f8:	2301      	movs	r3, #1
 80069fa:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80069fe:	e05e      	b.n	8006abe <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006a00:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006a04:	2b08      	cmp	r3, #8
 8006a06:	d828      	bhi.n	8006a5a <UART_SetConfig+0x56a>
 8006a08:	a201      	add	r2, pc, #4	; (adr r2, 8006a10 <UART_SetConfig+0x520>)
 8006a0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006a0e:	bf00      	nop
 8006a10:	08006a35 	.word	0x08006a35
 8006a14:	08006a3d 	.word	0x08006a3d
 8006a18:	08006a45 	.word	0x08006a45
 8006a1c:	08006a5b 	.word	0x08006a5b
 8006a20:	08006a4b 	.word	0x08006a4b
 8006a24:	08006a5b 	.word	0x08006a5b
 8006a28:	08006a5b 	.word	0x08006a5b
 8006a2c:	08006a5b 	.word	0x08006a5b
 8006a30:	08006a53 	.word	0x08006a53
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8006a34:	f7fd f966 	bl	8003d04 <HAL_RCC_GetPCLK1Freq>
 8006a38:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a3a:	e014      	b.n	8006a66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006a3c:	f7fd f978 	bl	8003d30 <HAL_RCC_GetPCLK2Freq>
 8006a40:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a42:	e010      	b.n	8006a66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8006a44:	4b1a      	ldr	r3, [pc, #104]	; (8006ab0 <UART_SetConfig+0x5c0>)
 8006a46:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a48:	e00d      	b.n	8006a66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006a4a:	f7fd f8ed 	bl	8003c28 <HAL_RCC_GetSysClockFreq>
 8006a4e:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8006a50:	e009      	b.n	8006a66 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8006a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8006a58:	e005      	b.n	8006a66 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 8006a5e:	2301      	movs	r3, #1
 8006a60:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8006a64:	bf00      	nop
    }

    if (pclk != 0U)
 8006a66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d028      	beq.n	8006abe <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 8006a6c:	697b      	ldr	r3, [r7, #20]
 8006a6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006a70:	4a10      	ldr	r2, [pc, #64]	; (8006ab4 <UART_SetConfig+0x5c4>)
 8006a72:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8006a76:	461a      	mov	r2, r3
 8006a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a7a:	fbb3 f2f2 	udiv	r2, r3, r2
 8006a7e:	697b      	ldr	r3, [r7, #20]
 8006a80:	685b      	ldr	r3, [r3, #4]
 8006a82:	085b      	lsrs	r3, r3, #1
 8006a84:	441a      	add	r2, r3
 8006a86:	697b      	ldr	r3, [r7, #20]
 8006a88:	685b      	ldr	r3, [r3, #4]
 8006a8a:	fbb2 f3f3 	udiv	r3, r2, r3
 8006a8e:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006a90:	6a3b      	ldr	r3, [r7, #32]
 8006a92:	2b0f      	cmp	r3, #15
 8006a94:	d910      	bls.n	8006ab8 <UART_SetConfig+0x5c8>
 8006a96:	6a3b      	ldr	r3, [r7, #32]
 8006a98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006a9c:	d20c      	bcs.n	8006ab8 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8006a9e:	6a3b      	ldr	r3, [r7, #32]
 8006aa0:	b29a      	uxth	r2, r3
 8006aa2:	697b      	ldr	r3, [r7, #20]
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	60da      	str	r2, [r3, #12]
 8006aa8:	e009      	b.n	8006abe <UART_SetConfig+0x5ce>
 8006aaa:	bf00      	nop
 8006aac:	40008000 	.word	0x40008000
 8006ab0:	00f42400 	.word	0x00f42400
 8006ab4:	08009250 	.word	0x08009250
      }
      else
      {
        ret = HAL_ERROR;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 8006abe:	697b      	ldr	r3, [r7, #20]
 8006ac0:	2201      	movs	r2, #1
 8006ac2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8006ac6:	697b      	ldr	r3, [r7, #20]
 8006ac8:	2201      	movs	r2, #1
 8006aca:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8006ace:	697b      	ldr	r3, [r7, #20]
 8006ad0:	2200      	movs	r2, #0
 8006ad2:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8006ad4:	697b      	ldr	r3, [r7, #20]
 8006ad6:	2200      	movs	r2, #0
 8006ad8:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8006ada:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 8006ade:	4618      	mov	r0, r3
 8006ae0:	3730      	adds	r7, #48	; 0x30
 8006ae2:	46bd      	mov	sp, r7
 8006ae4:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08006ae8 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006ae8:	b480      	push	{r7}
 8006aea:	b083      	sub	sp, #12
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006af4:	f003 0301 	and.w	r3, r3, #1
 8006af8:	2b00      	cmp	r3, #0
 8006afa:	d00a      	beq.n	8006b12 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	685b      	ldr	r3, [r3, #4]
 8006b02:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b0a:	687b      	ldr	r3, [r7, #4]
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	430a      	orrs	r2, r1
 8006b10:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b16:	f003 0302 	and.w	r3, r3, #2
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d00a      	beq.n	8006b34 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	685b      	ldr	r3, [r3, #4]
 8006b24:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006b28:	687b      	ldr	r3, [r7, #4]
 8006b2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	430a      	orrs	r2, r1
 8006b32:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b38:	f003 0304 	and.w	r3, r3, #4
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d00a      	beq.n	8006b56 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006b40:	687b      	ldr	r3, [r7, #4]
 8006b42:	681b      	ldr	r3, [r3, #0]
 8006b44:	685b      	ldr	r3, [r3, #4]
 8006b46:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8006b4a:	687b      	ldr	r3, [r7, #4]
 8006b4c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8006b4e:	687b      	ldr	r3, [r7, #4]
 8006b50:	681b      	ldr	r3, [r3, #0]
 8006b52:	430a      	orrs	r2, r1
 8006b54:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b5a:	f003 0308 	and.w	r3, r3, #8
 8006b5e:	2b00      	cmp	r3, #0
 8006b60:	d00a      	beq.n	8006b78 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	681b      	ldr	r3, [r3, #0]
 8006b66:	685b      	ldr	r3, [r3, #4]
 8006b68:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8006b6c:	687b      	ldr	r3, [r7, #4]
 8006b6e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	430a      	orrs	r2, r1
 8006b76:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b7c:	f003 0310 	and.w	r3, r3, #16
 8006b80:	2b00      	cmp	r3, #0
 8006b82:	d00a      	beq.n	8006b9a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8006b84:	687b      	ldr	r3, [r7, #4]
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	689b      	ldr	r3, [r3, #8]
 8006b8a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	681b      	ldr	r3, [r3, #0]
 8006b96:	430a      	orrs	r2, r1
 8006b98:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b9e:	f003 0320 	and.w	r3, r3, #32
 8006ba2:	2b00      	cmp	r3, #0
 8006ba4:	d00a      	beq.n	8006bbc <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	689b      	ldr	r3, [r3, #8]
 8006bac:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	430a      	orrs	r2, r1
 8006bba:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8006bbc:	687b      	ldr	r3, [r7, #4]
 8006bbe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006bc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01a      	beq.n	8006bfe <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	685b      	ldr	r3, [r3, #4]
 8006bce:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	430a      	orrs	r2, r1
 8006bdc:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006be2:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006be6:	d10a      	bne.n	8006bfe <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	685b      	ldr	r3, [r3, #4]
 8006bee:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006bf2:	687b      	ldr	r3, [r7, #4]
 8006bf4:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	681b      	ldr	r3, [r3, #0]
 8006bfa:	430a      	orrs	r2, r1
 8006bfc:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c06:	2b00      	cmp	r3, #0
 8006c08:	d00a      	beq.n	8006c20 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	681b      	ldr	r3, [r3, #0]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	430a      	orrs	r2, r1
 8006c1e:	605a      	str	r2, [r3, #4]
  }
}
 8006c20:	bf00      	nop
 8006c22:	370c      	adds	r7, #12
 8006c24:	46bd      	mov	sp, r7
 8006c26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2a:	4770      	bx	lr

08006c2c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b086      	sub	sp, #24
 8006c30:	af02      	add	r7, sp, #8
 8006c32:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	2200      	movs	r2, #0
 8006c38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8006c3c:	f7fa fe78 	bl	8001930 <HAL_GetTick>
 8006c40:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f003 0308 	and.w	r3, r3, #8
 8006c4c:	2b08      	cmp	r3, #8
 8006c4e:	d10e      	bne.n	8006c6e <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c50:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c54:	9300      	str	r3, [sp, #0]
 8006c56:	68fb      	ldr	r3, [r7, #12]
 8006c58:	2200      	movs	r2, #0
 8006c5a:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8006c5e:	6878      	ldr	r0, [r7, #4]
 8006c60:	f000 f82f 	bl	8006cc2 <UART_WaitOnFlagUntilTimeout>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d001      	beq.n	8006c6e <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c6a:	2303      	movs	r3, #3
 8006c6c:	e025      	b.n	8006cba <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	681b      	ldr	r3, [r3, #0]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f003 0304 	and.w	r3, r3, #4
 8006c78:	2b04      	cmp	r3, #4
 8006c7a:	d10e      	bne.n	8006c9a <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8006c7c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8006c80:	9300      	str	r3, [sp, #0]
 8006c82:	68fb      	ldr	r3, [r7, #12]
 8006c84:	2200      	movs	r2, #0
 8006c86:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f819 	bl	8006cc2 <UART_WaitOnFlagUntilTimeout>
 8006c90:	4603      	mov	r3, r0
 8006c92:	2b00      	cmp	r3, #0
 8006c94:	d001      	beq.n	8006c9a <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8006c96:	2303      	movs	r3, #3
 8006c98:	e00f      	b.n	8006cba <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2220      	movs	r2, #32
 8006c9e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 8006ca2:	687b      	ldr	r3, [r7, #4]
 8006ca4:	2220      	movs	r2, #32
 8006ca6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2200      	movs	r2, #0
 8006cae:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8006cb8:	2300      	movs	r3, #0
}
 8006cba:	4618      	mov	r0, r3
 8006cbc:	3710      	adds	r7, #16
 8006cbe:	46bd      	mov	sp, r7
 8006cc0:	bd80      	pop	{r7, pc}

08006cc2 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8006cc2:	b580      	push	{r7, lr}
 8006cc4:	b09c      	sub	sp, #112	; 0x70
 8006cc6:	af00      	add	r7, sp, #0
 8006cc8:	60f8      	str	r0, [r7, #12]
 8006cca:	60b9      	str	r1, [r7, #8]
 8006ccc:	603b      	str	r3, [r7, #0]
 8006cce:	4613      	mov	r3, r2
 8006cd0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006cd2:	e0a9      	b.n	8006e28 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006cd4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cda:	f000 80a5 	beq.w	8006e28 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006cde:	f7fa fe27 	bl	8001930 <HAL_GetTick>
 8006ce2:	4602      	mov	r2, r0
 8006ce4:	683b      	ldr	r3, [r7, #0]
 8006ce6:	1ad3      	subs	r3, r2, r3
 8006ce8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006cea:	429a      	cmp	r2, r3
 8006cec:	d302      	bcc.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0x32>
 8006cee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006cf0:	2b00      	cmp	r3, #0
 8006cf2:	d140      	bne.n	8006d76 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cfa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006cfc:	e853 3f00 	ldrex	r3, [r3]
 8006d00:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006d02:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006d04:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d08:	667b      	str	r3, [r7, #100]	; 0x64
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	681b      	ldr	r3, [r3, #0]
 8006d0e:	461a      	mov	r2, r3
 8006d10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006d12:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006d14:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d16:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006d18:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006d1a:	e841 2300 	strex	r3, r2, [r1]
 8006d1e:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006d20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d1e6      	bne.n	8006cf4 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d26:	68fb      	ldr	r3, [r7, #12]
 8006d28:	681b      	ldr	r3, [r3, #0]
 8006d2a:	3308      	adds	r3, #8
 8006d2c:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006d38:	f023 0301 	bic.w	r3, r3, #1
 8006d3c:	663b      	str	r3, [r7, #96]	; 0x60
 8006d3e:	68fb      	ldr	r3, [r7, #12]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	3308      	adds	r3, #8
 8006d44:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006d46:	64ba      	str	r2, [r7, #72]	; 0x48
 8006d48:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d4a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006d4c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d4e:	e841 2300 	strex	r3, r2, [r1]
 8006d52:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006d54:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d1e5      	bne.n	8006d26 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	2220      	movs	r2, #32
 8006d5e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	2220      	movs	r2, #32
 8006d66:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	2200      	movs	r2, #0
 8006d6e:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 8006d72:	2303      	movs	r3, #3
 8006d74:	e069      	b.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	681b      	ldr	r3, [r3, #0]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	f003 0304 	and.w	r3, r3, #4
 8006d80:	2b00      	cmp	r3, #0
 8006d82:	d051      	beq.n	8006e28 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8006d84:	68fb      	ldr	r3, [r7, #12]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	69db      	ldr	r3, [r3, #28]
 8006d8a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006d8e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006d92:	d149      	bne.n	8006e28 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8006d9c:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006da4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006da6:	e853 3f00 	ldrex	r3, [r3]
 8006daa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006dac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dae:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006db2:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	461a      	mov	r2, r3
 8006dba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006dbc:	637b      	str	r3, [r7, #52]	; 0x34
 8006dbe:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006dc2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006dc4:	e841 2300 	strex	r3, r2, [r1]
 8006dc8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006dca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d1e6      	bne.n	8006d9e <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006dd0:	68fb      	ldr	r3, [r7, #12]
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	3308      	adds	r3, #8
 8006dd6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dd8:	697b      	ldr	r3, [r7, #20]
 8006dda:	e853 3f00 	ldrex	r3, [r3]
 8006dde:	613b      	str	r3, [r7, #16]
   return(result);
 8006de0:	693b      	ldr	r3, [r7, #16]
 8006de2:	f023 0301 	bic.w	r3, r3, #1
 8006de6:	66bb      	str	r3, [r7, #104]	; 0x68
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	681b      	ldr	r3, [r3, #0]
 8006dec:	3308      	adds	r3, #8
 8006dee:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006df0:	623a      	str	r2, [r7, #32]
 8006df2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df4:	69f9      	ldr	r1, [r7, #28]
 8006df6:	6a3a      	ldr	r2, [r7, #32]
 8006df8:	e841 2300 	strex	r3, r2, [r1]
 8006dfc:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dfe:	69bb      	ldr	r3, [r7, #24]
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d1e5      	bne.n	8006dd0 <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8006e04:	68fb      	ldr	r3, [r7, #12]
 8006e06:	2220      	movs	r2, #32
 8006e08:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	2220      	movs	r2, #32
 8006e10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006e14:	68fb      	ldr	r3, [r7, #12]
 8006e16:	2220      	movs	r2, #32
 8006e18:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	2200      	movs	r2, #0
 8006e20:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8006e24:	2303      	movs	r3, #3
 8006e26:	e010      	b.n	8006e4a <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006e28:	68fb      	ldr	r3, [r7, #12]
 8006e2a:	681b      	ldr	r3, [r3, #0]
 8006e2c:	69da      	ldr	r2, [r3, #28]
 8006e2e:	68bb      	ldr	r3, [r7, #8]
 8006e30:	4013      	ands	r3, r2
 8006e32:	68ba      	ldr	r2, [r7, #8]
 8006e34:	429a      	cmp	r2, r3
 8006e36:	bf0c      	ite	eq
 8006e38:	2301      	moveq	r3, #1
 8006e3a:	2300      	movne	r3, #0
 8006e3c:	b2db      	uxtb	r3, r3
 8006e3e:	461a      	mov	r2, r3
 8006e40:	79fb      	ldrb	r3, [r7, #7]
 8006e42:	429a      	cmp	r2, r3
 8006e44:	f43f af46 	beq.w	8006cd4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006e48:	2300      	movs	r3, #0
}
 8006e4a:	4618      	mov	r0, r3
 8006e4c:	3770      	adds	r7, #112	; 0x70
 8006e4e:	46bd      	mov	sp, r7
 8006e50:	bd80      	pop	{r7, pc}
	...

08006e54 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e54:	b480      	push	{r7}
 8006e56:	b0a3      	sub	sp, #140	; 0x8c
 8006e58:	af00      	add	r7, sp, #0
 8006e5a:	60f8      	str	r0, [r7, #12]
 8006e5c:	60b9      	str	r1, [r7, #8]
 8006e5e:	4613      	mov	r3, r2
 8006e60:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	68ba      	ldr	r2, [r7, #8]
 8006e66:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	88fa      	ldrh	r2, [r7, #6]
 8006e6c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	88fa      	ldrh	r2, [r7, #6]
 8006e74:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	2200      	movs	r2, #0
 8006e7c:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	689b      	ldr	r3, [r3, #8]
 8006e82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006e86:	d10e      	bne.n	8006ea6 <UART_Start_Receive_IT+0x52>
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	691b      	ldr	r3, [r3, #16]
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d105      	bne.n	8006e9c <UART_Start_Receive_IT+0x48>
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	f240 12ff 	movw	r2, #511	; 0x1ff
 8006e96:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006e9a:	e02d      	b.n	8006ef8 <UART_Start_Receive_IT+0xa4>
 8006e9c:	68fb      	ldr	r3, [r7, #12]
 8006e9e:	22ff      	movs	r2, #255	; 0xff
 8006ea0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ea4:	e028      	b.n	8006ef8 <UART_Start_Receive_IT+0xa4>
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	689b      	ldr	r3, [r3, #8]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d10d      	bne.n	8006eca <UART_Start_Receive_IT+0x76>
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	691b      	ldr	r3, [r3, #16]
 8006eb2:	2b00      	cmp	r3, #0
 8006eb4:	d104      	bne.n	8006ec0 <UART_Start_Receive_IT+0x6c>
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	22ff      	movs	r2, #255	; 0xff
 8006eba:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ebe:	e01b      	b.n	8006ef8 <UART_Start_Receive_IT+0xa4>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	227f      	movs	r2, #127	; 0x7f
 8006ec4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ec8:	e016      	b.n	8006ef8 <UART_Start_Receive_IT+0xa4>
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	689b      	ldr	r3, [r3, #8]
 8006ece:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006ed2:	d10d      	bne.n	8006ef0 <UART_Start_Receive_IT+0x9c>
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	691b      	ldr	r3, [r3, #16]
 8006ed8:	2b00      	cmp	r3, #0
 8006eda:	d104      	bne.n	8006ee6 <UART_Start_Receive_IT+0x92>
 8006edc:	68fb      	ldr	r3, [r7, #12]
 8006ede:	227f      	movs	r2, #127	; 0x7f
 8006ee0:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006ee4:	e008      	b.n	8006ef8 <UART_Start_Receive_IT+0xa4>
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	223f      	movs	r2, #63	; 0x3f
 8006eea:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8006eee:	e003      	b.n	8006ef8 <UART_Start_Receive_IT+0xa4>
 8006ef0:	68fb      	ldr	r3, [r7, #12]
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ef8:	68fb      	ldr	r3, [r7, #12]
 8006efa:	2200      	movs	r2, #0
 8006efc:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	2222      	movs	r2, #34	; 0x22
 8006f04:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006f08:	68fb      	ldr	r3, [r7, #12]
 8006f0a:	681b      	ldr	r3, [r3, #0]
 8006f0c:	3308      	adds	r3, #8
 8006f0e:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f10:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006f12:	e853 3f00 	ldrex	r3, [r3]
 8006f16:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8006f18:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006f1a:	f043 0301 	orr.w	r3, r3, #1
 8006f1e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	3308      	adds	r3, #8
 8006f28:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8006f2c:	673a      	str	r2, [r7, #112]	; 0x70
 8006f2e:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f30:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8006f32:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8006f34:	e841 2300 	strex	r3, r2, [r1]
 8006f38:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8006f3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006f3c:	2b00      	cmp	r3, #0
 8006f3e:	d1e3      	bne.n	8006f08 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8006f40:	68fb      	ldr	r3, [r7, #12]
 8006f42:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8006f44:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006f48:	d153      	bne.n	8006ff2 <UART_Start_Receive_IT+0x19e>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8006f50:	88fa      	ldrh	r2, [r7, #6]
 8006f52:	429a      	cmp	r2, r3
 8006f54:	d34d      	bcc.n	8006ff2 <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f56:	68fb      	ldr	r3, [r7, #12]
 8006f58:	689b      	ldr	r3, [r3, #8]
 8006f5a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f5e:	d107      	bne.n	8006f70 <UART_Start_Receive_IT+0x11c>
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8006f68:	68fb      	ldr	r3, [r7, #12]
 8006f6a:	4a4b      	ldr	r2, [pc, #300]	; (8007098 <UART_Start_Receive_IT+0x244>)
 8006f6c:	671a      	str	r2, [r3, #112]	; 0x70
 8006f6e:	e002      	b.n	8006f76 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	4a4a      	ldr	r2, [pc, #296]	; (800709c <UART_Start_Receive_IT+0x248>)
 8006f74:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8006f76:	68fb      	ldr	r3, [r7, #12]
 8006f78:	2200      	movs	r2, #0
 8006f7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	691b      	ldr	r3, [r3, #16]
 8006f82:	2b00      	cmp	r3, #0
 8006f84:	d01a      	beq.n	8006fbc <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f8c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006f8e:	e853 3f00 	ldrex	r3, [r3]
 8006f92:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8006f94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006f96:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006f9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006f9e:	68fb      	ldr	r3, [r7, #12]
 8006fa0:	681b      	ldr	r3, [r3, #0]
 8006fa2:	461a      	mov	r2, r3
 8006fa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8006fa8:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006faa:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fac:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006fae:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006fb0:	e841 2300 	strex	r3, r2, [r1]
 8006fb4:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8006fb6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006fb8:	2b00      	cmp	r3, #0
 8006fba:	d1e4      	bne.n	8006f86 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	3308      	adds	r3, #8
 8006fc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006fc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006fc6:	e853 3f00 	ldrex	r3, [r3]
 8006fca:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006fcc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006fce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006fd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	681b      	ldr	r3, [r3, #0]
 8006fd8:	3308      	adds	r3, #8
 8006fda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8006fdc:	64ba      	str	r2, [r7, #72]	; 0x48
 8006fde:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006fe0:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006fe2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006fe4:	e841 2300 	strex	r3, r2, [r1]
 8006fe8:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8006fea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d1e5      	bne.n	8006fbc <UART_Start_Receive_IT+0x168>
 8006ff0:	e04a      	b.n	8007088 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ff2:	68fb      	ldr	r3, [r7, #12]
 8006ff4:	689b      	ldr	r3, [r3, #8]
 8006ff6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ffa:	d107      	bne.n	800700c <UART_Start_Receive_IT+0x1b8>
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	691b      	ldr	r3, [r3, #16]
 8007000:	2b00      	cmp	r3, #0
 8007002:	d103      	bne.n	800700c <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8007004:	68fb      	ldr	r3, [r7, #12]
 8007006:	4a26      	ldr	r2, [pc, #152]	; (80070a0 <UART_Start_Receive_IT+0x24c>)
 8007008:	671a      	str	r2, [r3, #112]	; 0x70
 800700a:	e002      	b.n	8007012 <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	4a25      	ldr	r2, [pc, #148]	; (80070a4 <UART_Start_Receive_IT+0x250>)
 8007010:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	2200      	movs	r2, #0
 8007016:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 800701a:	68fb      	ldr	r3, [r7, #12]
 800701c:	691b      	ldr	r3, [r3, #16]
 800701e:	2b00      	cmp	r3, #0
 8007020:	d019      	beq.n	8007056 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8007022:	68fb      	ldr	r3, [r7, #12]
 8007024:	681b      	ldr	r3, [r3, #0]
 8007026:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007028:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800702a:	e853 3f00 	ldrex	r3, [r3]
 800702e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007030:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007032:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8007036:	677b      	str	r3, [r7, #116]	; 0x74
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	461a      	mov	r2, r3
 800703e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007040:	637b      	str	r3, [r7, #52]	; 0x34
 8007042:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007044:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007046:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007048:	e841 2300 	strex	r3, r2, [r1]
 800704c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800704e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007050:	2b00      	cmp	r3, #0
 8007052:	d1e6      	bne.n	8007022 <UART_Start_Receive_IT+0x1ce>
 8007054:	e018      	b.n	8007088 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007056:	68fb      	ldr	r3, [r7, #12]
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800705c:	697b      	ldr	r3, [r7, #20]
 800705e:	e853 3f00 	ldrex	r3, [r3]
 8007062:	613b      	str	r3, [r7, #16]
   return(result);
 8007064:	693b      	ldr	r3, [r7, #16]
 8007066:	f043 0320 	orr.w	r3, r3, #32
 800706a:	67bb      	str	r3, [r7, #120]	; 0x78
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	461a      	mov	r2, r3
 8007072:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007074:	623b      	str	r3, [r7, #32]
 8007076:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007078:	69f9      	ldr	r1, [r7, #28]
 800707a:	6a3a      	ldr	r2, [r7, #32]
 800707c:	e841 2300 	strex	r3, r2, [r1]
 8007080:	61bb      	str	r3, [r7, #24]
   return(result);
 8007082:	69bb      	ldr	r3, [r7, #24]
 8007084:	2b00      	cmp	r3, #0
 8007086:	d1e6      	bne.n	8007056 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8007088:	2300      	movs	r3, #0
}
 800708a:	4618      	mov	r0, r3
 800708c:	378c      	adds	r7, #140	; 0x8c
 800708e:	46bd      	mov	sp, r7
 8007090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007094:	4770      	bx	lr
 8007096:	bf00      	nop
 8007098:	080077b1 	.word	0x080077b1
 800709c:	080074b9 	.word	0x080074b9
 80070a0:	08007357 	.word	0x08007357
 80070a4:	080071f7 	.word	0x080071f7

080070a8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b095      	sub	sp, #84	; 0x54
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80070b8:	e853 3f00 	ldrex	r3, [r3]
 80070bc:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80070be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070c0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80070c4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80070c6:	687b      	ldr	r3, [r7, #4]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	461a      	mov	r2, r3
 80070cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80070ce:	643b      	str	r3, [r7, #64]	; 0x40
 80070d0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070d2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80070d4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80070d6:	e841 2300 	strex	r3, r2, [r1]
 80070da:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80070dc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80070de:	2b00      	cmp	r3, #0
 80070e0:	d1e6      	bne.n	80070b0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	3308      	adds	r3, #8
 80070e8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80070ea:	6a3b      	ldr	r3, [r7, #32]
 80070ec:	e853 3f00 	ldrex	r3, [r3]
 80070f0:	61fb      	str	r3, [r7, #28]
   return(result);
 80070f2:	69fb      	ldr	r3, [r7, #28]
 80070f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80070f8:	f023 0301 	bic.w	r3, r3, #1
 80070fc:	64bb      	str	r3, [r7, #72]	; 0x48
 80070fe:	687b      	ldr	r3, [r7, #4]
 8007100:	681b      	ldr	r3, [r3, #0]
 8007102:	3308      	adds	r3, #8
 8007104:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007106:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007108:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800710a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800710c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800710e:	e841 2300 	strex	r3, r2, [r1]
 8007112:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007114:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007116:	2b00      	cmp	r3, #0
 8007118:	d1e3      	bne.n	80070e2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800711e:	2b01      	cmp	r3, #1
 8007120:	d118      	bne.n	8007154 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007128:	68fb      	ldr	r3, [r7, #12]
 800712a:	e853 3f00 	ldrex	r3, [r3]
 800712e:	60bb      	str	r3, [r7, #8]
   return(result);
 8007130:	68bb      	ldr	r3, [r7, #8]
 8007132:	f023 0310 	bic.w	r3, r3, #16
 8007136:	647b      	str	r3, [r7, #68]	; 0x44
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	681b      	ldr	r3, [r3, #0]
 800713c:	461a      	mov	r2, r3
 800713e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007140:	61bb      	str	r3, [r7, #24]
 8007142:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007144:	6979      	ldr	r1, [r7, #20]
 8007146:	69ba      	ldr	r2, [r7, #24]
 8007148:	e841 2300 	strex	r3, r2, [r1]
 800714c:	613b      	str	r3, [r7, #16]
   return(result);
 800714e:	693b      	ldr	r3, [r7, #16]
 8007150:	2b00      	cmp	r3, #0
 8007152:	d1e6      	bne.n	8007122 <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007154:	687b      	ldr	r3, [r7, #4]
 8007156:	2220      	movs	r2, #32
 8007158:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	2200      	movs	r2, #0
 8007160:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2200      	movs	r2, #0
 8007166:	671a      	str	r2, [r3, #112]	; 0x70
}
 8007168:	bf00      	nop
 800716a:	3754      	adds	r7, #84	; 0x54
 800716c:	46bd      	mov	sp, r7
 800716e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007172:	4770      	bx	lr

08007174 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8007174:	b580      	push	{r7, lr}
 8007176:	b084      	sub	sp, #16
 8007178:	af00      	add	r7, sp, #0
 800717a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007180:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8007182:	68fb      	ldr	r3, [r7, #12]
 8007184:	2200      	movs	r2, #0
 8007186:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2200      	movs	r2, #0
 800718e:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007192:	68f8      	ldr	r0, [r7, #12]
 8007194:	f7ff f996 	bl	80064c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007198:	bf00      	nop
 800719a:	3710      	adds	r7, #16
 800719c:	46bd      	mov	sp, r7
 800719e:	bd80      	pop	{r7, pc}

080071a0 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80071a0:	b580      	push	{r7, lr}
 80071a2:	b088      	sub	sp, #32
 80071a4:	af00      	add	r7, sp, #0
 80071a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071ae:	68fb      	ldr	r3, [r7, #12]
 80071b0:	e853 3f00 	ldrex	r3, [r3]
 80071b4:	60bb      	str	r3, [r7, #8]
   return(result);
 80071b6:	68bb      	ldr	r3, [r7, #8]
 80071b8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80071bc:	61fb      	str	r3, [r7, #28]
 80071be:	687b      	ldr	r3, [r7, #4]
 80071c0:	681b      	ldr	r3, [r3, #0]
 80071c2:	461a      	mov	r2, r3
 80071c4:	69fb      	ldr	r3, [r7, #28]
 80071c6:	61bb      	str	r3, [r7, #24]
 80071c8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071ca:	6979      	ldr	r1, [r7, #20]
 80071cc:	69ba      	ldr	r2, [r7, #24]
 80071ce:	e841 2300 	strex	r3, r2, [r1]
 80071d2:	613b      	str	r3, [r7, #16]
   return(result);
 80071d4:	693b      	ldr	r3, [r7, #16]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d1e6      	bne.n	80071a8 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2220      	movs	r2, #32
 80071de:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	2200      	movs	r2, #0
 80071e6:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80071e8:	6878      	ldr	r0, [r7, #4]
 80071ea:	f7ff f961 	bl	80064b0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80071ee:	bf00      	nop
 80071f0:	3720      	adds	r7, #32
 80071f2:	46bd      	mov	sp, r7
 80071f4:	bd80      	pop	{r7, pc}

080071f6 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80071f6:	b580      	push	{r7, lr}
 80071f8:	b096      	sub	sp, #88	; 0x58
 80071fa:	af00      	add	r7, sp, #0
 80071fc:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007204:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800720e:	2b22      	cmp	r3, #34	; 0x22
 8007210:	f040 8095 	bne.w	800733e <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	681b      	ldr	r3, [r3, #0]
 8007218:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800721a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800721e:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8007222:	b2d9      	uxtb	r1, r3
 8007224:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8007228:	b2da      	uxtb	r2, r3
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800722e:	400a      	ands	r2, r1
 8007230:	b2d2      	uxtb	r2, r2
 8007232:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007238:	1c5a      	adds	r2, r3, #1
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007244:	b29b      	uxth	r3, r3
 8007246:	3b01      	subs	r3, #1
 8007248:	b29a      	uxth	r2, r3
 800724a:	687b      	ldr	r3, [r7, #4]
 800724c:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007256:	b29b      	uxth	r3, r3
 8007258:	2b00      	cmp	r3, #0
 800725a:	d178      	bne.n	800734e <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007262:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007264:	e853 3f00 	ldrex	r3, [r3]
 8007268:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800726a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800726c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007270:	653b      	str	r3, [r7, #80]	; 0x50
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	461a      	mov	r2, r3
 8007278:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800727a:	647b      	str	r3, [r7, #68]	; 0x44
 800727c:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800727e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007280:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007282:	e841 2300 	strex	r3, r2, [r1]
 8007286:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007288:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800728a:	2b00      	cmp	r3, #0
 800728c:	d1e6      	bne.n	800725c <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	681b      	ldr	r3, [r3, #0]
 8007292:	3308      	adds	r3, #8
 8007294:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007298:	e853 3f00 	ldrex	r3, [r3]
 800729c:	623b      	str	r3, [r7, #32]
   return(result);
 800729e:	6a3b      	ldr	r3, [r7, #32]
 80072a0:	f023 0301 	bic.w	r3, r3, #1
 80072a4:	64fb      	str	r3, [r7, #76]	; 0x4c
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	3308      	adds	r3, #8
 80072ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80072ae:	633a      	str	r2, [r7, #48]	; 0x30
 80072b0:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80072b2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80072b4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80072b6:	e841 2300 	strex	r3, r2, [r1]
 80072ba:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80072bc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80072be:	2b00      	cmp	r3, #0
 80072c0:	d1e5      	bne.n	800728e <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	2220      	movs	r2, #32
 80072c6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2200      	movs	r2, #0
 80072ce:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80072d4:	2b01      	cmp	r3, #1
 80072d6:	d12e      	bne.n	8007336 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2200      	movs	r2, #0
 80072dc:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	681b      	ldr	r3, [r3, #0]
 80072e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80072e4:	693b      	ldr	r3, [r7, #16]
 80072e6:	e853 3f00 	ldrex	r3, [r3]
 80072ea:	60fb      	str	r3, [r7, #12]
   return(result);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	f023 0310 	bic.w	r3, r3, #16
 80072f2:	64bb      	str	r3, [r7, #72]	; 0x48
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	681b      	ldr	r3, [r3, #0]
 80072f8:	461a      	mov	r2, r3
 80072fa:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80072fc:	61fb      	str	r3, [r7, #28]
 80072fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007300:	69b9      	ldr	r1, [r7, #24]
 8007302:	69fa      	ldr	r2, [r7, #28]
 8007304:	e841 2300 	strex	r3, r2, [r1]
 8007308:	617b      	str	r3, [r7, #20]
   return(result);
 800730a:	697b      	ldr	r3, [r7, #20]
 800730c:	2b00      	cmp	r3, #0
 800730e:	d1e6      	bne.n	80072de <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	69db      	ldr	r3, [r3, #28]
 8007316:	f003 0310 	and.w	r3, r3, #16
 800731a:	2b10      	cmp	r3, #16
 800731c:	d103      	bne.n	8007326 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800731e:	687b      	ldr	r3, [r7, #4]
 8007320:	681b      	ldr	r3, [r3, #0]
 8007322:	2210      	movs	r2, #16
 8007324:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800732c:	4619      	mov	r1, r3
 800732e:	6878      	ldr	r0, [r7, #4]
 8007330:	f7ff f8d2 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007334:	e00b      	b.n	800734e <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007336:	6878      	ldr	r0, [r7, #4]
 8007338:	f7fa fa90 	bl	800185c <HAL_UART_RxCpltCallback>
}
 800733c:	e007      	b.n	800734e <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800733e:	687b      	ldr	r3, [r7, #4]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	699a      	ldr	r2, [r3, #24]
 8007344:	687b      	ldr	r3, [r7, #4]
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	f042 0208 	orr.w	r2, r2, #8
 800734c:	619a      	str	r2, [r3, #24]
}
 800734e:	bf00      	nop
 8007350:	3758      	adds	r7, #88	; 0x58
 8007352:	46bd      	mov	sp, r7
 8007354:	bd80      	pop	{r7, pc}

08007356 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8007356:	b580      	push	{r7, lr}
 8007358:	b096      	sub	sp, #88	; 0x58
 800735a:	af00      	add	r7, sp, #0
 800735c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8007364:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800736e:	2b22      	cmp	r3, #34	; 0x22
 8007370:	f040 8095 	bne.w	800749e <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800737a:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007382:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8007384:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8007388:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 800738c:	4013      	ands	r3, r2
 800738e:	b29a      	uxth	r2, r3
 8007390:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007392:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007398:	1c9a      	adds	r2, r3, #2
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073a4:	b29b      	uxth	r3, r3
 80073a6:	3b01      	subs	r3, #1
 80073a8:	b29a      	uxth	r2, r3
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 80073b0:	687b      	ldr	r3, [r7, #4]
 80073b2:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80073b6:	b29b      	uxth	r3, r3
 80073b8:	2b00      	cmp	r3, #0
 80073ba:	d178      	bne.n	80074ae <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	681b      	ldr	r3, [r3, #0]
 80073c0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80073c4:	e853 3f00 	ldrex	r3, [r3]
 80073c8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80073ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80073cc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80073d0:	64fb      	str	r3, [r7, #76]	; 0x4c
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	461a      	mov	r2, r3
 80073d8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80073da:	643b      	str	r3, [r7, #64]	; 0x40
 80073dc:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073de:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80073e0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80073e2:	e841 2300 	strex	r3, r2, [r1]
 80073e6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80073e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80073ea:	2b00      	cmp	r3, #0
 80073ec:	d1e6      	bne.n	80073bc <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	3308      	adds	r3, #8
 80073f4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073f6:	6a3b      	ldr	r3, [r7, #32]
 80073f8:	e853 3f00 	ldrex	r3, [r3]
 80073fc:	61fb      	str	r3, [r7, #28]
   return(result);
 80073fe:	69fb      	ldr	r3, [r7, #28]
 8007400:	f023 0301 	bic.w	r3, r3, #1
 8007404:	64bb      	str	r3, [r7, #72]	; 0x48
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	3308      	adds	r3, #8
 800740c:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800740e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007410:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007412:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007414:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007416:	e841 2300 	strex	r3, r2, [r1]
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800741c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800741e:	2b00      	cmp	r3, #0
 8007420:	d1e5      	bne.n	80073ee <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	2220      	movs	r2, #32
 8007426:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007434:	2b01      	cmp	r3, #1
 8007436:	d12e      	bne.n	8007496 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	2200      	movs	r2, #0
 800743c:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	e853 3f00 	ldrex	r3, [r3]
 800744a:	60bb      	str	r3, [r7, #8]
   return(result);
 800744c:	68bb      	ldr	r3, [r7, #8]
 800744e:	f023 0310 	bic.w	r3, r3, #16
 8007452:	647b      	str	r3, [r7, #68]	; 0x44
 8007454:	687b      	ldr	r3, [r7, #4]
 8007456:	681b      	ldr	r3, [r3, #0]
 8007458:	461a      	mov	r2, r3
 800745a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800745c:	61bb      	str	r3, [r7, #24]
 800745e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007460:	6979      	ldr	r1, [r7, #20]
 8007462:	69ba      	ldr	r2, [r7, #24]
 8007464:	e841 2300 	strex	r3, r2, [r1]
 8007468:	613b      	str	r3, [r7, #16]
   return(result);
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	2b00      	cmp	r3, #0
 800746e:	d1e6      	bne.n	800743e <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8007470:	687b      	ldr	r3, [r7, #4]
 8007472:	681b      	ldr	r3, [r3, #0]
 8007474:	69db      	ldr	r3, [r3, #28]
 8007476:	f003 0310 	and.w	r3, r3, #16
 800747a:	2b10      	cmp	r3, #16
 800747c:	d103      	bne.n	8007486 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	681b      	ldr	r3, [r3, #0]
 8007482:	2210      	movs	r2, #16
 8007484:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800748c:	4619      	mov	r1, r3
 800748e:	6878      	ldr	r0, [r7, #4]
 8007490:	f7ff f822 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007494:	e00b      	b.n	80074ae <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8007496:	6878      	ldr	r0, [r7, #4]
 8007498:	f7fa f9e0 	bl	800185c <HAL_UART_RxCpltCallback>
}
 800749c:	e007      	b.n	80074ae <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	699a      	ldr	r2, [r3, #24]
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	681b      	ldr	r3, [r3, #0]
 80074a8:	f042 0208 	orr.w	r2, r2, #8
 80074ac:	619a      	str	r2, [r3, #24]
}
 80074ae:	bf00      	nop
 80074b0:	3758      	adds	r7, #88	; 0x58
 80074b2:	46bd      	mov	sp, r7
 80074b4:	bd80      	pop	{r7, pc}
	...

080074b8 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80074b8:	b580      	push	{r7, lr}
 80074ba:	b0a6      	sub	sp, #152	; 0x98
 80074bc:	af00      	add	r7, sp, #0
 80074be:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80074c6:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	69db      	ldr	r3, [r3, #28]
 80074d0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	681b      	ldr	r3, [r3, #0]
 80074e2:	689b      	ldr	r3, [r3, #8]
 80074e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80074ee:	2b22      	cmp	r3, #34	; 0x22
 80074f0:	f040 814f 	bne.w	8007792 <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80074f4:	687b      	ldr	r3, [r7, #4]
 80074f6:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80074fa:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80074fe:	e0f6      	b.n	80076ee <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	681b      	ldr	r3, [r3, #0]
 8007504:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007506:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800750a:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800750e:	b2d9      	uxtb	r1, r3
 8007510:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8007514:	b2da      	uxtb	r2, r3
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800751a:	400a      	ands	r2, r1
 800751c:	b2d2      	uxtb	r2, r2
 800751e:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007524:	1c5a      	adds	r2, r3, #1
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007530:	b29b      	uxth	r3, r3
 8007532:	3b01      	subs	r3, #1
 8007534:	b29a      	uxth	r2, r3
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	69db      	ldr	r3, [r3, #28]
 8007542:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007546:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800754a:	f003 0307 	and.w	r3, r3, #7
 800754e:	2b00      	cmp	r3, #0
 8007550:	d053      	beq.n	80075fa <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007552:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007556:	f003 0301 	and.w	r3, r3, #1
 800755a:	2b00      	cmp	r3, #0
 800755c:	d011      	beq.n	8007582 <UART_RxISR_8BIT_FIFOEN+0xca>
 800755e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007562:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007566:	2b00      	cmp	r3, #0
 8007568:	d00b      	beq.n	8007582 <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	2201      	movs	r2, #1
 8007570:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007578:	f043 0201 	orr.w	r2, r3, #1
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007582:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8007586:	f003 0302 	and.w	r3, r3, #2
 800758a:	2b00      	cmp	r3, #0
 800758c:	d011      	beq.n	80075b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
 800758e:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007592:	f003 0301 	and.w	r3, r3, #1
 8007596:	2b00      	cmp	r3, #0
 8007598:	d00b      	beq.n	80075b2 <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	2202      	movs	r2, #2
 80075a0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075a8:	f043 0204 	orr.w	r2, r3, #4
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80075b2:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80075b6:	f003 0304 	and.w	r3, r3, #4
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d011      	beq.n	80075e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
 80075be:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80075c2:	f003 0301 	and.w	r3, r3, #1
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d00b      	beq.n	80075e2 <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	2204      	movs	r2, #4
 80075d0:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075d8:	f043 0202 	orr.w	r2, r3, #2
 80075dc:	687b      	ldr	r3, [r7, #4]
 80075de:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d006      	beq.n	80075fa <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80075ec:	6878      	ldr	r0, [r7, #4]
 80075ee:	f7fe ff69 	bl	80064c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80075f2:	687b      	ldr	r3, [r7, #4]
 80075f4:	2200      	movs	r2, #0
 80075f6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80075fa:	687b      	ldr	r3, [r7, #4]
 80075fc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007600:	b29b      	uxth	r3, r3
 8007602:	2b00      	cmp	r3, #0
 8007604:	d173      	bne.n	80076ee <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	681b      	ldr	r3, [r3, #0]
 800760a:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800760c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800760e:	e853 3f00 	ldrex	r3, [r3]
 8007612:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8007614:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8007616:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800761a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	461a      	mov	r2, r3
 8007624:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8007628:	66bb      	str	r3, [r7, #104]	; 0x68
 800762a:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800762c:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800762e:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8007630:	e841 2300 	strex	r3, r2, [r1]
 8007634:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8007636:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1e4      	bne.n	8007606 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 800763c:	687b      	ldr	r3, [r7, #4]
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	3308      	adds	r3, #8
 8007642:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007644:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007646:	e853 3f00 	ldrex	r3, [r3]
 800764a:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800764c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800764e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007652:	f023 0301 	bic.w	r3, r3, #1
 8007656:	67fb      	str	r3, [r7, #124]	; 0x7c
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	3308      	adds	r3, #8
 800765e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8007660:	657a      	str	r2, [r7, #84]	; 0x54
 8007662:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007664:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8007666:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8007668:	e841 2300 	strex	r3, r2, [r1]
 800766c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800766e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007670:	2b00      	cmp	r3, #0
 8007672:	d1e3      	bne.n	800763c <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007674:	687b      	ldr	r3, [r7, #4]
 8007676:	2220      	movs	r2, #32
 8007678:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	2200      	movs	r2, #0
 8007680:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007686:	2b01      	cmp	r3, #1
 8007688:	d12e      	bne.n	80076e8 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2200      	movs	r2, #0
 800768e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	681b      	ldr	r3, [r3, #0]
 8007694:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007698:	e853 3f00 	ldrex	r3, [r3]
 800769c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800769e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076a0:	f023 0310 	bic.w	r3, r3, #16
 80076a4:	67bb      	str	r3, [r7, #120]	; 0x78
 80076a6:	687b      	ldr	r3, [r7, #4]
 80076a8:	681b      	ldr	r3, [r3, #0]
 80076aa:	461a      	mov	r2, r3
 80076ac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80076ae:	643b      	str	r3, [r7, #64]	; 0x40
 80076b0:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80076b2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80076b4:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80076b6:	e841 2300 	strex	r3, r2, [r1]
 80076ba:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80076bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80076be:	2b00      	cmp	r3, #0
 80076c0:	d1e6      	bne.n	8007690 <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	69db      	ldr	r3, [r3, #28]
 80076c8:	f003 0310 	and.w	r3, r3, #16
 80076cc:	2b10      	cmp	r3, #16
 80076ce:	d103      	bne.n	80076d8 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2210      	movs	r2, #16
 80076d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80076de:	4619      	mov	r1, r3
 80076e0:	6878      	ldr	r0, [r7, #4]
 80076e2:	f7fe fef9 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
 80076e6:	e002      	b.n	80076ee <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80076e8:	6878      	ldr	r0, [r7, #4]
 80076ea:	f7fa f8b7 	bl	800185c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80076ee:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d006      	beq.n	8007704 <UART_RxISR_8BIT_FIFOEN+0x24c>
 80076f6:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80076fa:	f003 0320 	and.w	r3, r3, #32
 80076fe:	2b00      	cmp	r3, #0
 8007700:	f47f aefe 	bne.w	8007500 <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800770a:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800770e:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 8007712:	2b00      	cmp	r3, #0
 8007714:	d045      	beq.n	80077a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8007716:	687b      	ldr	r3, [r7, #4]
 8007718:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800771c:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 8007720:	429a      	cmp	r2, r3
 8007722:	d23e      	bcs.n	80077a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007724:	687b      	ldr	r3, [r7, #4]
 8007726:	681b      	ldr	r3, [r3, #0]
 8007728:	3308      	adds	r3, #8
 800772a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800772c:	6a3b      	ldr	r3, [r7, #32]
 800772e:	e853 3f00 	ldrex	r3, [r3]
 8007732:	61fb      	str	r3, [r7, #28]
   return(result);
 8007734:	69fb      	ldr	r3, [r7, #28]
 8007736:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800773a:	673b      	str	r3, [r7, #112]	; 0x70
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	3308      	adds	r3, #8
 8007742:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8007744:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007746:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007748:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800774a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800774c:	e841 2300 	strex	r3, r2, [r1]
 8007750:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007752:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007754:	2b00      	cmp	r3, #0
 8007756:	d1e5      	bne.n	8007724 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	4a14      	ldr	r2, [pc, #80]	; (80077ac <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 800775c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	681b      	ldr	r3, [r3, #0]
 8007762:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007764:	68fb      	ldr	r3, [r7, #12]
 8007766:	e853 3f00 	ldrex	r3, [r3]
 800776a:	60bb      	str	r3, [r7, #8]
   return(result);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	f043 0320 	orr.w	r3, r3, #32
 8007772:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	461a      	mov	r2, r3
 800777a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800777c:	61bb      	str	r3, [r7, #24]
 800777e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007780:	6979      	ldr	r1, [r7, #20]
 8007782:	69ba      	ldr	r2, [r7, #24]
 8007784:	e841 2300 	strex	r3, r2, [r1]
 8007788:	613b      	str	r3, [r7, #16]
   return(result);
 800778a:	693b      	ldr	r3, [r7, #16]
 800778c:	2b00      	cmp	r3, #0
 800778e:	d1e6      	bne.n	800775e <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007790:	e007      	b.n	80077a2 <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007792:	687b      	ldr	r3, [r7, #4]
 8007794:	681b      	ldr	r3, [r3, #0]
 8007796:	699a      	ldr	r2, [r3, #24]
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	f042 0208 	orr.w	r2, r2, #8
 80077a0:	619a      	str	r2, [r3, #24]
}
 80077a2:	bf00      	nop
 80077a4:	3798      	adds	r7, #152	; 0x98
 80077a6:	46bd      	mov	sp, r7
 80077a8:	bd80      	pop	{r7, pc}
 80077aa:	bf00      	nop
 80077ac:	080071f7 	.word	0x080071f7

080077b0 <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80077b0:	b580      	push	{r7, lr}
 80077b2:	b0a8      	sub	sp, #160	; 0xa0
 80077b4:	af00      	add	r7, sp, #0
 80077b6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80077be:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	69db      	ldr	r3, [r3, #28]
 80077c8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 80077cc:	687b      	ldr	r3, [r7, #4]
 80077ce:	681b      	ldr	r3, [r3, #0]
 80077d0:	681b      	ldr	r3, [r3, #0]
 80077d2:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 80077d6:	687b      	ldr	r3, [r7, #4]
 80077d8:	681b      	ldr	r3, [r3, #0]
 80077da:	689b      	ldr	r3, [r3, #8]
 80077dc:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80077e0:	687b      	ldr	r3, [r7, #4]
 80077e2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80077e6:	2b22      	cmp	r3, #34	; 0x22
 80077e8:	f040 8153 	bne.w	8007a92 <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 80077f2:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80077f6:	e0fa      	b.n	80079ee <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077fe:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007806:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 800780a:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800780e:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 8007812:	4013      	ands	r3, r2
 8007814:	b29a      	uxth	r2, r3
 8007816:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800781a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800781c:	687b      	ldr	r3, [r7, #4]
 800781e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007820:	1c9a      	adds	r2, r3, #2
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8007826:	687b      	ldr	r3, [r7, #4]
 8007828:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800782c:	b29b      	uxth	r3, r3
 800782e:	3b01      	subs	r3, #1
 8007830:	b29a      	uxth	r2, r3
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8007842:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007846:	f003 0307 	and.w	r3, r3, #7
 800784a:	2b00      	cmp	r3, #0
 800784c:	d053      	beq.n	80078f6 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800784e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007852:	f003 0301 	and.w	r3, r3, #1
 8007856:	2b00      	cmp	r3, #0
 8007858:	d011      	beq.n	800787e <UART_RxISR_16BIT_FIFOEN+0xce>
 800785a:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800785e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007862:	2b00      	cmp	r3, #0
 8007864:	d00b      	beq.n	800787e <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	2201      	movs	r2, #1
 800786c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007874:	f043 0201 	orr.w	r2, r3, #1
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800787e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007882:	f003 0302 	and.w	r3, r3, #2
 8007886:	2b00      	cmp	r3, #0
 8007888:	d011      	beq.n	80078ae <UART_RxISR_16BIT_FIFOEN+0xfe>
 800788a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800788e:	f003 0301 	and.w	r3, r3, #1
 8007892:	2b00      	cmp	r3, #0
 8007894:	d00b      	beq.n	80078ae <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	2202      	movs	r2, #2
 800789c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078a4:	f043 0204 	orr.w	r2, r3, #4
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80078ae:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80078b2:	f003 0304 	and.w	r3, r3, #4
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d011      	beq.n	80078de <UART_RxISR_16BIT_FIFOEN+0x12e>
 80078ba:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80078be:	f003 0301 	and.w	r3, r3, #1
 80078c2:	2b00      	cmp	r3, #0
 80078c4:	d00b      	beq.n	80078de <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	2204      	movs	r2, #4
 80078cc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078d4:	f043 0202 	orr.w	r2, r3, #2
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80078de:	687b      	ldr	r3, [r7, #4]
 80078e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d006      	beq.n	80078f6 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f7fe fdeb 	bl	80064c4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078ee:	687b      	ldr	r3, [r7, #4]
 80078f0:	2200      	movs	r2, #0
 80078f2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 80078fc:	b29b      	uxth	r3, r3
 80078fe:	2b00      	cmp	r3, #0
 8007900:	d175      	bne.n	80079ee <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	681b      	ldr	r3, [r3, #0]
 8007906:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007908:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800790a:	e853 3f00 	ldrex	r3, [r3]
 800790e:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007910:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007912:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007916:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	461a      	mov	r2, r3
 8007920:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007924:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007926:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007928:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800792a:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800792c:	e841 2300 	strex	r3, r2, [r1]
 8007930:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007932:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007934:	2b00      	cmp	r3, #0
 8007936:	d1e4      	bne.n	8007902 <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	681b      	ldr	r3, [r3, #0]
 800793c:	3308      	adds	r3, #8
 800793e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007940:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007942:	e853 3f00 	ldrex	r3, [r3]
 8007946:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007948:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800794a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800794e:	f023 0301 	bic.w	r3, r3, #1
 8007952:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3308      	adds	r3, #8
 800795c:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007960:	65ba      	str	r2, [r7, #88]	; 0x58
 8007962:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007964:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007966:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007968:	e841 2300 	strex	r3, r2, [r1]
 800796c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800796e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007970:	2b00      	cmp	r3, #0
 8007972:	d1e1      	bne.n	8007938 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2220      	movs	r2, #32
 8007978:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	2200      	movs	r2, #0
 8007980:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007982:	687b      	ldr	r3, [r7, #4]
 8007984:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007986:	2b01      	cmp	r3, #1
 8007988:	d12e      	bne.n	80079e8 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	2200      	movs	r2, #0
 800798e:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007996:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007998:	e853 3f00 	ldrex	r3, [r3]
 800799c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800799e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079a0:	f023 0310 	bic.w	r3, r3, #16
 80079a4:	67fb      	str	r3, [r7, #124]	; 0x7c
 80079a6:	687b      	ldr	r3, [r7, #4]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	461a      	mov	r2, r3
 80079ac:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80079ae:	647b      	str	r3, [r7, #68]	; 0x44
 80079b0:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80079b2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80079b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80079b6:	e841 2300 	strex	r3, r2, [r1]
 80079ba:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80079bc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d1e6      	bne.n	8007990 <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	69db      	ldr	r3, [r3, #28]
 80079c8:	f003 0310 	and.w	r3, r3, #16
 80079cc:	2b10      	cmp	r3, #16
 80079ce:	d103      	bne.n	80079d8 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2210      	movs	r2, #16
 80079d6:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80079de:	4619      	mov	r1, r3
 80079e0:	6878      	ldr	r0, [r7, #4]
 80079e2:	f7fe fd79 	bl	80064d8 <HAL_UARTEx_RxEventCallback>
 80079e6:	e002      	b.n	80079ee <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f7f9 ff37 	bl	800185c <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 80079ee:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 80079f2:	2b00      	cmp	r3, #0
 80079f4:	d006      	beq.n	8007a04 <UART_RxISR_16BIT_FIFOEN+0x254>
 80079f6:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80079fa:	f003 0320 	and.w	r3, r3, #32
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	f47f aefa 	bne.w	80077f8 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007a0a:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 8007a0e:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 8007a12:	2b00      	cmp	r3, #0
 8007a14:	d045      	beq.n	8007aa2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8007a1c:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 8007a20:	429a      	cmp	r2, r3
 8007a22:	d23e      	bcs.n	8007aa2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	3308      	adds	r3, #8
 8007a2a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2e:	e853 3f00 	ldrex	r3, [r3]
 8007a32:	623b      	str	r3, [r7, #32]
   return(result);
 8007a34:	6a3b      	ldr	r3, [r7, #32]
 8007a36:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007a3a:	677b      	str	r3, [r7, #116]	; 0x74
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	3308      	adds	r3, #8
 8007a42:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8007a44:	633a      	str	r2, [r7, #48]	; 0x30
 8007a46:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a48:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a4a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a4c:	e841 2300 	strex	r3, r2, [r1]
 8007a50:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d1e5      	bne.n	8007a24 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	4a14      	ldr	r2, [pc, #80]	; (8007aac <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8007a5c:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8007a5e:	687b      	ldr	r3, [r7, #4]
 8007a60:	681b      	ldr	r3, [r3, #0]
 8007a62:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a64:	693b      	ldr	r3, [r7, #16]
 8007a66:	e853 3f00 	ldrex	r3, [r3]
 8007a6a:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a6c:	68fb      	ldr	r3, [r7, #12]
 8007a6e:	f043 0320 	orr.w	r3, r3, #32
 8007a72:	673b      	str	r3, [r7, #112]	; 0x70
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	461a      	mov	r2, r3
 8007a7a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007a7c:	61fb      	str	r3, [r7, #28]
 8007a7e:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a80:	69b9      	ldr	r1, [r7, #24]
 8007a82:	69fa      	ldr	r2, [r7, #28]
 8007a84:	e841 2300 	strex	r3, r2, [r1]
 8007a88:	617b      	str	r3, [r7, #20]
   return(result);
 8007a8a:	697b      	ldr	r3, [r7, #20]
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d1e6      	bne.n	8007a5e <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8007a90:	e007      	b.n	8007aa2 <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	699a      	ldr	r2, [r3, #24]
 8007a98:	687b      	ldr	r3, [r7, #4]
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f042 0208 	orr.w	r2, r2, #8
 8007aa0:	619a      	str	r2, [r3, #24]
}
 8007aa2:	bf00      	nop
 8007aa4:	37a0      	adds	r7, #160	; 0xa0
 8007aa6:	46bd      	mov	sp, r7
 8007aa8:	bd80      	pop	{r7, pc}
 8007aaa:	bf00      	nop
 8007aac:	08007357 	.word	0x08007357

08007ab0 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 8007ab0:	b480      	push	{r7}
 8007ab2:	b083      	sub	sp, #12
 8007ab4:	af00      	add	r7, sp, #0
 8007ab6:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 8007ab8:	bf00      	nop
 8007aba:	370c      	adds	r7, #12
 8007abc:	46bd      	mov	sp, r7
 8007abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ac2:	4770      	bx	lr

08007ac4 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8007ac4:	b480      	push	{r7}
 8007ac6:	b083      	sub	sp, #12
 8007ac8:	af00      	add	r7, sp, #0
 8007aca:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8007acc:	bf00      	nop
 8007ace:	370c      	adds	r7, #12
 8007ad0:	46bd      	mov	sp, r7
 8007ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ad6:	4770      	bx	lr

08007ad8 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 8007ae0:	bf00      	nop
 8007ae2:	370c      	adds	r7, #12
 8007ae4:	46bd      	mov	sp, r7
 8007ae6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aea:	4770      	bx	lr

08007aec <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007aec:	b480      	push	{r7}
 8007aee:	b085      	sub	sp, #20
 8007af0:	af00      	add	r7, sp, #0
 8007af2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007afa:	2b01      	cmp	r3, #1
 8007afc:	d101      	bne.n	8007b02 <HAL_UARTEx_DisableFifoMode+0x16>
 8007afe:	2302      	movs	r3, #2
 8007b00:	e027      	b.n	8007b52 <HAL_UARTEx_DisableFifoMode+0x66>
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b0a:	687b      	ldr	r3, [r7, #4]
 8007b0c:	2224      	movs	r2, #36	; 0x24
 8007b0e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b12:	687b      	ldr	r3, [r7, #4]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	681b      	ldr	r3, [r3, #0]
 8007b18:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	681a      	ldr	r2, [r3, #0]
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	681b      	ldr	r3, [r3, #0]
 8007b24:	f022 0201 	bic.w	r2, r2, #1
 8007b28:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007b2a:	68fb      	ldr	r3, [r7, #12]
 8007b2c:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007b30:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2200      	movs	r2, #0
 8007b36:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	68fa      	ldr	r2, [r7, #12]
 8007b3e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007b40:	687b      	ldr	r3, [r7, #4]
 8007b42:	2220      	movs	r2, #32
 8007b44:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007b50:	2300      	movs	r3, #0
}
 8007b52:	4618      	mov	r0, r3
 8007b54:	3714      	adds	r7, #20
 8007b56:	46bd      	mov	sp, r7
 8007b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5c:	4770      	bx	lr

08007b5e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007b5e:	b580      	push	{r7, lr}
 8007b60:	b084      	sub	sp, #16
 8007b62:	af00      	add	r7, sp, #0
 8007b64:	6078      	str	r0, [r7, #4]
 8007b66:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007b6e:	2b01      	cmp	r3, #1
 8007b70:	d101      	bne.n	8007b76 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007b72:	2302      	movs	r3, #2
 8007b74:	e02d      	b.n	8007bd2 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2201      	movs	r2, #1
 8007b7a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2224      	movs	r2, #36	; 0x24
 8007b82:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007b86:	687b      	ldr	r3, [r7, #4]
 8007b88:	681b      	ldr	r3, [r3, #0]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	681a      	ldr	r2, [r3, #0]
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f022 0201 	bic.w	r2, r2, #1
 8007b9c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	689b      	ldr	r3, [r3, #8]
 8007ba4:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	683a      	ldr	r2, [r7, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007bb2:	6878      	ldr	r0, [r7, #4]
 8007bb4:	f000 f850 	bl	8007c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	681b      	ldr	r3, [r3, #0]
 8007bbc:	68fa      	ldr	r2, [r7, #12]
 8007bbe:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2220      	movs	r2, #32
 8007bc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	2200      	movs	r2, #0
 8007bcc:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007bd0:	2300      	movs	r3, #0
}
 8007bd2:	4618      	mov	r0, r3
 8007bd4:	3710      	adds	r7, #16
 8007bd6:	46bd      	mov	sp, r7
 8007bd8:	bd80      	pop	{r7, pc}

08007bda <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007bda:	b580      	push	{r7, lr}
 8007bdc:	b084      	sub	sp, #16
 8007bde:	af00      	add	r7, sp, #0
 8007be0:	6078      	str	r0, [r7, #4]
 8007be2:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007be4:	687b      	ldr	r3, [r7, #4]
 8007be6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007bea:	2b01      	cmp	r3, #1
 8007bec:	d101      	bne.n	8007bf2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007bee:	2302      	movs	r3, #2
 8007bf0:	e02d      	b.n	8007c4e <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007bf2:	687b      	ldr	r3, [r7, #4]
 8007bf4:	2201      	movs	r2, #1
 8007bf6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	2224      	movs	r2, #36	; 0x24
 8007bfe:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	681a      	ldr	r2, [r3, #0]
 8007c10:	687b      	ldr	r3, [r7, #4]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f022 0201 	bic.w	r2, r2, #1
 8007c18:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	689b      	ldr	r3, [r3, #8]
 8007c20:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007c24:	687b      	ldr	r3, [r7, #4]
 8007c26:	681b      	ldr	r3, [r3, #0]
 8007c28:	683a      	ldr	r2, [r7, #0]
 8007c2a:	430a      	orrs	r2, r1
 8007c2c:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007c2e:	6878      	ldr	r0, [r7, #4]
 8007c30:	f000 f812 	bl	8007c58 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	681b      	ldr	r3, [r3, #0]
 8007c38:	68fa      	ldr	r2, [r7, #12]
 8007c3a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	2220      	movs	r2, #32
 8007c40:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	2200      	movs	r2, #0
 8007c48:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8007c4c:	2300      	movs	r3, #0
}
 8007c4e:	4618      	mov	r0, r3
 8007c50:	3710      	adds	r7, #16
 8007c52:	46bd      	mov	sp, r7
 8007c54:	bd80      	pop	{r7, pc}
	...

08007c58 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b085      	sub	sp, #20
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007c64:	2b00      	cmp	r3, #0
 8007c66:	d108      	bne.n	8007c7a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	2201      	movs	r2, #1
 8007c6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	2201      	movs	r2, #1
 8007c74:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007c78:	e031      	b.n	8007cde <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007c7a:	2308      	movs	r3, #8
 8007c7c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007c7e:	2308      	movs	r3, #8
 8007c80:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007c82:	687b      	ldr	r3, [r7, #4]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	689b      	ldr	r3, [r3, #8]
 8007c88:	0e5b      	lsrs	r3, r3, #25
 8007c8a:	b2db      	uxtb	r3, r3
 8007c8c:	f003 0307 	and.w	r3, r3, #7
 8007c90:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	689b      	ldr	r3, [r3, #8]
 8007c98:	0f5b      	lsrs	r3, r3, #29
 8007c9a:	b2db      	uxtb	r3, r3
 8007c9c:	f003 0307 	and.w	r3, r3, #7
 8007ca0:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007ca2:	7bbb      	ldrb	r3, [r7, #14]
 8007ca4:	7b3a      	ldrb	r2, [r7, #12]
 8007ca6:	4911      	ldr	r1, [pc, #68]	; (8007cec <UARTEx_SetNbDataToProcess+0x94>)
 8007ca8:	5c8a      	ldrb	r2, [r1, r2]
 8007caa:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007cae:	7b3a      	ldrb	r2, [r7, #12]
 8007cb0:	490f      	ldr	r1, [pc, #60]	; (8007cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8007cb2:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007cb4:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cb8:	b29a      	uxth	r2, r3
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cc0:	7bfb      	ldrb	r3, [r7, #15]
 8007cc2:	7b7a      	ldrb	r2, [r7, #13]
 8007cc4:	4909      	ldr	r1, [pc, #36]	; (8007cec <UARTEx_SetNbDataToProcess+0x94>)
 8007cc6:	5c8a      	ldrb	r2, [r1, r2]
 8007cc8:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007ccc:	7b7a      	ldrb	r2, [r7, #13]
 8007cce:	4908      	ldr	r1, [pc, #32]	; (8007cf0 <UARTEx_SetNbDataToProcess+0x98>)
 8007cd0:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007cd2:	fb93 f3f2 	sdiv	r3, r3, r2
 8007cd6:	b29a      	uxth	r2, r3
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007cde:	bf00      	nop
 8007ce0:	3714      	adds	r7, #20
 8007ce2:	46bd      	mov	sp, r7
 8007ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ce8:	4770      	bx	lr
 8007cea:	bf00      	nop
 8007cec:	08009268 	.word	0x08009268
 8007cf0:	08009270 	.word	0x08009270

08007cf4 <atoi>:
 8007cf4:	220a      	movs	r2, #10
 8007cf6:	2100      	movs	r1, #0
 8007cf8:	f000 b882 	b.w	8007e00 <strtol>

08007cfc <_strtol_l.constprop.0>:
 8007cfc:	2b01      	cmp	r3, #1
 8007cfe:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007d02:	d001      	beq.n	8007d08 <_strtol_l.constprop.0+0xc>
 8007d04:	2b24      	cmp	r3, #36	; 0x24
 8007d06:	d906      	bls.n	8007d16 <_strtol_l.constprop.0+0x1a>
 8007d08:	f000 fa56 	bl	80081b8 <__errno>
 8007d0c:	2316      	movs	r3, #22
 8007d0e:	6003      	str	r3, [r0, #0]
 8007d10:	2000      	movs	r0, #0
 8007d12:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007d16:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8007dfc <_strtol_l.constprop.0+0x100>
 8007d1a:	460d      	mov	r5, r1
 8007d1c:	462e      	mov	r6, r5
 8007d1e:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d22:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8007d26:	f017 0708 	ands.w	r7, r7, #8
 8007d2a:	d1f7      	bne.n	8007d1c <_strtol_l.constprop.0+0x20>
 8007d2c:	2c2d      	cmp	r4, #45	; 0x2d
 8007d2e:	d132      	bne.n	8007d96 <_strtol_l.constprop.0+0x9a>
 8007d30:	782c      	ldrb	r4, [r5, #0]
 8007d32:	2701      	movs	r7, #1
 8007d34:	1cb5      	adds	r5, r6, #2
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d05b      	beq.n	8007df2 <_strtol_l.constprop.0+0xf6>
 8007d3a:	2b10      	cmp	r3, #16
 8007d3c:	d109      	bne.n	8007d52 <_strtol_l.constprop.0+0x56>
 8007d3e:	2c30      	cmp	r4, #48	; 0x30
 8007d40:	d107      	bne.n	8007d52 <_strtol_l.constprop.0+0x56>
 8007d42:	782c      	ldrb	r4, [r5, #0]
 8007d44:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8007d48:	2c58      	cmp	r4, #88	; 0x58
 8007d4a:	d14d      	bne.n	8007de8 <_strtol_l.constprop.0+0xec>
 8007d4c:	786c      	ldrb	r4, [r5, #1]
 8007d4e:	2310      	movs	r3, #16
 8007d50:	3502      	adds	r5, #2
 8007d52:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8007d56:	f108 38ff 	add.w	r8, r8, #4294967295
 8007d5a:	f04f 0e00 	mov.w	lr, #0
 8007d5e:	fbb8 f9f3 	udiv	r9, r8, r3
 8007d62:	4676      	mov	r6, lr
 8007d64:	fb03 8a19 	mls	sl, r3, r9, r8
 8007d68:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 8007d6c:	f1bc 0f09 	cmp.w	ip, #9
 8007d70:	d816      	bhi.n	8007da0 <_strtol_l.constprop.0+0xa4>
 8007d72:	4664      	mov	r4, ip
 8007d74:	42a3      	cmp	r3, r4
 8007d76:	dd24      	ble.n	8007dc2 <_strtol_l.constprop.0+0xc6>
 8007d78:	f1be 3fff 	cmp.w	lr, #4294967295
 8007d7c:	d008      	beq.n	8007d90 <_strtol_l.constprop.0+0x94>
 8007d7e:	45b1      	cmp	r9, r6
 8007d80:	d31c      	bcc.n	8007dbc <_strtol_l.constprop.0+0xc0>
 8007d82:	d101      	bne.n	8007d88 <_strtol_l.constprop.0+0x8c>
 8007d84:	45a2      	cmp	sl, r4
 8007d86:	db19      	blt.n	8007dbc <_strtol_l.constprop.0+0xc0>
 8007d88:	fb06 4603 	mla	r6, r6, r3, r4
 8007d8c:	f04f 0e01 	mov.w	lr, #1
 8007d90:	f815 4b01 	ldrb.w	r4, [r5], #1
 8007d94:	e7e8      	b.n	8007d68 <_strtol_l.constprop.0+0x6c>
 8007d96:	2c2b      	cmp	r4, #43	; 0x2b
 8007d98:	bf04      	itt	eq
 8007d9a:	782c      	ldrbeq	r4, [r5, #0]
 8007d9c:	1cb5      	addeq	r5, r6, #2
 8007d9e:	e7ca      	b.n	8007d36 <_strtol_l.constprop.0+0x3a>
 8007da0:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 8007da4:	f1bc 0f19 	cmp.w	ip, #25
 8007da8:	d801      	bhi.n	8007dae <_strtol_l.constprop.0+0xb2>
 8007daa:	3c37      	subs	r4, #55	; 0x37
 8007dac:	e7e2      	b.n	8007d74 <_strtol_l.constprop.0+0x78>
 8007dae:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 8007db2:	f1bc 0f19 	cmp.w	ip, #25
 8007db6:	d804      	bhi.n	8007dc2 <_strtol_l.constprop.0+0xc6>
 8007db8:	3c57      	subs	r4, #87	; 0x57
 8007dba:	e7db      	b.n	8007d74 <_strtol_l.constprop.0+0x78>
 8007dbc:	f04f 3eff 	mov.w	lr, #4294967295
 8007dc0:	e7e6      	b.n	8007d90 <_strtol_l.constprop.0+0x94>
 8007dc2:	f1be 3fff 	cmp.w	lr, #4294967295
 8007dc6:	d105      	bne.n	8007dd4 <_strtol_l.constprop.0+0xd8>
 8007dc8:	2322      	movs	r3, #34	; 0x22
 8007dca:	6003      	str	r3, [r0, #0]
 8007dcc:	4646      	mov	r6, r8
 8007dce:	b942      	cbnz	r2, 8007de2 <_strtol_l.constprop.0+0xe6>
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	e79e      	b.n	8007d12 <_strtol_l.constprop.0+0x16>
 8007dd4:	b107      	cbz	r7, 8007dd8 <_strtol_l.constprop.0+0xdc>
 8007dd6:	4276      	negs	r6, r6
 8007dd8:	2a00      	cmp	r2, #0
 8007dda:	d0f9      	beq.n	8007dd0 <_strtol_l.constprop.0+0xd4>
 8007ddc:	f1be 0f00 	cmp.w	lr, #0
 8007de0:	d000      	beq.n	8007de4 <_strtol_l.constprop.0+0xe8>
 8007de2:	1e69      	subs	r1, r5, #1
 8007de4:	6011      	str	r1, [r2, #0]
 8007de6:	e7f3      	b.n	8007dd0 <_strtol_l.constprop.0+0xd4>
 8007de8:	2430      	movs	r4, #48	; 0x30
 8007dea:	2b00      	cmp	r3, #0
 8007dec:	d1b1      	bne.n	8007d52 <_strtol_l.constprop.0+0x56>
 8007dee:	2308      	movs	r3, #8
 8007df0:	e7af      	b.n	8007d52 <_strtol_l.constprop.0+0x56>
 8007df2:	2c30      	cmp	r4, #48	; 0x30
 8007df4:	d0a5      	beq.n	8007d42 <_strtol_l.constprop.0+0x46>
 8007df6:	230a      	movs	r3, #10
 8007df8:	e7ab      	b.n	8007d52 <_strtol_l.constprop.0+0x56>
 8007dfa:	bf00      	nop
 8007dfc:	08009279 	.word	0x08009279

08007e00 <strtol>:
 8007e00:	4613      	mov	r3, r2
 8007e02:	460a      	mov	r2, r1
 8007e04:	4601      	mov	r1, r0
 8007e06:	4802      	ldr	r0, [pc, #8]	; (8007e10 <strtol+0x10>)
 8007e08:	6800      	ldr	r0, [r0, #0]
 8007e0a:	f7ff bf77 	b.w	8007cfc <_strtol_l.constprop.0>
 8007e0e:	bf00      	nop
 8007e10:	20000120 	.word	0x20000120

08007e14 <std>:
 8007e14:	2300      	movs	r3, #0
 8007e16:	b510      	push	{r4, lr}
 8007e18:	4604      	mov	r4, r0
 8007e1a:	e9c0 3300 	strd	r3, r3, [r0]
 8007e1e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007e22:	6083      	str	r3, [r0, #8]
 8007e24:	8181      	strh	r1, [r0, #12]
 8007e26:	6643      	str	r3, [r0, #100]	; 0x64
 8007e28:	81c2      	strh	r2, [r0, #14]
 8007e2a:	6183      	str	r3, [r0, #24]
 8007e2c:	4619      	mov	r1, r3
 8007e2e:	2208      	movs	r2, #8
 8007e30:	305c      	adds	r0, #92	; 0x5c
 8007e32:	f000 f916 	bl	8008062 <memset>
 8007e36:	4b05      	ldr	r3, [pc, #20]	; (8007e4c <std+0x38>)
 8007e38:	6263      	str	r3, [r4, #36]	; 0x24
 8007e3a:	4b05      	ldr	r3, [pc, #20]	; (8007e50 <std+0x3c>)
 8007e3c:	62a3      	str	r3, [r4, #40]	; 0x28
 8007e3e:	4b05      	ldr	r3, [pc, #20]	; (8007e54 <std+0x40>)
 8007e40:	62e3      	str	r3, [r4, #44]	; 0x2c
 8007e42:	4b05      	ldr	r3, [pc, #20]	; (8007e58 <std+0x44>)
 8007e44:	6224      	str	r4, [r4, #32]
 8007e46:	6323      	str	r3, [r4, #48]	; 0x30
 8007e48:	bd10      	pop	{r4, pc}
 8007e4a:	bf00      	nop
 8007e4c:	08007fdd 	.word	0x08007fdd
 8007e50:	08007fff 	.word	0x08007fff
 8007e54:	08008037 	.word	0x08008037
 8007e58:	0800805b 	.word	0x0800805b

08007e5c <stdio_exit_handler>:
 8007e5c:	4a02      	ldr	r2, [pc, #8]	; (8007e68 <stdio_exit_handler+0xc>)
 8007e5e:	4903      	ldr	r1, [pc, #12]	; (8007e6c <stdio_exit_handler+0x10>)
 8007e60:	4803      	ldr	r0, [pc, #12]	; (8007e70 <stdio_exit_handler+0x14>)
 8007e62:	f000 b869 	b.w	8007f38 <_fwalk_sglue>
 8007e66:	bf00      	nop
 8007e68:	200000c8 	.word	0x200000c8
 8007e6c:	08008b29 	.word	0x08008b29
 8007e70:	200000d4 	.word	0x200000d4

08007e74 <cleanup_stdio>:
 8007e74:	6841      	ldr	r1, [r0, #4]
 8007e76:	4b0c      	ldr	r3, [pc, #48]	; (8007ea8 <cleanup_stdio+0x34>)
 8007e78:	4299      	cmp	r1, r3
 8007e7a:	b510      	push	{r4, lr}
 8007e7c:	4604      	mov	r4, r0
 8007e7e:	d001      	beq.n	8007e84 <cleanup_stdio+0x10>
 8007e80:	f000 fe52 	bl	8008b28 <_fflush_r>
 8007e84:	68a1      	ldr	r1, [r4, #8]
 8007e86:	4b09      	ldr	r3, [pc, #36]	; (8007eac <cleanup_stdio+0x38>)
 8007e88:	4299      	cmp	r1, r3
 8007e8a:	d002      	beq.n	8007e92 <cleanup_stdio+0x1e>
 8007e8c:	4620      	mov	r0, r4
 8007e8e:	f000 fe4b 	bl	8008b28 <_fflush_r>
 8007e92:	68e1      	ldr	r1, [r4, #12]
 8007e94:	4b06      	ldr	r3, [pc, #24]	; (8007eb0 <cleanup_stdio+0x3c>)
 8007e96:	4299      	cmp	r1, r3
 8007e98:	d004      	beq.n	8007ea4 <cleanup_stdio+0x30>
 8007e9a:	4620      	mov	r0, r4
 8007e9c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ea0:	f000 be42 	b.w	8008b28 <_fflush_r>
 8007ea4:	bd10      	pop	{r4, pc}
 8007ea6:	bf00      	nop
 8007ea8:	200004e4 	.word	0x200004e4
 8007eac:	2000054c 	.word	0x2000054c
 8007eb0:	200005b4 	.word	0x200005b4

08007eb4 <global_stdio_init.part.0>:
 8007eb4:	b510      	push	{r4, lr}
 8007eb6:	4b0b      	ldr	r3, [pc, #44]	; (8007ee4 <global_stdio_init.part.0+0x30>)
 8007eb8:	4c0b      	ldr	r4, [pc, #44]	; (8007ee8 <global_stdio_init.part.0+0x34>)
 8007eba:	4a0c      	ldr	r2, [pc, #48]	; (8007eec <global_stdio_init.part.0+0x38>)
 8007ebc:	601a      	str	r2, [r3, #0]
 8007ebe:	4620      	mov	r0, r4
 8007ec0:	2200      	movs	r2, #0
 8007ec2:	2104      	movs	r1, #4
 8007ec4:	f7ff ffa6 	bl	8007e14 <std>
 8007ec8:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8007ecc:	2201      	movs	r2, #1
 8007ece:	2109      	movs	r1, #9
 8007ed0:	f7ff ffa0 	bl	8007e14 <std>
 8007ed4:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8007ed8:	2202      	movs	r2, #2
 8007eda:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ede:	2112      	movs	r1, #18
 8007ee0:	f7ff bf98 	b.w	8007e14 <std>
 8007ee4:	2000061c 	.word	0x2000061c
 8007ee8:	200004e4 	.word	0x200004e4
 8007eec:	08007e5d 	.word	0x08007e5d

08007ef0 <__sfp_lock_acquire>:
 8007ef0:	4801      	ldr	r0, [pc, #4]	; (8007ef8 <__sfp_lock_acquire+0x8>)
 8007ef2:	f000 b98b 	b.w	800820c <__retarget_lock_acquire_recursive>
 8007ef6:	bf00      	nop
 8007ef8:	20000625 	.word	0x20000625

08007efc <__sfp_lock_release>:
 8007efc:	4801      	ldr	r0, [pc, #4]	; (8007f04 <__sfp_lock_release+0x8>)
 8007efe:	f000 b986 	b.w	800820e <__retarget_lock_release_recursive>
 8007f02:	bf00      	nop
 8007f04:	20000625 	.word	0x20000625

08007f08 <__sinit>:
 8007f08:	b510      	push	{r4, lr}
 8007f0a:	4604      	mov	r4, r0
 8007f0c:	f7ff fff0 	bl	8007ef0 <__sfp_lock_acquire>
 8007f10:	6a23      	ldr	r3, [r4, #32]
 8007f12:	b11b      	cbz	r3, 8007f1c <__sinit+0x14>
 8007f14:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f18:	f7ff bff0 	b.w	8007efc <__sfp_lock_release>
 8007f1c:	4b04      	ldr	r3, [pc, #16]	; (8007f30 <__sinit+0x28>)
 8007f1e:	6223      	str	r3, [r4, #32]
 8007f20:	4b04      	ldr	r3, [pc, #16]	; (8007f34 <__sinit+0x2c>)
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	2b00      	cmp	r3, #0
 8007f26:	d1f5      	bne.n	8007f14 <__sinit+0xc>
 8007f28:	f7ff ffc4 	bl	8007eb4 <global_stdio_init.part.0>
 8007f2c:	e7f2      	b.n	8007f14 <__sinit+0xc>
 8007f2e:	bf00      	nop
 8007f30:	08007e75 	.word	0x08007e75
 8007f34:	2000061c 	.word	0x2000061c

08007f38 <_fwalk_sglue>:
 8007f38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007f3c:	4607      	mov	r7, r0
 8007f3e:	4688      	mov	r8, r1
 8007f40:	4614      	mov	r4, r2
 8007f42:	2600      	movs	r6, #0
 8007f44:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007f48:	f1b9 0901 	subs.w	r9, r9, #1
 8007f4c:	d505      	bpl.n	8007f5a <_fwalk_sglue+0x22>
 8007f4e:	6824      	ldr	r4, [r4, #0]
 8007f50:	2c00      	cmp	r4, #0
 8007f52:	d1f7      	bne.n	8007f44 <_fwalk_sglue+0xc>
 8007f54:	4630      	mov	r0, r6
 8007f56:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007f5a:	89ab      	ldrh	r3, [r5, #12]
 8007f5c:	2b01      	cmp	r3, #1
 8007f5e:	d907      	bls.n	8007f70 <_fwalk_sglue+0x38>
 8007f60:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007f64:	3301      	adds	r3, #1
 8007f66:	d003      	beq.n	8007f70 <_fwalk_sglue+0x38>
 8007f68:	4629      	mov	r1, r5
 8007f6a:	4638      	mov	r0, r7
 8007f6c:	47c0      	blx	r8
 8007f6e:	4306      	orrs	r6, r0
 8007f70:	3568      	adds	r5, #104	; 0x68
 8007f72:	e7e9      	b.n	8007f48 <_fwalk_sglue+0x10>

08007f74 <sniprintf>:
 8007f74:	b40c      	push	{r2, r3}
 8007f76:	b530      	push	{r4, r5, lr}
 8007f78:	4b17      	ldr	r3, [pc, #92]	; (8007fd8 <sniprintf+0x64>)
 8007f7a:	1e0c      	subs	r4, r1, #0
 8007f7c:	681d      	ldr	r5, [r3, #0]
 8007f7e:	b09d      	sub	sp, #116	; 0x74
 8007f80:	da08      	bge.n	8007f94 <sniprintf+0x20>
 8007f82:	238b      	movs	r3, #139	; 0x8b
 8007f84:	602b      	str	r3, [r5, #0]
 8007f86:	f04f 30ff 	mov.w	r0, #4294967295
 8007f8a:	b01d      	add	sp, #116	; 0x74
 8007f8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f90:	b002      	add	sp, #8
 8007f92:	4770      	bx	lr
 8007f94:	f44f 7302 	mov.w	r3, #520	; 0x208
 8007f98:	f8ad 3014 	strh.w	r3, [sp, #20]
 8007f9c:	bf14      	ite	ne
 8007f9e:	f104 33ff 	addne.w	r3, r4, #4294967295
 8007fa2:	4623      	moveq	r3, r4
 8007fa4:	9304      	str	r3, [sp, #16]
 8007fa6:	9307      	str	r3, [sp, #28]
 8007fa8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8007fac:	9002      	str	r0, [sp, #8]
 8007fae:	9006      	str	r0, [sp, #24]
 8007fb0:	f8ad 3016 	strh.w	r3, [sp, #22]
 8007fb4:	9a20      	ldr	r2, [sp, #128]	; 0x80
 8007fb6:	ab21      	add	r3, sp, #132	; 0x84
 8007fb8:	a902      	add	r1, sp, #8
 8007fba:	4628      	mov	r0, r5
 8007fbc:	9301      	str	r3, [sp, #4]
 8007fbe:	f000 fa9f 	bl	8008500 <_svfiprintf_r>
 8007fc2:	1c43      	adds	r3, r0, #1
 8007fc4:	bfbc      	itt	lt
 8007fc6:	238b      	movlt	r3, #139	; 0x8b
 8007fc8:	602b      	strlt	r3, [r5, #0]
 8007fca:	2c00      	cmp	r4, #0
 8007fcc:	d0dd      	beq.n	8007f8a <sniprintf+0x16>
 8007fce:	9b02      	ldr	r3, [sp, #8]
 8007fd0:	2200      	movs	r2, #0
 8007fd2:	701a      	strb	r2, [r3, #0]
 8007fd4:	e7d9      	b.n	8007f8a <sniprintf+0x16>
 8007fd6:	bf00      	nop
 8007fd8:	20000120 	.word	0x20000120

08007fdc <__sread>:
 8007fdc:	b510      	push	{r4, lr}
 8007fde:	460c      	mov	r4, r1
 8007fe0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007fe4:	f000 f8c4 	bl	8008170 <_read_r>
 8007fe8:	2800      	cmp	r0, #0
 8007fea:	bfab      	itete	ge
 8007fec:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8007fee:	89a3      	ldrhlt	r3, [r4, #12]
 8007ff0:	181b      	addge	r3, r3, r0
 8007ff2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8007ff6:	bfac      	ite	ge
 8007ff8:	6563      	strge	r3, [r4, #84]	; 0x54
 8007ffa:	81a3      	strhlt	r3, [r4, #12]
 8007ffc:	bd10      	pop	{r4, pc}

08007ffe <__swrite>:
 8007ffe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008002:	461f      	mov	r7, r3
 8008004:	898b      	ldrh	r3, [r1, #12]
 8008006:	05db      	lsls	r3, r3, #23
 8008008:	4605      	mov	r5, r0
 800800a:	460c      	mov	r4, r1
 800800c:	4616      	mov	r6, r2
 800800e:	d505      	bpl.n	800801c <__swrite+0x1e>
 8008010:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008014:	2302      	movs	r3, #2
 8008016:	2200      	movs	r2, #0
 8008018:	f000 f898 	bl	800814c <_lseek_r>
 800801c:	89a3      	ldrh	r3, [r4, #12]
 800801e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008022:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008026:	81a3      	strh	r3, [r4, #12]
 8008028:	4632      	mov	r2, r6
 800802a:	463b      	mov	r3, r7
 800802c:	4628      	mov	r0, r5
 800802e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008032:	f000 b8af 	b.w	8008194 <_write_r>

08008036 <__sseek>:
 8008036:	b510      	push	{r4, lr}
 8008038:	460c      	mov	r4, r1
 800803a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800803e:	f000 f885 	bl	800814c <_lseek_r>
 8008042:	1c43      	adds	r3, r0, #1
 8008044:	89a3      	ldrh	r3, [r4, #12]
 8008046:	bf15      	itete	ne
 8008048:	6560      	strne	r0, [r4, #84]	; 0x54
 800804a:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800804e:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8008052:	81a3      	strheq	r3, [r4, #12]
 8008054:	bf18      	it	ne
 8008056:	81a3      	strhne	r3, [r4, #12]
 8008058:	bd10      	pop	{r4, pc}

0800805a <__sclose>:
 800805a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800805e:	f000 b865 	b.w	800812c <_close_r>

08008062 <memset>:
 8008062:	4402      	add	r2, r0
 8008064:	4603      	mov	r3, r0
 8008066:	4293      	cmp	r3, r2
 8008068:	d100      	bne.n	800806c <memset+0xa>
 800806a:	4770      	bx	lr
 800806c:	f803 1b01 	strb.w	r1, [r3], #1
 8008070:	e7f9      	b.n	8008066 <memset+0x4>
	...

08008074 <strtok>:
 8008074:	4b16      	ldr	r3, [pc, #88]	; (80080d0 <strtok+0x5c>)
 8008076:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8008078:	681e      	ldr	r6, [r3, #0]
 800807a:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800807c:	4605      	mov	r5, r0
 800807e:	b9fc      	cbnz	r4, 80080c0 <strtok+0x4c>
 8008080:	2050      	movs	r0, #80	; 0x50
 8008082:	9101      	str	r1, [sp, #4]
 8008084:	f000 f92e 	bl	80082e4 <malloc>
 8008088:	9901      	ldr	r1, [sp, #4]
 800808a:	6470      	str	r0, [r6, #68]	; 0x44
 800808c:	4602      	mov	r2, r0
 800808e:	b920      	cbnz	r0, 800809a <strtok+0x26>
 8008090:	4b10      	ldr	r3, [pc, #64]	; (80080d4 <strtok+0x60>)
 8008092:	4811      	ldr	r0, [pc, #68]	; (80080d8 <strtok+0x64>)
 8008094:	215b      	movs	r1, #91	; 0x5b
 8008096:	f000 f8bb 	bl	8008210 <__assert_func>
 800809a:	e9c0 4400 	strd	r4, r4, [r0]
 800809e:	e9c0 4402 	strd	r4, r4, [r0, #8]
 80080a2:	e9c0 4404 	strd	r4, r4, [r0, #16]
 80080a6:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 80080aa:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 80080ae:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 80080b2:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 80080b6:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 80080ba:	6184      	str	r4, [r0, #24]
 80080bc:	7704      	strb	r4, [r0, #28]
 80080be:	6244      	str	r4, [r0, #36]	; 0x24
 80080c0:	6c72      	ldr	r2, [r6, #68]	; 0x44
 80080c2:	2301      	movs	r3, #1
 80080c4:	4628      	mov	r0, r5
 80080c6:	b002      	add	sp, #8
 80080c8:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80080cc:	f000 b806 	b.w	80080dc <__strtok_r>
 80080d0:	20000120 	.word	0x20000120
 80080d4:	08009379 	.word	0x08009379
 80080d8:	08009390 	.word	0x08009390

080080dc <__strtok_r>:
 80080dc:	b5f0      	push	{r4, r5, r6, r7, lr}
 80080de:	b908      	cbnz	r0, 80080e4 <__strtok_r+0x8>
 80080e0:	6810      	ldr	r0, [r2, #0]
 80080e2:	b188      	cbz	r0, 8008108 <__strtok_r+0x2c>
 80080e4:	4604      	mov	r4, r0
 80080e6:	4620      	mov	r0, r4
 80080e8:	f814 5b01 	ldrb.w	r5, [r4], #1
 80080ec:	460f      	mov	r7, r1
 80080ee:	f817 6b01 	ldrb.w	r6, [r7], #1
 80080f2:	b91e      	cbnz	r6, 80080fc <__strtok_r+0x20>
 80080f4:	b965      	cbnz	r5, 8008110 <__strtok_r+0x34>
 80080f6:	6015      	str	r5, [r2, #0]
 80080f8:	4628      	mov	r0, r5
 80080fa:	e005      	b.n	8008108 <__strtok_r+0x2c>
 80080fc:	42b5      	cmp	r5, r6
 80080fe:	d1f6      	bne.n	80080ee <__strtok_r+0x12>
 8008100:	2b00      	cmp	r3, #0
 8008102:	d1f0      	bne.n	80080e6 <__strtok_r+0xa>
 8008104:	6014      	str	r4, [r2, #0]
 8008106:	7003      	strb	r3, [r0, #0]
 8008108:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800810a:	461c      	mov	r4, r3
 800810c:	e00c      	b.n	8008128 <__strtok_r+0x4c>
 800810e:	b915      	cbnz	r5, 8008116 <__strtok_r+0x3a>
 8008110:	f814 3b01 	ldrb.w	r3, [r4], #1
 8008114:	460e      	mov	r6, r1
 8008116:	f816 5b01 	ldrb.w	r5, [r6], #1
 800811a:	42ab      	cmp	r3, r5
 800811c:	d1f7      	bne.n	800810e <__strtok_r+0x32>
 800811e:	2b00      	cmp	r3, #0
 8008120:	d0f3      	beq.n	800810a <__strtok_r+0x2e>
 8008122:	2300      	movs	r3, #0
 8008124:	f804 3c01 	strb.w	r3, [r4, #-1]
 8008128:	6014      	str	r4, [r2, #0]
 800812a:	e7ed      	b.n	8008108 <__strtok_r+0x2c>

0800812c <_close_r>:
 800812c:	b538      	push	{r3, r4, r5, lr}
 800812e:	4d06      	ldr	r5, [pc, #24]	; (8008148 <_close_r+0x1c>)
 8008130:	2300      	movs	r3, #0
 8008132:	4604      	mov	r4, r0
 8008134:	4608      	mov	r0, r1
 8008136:	602b      	str	r3, [r5, #0]
 8008138:	f7f8 febf 	bl	8000eba <_close>
 800813c:	1c43      	adds	r3, r0, #1
 800813e:	d102      	bne.n	8008146 <_close_r+0x1a>
 8008140:	682b      	ldr	r3, [r5, #0]
 8008142:	b103      	cbz	r3, 8008146 <_close_r+0x1a>
 8008144:	6023      	str	r3, [r4, #0]
 8008146:	bd38      	pop	{r3, r4, r5, pc}
 8008148:	20000620 	.word	0x20000620

0800814c <_lseek_r>:
 800814c:	b538      	push	{r3, r4, r5, lr}
 800814e:	4d07      	ldr	r5, [pc, #28]	; (800816c <_lseek_r+0x20>)
 8008150:	4604      	mov	r4, r0
 8008152:	4608      	mov	r0, r1
 8008154:	4611      	mov	r1, r2
 8008156:	2200      	movs	r2, #0
 8008158:	602a      	str	r2, [r5, #0]
 800815a:	461a      	mov	r2, r3
 800815c:	f7f8 fed4 	bl	8000f08 <_lseek>
 8008160:	1c43      	adds	r3, r0, #1
 8008162:	d102      	bne.n	800816a <_lseek_r+0x1e>
 8008164:	682b      	ldr	r3, [r5, #0]
 8008166:	b103      	cbz	r3, 800816a <_lseek_r+0x1e>
 8008168:	6023      	str	r3, [r4, #0]
 800816a:	bd38      	pop	{r3, r4, r5, pc}
 800816c:	20000620 	.word	0x20000620

08008170 <_read_r>:
 8008170:	b538      	push	{r3, r4, r5, lr}
 8008172:	4d07      	ldr	r5, [pc, #28]	; (8008190 <_read_r+0x20>)
 8008174:	4604      	mov	r4, r0
 8008176:	4608      	mov	r0, r1
 8008178:	4611      	mov	r1, r2
 800817a:	2200      	movs	r2, #0
 800817c:	602a      	str	r2, [r5, #0]
 800817e:	461a      	mov	r2, r3
 8008180:	f7f8 fe62 	bl	8000e48 <_read>
 8008184:	1c43      	adds	r3, r0, #1
 8008186:	d102      	bne.n	800818e <_read_r+0x1e>
 8008188:	682b      	ldr	r3, [r5, #0]
 800818a:	b103      	cbz	r3, 800818e <_read_r+0x1e>
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	bd38      	pop	{r3, r4, r5, pc}
 8008190:	20000620 	.word	0x20000620

08008194 <_write_r>:
 8008194:	b538      	push	{r3, r4, r5, lr}
 8008196:	4d07      	ldr	r5, [pc, #28]	; (80081b4 <_write_r+0x20>)
 8008198:	4604      	mov	r4, r0
 800819a:	4608      	mov	r0, r1
 800819c:	4611      	mov	r1, r2
 800819e:	2200      	movs	r2, #0
 80081a0:	602a      	str	r2, [r5, #0]
 80081a2:	461a      	mov	r2, r3
 80081a4:	f7f8 fe6d 	bl	8000e82 <_write>
 80081a8:	1c43      	adds	r3, r0, #1
 80081aa:	d102      	bne.n	80081b2 <_write_r+0x1e>
 80081ac:	682b      	ldr	r3, [r5, #0]
 80081ae:	b103      	cbz	r3, 80081b2 <_write_r+0x1e>
 80081b0:	6023      	str	r3, [r4, #0]
 80081b2:	bd38      	pop	{r3, r4, r5, pc}
 80081b4:	20000620 	.word	0x20000620

080081b8 <__errno>:
 80081b8:	4b01      	ldr	r3, [pc, #4]	; (80081c0 <__errno+0x8>)
 80081ba:	6818      	ldr	r0, [r3, #0]
 80081bc:	4770      	bx	lr
 80081be:	bf00      	nop
 80081c0:	20000120 	.word	0x20000120

080081c4 <__libc_init_array>:
 80081c4:	b570      	push	{r4, r5, r6, lr}
 80081c6:	4d0d      	ldr	r5, [pc, #52]	; (80081fc <__libc_init_array+0x38>)
 80081c8:	4c0d      	ldr	r4, [pc, #52]	; (8008200 <__libc_init_array+0x3c>)
 80081ca:	1b64      	subs	r4, r4, r5
 80081cc:	10a4      	asrs	r4, r4, #2
 80081ce:	2600      	movs	r6, #0
 80081d0:	42a6      	cmp	r6, r4
 80081d2:	d109      	bne.n	80081e8 <__libc_init_array+0x24>
 80081d4:	4d0b      	ldr	r5, [pc, #44]	; (8008204 <__libc_init_array+0x40>)
 80081d6:	4c0c      	ldr	r4, [pc, #48]	; (8008208 <__libc_init_array+0x44>)
 80081d8:	f000 fff8 	bl	80091cc <_init>
 80081dc:	1b64      	subs	r4, r4, r5
 80081de:	10a4      	asrs	r4, r4, #2
 80081e0:	2600      	movs	r6, #0
 80081e2:	42a6      	cmp	r6, r4
 80081e4:	d105      	bne.n	80081f2 <__libc_init_array+0x2e>
 80081e6:	bd70      	pop	{r4, r5, r6, pc}
 80081e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80081ec:	4798      	blx	r3
 80081ee:	3601      	adds	r6, #1
 80081f0:	e7ee      	b.n	80081d0 <__libc_init_array+0xc>
 80081f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80081f6:	4798      	blx	r3
 80081f8:	3601      	adds	r6, #1
 80081fa:	e7f2      	b.n	80081e2 <__libc_init_array+0x1e>
 80081fc:	08009464 	.word	0x08009464
 8008200:	08009464 	.word	0x08009464
 8008204:	08009464 	.word	0x08009464
 8008208:	08009468 	.word	0x08009468

0800820c <__retarget_lock_acquire_recursive>:
 800820c:	4770      	bx	lr

0800820e <__retarget_lock_release_recursive>:
 800820e:	4770      	bx	lr

08008210 <__assert_func>:
 8008210:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008212:	4614      	mov	r4, r2
 8008214:	461a      	mov	r2, r3
 8008216:	4b09      	ldr	r3, [pc, #36]	; (800823c <__assert_func+0x2c>)
 8008218:	681b      	ldr	r3, [r3, #0]
 800821a:	4605      	mov	r5, r0
 800821c:	68d8      	ldr	r0, [r3, #12]
 800821e:	b14c      	cbz	r4, 8008234 <__assert_func+0x24>
 8008220:	4b07      	ldr	r3, [pc, #28]	; (8008240 <__assert_func+0x30>)
 8008222:	9100      	str	r1, [sp, #0]
 8008224:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008228:	4906      	ldr	r1, [pc, #24]	; (8008244 <__assert_func+0x34>)
 800822a:	462b      	mov	r3, r5
 800822c:	f000 fca4 	bl	8008b78 <fiprintf>
 8008230:	f000 fcec 	bl	8008c0c <abort>
 8008234:	4b04      	ldr	r3, [pc, #16]	; (8008248 <__assert_func+0x38>)
 8008236:	461c      	mov	r4, r3
 8008238:	e7f3      	b.n	8008222 <__assert_func+0x12>
 800823a:	bf00      	nop
 800823c:	20000120 	.word	0x20000120
 8008240:	080093ea 	.word	0x080093ea
 8008244:	080093f7 	.word	0x080093f7
 8008248:	08009425 	.word	0x08009425

0800824c <_free_r>:
 800824c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800824e:	2900      	cmp	r1, #0
 8008250:	d044      	beq.n	80082dc <_free_r+0x90>
 8008252:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008256:	9001      	str	r0, [sp, #4]
 8008258:	2b00      	cmp	r3, #0
 800825a:	f1a1 0404 	sub.w	r4, r1, #4
 800825e:	bfb8      	it	lt
 8008260:	18e4      	addlt	r4, r4, r3
 8008262:	f000 f8e7 	bl	8008434 <__malloc_lock>
 8008266:	4a1e      	ldr	r2, [pc, #120]	; (80082e0 <_free_r+0x94>)
 8008268:	9801      	ldr	r0, [sp, #4]
 800826a:	6813      	ldr	r3, [r2, #0]
 800826c:	b933      	cbnz	r3, 800827c <_free_r+0x30>
 800826e:	6063      	str	r3, [r4, #4]
 8008270:	6014      	str	r4, [r2, #0]
 8008272:	b003      	add	sp, #12
 8008274:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008278:	f000 b8e2 	b.w	8008440 <__malloc_unlock>
 800827c:	42a3      	cmp	r3, r4
 800827e:	d908      	bls.n	8008292 <_free_r+0x46>
 8008280:	6825      	ldr	r5, [r4, #0]
 8008282:	1961      	adds	r1, r4, r5
 8008284:	428b      	cmp	r3, r1
 8008286:	bf01      	itttt	eq
 8008288:	6819      	ldreq	r1, [r3, #0]
 800828a:	685b      	ldreq	r3, [r3, #4]
 800828c:	1949      	addeq	r1, r1, r5
 800828e:	6021      	streq	r1, [r4, #0]
 8008290:	e7ed      	b.n	800826e <_free_r+0x22>
 8008292:	461a      	mov	r2, r3
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	b10b      	cbz	r3, 800829c <_free_r+0x50>
 8008298:	42a3      	cmp	r3, r4
 800829a:	d9fa      	bls.n	8008292 <_free_r+0x46>
 800829c:	6811      	ldr	r1, [r2, #0]
 800829e:	1855      	adds	r5, r2, r1
 80082a0:	42a5      	cmp	r5, r4
 80082a2:	d10b      	bne.n	80082bc <_free_r+0x70>
 80082a4:	6824      	ldr	r4, [r4, #0]
 80082a6:	4421      	add	r1, r4
 80082a8:	1854      	adds	r4, r2, r1
 80082aa:	42a3      	cmp	r3, r4
 80082ac:	6011      	str	r1, [r2, #0]
 80082ae:	d1e0      	bne.n	8008272 <_free_r+0x26>
 80082b0:	681c      	ldr	r4, [r3, #0]
 80082b2:	685b      	ldr	r3, [r3, #4]
 80082b4:	6053      	str	r3, [r2, #4]
 80082b6:	440c      	add	r4, r1
 80082b8:	6014      	str	r4, [r2, #0]
 80082ba:	e7da      	b.n	8008272 <_free_r+0x26>
 80082bc:	d902      	bls.n	80082c4 <_free_r+0x78>
 80082be:	230c      	movs	r3, #12
 80082c0:	6003      	str	r3, [r0, #0]
 80082c2:	e7d6      	b.n	8008272 <_free_r+0x26>
 80082c4:	6825      	ldr	r5, [r4, #0]
 80082c6:	1961      	adds	r1, r4, r5
 80082c8:	428b      	cmp	r3, r1
 80082ca:	bf04      	itt	eq
 80082cc:	6819      	ldreq	r1, [r3, #0]
 80082ce:	685b      	ldreq	r3, [r3, #4]
 80082d0:	6063      	str	r3, [r4, #4]
 80082d2:	bf04      	itt	eq
 80082d4:	1949      	addeq	r1, r1, r5
 80082d6:	6021      	streq	r1, [r4, #0]
 80082d8:	6054      	str	r4, [r2, #4]
 80082da:	e7ca      	b.n	8008272 <_free_r+0x26>
 80082dc:	b003      	add	sp, #12
 80082de:	bd30      	pop	{r4, r5, pc}
 80082e0:	20000628 	.word	0x20000628

080082e4 <malloc>:
 80082e4:	4b02      	ldr	r3, [pc, #8]	; (80082f0 <malloc+0xc>)
 80082e6:	4601      	mov	r1, r0
 80082e8:	6818      	ldr	r0, [r3, #0]
 80082ea:	f000 b823 	b.w	8008334 <_malloc_r>
 80082ee:	bf00      	nop
 80082f0:	20000120 	.word	0x20000120

080082f4 <sbrk_aligned>:
 80082f4:	b570      	push	{r4, r5, r6, lr}
 80082f6:	4e0e      	ldr	r6, [pc, #56]	; (8008330 <sbrk_aligned+0x3c>)
 80082f8:	460c      	mov	r4, r1
 80082fa:	6831      	ldr	r1, [r6, #0]
 80082fc:	4605      	mov	r5, r0
 80082fe:	b911      	cbnz	r1, 8008306 <sbrk_aligned+0x12>
 8008300:	f000 fc66 	bl	8008bd0 <_sbrk_r>
 8008304:	6030      	str	r0, [r6, #0]
 8008306:	4621      	mov	r1, r4
 8008308:	4628      	mov	r0, r5
 800830a:	f000 fc61 	bl	8008bd0 <_sbrk_r>
 800830e:	1c43      	adds	r3, r0, #1
 8008310:	d00a      	beq.n	8008328 <sbrk_aligned+0x34>
 8008312:	1cc4      	adds	r4, r0, #3
 8008314:	f024 0403 	bic.w	r4, r4, #3
 8008318:	42a0      	cmp	r0, r4
 800831a:	d007      	beq.n	800832c <sbrk_aligned+0x38>
 800831c:	1a21      	subs	r1, r4, r0
 800831e:	4628      	mov	r0, r5
 8008320:	f000 fc56 	bl	8008bd0 <_sbrk_r>
 8008324:	3001      	adds	r0, #1
 8008326:	d101      	bne.n	800832c <sbrk_aligned+0x38>
 8008328:	f04f 34ff 	mov.w	r4, #4294967295
 800832c:	4620      	mov	r0, r4
 800832e:	bd70      	pop	{r4, r5, r6, pc}
 8008330:	2000062c 	.word	0x2000062c

08008334 <_malloc_r>:
 8008334:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008338:	1ccd      	adds	r5, r1, #3
 800833a:	f025 0503 	bic.w	r5, r5, #3
 800833e:	3508      	adds	r5, #8
 8008340:	2d0c      	cmp	r5, #12
 8008342:	bf38      	it	cc
 8008344:	250c      	movcc	r5, #12
 8008346:	2d00      	cmp	r5, #0
 8008348:	4607      	mov	r7, r0
 800834a:	db01      	blt.n	8008350 <_malloc_r+0x1c>
 800834c:	42a9      	cmp	r1, r5
 800834e:	d905      	bls.n	800835c <_malloc_r+0x28>
 8008350:	230c      	movs	r3, #12
 8008352:	603b      	str	r3, [r7, #0]
 8008354:	2600      	movs	r6, #0
 8008356:	4630      	mov	r0, r6
 8008358:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800835c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008430 <_malloc_r+0xfc>
 8008360:	f000 f868 	bl	8008434 <__malloc_lock>
 8008364:	f8d8 3000 	ldr.w	r3, [r8]
 8008368:	461c      	mov	r4, r3
 800836a:	bb5c      	cbnz	r4, 80083c4 <_malloc_r+0x90>
 800836c:	4629      	mov	r1, r5
 800836e:	4638      	mov	r0, r7
 8008370:	f7ff ffc0 	bl	80082f4 <sbrk_aligned>
 8008374:	1c43      	adds	r3, r0, #1
 8008376:	4604      	mov	r4, r0
 8008378:	d155      	bne.n	8008426 <_malloc_r+0xf2>
 800837a:	f8d8 4000 	ldr.w	r4, [r8]
 800837e:	4626      	mov	r6, r4
 8008380:	2e00      	cmp	r6, #0
 8008382:	d145      	bne.n	8008410 <_malloc_r+0xdc>
 8008384:	2c00      	cmp	r4, #0
 8008386:	d048      	beq.n	800841a <_malloc_r+0xe6>
 8008388:	6823      	ldr	r3, [r4, #0]
 800838a:	4631      	mov	r1, r6
 800838c:	4638      	mov	r0, r7
 800838e:	eb04 0903 	add.w	r9, r4, r3
 8008392:	f000 fc1d 	bl	8008bd0 <_sbrk_r>
 8008396:	4581      	cmp	r9, r0
 8008398:	d13f      	bne.n	800841a <_malloc_r+0xe6>
 800839a:	6821      	ldr	r1, [r4, #0]
 800839c:	1a6d      	subs	r5, r5, r1
 800839e:	4629      	mov	r1, r5
 80083a0:	4638      	mov	r0, r7
 80083a2:	f7ff ffa7 	bl	80082f4 <sbrk_aligned>
 80083a6:	3001      	adds	r0, #1
 80083a8:	d037      	beq.n	800841a <_malloc_r+0xe6>
 80083aa:	6823      	ldr	r3, [r4, #0]
 80083ac:	442b      	add	r3, r5
 80083ae:	6023      	str	r3, [r4, #0]
 80083b0:	f8d8 3000 	ldr.w	r3, [r8]
 80083b4:	2b00      	cmp	r3, #0
 80083b6:	d038      	beq.n	800842a <_malloc_r+0xf6>
 80083b8:	685a      	ldr	r2, [r3, #4]
 80083ba:	42a2      	cmp	r2, r4
 80083bc:	d12b      	bne.n	8008416 <_malloc_r+0xe2>
 80083be:	2200      	movs	r2, #0
 80083c0:	605a      	str	r2, [r3, #4]
 80083c2:	e00f      	b.n	80083e4 <_malloc_r+0xb0>
 80083c4:	6822      	ldr	r2, [r4, #0]
 80083c6:	1b52      	subs	r2, r2, r5
 80083c8:	d41f      	bmi.n	800840a <_malloc_r+0xd6>
 80083ca:	2a0b      	cmp	r2, #11
 80083cc:	d917      	bls.n	80083fe <_malloc_r+0xca>
 80083ce:	1961      	adds	r1, r4, r5
 80083d0:	42a3      	cmp	r3, r4
 80083d2:	6025      	str	r5, [r4, #0]
 80083d4:	bf18      	it	ne
 80083d6:	6059      	strne	r1, [r3, #4]
 80083d8:	6863      	ldr	r3, [r4, #4]
 80083da:	bf08      	it	eq
 80083dc:	f8c8 1000 	streq.w	r1, [r8]
 80083e0:	5162      	str	r2, [r4, r5]
 80083e2:	604b      	str	r3, [r1, #4]
 80083e4:	4638      	mov	r0, r7
 80083e6:	f104 060b 	add.w	r6, r4, #11
 80083ea:	f000 f829 	bl	8008440 <__malloc_unlock>
 80083ee:	f026 0607 	bic.w	r6, r6, #7
 80083f2:	1d23      	adds	r3, r4, #4
 80083f4:	1af2      	subs	r2, r6, r3
 80083f6:	d0ae      	beq.n	8008356 <_malloc_r+0x22>
 80083f8:	1b9b      	subs	r3, r3, r6
 80083fa:	50a3      	str	r3, [r4, r2]
 80083fc:	e7ab      	b.n	8008356 <_malloc_r+0x22>
 80083fe:	42a3      	cmp	r3, r4
 8008400:	6862      	ldr	r2, [r4, #4]
 8008402:	d1dd      	bne.n	80083c0 <_malloc_r+0x8c>
 8008404:	f8c8 2000 	str.w	r2, [r8]
 8008408:	e7ec      	b.n	80083e4 <_malloc_r+0xb0>
 800840a:	4623      	mov	r3, r4
 800840c:	6864      	ldr	r4, [r4, #4]
 800840e:	e7ac      	b.n	800836a <_malloc_r+0x36>
 8008410:	4634      	mov	r4, r6
 8008412:	6876      	ldr	r6, [r6, #4]
 8008414:	e7b4      	b.n	8008380 <_malloc_r+0x4c>
 8008416:	4613      	mov	r3, r2
 8008418:	e7cc      	b.n	80083b4 <_malloc_r+0x80>
 800841a:	230c      	movs	r3, #12
 800841c:	603b      	str	r3, [r7, #0]
 800841e:	4638      	mov	r0, r7
 8008420:	f000 f80e 	bl	8008440 <__malloc_unlock>
 8008424:	e797      	b.n	8008356 <_malloc_r+0x22>
 8008426:	6025      	str	r5, [r4, #0]
 8008428:	e7dc      	b.n	80083e4 <_malloc_r+0xb0>
 800842a:	605b      	str	r3, [r3, #4]
 800842c:	deff      	udf	#255	; 0xff
 800842e:	bf00      	nop
 8008430:	20000628 	.word	0x20000628

08008434 <__malloc_lock>:
 8008434:	4801      	ldr	r0, [pc, #4]	; (800843c <__malloc_lock+0x8>)
 8008436:	f7ff bee9 	b.w	800820c <__retarget_lock_acquire_recursive>
 800843a:	bf00      	nop
 800843c:	20000624 	.word	0x20000624

08008440 <__malloc_unlock>:
 8008440:	4801      	ldr	r0, [pc, #4]	; (8008448 <__malloc_unlock+0x8>)
 8008442:	f7ff bee4 	b.w	800820e <__retarget_lock_release_recursive>
 8008446:	bf00      	nop
 8008448:	20000624 	.word	0x20000624

0800844c <__ssputs_r>:
 800844c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008450:	688e      	ldr	r6, [r1, #8]
 8008452:	461f      	mov	r7, r3
 8008454:	42be      	cmp	r6, r7
 8008456:	680b      	ldr	r3, [r1, #0]
 8008458:	4682      	mov	sl, r0
 800845a:	460c      	mov	r4, r1
 800845c:	4690      	mov	r8, r2
 800845e:	d82c      	bhi.n	80084ba <__ssputs_r+0x6e>
 8008460:	898a      	ldrh	r2, [r1, #12]
 8008462:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008466:	d026      	beq.n	80084b6 <__ssputs_r+0x6a>
 8008468:	6965      	ldr	r5, [r4, #20]
 800846a:	6909      	ldr	r1, [r1, #16]
 800846c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008470:	eba3 0901 	sub.w	r9, r3, r1
 8008474:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008478:	1c7b      	adds	r3, r7, #1
 800847a:	444b      	add	r3, r9
 800847c:	106d      	asrs	r5, r5, #1
 800847e:	429d      	cmp	r5, r3
 8008480:	bf38      	it	cc
 8008482:	461d      	movcc	r5, r3
 8008484:	0553      	lsls	r3, r2, #21
 8008486:	d527      	bpl.n	80084d8 <__ssputs_r+0x8c>
 8008488:	4629      	mov	r1, r5
 800848a:	f7ff ff53 	bl	8008334 <_malloc_r>
 800848e:	4606      	mov	r6, r0
 8008490:	b360      	cbz	r0, 80084ec <__ssputs_r+0xa0>
 8008492:	6921      	ldr	r1, [r4, #16]
 8008494:	464a      	mov	r2, r9
 8008496:	f000 fbab 	bl	8008bf0 <memcpy>
 800849a:	89a3      	ldrh	r3, [r4, #12]
 800849c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 80084a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80084a4:	81a3      	strh	r3, [r4, #12]
 80084a6:	6126      	str	r6, [r4, #16]
 80084a8:	6165      	str	r5, [r4, #20]
 80084aa:	444e      	add	r6, r9
 80084ac:	eba5 0509 	sub.w	r5, r5, r9
 80084b0:	6026      	str	r6, [r4, #0]
 80084b2:	60a5      	str	r5, [r4, #8]
 80084b4:	463e      	mov	r6, r7
 80084b6:	42be      	cmp	r6, r7
 80084b8:	d900      	bls.n	80084bc <__ssputs_r+0x70>
 80084ba:	463e      	mov	r6, r7
 80084bc:	6820      	ldr	r0, [r4, #0]
 80084be:	4632      	mov	r2, r6
 80084c0:	4641      	mov	r1, r8
 80084c2:	f000 fb6b 	bl	8008b9c <memmove>
 80084c6:	68a3      	ldr	r3, [r4, #8]
 80084c8:	1b9b      	subs	r3, r3, r6
 80084ca:	60a3      	str	r3, [r4, #8]
 80084cc:	6823      	ldr	r3, [r4, #0]
 80084ce:	4433      	add	r3, r6
 80084d0:	6023      	str	r3, [r4, #0]
 80084d2:	2000      	movs	r0, #0
 80084d4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80084d8:	462a      	mov	r2, r5
 80084da:	f000 fb9e 	bl	8008c1a <_realloc_r>
 80084de:	4606      	mov	r6, r0
 80084e0:	2800      	cmp	r0, #0
 80084e2:	d1e0      	bne.n	80084a6 <__ssputs_r+0x5a>
 80084e4:	6921      	ldr	r1, [r4, #16]
 80084e6:	4650      	mov	r0, sl
 80084e8:	f7ff feb0 	bl	800824c <_free_r>
 80084ec:	230c      	movs	r3, #12
 80084ee:	f8ca 3000 	str.w	r3, [sl]
 80084f2:	89a3      	ldrh	r3, [r4, #12]
 80084f4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80084f8:	81a3      	strh	r3, [r4, #12]
 80084fa:	f04f 30ff 	mov.w	r0, #4294967295
 80084fe:	e7e9      	b.n	80084d4 <__ssputs_r+0x88>

08008500 <_svfiprintf_r>:
 8008500:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008504:	4698      	mov	r8, r3
 8008506:	898b      	ldrh	r3, [r1, #12]
 8008508:	061b      	lsls	r3, r3, #24
 800850a:	b09d      	sub	sp, #116	; 0x74
 800850c:	4607      	mov	r7, r0
 800850e:	460d      	mov	r5, r1
 8008510:	4614      	mov	r4, r2
 8008512:	d50e      	bpl.n	8008532 <_svfiprintf_r+0x32>
 8008514:	690b      	ldr	r3, [r1, #16]
 8008516:	b963      	cbnz	r3, 8008532 <_svfiprintf_r+0x32>
 8008518:	2140      	movs	r1, #64	; 0x40
 800851a:	f7ff ff0b 	bl	8008334 <_malloc_r>
 800851e:	6028      	str	r0, [r5, #0]
 8008520:	6128      	str	r0, [r5, #16]
 8008522:	b920      	cbnz	r0, 800852e <_svfiprintf_r+0x2e>
 8008524:	230c      	movs	r3, #12
 8008526:	603b      	str	r3, [r7, #0]
 8008528:	f04f 30ff 	mov.w	r0, #4294967295
 800852c:	e0d0      	b.n	80086d0 <_svfiprintf_r+0x1d0>
 800852e:	2340      	movs	r3, #64	; 0x40
 8008530:	616b      	str	r3, [r5, #20]
 8008532:	2300      	movs	r3, #0
 8008534:	9309      	str	r3, [sp, #36]	; 0x24
 8008536:	2320      	movs	r3, #32
 8008538:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800853c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008540:	2330      	movs	r3, #48	; 0x30
 8008542:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80086e8 <_svfiprintf_r+0x1e8>
 8008546:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800854a:	f04f 0901 	mov.w	r9, #1
 800854e:	4623      	mov	r3, r4
 8008550:	469a      	mov	sl, r3
 8008552:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008556:	b10a      	cbz	r2, 800855c <_svfiprintf_r+0x5c>
 8008558:	2a25      	cmp	r2, #37	; 0x25
 800855a:	d1f9      	bne.n	8008550 <_svfiprintf_r+0x50>
 800855c:	ebba 0b04 	subs.w	fp, sl, r4
 8008560:	d00b      	beq.n	800857a <_svfiprintf_r+0x7a>
 8008562:	465b      	mov	r3, fp
 8008564:	4622      	mov	r2, r4
 8008566:	4629      	mov	r1, r5
 8008568:	4638      	mov	r0, r7
 800856a:	f7ff ff6f 	bl	800844c <__ssputs_r>
 800856e:	3001      	adds	r0, #1
 8008570:	f000 80a9 	beq.w	80086c6 <_svfiprintf_r+0x1c6>
 8008574:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008576:	445a      	add	r2, fp
 8008578:	9209      	str	r2, [sp, #36]	; 0x24
 800857a:	f89a 3000 	ldrb.w	r3, [sl]
 800857e:	2b00      	cmp	r3, #0
 8008580:	f000 80a1 	beq.w	80086c6 <_svfiprintf_r+0x1c6>
 8008584:	2300      	movs	r3, #0
 8008586:	f04f 32ff 	mov.w	r2, #4294967295
 800858a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800858e:	f10a 0a01 	add.w	sl, sl, #1
 8008592:	9304      	str	r3, [sp, #16]
 8008594:	9307      	str	r3, [sp, #28]
 8008596:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800859a:	931a      	str	r3, [sp, #104]	; 0x68
 800859c:	4654      	mov	r4, sl
 800859e:	2205      	movs	r2, #5
 80085a0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80085a4:	4850      	ldr	r0, [pc, #320]	; (80086e8 <_svfiprintf_r+0x1e8>)
 80085a6:	f7f7 fe53 	bl	8000250 <memchr>
 80085aa:	9a04      	ldr	r2, [sp, #16]
 80085ac:	b9d8      	cbnz	r0, 80085e6 <_svfiprintf_r+0xe6>
 80085ae:	06d0      	lsls	r0, r2, #27
 80085b0:	bf44      	itt	mi
 80085b2:	2320      	movmi	r3, #32
 80085b4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085b8:	0711      	lsls	r1, r2, #28
 80085ba:	bf44      	itt	mi
 80085bc:	232b      	movmi	r3, #43	; 0x2b
 80085be:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80085c2:	f89a 3000 	ldrb.w	r3, [sl]
 80085c6:	2b2a      	cmp	r3, #42	; 0x2a
 80085c8:	d015      	beq.n	80085f6 <_svfiprintf_r+0xf6>
 80085ca:	9a07      	ldr	r2, [sp, #28]
 80085cc:	4654      	mov	r4, sl
 80085ce:	2000      	movs	r0, #0
 80085d0:	f04f 0c0a 	mov.w	ip, #10
 80085d4:	4621      	mov	r1, r4
 80085d6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80085da:	3b30      	subs	r3, #48	; 0x30
 80085dc:	2b09      	cmp	r3, #9
 80085de:	d94d      	bls.n	800867c <_svfiprintf_r+0x17c>
 80085e0:	b1b0      	cbz	r0, 8008610 <_svfiprintf_r+0x110>
 80085e2:	9207      	str	r2, [sp, #28]
 80085e4:	e014      	b.n	8008610 <_svfiprintf_r+0x110>
 80085e6:	eba0 0308 	sub.w	r3, r0, r8
 80085ea:	fa09 f303 	lsl.w	r3, r9, r3
 80085ee:	4313      	orrs	r3, r2
 80085f0:	9304      	str	r3, [sp, #16]
 80085f2:	46a2      	mov	sl, r4
 80085f4:	e7d2      	b.n	800859c <_svfiprintf_r+0x9c>
 80085f6:	9b03      	ldr	r3, [sp, #12]
 80085f8:	1d19      	adds	r1, r3, #4
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	9103      	str	r1, [sp, #12]
 80085fe:	2b00      	cmp	r3, #0
 8008600:	bfbb      	ittet	lt
 8008602:	425b      	neglt	r3, r3
 8008604:	f042 0202 	orrlt.w	r2, r2, #2
 8008608:	9307      	strge	r3, [sp, #28]
 800860a:	9307      	strlt	r3, [sp, #28]
 800860c:	bfb8      	it	lt
 800860e:	9204      	strlt	r2, [sp, #16]
 8008610:	7823      	ldrb	r3, [r4, #0]
 8008612:	2b2e      	cmp	r3, #46	; 0x2e
 8008614:	d10c      	bne.n	8008630 <_svfiprintf_r+0x130>
 8008616:	7863      	ldrb	r3, [r4, #1]
 8008618:	2b2a      	cmp	r3, #42	; 0x2a
 800861a:	d134      	bne.n	8008686 <_svfiprintf_r+0x186>
 800861c:	9b03      	ldr	r3, [sp, #12]
 800861e:	1d1a      	adds	r2, r3, #4
 8008620:	681b      	ldr	r3, [r3, #0]
 8008622:	9203      	str	r2, [sp, #12]
 8008624:	2b00      	cmp	r3, #0
 8008626:	bfb8      	it	lt
 8008628:	f04f 33ff 	movlt.w	r3, #4294967295
 800862c:	3402      	adds	r4, #2
 800862e:	9305      	str	r3, [sp, #20]
 8008630:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80086f8 <_svfiprintf_r+0x1f8>
 8008634:	7821      	ldrb	r1, [r4, #0]
 8008636:	2203      	movs	r2, #3
 8008638:	4650      	mov	r0, sl
 800863a:	f7f7 fe09 	bl	8000250 <memchr>
 800863e:	b138      	cbz	r0, 8008650 <_svfiprintf_r+0x150>
 8008640:	9b04      	ldr	r3, [sp, #16]
 8008642:	eba0 000a 	sub.w	r0, r0, sl
 8008646:	2240      	movs	r2, #64	; 0x40
 8008648:	4082      	lsls	r2, r0
 800864a:	4313      	orrs	r3, r2
 800864c:	3401      	adds	r4, #1
 800864e:	9304      	str	r3, [sp, #16]
 8008650:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008654:	4825      	ldr	r0, [pc, #148]	; (80086ec <_svfiprintf_r+0x1ec>)
 8008656:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800865a:	2206      	movs	r2, #6
 800865c:	f7f7 fdf8 	bl	8000250 <memchr>
 8008660:	2800      	cmp	r0, #0
 8008662:	d038      	beq.n	80086d6 <_svfiprintf_r+0x1d6>
 8008664:	4b22      	ldr	r3, [pc, #136]	; (80086f0 <_svfiprintf_r+0x1f0>)
 8008666:	bb1b      	cbnz	r3, 80086b0 <_svfiprintf_r+0x1b0>
 8008668:	9b03      	ldr	r3, [sp, #12]
 800866a:	3307      	adds	r3, #7
 800866c:	f023 0307 	bic.w	r3, r3, #7
 8008670:	3308      	adds	r3, #8
 8008672:	9303      	str	r3, [sp, #12]
 8008674:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008676:	4433      	add	r3, r6
 8008678:	9309      	str	r3, [sp, #36]	; 0x24
 800867a:	e768      	b.n	800854e <_svfiprintf_r+0x4e>
 800867c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008680:	460c      	mov	r4, r1
 8008682:	2001      	movs	r0, #1
 8008684:	e7a6      	b.n	80085d4 <_svfiprintf_r+0xd4>
 8008686:	2300      	movs	r3, #0
 8008688:	3401      	adds	r4, #1
 800868a:	9305      	str	r3, [sp, #20]
 800868c:	4619      	mov	r1, r3
 800868e:	f04f 0c0a 	mov.w	ip, #10
 8008692:	4620      	mov	r0, r4
 8008694:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008698:	3a30      	subs	r2, #48	; 0x30
 800869a:	2a09      	cmp	r2, #9
 800869c:	d903      	bls.n	80086a6 <_svfiprintf_r+0x1a6>
 800869e:	2b00      	cmp	r3, #0
 80086a0:	d0c6      	beq.n	8008630 <_svfiprintf_r+0x130>
 80086a2:	9105      	str	r1, [sp, #20]
 80086a4:	e7c4      	b.n	8008630 <_svfiprintf_r+0x130>
 80086a6:	fb0c 2101 	mla	r1, ip, r1, r2
 80086aa:	4604      	mov	r4, r0
 80086ac:	2301      	movs	r3, #1
 80086ae:	e7f0      	b.n	8008692 <_svfiprintf_r+0x192>
 80086b0:	ab03      	add	r3, sp, #12
 80086b2:	9300      	str	r3, [sp, #0]
 80086b4:	462a      	mov	r2, r5
 80086b6:	4b0f      	ldr	r3, [pc, #60]	; (80086f4 <_svfiprintf_r+0x1f4>)
 80086b8:	a904      	add	r1, sp, #16
 80086ba:	4638      	mov	r0, r7
 80086bc:	f3af 8000 	nop.w
 80086c0:	1c42      	adds	r2, r0, #1
 80086c2:	4606      	mov	r6, r0
 80086c4:	d1d6      	bne.n	8008674 <_svfiprintf_r+0x174>
 80086c6:	89ab      	ldrh	r3, [r5, #12]
 80086c8:	065b      	lsls	r3, r3, #25
 80086ca:	f53f af2d 	bmi.w	8008528 <_svfiprintf_r+0x28>
 80086ce:	9809      	ldr	r0, [sp, #36]	; 0x24
 80086d0:	b01d      	add	sp, #116	; 0x74
 80086d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80086d6:	ab03      	add	r3, sp, #12
 80086d8:	9300      	str	r3, [sp, #0]
 80086da:	462a      	mov	r2, r5
 80086dc:	4b05      	ldr	r3, [pc, #20]	; (80086f4 <_svfiprintf_r+0x1f4>)
 80086de:	a904      	add	r1, sp, #16
 80086e0:	4638      	mov	r0, r7
 80086e2:	f000 f879 	bl	80087d8 <_printf_i>
 80086e6:	e7eb      	b.n	80086c0 <_svfiprintf_r+0x1c0>
 80086e8:	08009426 	.word	0x08009426
 80086ec:	08009430 	.word	0x08009430
 80086f0:	00000000 	.word	0x00000000
 80086f4:	0800844d 	.word	0x0800844d
 80086f8:	0800942c 	.word	0x0800942c

080086fc <_printf_common>:
 80086fc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008700:	4616      	mov	r6, r2
 8008702:	4699      	mov	r9, r3
 8008704:	688a      	ldr	r2, [r1, #8]
 8008706:	690b      	ldr	r3, [r1, #16]
 8008708:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800870c:	4293      	cmp	r3, r2
 800870e:	bfb8      	it	lt
 8008710:	4613      	movlt	r3, r2
 8008712:	6033      	str	r3, [r6, #0]
 8008714:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008718:	4607      	mov	r7, r0
 800871a:	460c      	mov	r4, r1
 800871c:	b10a      	cbz	r2, 8008722 <_printf_common+0x26>
 800871e:	3301      	adds	r3, #1
 8008720:	6033      	str	r3, [r6, #0]
 8008722:	6823      	ldr	r3, [r4, #0]
 8008724:	0699      	lsls	r1, r3, #26
 8008726:	bf42      	ittt	mi
 8008728:	6833      	ldrmi	r3, [r6, #0]
 800872a:	3302      	addmi	r3, #2
 800872c:	6033      	strmi	r3, [r6, #0]
 800872e:	6825      	ldr	r5, [r4, #0]
 8008730:	f015 0506 	ands.w	r5, r5, #6
 8008734:	d106      	bne.n	8008744 <_printf_common+0x48>
 8008736:	f104 0a19 	add.w	sl, r4, #25
 800873a:	68e3      	ldr	r3, [r4, #12]
 800873c:	6832      	ldr	r2, [r6, #0]
 800873e:	1a9b      	subs	r3, r3, r2
 8008740:	42ab      	cmp	r3, r5
 8008742:	dc26      	bgt.n	8008792 <_printf_common+0x96>
 8008744:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008748:	1e13      	subs	r3, r2, #0
 800874a:	6822      	ldr	r2, [r4, #0]
 800874c:	bf18      	it	ne
 800874e:	2301      	movne	r3, #1
 8008750:	0692      	lsls	r2, r2, #26
 8008752:	d42b      	bmi.n	80087ac <_printf_common+0xb0>
 8008754:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008758:	4649      	mov	r1, r9
 800875a:	4638      	mov	r0, r7
 800875c:	47c0      	blx	r8
 800875e:	3001      	adds	r0, #1
 8008760:	d01e      	beq.n	80087a0 <_printf_common+0xa4>
 8008762:	6823      	ldr	r3, [r4, #0]
 8008764:	6922      	ldr	r2, [r4, #16]
 8008766:	f003 0306 	and.w	r3, r3, #6
 800876a:	2b04      	cmp	r3, #4
 800876c:	bf02      	ittt	eq
 800876e:	68e5      	ldreq	r5, [r4, #12]
 8008770:	6833      	ldreq	r3, [r6, #0]
 8008772:	1aed      	subeq	r5, r5, r3
 8008774:	68a3      	ldr	r3, [r4, #8]
 8008776:	bf0c      	ite	eq
 8008778:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800877c:	2500      	movne	r5, #0
 800877e:	4293      	cmp	r3, r2
 8008780:	bfc4      	itt	gt
 8008782:	1a9b      	subgt	r3, r3, r2
 8008784:	18ed      	addgt	r5, r5, r3
 8008786:	2600      	movs	r6, #0
 8008788:	341a      	adds	r4, #26
 800878a:	42b5      	cmp	r5, r6
 800878c:	d11a      	bne.n	80087c4 <_printf_common+0xc8>
 800878e:	2000      	movs	r0, #0
 8008790:	e008      	b.n	80087a4 <_printf_common+0xa8>
 8008792:	2301      	movs	r3, #1
 8008794:	4652      	mov	r2, sl
 8008796:	4649      	mov	r1, r9
 8008798:	4638      	mov	r0, r7
 800879a:	47c0      	blx	r8
 800879c:	3001      	adds	r0, #1
 800879e:	d103      	bne.n	80087a8 <_printf_common+0xac>
 80087a0:	f04f 30ff 	mov.w	r0, #4294967295
 80087a4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80087a8:	3501      	adds	r5, #1
 80087aa:	e7c6      	b.n	800873a <_printf_common+0x3e>
 80087ac:	18e1      	adds	r1, r4, r3
 80087ae:	1c5a      	adds	r2, r3, #1
 80087b0:	2030      	movs	r0, #48	; 0x30
 80087b2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80087b6:	4422      	add	r2, r4
 80087b8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80087bc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80087c0:	3302      	adds	r3, #2
 80087c2:	e7c7      	b.n	8008754 <_printf_common+0x58>
 80087c4:	2301      	movs	r3, #1
 80087c6:	4622      	mov	r2, r4
 80087c8:	4649      	mov	r1, r9
 80087ca:	4638      	mov	r0, r7
 80087cc:	47c0      	blx	r8
 80087ce:	3001      	adds	r0, #1
 80087d0:	d0e6      	beq.n	80087a0 <_printf_common+0xa4>
 80087d2:	3601      	adds	r6, #1
 80087d4:	e7d9      	b.n	800878a <_printf_common+0x8e>
	...

080087d8 <_printf_i>:
 80087d8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80087dc:	7e0f      	ldrb	r7, [r1, #24]
 80087de:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80087e0:	2f78      	cmp	r7, #120	; 0x78
 80087e2:	4691      	mov	r9, r2
 80087e4:	4680      	mov	r8, r0
 80087e6:	460c      	mov	r4, r1
 80087e8:	469a      	mov	sl, r3
 80087ea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80087ee:	d807      	bhi.n	8008800 <_printf_i+0x28>
 80087f0:	2f62      	cmp	r7, #98	; 0x62
 80087f2:	d80a      	bhi.n	800880a <_printf_i+0x32>
 80087f4:	2f00      	cmp	r7, #0
 80087f6:	f000 80d4 	beq.w	80089a2 <_printf_i+0x1ca>
 80087fa:	2f58      	cmp	r7, #88	; 0x58
 80087fc:	f000 80c0 	beq.w	8008980 <_printf_i+0x1a8>
 8008800:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008804:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008808:	e03a      	b.n	8008880 <_printf_i+0xa8>
 800880a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800880e:	2b15      	cmp	r3, #21
 8008810:	d8f6      	bhi.n	8008800 <_printf_i+0x28>
 8008812:	a101      	add	r1, pc, #4	; (adr r1, 8008818 <_printf_i+0x40>)
 8008814:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008818:	08008871 	.word	0x08008871
 800881c:	08008885 	.word	0x08008885
 8008820:	08008801 	.word	0x08008801
 8008824:	08008801 	.word	0x08008801
 8008828:	08008801 	.word	0x08008801
 800882c:	08008801 	.word	0x08008801
 8008830:	08008885 	.word	0x08008885
 8008834:	08008801 	.word	0x08008801
 8008838:	08008801 	.word	0x08008801
 800883c:	08008801 	.word	0x08008801
 8008840:	08008801 	.word	0x08008801
 8008844:	08008989 	.word	0x08008989
 8008848:	080088b1 	.word	0x080088b1
 800884c:	08008943 	.word	0x08008943
 8008850:	08008801 	.word	0x08008801
 8008854:	08008801 	.word	0x08008801
 8008858:	080089ab 	.word	0x080089ab
 800885c:	08008801 	.word	0x08008801
 8008860:	080088b1 	.word	0x080088b1
 8008864:	08008801 	.word	0x08008801
 8008868:	08008801 	.word	0x08008801
 800886c:	0800894b 	.word	0x0800894b
 8008870:	682b      	ldr	r3, [r5, #0]
 8008872:	1d1a      	adds	r2, r3, #4
 8008874:	681b      	ldr	r3, [r3, #0]
 8008876:	602a      	str	r2, [r5, #0]
 8008878:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800887c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008880:	2301      	movs	r3, #1
 8008882:	e09f      	b.n	80089c4 <_printf_i+0x1ec>
 8008884:	6820      	ldr	r0, [r4, #0]
 8008886:	682b      	ldr	r3, [r5, #0]
 8008888:	0607      	lsls	r7, r0, #24
 800888a:	f103 0104 	add.w	r1, r3, #4
 800888e:	6029      	str	r1, [r5, #0]
 8008890:	d501      	bpl.n	8008896 <_printf_i+0xbe>
 8008892:	681e      	ldr	r6, [r3, #0]
 8008894:	e003      	b.n	800889e <_printf_i+0xc6>
 8008896:	0646      	lsls	r6, r0, #25
 8008898:	d5fb      	bpl.n	8008892 <_printf_i+0xba>
 800889a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800889e:	2e00      	cmp	r6, #0
 80088a0:	da03      	bge.n	80088aa <_printf_i+0xd2>
 80088a2:	232d      	movs	r3, #45	; 0x2d
 80088a4:	4276      	negs	r6, r6
 80088a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80088aa:	485a      	ldr	r0, [pc, #360]	; (8008a14 <_printf_i+0x23c>)
 80088ac:	230a      	movs	r3, #10
 80088ae:	e012      	b.n	80088d6 <_printf_i+0xfe>
 80088b0:	682b      	ldr	r3, [r5, #0]
 80088b2:	6820      	ldr	r0, [r4, #0]
 80088b4:	1d19      	adds	r1, r3, #4
 80088b6:	6029      	str	r1, [r5, #0]
 80088b8:	0605      	lsls	r5, r0, #24
 80088ba:	d501      	bpl.n	80088c0 <_printf_i+0xe8>
 80088bc:	681e      	ldr	r6, [r3, #0]
 80088be:	e002      	b.n	80088c6 <_printf_i+0xee>
 80088c0:	0641      	lsls	r1, r0, #25
 80088c2:	d5fb      	bpl.n	80088bc <_printf_i+0xe4>
 80088c4:	881e      	ldrh	r6, [r3, #0]
 80088c6:	4853      	ldr	r0, [pc, #332]	; (8008a14 <_printf_i+0x23c>)
 80088c8:	2f6f      	cmp	r7, #111	; 0x6f
 80088ca:	bf0c      	ite	eq
 80088cc:	2308      	moveq	r3, #8
 80088ce:	230a      	movne	r3, #10
 80088d0:	2100      	movs	r1, #0
 80088d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80088d6:	6865      	ldr	r5, [r4, #4]
 80088d8:	60a5      	str	r5, [r4, #8]
 80088da:	2d00      	cmp	r5, #0
 80088dc:	bfa2      	ittt	ge
 80088de:	6821      	ldrge	r1, [r4, #0]
 80088e0:	f021 0104 	bicge.w	r1, r1, #4
 80088e4:	6021      	strge	r1, [r4, #0]
 80088e6:	b90e      	cbnz	r6, 80088ec <_printf_i+0x114>
 80088e8:	2d00      	cmp	r5, #0
 80088ea:	d04b      	beq.n	8008984 <_printf_i+0x1ac>
 80088ec:	4615      	mov	r5, r2
 80088ee:	fbb6 f1f3 	udiv	r1, r6, r3
 80088f2:	fb03 6711 	mls	r7, r3, r1, r6
 80088f6:	5dc7      	ldrb	r7, [r0, r7]
 80088f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80088fc:	4637      	mov	r7, r6
 80088fe:	42bb      	cmp	r3, r7
 8008900:	460e      	mov	r6, r1
 8008902:	d9f4      	bls.n	80088ee <_printf_i+0x116>
 8008904:	2b08      	cmp	r3, #8
 8008906:	d10b      	bne.n	8008920 <_printf_i+0x148>
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	07de      	lsls	r6, r3, #31
 800890c:	d508      	bpl.n	8008920 <_printf_i+0x148>
 800890e:	6923      	ldr	r3, [r4, #16]
 8008910:	6861      	ldr	r1, [r4, #4]
 8008912:	4299      	cmp	r1, r3
 8008914:	bfde      	ittt	le
 8008916:	2330      	movle	r3, #48	; 0x30
 8008918:	f805 3c01 	strble.w	r3, [r5, #-1]
 800891c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008920:	1b52      	subs	r2, r2, r5
 8008922:	6122      	str	r2, [r4, #16]
 8008924:	f8cd a000 	str.w	sl, [sp]
 8008928:	464b      	mov	r3, r9
 800892a:	aa03      	add	r2, sp, #12
 800892c:	4621      	mov	r1, r4
 800892e:	4640      	mov	r0, r8
 8008930:	f7ff fee4 	bl	80086fc <_printf_common>
 8008934:	3001      	adds	r0, #1
 8008936:	d14a      	bne.n	80089ce <_printf_i+0x1f6>
 8008938:	f04f 30ff 	mov.w	r0, #4294967295
 800893c:	b004      	add	sp, #16
 800893e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008942:	6823      	ldr	r3, [r4, #0]
 8008944:	f043 0320 	orr.w	r3, r3, #32
 8008948:	6023      	str	r3, [r4, #0]
 800894a:	4833      	ldr	r0, [pc, #204]	; (8008a18 <_printf_i+0x240>)
 800894c:	2778      	movs	r7, #120	; 0x78
 800894e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008952:	6823      	ldr	r3, [r4, #0]
 8008954:	6829      	ldr	r1, [r5, #0]
 8008956:	061f      	lsls	r7, r3, #24
 8008958:	f851 6b04 	ldr.w	r6, [r1], #4
 800895c:	d402      	bmi.n	8008964 <_printf_i+0x18c>
 800895e:	065f      	lsls	r7, r3, #25
 8008960:	bf48      	it	mi
 8008962:	b2b6      	uxthmi	r6, r6
 8008964:	07df      	lsls	r7, r3, #31
 8008966:	bf48      	it	mi
 8008968:	f043 0320 	orrmi.w	r3, r3, #32
 800896c:	6029      	str	r1, [r5, #0]
 800896e:	bf48      	it	mi
 8008970:	6023      	strmi	r3, [r4, #0]
 8008972:	b91e      	cbnz	r6, 800897c <_printf_i+0x1a4>
 8008974:	6823      	ldr	r3, [r4, #0]
 8008976:	f023 0320 	bic.w	r3, r3, #32
 800897a:	6023      	str	r3, [r4, #0]
 800897c:	2310      	movs	r3, #16
 800897e:	e7a7      	b.n	80088d0 <_printf_i+0xf8>
 8008980:	4824      	ldr	r0, [pc, #144]	; (8008a14 <_printf_i+0x23c>)
 8008982:	e7e4      	b.n	800894e <_printf_i+0x176>
 8008984:	4615      	mov	r5, r2
 8008986:	e7bd      	b.n	8008904 <_printf_i+0x12c>
 8008988:	682b      	ldr	r3, [r5, #0]
 800898a:	6826      	ldr	r6, [r4, #0]
 800898c:	6961      	ldr	r1, [r4, #20]
 800898e:	1d18      	adds	r0, r3, #4
 8008990:	6028      	str	r0, [r5, #0]
 8008992:	0635      	lsls	r5, r6, #24
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	d501      	bpl.n	800899c <_printf_i+0x1c4>
 8008998:	6019      	str	r1, [r3, #0]
 800899a:	e002      	b.n	80089a2 <_printf_i+0x1ca>
 800899c:	0670      	lsls	r0, r6, #25
 800899e:	d5fb      	bpl.n	8008998 <_printf_i+0x1c0>
 80089a0:	8019      	strh	r1, [r3, #0]
 80089a2:	2300      	movs	r3, #0
 80089a4:	6123      	str	r3, [r4, #16]
 80089a6:	4615      	mov	r5, r2
 80089a8:	e7bc      	b.n	8008924 <_printf_i+0x14c>
 80089aa:	682b      	ldr	r3, [r5, #0]
 80089ac:	1d1a      	adds	r2, r3, #4
 80089ae:	602a      	str	r2, [r5, #0]
 80089b0:	681d      	ldr	r5, [r3, #0]
 80089b2:	6862      	ldr	r2, [r4, #4]
 80089b4:	2100      	movs	r1, #0
 80089b6:	4628      	mov	r0, r5
 80089b8:	f7f7 fc4a 	bl	8000250 <memchr>
 80089bc:	b108      	cbz	r0, 80089c2 <_printf_i+0x1ea>
 80089be:	1b40      	subs	r0, r0, r5
 80089c0:	6060      	str	r0, [r4, #4]
 80089c2:	6863      	ldr	r3, [r4, #4]
 80089c4:	6123      	str	r3, [r4, #16]
 80089c6:	2300      	movs	r3, #0
 80089c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80089cc:	e7aa      	b.n	8008924 <_printf_i+0x14c>
 80089ce:	6923      	ldr	r3, [r4, #16]
 80089d0:	462a      	mov	r2, r5
 80089d2:	4649      	mov	r1, r9
 80089d4:	4640      	mov	r0, r8
 80089d6:	47d0      	blx	sl
 80089d8:	3001      	adds	r0, #1
 80089da:	d0ad      	beq.n	8008938 <_printf_i+0x160>
 80089dc:	6823      	ldr	r3, [r4, #0]
 80089de:	079b      	lsls	r3, r3, #30
 80089e0:	d413      	bmi.n	8008a0a <_printf_i+0x232>
 80089e2:	68e0      	ldr	r0, [r4, #12]
 80089e4:	9b03      	ldr	r3, [sp, #12]
 80089e6:	4298      	cmp	r0, r3
 80089e8:	bfb8      	it	lt
 80089ea:	4618      	movlt	r0, r3
 80089ec:	e7a6      	b.n	800893c <_printf_i+0x164>
 80089ee:	2301      	movs	r3, #1
 80089f0:	4632      	mov	r2, r6
 80089f2:	4649      	mov	r1, r9
 80089f4:	4640      	mov	r0, r8
 80089f6:	47d0      	blx	sl
 80089f8:	3001      	adds	r0, #1
 80089fa:	d09d      	beq.n	8008938 <_printf_i+0x160>
 80089fc:	3501      	adds	r5, #1
 80089fe:	68e3      	ldr	r3, [r4, #12]
 8008a00:	9903      	ldr	r1, [sp, #12]
 8008a02:	1a5b      	subs	r3, r3, r1
 8008a04:	42ab      	cmp	r3, r5
 8008a06:	dcf2      	bgt.n	80089ee <_printf_i+0x216>
 8008a08:	e7eb      	b.n	80089e2 <_printf_i+0x20a>
 8008a0a:	2500      	movs	r5, #0
 8008a0c:	f104 0619 	add.w	r6, r4, #25
 8008a10:	e7f5      	b.n	80089fe <_printf_i+0x226>
 8008a12:	bf00      	nop
 8008a14:	08009437 	.word	0x08009437
 8008a18:	08009448 	.word	0x08009448

08008a1c <__sflush_r>:
 8008a1c:	898a      	ldrh	r2, [r1, #12]
 8008a1e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008a22:	4605      	mov	r5, r0
 8008a24:	0710      	lsls	r0, r2, #28
 8008a26:	460c      	mov	r4, r1
 8008a28:	d458      	bmi.n	8008adc <__sflush_r+0xc0>
 8008a2a:	684b      	ldr	r3, [r1, #4]
 8008a2c:	2b00      	cmp	r3, #0
 8008a2e:	dc05      	bgt.n	8008a3c <__sflush_r+0x20>
 8008a30:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	dc02      	bgt.n	8008a3c <__sflush_r+0x20>
 8008a36:	2000      	movs	r0, #0
 8008a38:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008a3c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a3e:	2e00      	cmp	r6, #0
 8008a40:	d0f9      	beq.n	8008a36 <__sflush_r+0x1a>
 8008a42:	2300      	movs	r3, #0
 8008a44:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8008a48:	682f      	ldr	r7, [r5, #0]
 8008a4a:	6a21      	ldr	r1, [r4, #32]
 8008a4c:	602b      	str	r3, [r5, #0]
 8008a4e:	d032      	beq.n	8008ab6 <__sflush_r+0x9a>
 8008a50:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8008a52:	89a3      	ldrh	r3, [r4, #12]
 8008a54:	075a      	lsls	r2, r3, #29
 8008a56:	d505      	bpl.n	8008a64 <__sflush_r+0x48>
 8008a58:	6863      	ldr	r3, [r4, #4]
 8008a5a:	1ac0      	subs	r0, r0, r3
 8008a5c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8008a5e:	b10b      	cbz	r3, 8008a64 <__sflush_r+0x48>
 8008a60:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8008a62:	1ac0      	subs	r0, r0, r3
 8008a64:	2300      	movs	r3, #0
 8008a66:	4602      	mov	r2, r0
 8008a68:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8008a6a:	6a21      	ldr	r1, [r4, #32]
 8008a6c:	4628      	mov	r0, r5
 8008a6e:	47b0      	blx	r6
 8008a70:	1c43      	adds	r3, r0, #1
 8008a72:	89a3      	ldrh	r3, [r4, #12]
 8008a74:	d106      	bne.n	8008a84 <__sflush_r+0x68>
 8008a76:	6829      	ldr	r1, [r5, #0]
 8008a78:	291d      	cmp	r1, #29
 8008a7a:	d82b      	bhi.n	8008ad4 <__sflush_r+0xb8>
 8008a7c:	4a29      	ldr	r2, [pc, #164]	; (8008b24 <__sflush_r+0x108>)
 8008a7e:	410a      	asrs	r2, r1
 8008a80:	07d6      	lsls	r6, r2, #31
 8008a82:	d427      	bmi.n	8008ad4 <__sflush_r+0xb8>
 8008a84:	2200      	movs	r2, #0
 8008a86:	6062      	str	r2, [r4, #4]
 8008a88:	04d9      	lsls	r1, r3, #19
 8008a8a:	6922      	ldr	r2, [r4, #16]
 8008a8c:	6022      	str	r2, [r4, #0]
 8008a8e:	d504      	bpl.n	8008a9a <__sflush_r+0x7e>
 8008a90:	1c42      	adds	r2, r0, #1
 8008a92:	d101      	bne.n	8008a98 <__sflush_r+0x7c>
 8008a94:	682b      	ldr	r3, [r5, #0]
 8008a96:	b903      	cbnz	r3, 8008a9a <__sflush_r+0x7e>
 8008a98:	6560      	str	r0, [r4, #84]	; 0x54
 8008a9a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008a9c:	602f      	str	r7, [r5, #0]
 8008a9e:	2900      	cmp	r1, #0
 8008aa0:	d0c9      	beq.n	8008a36 <__sflush_r+0x1a>
 8008aa2:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008aa6:	4299      	cmp	r1, r3
 8008aa8:	d002      	beq.n	8008ab0 <__sflush_r+0x94>
 8008aaa:	4628      	mov	r0, r5
 8008aac:	f7ff fbce 	bl	800824c <_free_r>
 8008ab0:	2000      	movs	r0, #0
 8008ab2:	6360      	str	r0, [r4, #52]	; 0x34
 8008ab4:	e7c0      	b.n	8008a38 <__sflush_r+0x1c>
 8008ab6:	2301      	movs	r3, #1
 8008ab8:	4628      	mov	r0, r5
 8008aba:	47b0      	blx	r6
 8008abc:	1c41      	adds	r1, r0, #1
 8008abe:	d1c8      	bne.n	8008a52 <__sflush_r+0x36>
 8008ac0:	682b      	ldr	r3, [r5, #0]
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d0c5      	beq.n	8008a52 <__sflush_r+0x36>
 8008ac6:	2b1d      	cmp	r3, #29
 8008ac8:	d001      	beq.n	8008ace <__sflush_r+0xb2>
 8008aca:	2b16      	cmp	r3, #22
 8008acc:	d101      	bne.n	8008ad2 <__sflush_r+0xb6>
 8008ace:	602f      	str	r7, [r5, #0]
 8008ad0:	e7b1      	b.n	8008a36 <__sflush_r+0x1a>
 8008ad2:	89a3      	ldrh	r3, [r4, #12]
 8008ad4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008ad8:	81a3      	strh	r3, [r4, #12]
 8008ada:	e7ad      	b.n	8008a38 <__sflush_r+0x1c>
 8008adc:	690f      	ldr	r7, [r1, #16]
 8008ade:	2f00      	cmp	r7, #0
 8008ae0:	d0a9      	beq.n	8008a36 <__sflush_r+0x1a>
 8008ae2:	0793      	lsls	r3, r2, #30
 8008ae4:	680e      	ldr	r6, [r1, #0]
 8008ae6:	bf08      	it	eq
 8008ae8:	694b      	ldreq	r3, [r1, #20]
 8008aea:	600f      	str	r7, [r1, #0]
 8008aec:	bf18      	it	ne
 8008aee:	2300      	movne	r3, #0
 8008af0:	eba6 0807 	sub.w	r8, r6, r7
 8008af4:	608b      	str	r3, [r1, #8]
 8008af6:	f1b8 0f00 	cmp.w	r8, #0
 8008afa:	dd9c      	ble.n	8008a36 <__sflush_r+0x1a>
 8008afc:	6a21      	ldr	r1, [r4, #32]
 8008afe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8008b00:	4643      	mov	r3, r8
 8008b02:	463a      	mov	r2, r7
 8008b04:	4628      	mov	r0, r5
 8008b06:	47b0      	blx	r6
 8008b08:	2800      	cmp	r0, #0
 8008b0a:	dc06      	bgt.n	8008b1a <__sflush_r+0xfe>
 8008b0c:	89a3      	ldrh	r3, [r4, #12]
 8008b0e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b12:	81a3      	strh	r3, [r4, #12]
 8008b14:	f04f 30ff 	mov.w	r0, #4294967295
 8008b18:	e78e      	b.n	8008a38 <__sflush_r+0x1c>
 8008b1a:	4407      	add	r7, r0
 8008b1c:	eba8 0800 	sub.w	r8, r8, r0
 8008b20:	e7e9      	b.n	8008af6 <__sflush_r+0xda>
 8008b22:	bf00      	nop
 8008b24:	dfbffffe 	.word	0xdfbffffe

08008b28 <_fflush_r>:
 8008b28:	b538      	push	{r3, r4, r5, lr}
 8008b2a:	690b      	ldr	r3, [r1, #16]
 8008b2c:	4605      	mov	r5, r0
 8008b2e:	460c      	mov	r4, r1
 8008b30:	b913      	cbnz	r3, 8008b38 <_fflush_r+0x10>
 8008b32:	2500      	movs	r5, #0
 8008b34:	4628      	mov	r0, r5
 8008b36:	bd38      	pop	{r3, r4, r5, pc}
 8008b38:	b118      	cbz	r0, 8008b42 <_fflush_r+0x1a>
 8008b3a:	6a03      	ldr	r3, [r0, #32]
 8008b3c:	b90b      	cbnz	r3, 8008b42 <_fflush_r+0x1a>
 8008b3e:	f7ff f9e3 	bl	8007f08 <__sinit>
 8008b42:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d0f3      	beq.n	8008b32 <_fflush_r+0xa>
 8008b4a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8008b4c:	07d0      	lsls	r0, r2, #31
 8008b4e:	d404      	bmi.n	8008b5a <_fflush_r+0x32>
 8008b50:	0599      	lsls	r1, r3, #22
 8008b52:	d402      	bmi.n	8008b5a <_fflush_r+0x32>
 8008b54:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b56:	f7ff fb59 	bl	800820c <__retarget_lock_acquire_recursive>
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	4621      	mov	r1, r4
 8008b5e:	f7ff ff5d 	bl	8008a1c <__sflush_r>
 8008b62:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8008b64:	07da      	lsls	r2, r3, #31
 8008b66:	4605      	mov	r5, r0
 8008b68:	d4e4      	bmi.n	8008b34 <_fflush_r+0xc>
 8008b6a:	89a3      	ldrh	r3, [r4, #12]
 8008b6c:	059b      	lsls	r3, r3, #22
 8008b6e:	d4e1      	bmi.n	8008b34 <_fflush_r+0xc>
 8008b70:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8008b72:	f7ff fb4c 	bl	800820e <__retarget_lock_release_recursive>
 8008b76:	e7dd      	b.n	8008b34 <_fflush_r+0xc>

08008b78 <fiprintf>:
 8008b78:	b40e      	push	{r1, r2, r3}
 8008b7a:	b503      	push	{r0, r1, lr}
 8008b7c:	4601      	mov	r1, r0
 8008b7e:	ab03      	add	r3, sp, #12
 8008b80:	4805      	ldr	r0, [pc, #20]	; (8008b98 <fiprintf+0x20>)
 8008b82:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b86:	6800      	ldr	r0, [r0, #0]
 8008b88:	9301      	str	r3, [sp, #4]
 8008b8a:	f000 f89f 	bl	8008ccc <_vfiprintf_r>
 8008b8e:	b002      	add	sp, #8
 8008b90:	f85d eb04 	ldr.w	lr, [sp], #4
 8008b94:	b003      	add	sp, #12
 8008b96:	4770      	bx	lr
 8008b98:	20000120 	.word	0x20000120

08008b9c <memmove>:
 8008b9c:	4288      	cmp	r0, r1
 8008b9e:	b510      	push	{r4, lr}
 8008ba0:	eb01 0402 	add.w	r4, r1, r2
 8008ba4:	d902      	bls.n	8008bac <memmove+0x10>
 8008ba6:	4284      	cmp	r4, r0
 8008ba8:	4623      	mov	r3, r4
 8008baa:	d807      	bhi.n	8008bbc <memmove+0x20>
 8008bac:	1e43      	subs	r3, r0, #1
 8008bae:	42a1      	cmp	r1, r4
 8008bb0:	d008      	beq.n	8008bc4 <memmove+0x28>
 8008bb2:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008bb6:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008bba:	e7f8      	b.n	8008bae <memmove+0x12>
 8008bbc:	4402      	add	r2, r0
 8008bbe:	4601      	mov	r1, r0
 8008bc0:	428a      	cmp	r2, r1
 8008bc2:	d100      	bne.n	8008bc6 <memmove+0x2a>
 8008bc4:	bd10      	pop	{r4, pc}
 8008bc6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008bca:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008bce:	e7f7      	b.n	8008bc0 <memmove+0x24>

08008bd0 <_sbrk_r>:
 8008bd0:	b538      	push	{r3, r4, r5, lr}
 8008bd2:	4d06      	ldr	r5, [pc, #24]	; (8008bec <_sbrk_r+0x1c>)
 8008bd4:	2300      	movs	r3, #0
 8008bd6:	4604      	mov	r4, r0
 8008bd8:	4608      	mov	r0, r1
 8008bda:	602b      	str	r3, [r5, #0]
 8008bdc:	f7f8 f9a2 	bl	8000f24 <_sbrk>
 8008be0:	1c43      	adds	r3, r0, #1
 8008be2:	d102      	bne.n	8008bea <_sbrk_r+0x1a>
 8008be4:	682b      	ldr	r3, [r5, #0]
 8008be6:	b103      	cbz	r3, 8008bea <_sbrk_r+0x1a>
 8008be8:	6023      	str	r3, [r4, #0]
 8008bea:	bd38      	pop	{r3, r4, r5, pc}
 8008bec:	20000620 	.word	0x20000620

08008bf0 <memcpy>:
 8008bf0:	440a      	add	r2, r1
 8008bf2:	4291      	cmp	r1, r2
 8008bf4:	f100 33ff 	add.w	r3, r0, #4294967295
 8008bf8:	d100      	bne.n	8008bfc <memcpy+0xc>
 8008bfa:	4770      	bx	lr
 8008bfc:	b510      	push	{r4, lr}
 8008bfe:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008c02:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008c06:	4291      	cmp	r1, r2
 8008c08:	d1f9      	bne.n	8008bfe <memcpy+0xe>
 8008c0a:	bd10      	pop	{r4, pc}

08008c0c <abort>:
 8008c0c:	b508      	push	{r3, lr}
 8008c0e:	2006      	movs	r0, #6
 8008c10:	f000 fa34 	bl	800907c <raise>
 8008c14:	2001      	movs	r0, #1
 8008c16:	f7f8 f90d 	bl	8000e34 <_exit>

08008c1a <_realloc_r>:
 8008c1a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008c1e:	4680      	mov	r8, r0
 8008c20:	4614      	mov	r4, r2
 8008c22:	460e      	mov	r6, r1
 8008c24:	b921      	cbnz	r1, 8008c30 <_realloc_r+0x16>
 8008c26:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008c2a:	4611      	mov	r1, r2
 8008c2c:	f7ff bb82 	b.w	8008334 <_malloc_r>
 8008c30:	b92a      	cbnz	r2, 8008c3e <_realloc_r+0x24>
 8008c32:	f7ff fb0b 	bl	800824c <_free_r>
 8008c36:	4625      	mov	r5, r4
 8008c38:	4628      	mov	r0, r5
 8008c3a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008c3e:	f000 fa39 	bl	80090b4 <_malloc_usable_size_r>
 8008c42:	4284      	cmp	r4, r0
 8008c44:	4607      	mov	r7, r0
 8008c46:	d802      	bhi.n	8008c4e <_realloc_r+0x34>
 8008c48:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008c4c:	d812      	bhi.n	8008c74 <_realloc_r+0x5a>
 8008c4e:	4621      	mov	r1, r4
 8008c50:	4640      	mov	r0, r8
 8008c52:	f7ff fb6f 	bl	8008334 <_malloc_r>
 8008c56:	4605      	mov	r5, r0
 8008c58:	2800      	cmp	r0, #0
 8008c5a:	d0ed      	beq.n	8008c38 <_realloc_r+0x1e>
 8008c5c:	42bc      	cmp	r4, r7
 8008c5e:	4622      	mov	r2, r4
 8008c60:	4631      	mov	r1, r6
 8008c62:	bf28      	it	cs
 8008c64:	463a      	movcs	r2, r7
 8008c66:	f7ff ffc3 	bl	8008bf0 <memcpy>
 8008c6a:	4631      	mov	r1, r6
 8008c6c:	4640      	mov	r0, r8
 8008c6e:	f7ff faed 	bl	800824c <_free_r>
 8008c72:	e7e1      	b.n	8008c38 <_realloc_r+0x1e>
 8008c74:	4635      	mov	r5, r6
 8008c76:	e7df      	b.n	8008c38 <_realloc_r+0x1e>

08008c78 <__sfputc_r>:
 8008c78:	6893      	ldr	r3, [r2, #8]
 8008c7a:	3b01      	subs	r3, #1
 8008c7c:	2b00      	cmp	r3, #0
 8008c7e:	b410      	push	{r4}
 8008c80:	6093      	str	r3, [r2, #8]
 8008c82:	da08      	bge.n	8008c96 <__sfputc_r+0x1e>
 8008c84:	6994      	ldr	r4, [r2, #24]
 8008c86:	42a3      	cmp	r3, r4
 8008c88:	db01      	blt.n	8008c8e <__sfputc_r+0x16>
 8008c8a:	290a      	cmp	r1, #10
 8008c8c:	d103      	bne.n	8008c96 <__sfputc_r+0x1e>
 8008c8e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c92:	f000 b935 	b.w	8008f00 <__swbuf_r>
 8008c96:	6813      	ldr	r3, [r2, #0]
 8008c98:	1c58      	adds	r0, r3, #1
 8008c9a:	6010      	str	r0, [r2, #0]
 8008c9c:	7019      	strb	r1, [r3, #0]
 8008c9e:	4608      	mov	r0, r1
 8008ca0:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ca4:	4770      	bx	lr

08008ca6 <__sfputs_r>:
 8008ca6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008ca8:	4606      	mov	r6, r0
 8008caa:	460f      	mov	r7, r1
 8008cac:	4614      	mov	r4, r2
 8008cae:	18d5      	adds	r5, r2, r3
 8008cb0:	42ac      	cmp	r4, r5
 8008cb2:	d101      	bne.n	8008cb8 <__sfputs_r+0x12>
 8008cb4:	2000      	movs	r0, #0
 8008cb6:	e007      	b.n	8008cc8 <__sfputs_r+0x22>
 8008cb8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cbc:	463a      	mov	r2, r7
 8008cbe:	4630      	mov	r0, r6
 8008cc0:	f7ff ffda 	bl	8008c78 <__sfputc_r>
 8008cc4:	1c43      	adds	r3, r0, #1
 8008cc6:	d1f3      	bne.n	8008cb0 <__sfputs_r+0xa>
 8008cc8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008ccc <_vfiprintf_r>:
 8008ccc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008cd0:	460d      	mov	r5, r1
 8008cd2:	b09d      	sub	sp, #116	; 0x74
 8008cd4:	4614      	mov	r4, r2
 8008cd6:	4698      	mov	r8, r3
 8008cd8:	4606      	mov	r6, r0
 8008cda:	b118      	cbz	r0, 8008ce4 <_vfiprintf_r+0x18>
 8008cdc:	6a03      	ldr	r3, [r0, #32]
 8008cde:	b90b      	cbnz	r3, 8008ce4 <_vfiprintf_r+0x18>
 8008ce0:	f7ff f912 	bl	8007f08 <__sinit>
 8008ce4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ce6:	07d9      	lsls	r1, r3, #31
 8008ce8:	d405      	bmi.n	8008cf6 <_vfiprintf_r+0x2a>
 8008cea:	89ab      	ldrh	r3, [r5, #12]
 8008cec:	059a      	lsls	r2, r3, #22
 8008cee:	d402      	bmi.n	8008cf6 <_vfiprintf_r+0x2a>
 8008cf0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008cf2:	f7ff fa8b 	bl	800820c <__retarget_lock_acquire_recursive>
 8008cf6:	89ab      	ldrh	r3, [r5, #12]
 8008cf8:	071b      	lsls	r3, r3, #28
 8008cfa:	d501      	bpl.n	8008d00 <_vfiprintf_r+0x34>
 8008cfc:	692b      	ldr	r3, [r5, #16]
 8008cfe:	b99b      	cbnz	r3, 8008d28 <_vfiprintf_r+0x5c>
 8008d00:	4629      	mov	r1, r5
 8008d02:	4630      	mov	r0, r6
 8008d04:	f000 f93a 	bl	8008f7c <__swsetup_r>
 8008d08:	b170      	cbz	r0, 8008d28 <_vfiprintf_r+0x5c>
 8008d0a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008d0c:	07dc      	lsls	r4, r3, #31
 8008d0e:	d504      	bpl.n	8008d1a <_vfiprintf_r+0x4e>
 8008d10:	f04f 30ff 	mov.w	r0, #4294967295
 8008d14:	b01d      	add	sp, #116	; 0x74
 8008d16:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008d1a:	89ab      	ldrh	r3, [r5, #12]
 8008d1c:	0598      	lsls	r0, r3, #22
 8008d1e:	d4f7      	bmi.n	8008d10 <_vfiprintf_r+0x44>
 8008d20:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008d22:	f7ff fa74 	bl	800820e <__retarget_lock_release_recursive>
 8008d26:	e7f3      	b.n	8008d10 <_vfiprintf_r+0x44>
 8008d28:	2300      	movs	r3, #0
 8008d2a:	9309      	str	r3, [sp, #36]	; 0x24
 8008d2c:	2320      	movs	r3, #32
 8008d2e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8008d32:	f8cd 800c 	str.w	r8, [sp, #12]
 8008d36:	2330      	movs	r3, #48	; 0x30
 8008d38:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8008eec <_vfiprintf_r+0x220>
 8008d3c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8008d40:	f04f 0901 	mov.w	r9, #1
 8008d44:	4623      	mov	r3, r4
 8008d46:	469a      	mov	sl, r3
 8008d48:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008d4c:	b10a      	cbz	r2, 8008d52 <_vfiprintf_r+0x86>
 8008d4e:	2a25      	cmp	r2, #37	; 0x25
 8008d50:	d1f9      	bne.n	8008d46 <_vfiprintf_r+0x7a>
 8008d52:	ebba 0b04 	subs.w	fp, sl, r4
 8008d56:	d00b      	beq.n	8008d70 <_vfiprintf_r+0xa4>
 8008d58:	465b      	mov	r3, fp
 8008d5a:	4622      	mov	r2, r4
 8008d5c:	4629      	mov	r1, r5
 8008d5e:	4630      	mov	r0, r6
 8008d60:	f7ff ffa1 	bl	8008ca6 <__sfputs_r>
 8008d64:	3001      	adds	r0, #1
 8008d66:	f000 80a9 	beq.w	8008ebc <_vfiprintf_r+0x1f0>
 8008d6a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008d6c:	445a      	add	r2, fp
 8008d6e:	9209      	str	r2, [sp, #36]	; 0x24
 8008d70:	f89a 3000 	ldrb.w	r3, [sl]
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	f000 80a1 	beq.w	8008ebc <_vfiprintf_r+0x1f0>
 8008d7a:	2300      	movs	r3, #0
 8008d7c:	f04f 32ff 	mov.w	r2, #4294967295
 8008d80:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d84:	f10a 0a01 	add.w	sl, sl, #1
 8008d88:	9304      	str	r3, [sp, #16]
 8008d8a:	9307      	str	r3, [sp, #28]
 8008d8c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8008d90:	931a      	str	r3, [sp, #104]	; 0x68
 8008d92:	4654      	mov	r4, sl
 8008d94:	2205      	movs	r2, #5
 8008d96:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d9a:	4854      	ldr	r0, [pc, #336]	; (8008eec <_vfiprintf_r+0x220>)
 8008d9c:	f7f7 fa58 	bl	8000250 <memchr>
 8008da0:	9a04      	ldr	r2, [sp, #16]
 8008da2:	b9d8      	cbnz	r0, 8008ddc <_vfiprintf_r+0x110>
 8008da4:	06d1      	lsls	r1, r2, #27
 8008da6:	bf44      	itt	mi
 8008da8:	2320      	movmi	r3, #32
 8008daa:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008dae:	0713      	lsls	r3, r2, #28
 8008db0:	bf44      	itt	mi
 8008db2:	232b      	movmi	r3, #43	; 0x2b
 8008db4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8008db8:	f89a 3000 	ldrb.w	r3, [sl]
 8008dbc:	2b2a      	cmp	r3, #42	; 0x2a
 8008dbe:	d015      	beq.n	8008dec <_vfiprintf_r+0x120>
 8008dc0:	9a07      	ldr	r2, [sp, #28]
 8008dc2:	4654      	mov	r4, sl
 8008dc4:	2000      	movs	r0, #0
 8008dc6:	f04f 0c0a 	mov.w	ip, #10
 8008dca:	4621      	mov	r1, r4
 8008dcc:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008dd0:	3b30      	subs	r3, #48	; 0x30
 8008dd2:	2b09      	cmp	r3, #9
 8008dd4:	d94d      	bls.n	8008e72 <_vfiprintf_r+0x1a6>
 8008dd6:	b1b0      	cbz	r0, 8008e06 <_vfiprintf_r+0x13a>
 8008dd8:	9207      	str	r2, [sp, #28]
 8008dda:	e014      	b.n	8008e06 <_vfiprintf_r+0x13a>
 8008ddc:	eba0 0308 	sub.w	r3, r0, r8
 8008de0:	fa09 f303 	lsl.w	r3, r9, r3
 8008de4:	4313      	orrs	r3, r2
 8008de6:	9304      	str	r3, [sp, #16]
 8008de8:	46a2      	mov	sl, r4
 8008dea:	e7d2      	b.n	8008d92 <_vfiprintf_r+0xc6>
 8008dec:	9b03      	ldr	r3, [sp, #12]
 8008dee:	1d19      	adds	r1, r3, #4
 8008df0:	681b      	ldr	r3, [r3, #0]
 8008df2:	9103      	str	r1, [sp, #12]
 8008df4:	2b00      	cmp	r3, #0
 8008df6:	bfbb      	ittet	lt
 8008df8:	425b      	neglt	r3, r3
 8008dfa:	f042 0202 	orrlt.w	r2, r2, #2
 8008dfe:	9307      	strge	r3, [sp, #28]
 8008e00:	9307      	strlt	r3, [sp, #28]
 8008e02:	bfb8      	it	lt
 8008e04:	9204      	strlt	r2, [sp, #16]
 8008e06:	7823      	ldrb	r3, [r4, #0]
 8008e08:	2b2e      	cmp	r3, #46	; 0x2e
 8008e0a:	d10c      	bne.n	8008e26 <_vfiprintf_r+0x15a>
 8008e0c:	7863      	ldrb	r3, [r4, #1]
 8008e0e:	2b2a      	cmp	r3, #42	; 0x2a
 8008e10:	d134      	bne.n	8008e7c <_vfiprintf_r+0x1b0>
 8008e12:	9b03      	ldr	r3, [sp, #12]
 8008e14:	1d1a      	adds	r2, r3, #4
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	9203      	str	r2, [sp, #12]
 8008e1a:	2b00      	cmp	r3, #0
 8008e1c:	bfb8      	it	lt
 8008e1e:	f04f 33ff 	movlt.w	r3, #4294967295
 8008e22:	3402      	adds	r4, #2
 8008e24:	9305      	str	r3, [sp, #20]
 8008e26:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8008efc <_vfiprintf_r+0x230>
 8008e2a:	7821      	ldrb	r1, [r4, #0]
 8008e2c:	2203      	movs	r2, #3
 8008e2e:	4650      	mov	r0, sl
 8008e30:	f7f7 fa0e 	bl	8000250 <memchr>
 8008e34:	b138      	cbz	r0, 8008e46 <_vfiprintf_r+0x17a>
 8008e36:	9b04      	ldr	r3, [sp, #16]
 8008e38:	eba0 000a 	sub.w	r0, r0, sl
 8008e3c:	2240      	movs	r2, #64	; 0x40
 8008e3e:	4082      	lsls	r2, r0
 8008e40:	4313      	orrs	r3, r2
 8008e42:	3401      	adds	r4, #1
 8008e44:	9304      	str	r3, [sp, #16]
 8008e46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008e4a:	4829      	ldr	r0, [pc, #164]	; (8008ef0 <_vfiprintf_r+0x224>)
 8008e4c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8008e50:	2206      	movs	r2, #6
 8008e52:	f7f7 f9fd 	bl	8000250 <memchr>
 8008e56:	2800      	cmp	r0, #0
 8008e58:	d03f      	beq.n	8008eda <_vfiprintf_r+0x20e>
 8008e5a:	4b26      	ldr	r3, [pc, #152]	; (8008ef4 <_vfiprintf_r+0x228>)
 8008e5c:	bb1b      	cbnz	r3, 8008ea6 <_vfiprintf_r+0x1da>
 8008e5e:	9b03      	ldr	r3, [sp, #12]
 8008e60:	3307      	adds	r3, #7
 8008e62:	f023 0307 	bic.w	r3, r3, #7
 8008e66:	3308      	adds	r3, #8
 8008e68:	9303      	str	r3, [sp, #12]
 8008e6a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008e6c:	443b      	add	r3, r7
 8008e6e:	9309      	str	r3, [sp, #36]	; 0x24
 8008e70:	e768      	b.n	8008d44 <_vfiprintf_r+0x78>
 8008e72:	fb0c 3202 	mla	r2, ip, r2, r3
 8008e76:	460c      	mov	r4, r1
 8008e78:	2001      	movs	r0, #1
 8008e7a:	e7a6      	b.n	8008dca <_vfiprintf_r+0xfe>
 8008e7c:	2300      	movs	r3, #0
 8008e7e:	3401      	adds	r4, #1
 8008e80:	9305      	str	r3, [sp, #20]
 8008e82:	4619      	mov	r1, r3
 8008e84:	f04f 0c0a 	mov.w	ip, #10
 8008e88:	4620      	mov	r0, r4
 8008e8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e8e:	3a30      	subs	r2, #48	; 0x30
 8008e90:	2a09      	cmp	r2, #9
 8008e92:	d903      	bls.n	8008e9c <_vfiprintf_r+0x1d0>
 8008e94:	2b00      	cmp	r3, #0
 8008e96:	d0c6      	beq.n	8008e26 <_vfiprintf_r+0x15a>
 8008e98:	9105      	str	r1, [sp, #20]
 8008e9a:	e7c4      	b.n	8008e26 <_vfiprintf_r+0x15a>
 8008e9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008ea0:	4604      	mov	r4, r0
 8008ea2:	2301      	movs	r3, #1
 8008ea4:	e7f0      	b.n	8008e88 <_vfiprintf_r+0x1bc>
 8008ea6:	ab03      	add	r3, sp, #12
 8008ea8:	9300      	str	r3, [sp, #0]
 8008eaa:	462a      	mov	r2, r5
 8008eac:	4b12      	ldr	r3, [pc, #72]	; (8008ef8 <_vfiprintf_r+0x22c>)
 8008eae:	a904      	add	r1, sp, #16
 8008eb0:	4630      	mov	r0, r6
 8008eb2:	f3af 8000 	nop.w
 8008eb6:	4607      	mov	r7, r0
 8008eb8:	1c78      	adds	r0, r7, #1
 8008eba:	d1d6      	bne.n	8008e6a <_vfiprintf_r+0x19e>
 8008ebc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8008ebe:	07d9      	lsls	r1, r3, #31
 8008ec0:	d405      	bmi.n	8008ece <_vfiprintf_r+0x202>
 8008ec2:	89ab      	ldrh	r3, [r5, #12]
 8008ec4:	059a      	lsls	r2, r3, #22
 8008ec6:	d402      	bmi.n	8008ece <_vfiprintf_r+0x202>
 8008ec8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8008eca:	f7ff f9a0 	bl	800820e <__retarget_lock_release_recursive>
 8008ece:	89ab      	ldrh	r3, [r5, #12]
 8008ed0:	065b      	lsls	r3, r3, #25
 8008ed2:	f53f af1d 	bmi.w	8008d10 <_vfiprintf_r+0x44>
 8008ed6:	9809      	ldr	r0, [sp, #36]	; 0x24
 8008ed8:	e71c      	b.n	8008d14 <_vfiprintf_r+0x48>
 8008eda:	ab03      	add	r3, sp, #12
 8008edc:	9300      	str	r3, [sp, #0]
 8008ede:	462a      	mov	r2, r5
 8008ee0:	4b05      	ldr	r3, [pc, #20]	; (8008ef8 <_vfiprintf_r+0x22c>)
 8008ee2:	a904      	add	r1, sp, #16
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7ff fc77 	bl	80087d8 <_printf_i>
 8008eea:	e7e4      	b.n	8008eb6 <_vfiprintf_r+0x1ea>
 8008eec:	08009426 	.word	0x08009426
 8008ef0:	08009430 	.word	0x08009430
 8008ef4:	00000000 	.word	0x00000000
 8008ef8:	08008ca7 	.word	0x08008ca7
 8008efc:	0800942c 	.word	0x0800942c

08008f00 <__swbuf_r>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	460e      	mov	r6, r1
 8008f04:	4614      	mov	r4, r2
 8008f06:	4605      	mov	r5, r0
 8008f08:	b118      	cbz	r0, 8008f12 <__swbuf_r+0x12>
 8008f0a:	6a03      	ldr	r3, [r0, #32]
 8008f0c:	b90b      	cbnz	r3, 8008f12 <__swbuf_r+0x12>
 8008f0e:	f7fe fffb 	bl	8007f08 <__sinit>
 8008f12:	69a3      	ldr	r3, [r4, #24]
 8008f14:	60a3      	str	r3, [r4, #8]
 8008f16:	89a3      	ldrh	r3, [r4, #12]
 8008f18:	071a      	lsls	r2, r3, #28
 8008f1a:	d525      	bpl.n	8008f68 <__swbuf_r+0x68>
 8008f1c:	6923      	ldr	r3, [r4, #16]
 8008f1e:	b31b      	cbz	r3, 8008f68 <__swbuf_r+0x68>
 8008f20:	6823      	ldr	r3, [r4, #0]
 8008f22:	6922      	ldr	r2, [r4, #16]
 8008f24:	1a98      	subs	r0, r3, r2
 8008f26:	6963      	ldr	r3, [r4, #20]
 8008f28:	b2f6      	uxtb	r6, r6
 8008f2a:	4283      	cmp	r3, r0
 8008f2c:	4637      	mov	r7, r6
 8008f2e:	dc04      	bgt.n	8008f3a <__swbuf_r+0x3a>
 8008f30:	4621      	mov	r1, r4
 8008f32:	4628      	mov	r0, r5
 8008f34:	f7ff fdf8 	bl	8008b28 <_fflush_r>
 8008f38:	b9e0      	cbnz	r0, 8008f74 <__swbuf_r+0x74>
 8008f3a:	68a3      	ldr	r3, [r4, #8]
 8008f3c:	3b01      	subs	r3, #1
 8008f3e:	60a3      	str	r3, [r4, #8]
 8008f40:	6823      	ldr	r3, [r4, #0]
 8008f42:	1c5a      	adds	r2, r3, #1
 8008f44:	6022      	str	r2, [r4, #0]
 8008f46:	701e      	strb	r6, [r3, #0]
 8008f48:	6962      	ldr	r2, [r4, #20]
 8008f4a:	1c43      	adds	r3, r0, #1
 8008f4c:	429a      	cmp	r2, r3
 8008f4e:	d004      	beq.n	8008f5a <__swbuf_r+0x5a>
 8008f50:	89a3      	ldrh	r3, [r4, #12]
 8008f52:	07db      	lsls	r3, r3, #31
 8008f54:	d506      	bpl.n	8008f64 <__swbuf_r+0x64>
 8008f56:	2e0a      	cmp	r6, #10
 8008f58:	d104      	bne.n	8008f64 <__swbuf_r+0x64>
 8008f5a:	4621      	mov	r1, r4
 8008f5c:	4628      	mov	r0, r5
 8008f5e:	f7ff fde3 	bl	8008b28 <_fflush_r>
 8008f62:	b938      	cbnz	r0, 8008f74 <__swbuf_r+0x74>
 8008f64:	4638      	mov	r0, r7
 8008f66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008f68:	4621      	mov	r1, r4
 8008f6a:	4628      	mov	r0, r5
 8008f6c:	f000 f806 	bl	8008f7c <__swsetup_r>
 8008f70:	2800      	cmp	r0, #0
 8008f72:	d0d5      	beq.n	8008f20 <__swbuf_r+0x20>
 8008f74:	f04f 37ff 	mov.w	r7, #4294967295
 8008f78:	e7f4      	b.n	8008f64 <__swbuf_r+0x64>
	...

08008f7c <__swsetup_r>:
 8008f7c:	b538      	push	{r3, r4, r5, lr}
 8008f7e:	4b2a      	ldr	r3, [pc, #168]	; (8009028 <__swsetup_r+0xac>)
 8008f80:	4605      	mov	r5, r0
 8008f82:	6818      	ldr	r0, [r3, #0]
 8008f84:	460c      	mov	r4, r1
 8008f86:	b118      	cbz	r0, 8008f90 <__swsetup_r+0x14>
 8008f88:	6a03      	ldr	r3, [r0, #32]
 8008f8a:	b90b      	cbnz	r3, 8008f90 <__swsetup_r+0x14>
 8008f8c:	f7fe ffbc 	bl	8007f08 <__sinit>
 8008f90:	89a3      	ldrh	r3, [r4, #12]
 8008f92:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008f96:	0718      	lsls	r0, r3, #28
 8008f98:	d422      	bmi.n	8008fe0 <__swsetup_r+0x64>
 8008f9a:	06d9      	lsls	r1, r3, #27
 8008f9c:	d407      	bmi.n	8008fae <__swsetup_r+0x32>
 8008f9e:	2309      	movs	r3, #9
 8008fa0:	602b      	str	r3, [r5, #0]
 8008fa2:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8008fa6:	81a3      	strh	r3, [r4, #12]
 8008fa8:	f04f 30ff 	mov.w	r0, #4294967295
 8008fac:	e034      	b.n	8009018 <__swsetup_r+0x9c>
 8008fae:	0758      	lsls	r0, r3, #29
 8008fb0:	d512      	bpl.n	8008fd8 <__swsetup_r+0x5c>
 8008fb2:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8008fb4:	b141      	cbz	r1, 8008fc8 <__swsetup_r+0x4c>
 8008fb6:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8008fba:	4299      	cmp	r1, r3
 8008fbc:	d002      	beq.n	8008fc4 <__swsetup_r+0x48>
 8008fbe:	4628      	mov	r0, r5
 8008fc0:	f7ff f944 	bl	800824c <_free_r>
 8008fc4:	2300      	movs	r3, #0
 8008fc6:	6363      	str	r3, [r4, #52]	; 0x34
 8008fc8:	89a3      	ldrh	r3, [r4, #12]
 8008fca:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8008fce:	81a3      	strh	r3, [r4, #12]
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	6063      	str	r3, [r4, #4]
 8008fd4:	6923      	ldr	r3, [r4, #16]
 8008fd6:	6023      	str	r3, [r4, #0]
 8008fd8:	89a3      	ldrh	r3, [r4, #12]
 8008fda:	f043 0308 	orr.w	r3, r3, #8
 8008fde:	81a3      	strh	r3, [r4, #12]
 8008fe0:	6923      	ldr	r3, [r4, #16]
 8008fe2:	b94b      	cbnz	r3, 8008ff8 <__swsetup_r+0x7c>
 8008fe4:	89a3      	ldrh	r3, [r4, #12]
 8008fe6:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8008fea:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008fee:	d003      	beq.n	8008ff8 <__swsetup_r+0x7c>
 8008ff0:	4621      	mov	r1, r4
 8008ff2:	4628      	mov	r0, r5
 8008ff4:	f000 f88c 	bl	8009110 <__smakebuf_r>
 8008ff8:	89a0      	ldrh	r0, [r4, #12]
 8008ffa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8008ffe:	f010 0301 	ands.w	r3, r0, #1
 8009002:	d00a      	beq.n	800901a <__swsetup_r+0x9e>
 8009004:	2300      	movs	r3, #0
 8009006:	60a3      	str	r3, [r4, #8]
 8009008:	6963      	ldr	r3, [r4, #20]
 800900a:	425b      	negs	r3, r3
 800900c:	61a3      	str	r3, [r4, #24]
 800900e:	6923      	ldr	r3, [r4, #16]
 8009010:	b943      	cbnz	r3, 8009024 <__swsetup_r+0xa8>
 8009012:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8009016:	d1c4      	bne.n	8008fa2 <__swsetup_r+0x26>
 8009018:	bd38      	pop	{r3, r4, r5, pc}
 800901a:	0781      	lsls	r1, r0, #30
 800901c:	bf58      	it	pl
 800901e:	6963      	ldrpl	r3, [r4, #20]
 8009020:	60a3      	str	r3, [r4, #8]
 8009022:	e7f4      	b.n	800900e <__swsetup_r+0x92>
 8009024:	2000      	movs	r0, #0
 8009026:	e7f7      	b.n	8009018 <__swsetup_r+0x9c>
 8009028:	20000120 	.word	0x20000120

0800902c <_raise_r>:
 800902c:	291f      	cmp	r1, #31
 800902e:	b538      	push	{r3, r4, r5, lr}
 8009030:	4604      	mov	r4, r0
 8009032:	460d      	mov	r5, r1
 8009034:	d904      	bls.n	8009040 <_raise_r+0x14>
 8009036:	2316      	movs	r3, #22
 8009038:	6003      	str	r3, [r0, #0]
 800903a:	f04f 30ff 	mov.w	r0, #4294967295
 800903e:	bd38      	pop	{r3, r4, r5, pc}
 8009040:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8009042:	b112      	cbz	r2, 800904a <_raise_r+0x1e>
 8009044:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8009048:	b94b      	cbnz	r3, 800905e <_raise_r+0x32>
 800904a:	4620      	mov	r0, r4
 800904c:	f000 f830 	bl	80090b0 <_getpid_r>
 8009050:	462a      	mov	r2, r5
 8009052:	4601      	mov	r1, r0
 8009054:	4620      	mov	r0, r4
 8009056:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800905a:	f000 b817 	b.w	800908c <_kill_r>
 800905e:	2b01      	cmp	r3, #1
 8009060:	d00a      	beq.n	8009078 <_raise_r+0x4c>
 8009062:	1c59      	adds	r1, r3, #1
 8009064:	d103      	bne.n	800906e <_raise_r+0x42>
 8009066:	2316      	movs	r3, #22
 8009068:	6003      	str	r3, [r0, #0]
 800906a:	2001      	movs	r0, #1
 800906c:	e7e7      	b.n	800903e <_raise_r+0x12>
 800906e:	2400      	movs	r4, #0
 8009070:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8009074:	4628      	mov	r0, r5
 8009076:	4798      	blx	r3
 8009078:	2000      	movs	r0, #0
 800907a:	e7e0      	b.n	800903e <_raise_r+0x12>

0800907c <raise>:
 800907c:	4b02      	ldr	r3, [pc, #8]	; (8009088 <raise+0xc>)
 800907e:	4601      	mov	r1, r0
 8009080:	6818      	ldr	r0, [r3, #0]
 8009082:	f7ff bfd3 	b.w	800902c <_raise_r>
 8009086:	bf00      	nop
 8009088:	20000120 	.word	0x20000120

0800908c <_kill_r>:
 800908c:	b538      	push	{r3, r4, r5, lr}
 800908e:	4d07      	ldr	r5, [pc, #28]	; (80090ac <_kill_r+0x20>)
 8009090:	2300      	movs	r3, #0
 8009092:	4604      	mov	r4, r0
 8009094:	4608      	mov	r0, r1
 8009096:	4611      	mov	r1, r2
 8009098:	602b      	str	r3, [r5, #0]
 800909a:	f7f7 febb 	bl	8000e14 <_kill>
 800909e:	1c43      	adds	r3, r0, #1
 80090a0:	d102      	bne.n	80090a8 <_kill_r+0x1c>
 80090a2:	682b      	ldr	r3, [r5, #0]
 80090a4:	b103      	cbz	r3, 80090a8 <_kill_r+0x1c>
 80090a6:	6023      	str	r3, [r4, #0]
 80090a8:	bd38      	pop	{r3, r4, r5, pc}
 80090aa:	bf00      	nop
 80090ac:	20000620 	.word	0x20000620

080090b0 <_getpid_r>:
 80090b0:	f7f7 bea8 	b.w	8000e04 <_getpid>

080090b4 <_malloc_usable_size_r>:
 80090b4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80090b8:	1f18      	subs	r0, r3, #4
 80090ba:	2b00      	cmp	r3, #0
 80090bc:	bfbc      	itt	lt
 80090be:	580b      	ldrlt	r3, [r1, r0]
 80090c0:	18c0      	addlt	r0, r0, r3
 80090c2:	4770      	bx	lr

080090c4 <__swhatbuf_r>:
 80090c4:	b570      	push	{r4, r5, r6, lr}
 80090c6:	460c      	mov	r4, r1
 80090c8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090cc:	2900      	cmp	r1, #0
 80090ce:	b096      	sub	sp, #88	; 0x58
 80090d0:	4615      	mov	r5, r2
 80090d2:	461e      	mov	r6, r3
 80090d4:	da0d      	bge.n	80090f2 <__swhatbuf_r+0x2e>
 80090d6:	89a3      	ldrh	r3, [r4, #12]
 80090d8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80090dc:	f04f 0100 	mov.w	r1, #0
 80090e0:	bf0c      	ite	eq
 80090e2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80090e6:	2340      	movne	r3, #64	; 0x40
 80090e8:	2000      	movs	r0, #0
 80090ea:	6031      	str	r1, [r6, #0]
 80090ec:	602b      	str	r3, [r5, #0]
 80090ee:	b016      	add	sp, #88	; 0x58
 80090f0:	bd70      	pop	{r4, r5, r6, pc}
 80090f2:	466a      	mov	r2, sp
 80090f4:	f000 f848 	bl	8009188 <_fstat_r>
 80090f8:	2800      	cmp	r0, #0
 80090fa:	dbec      	blt.n	80090d6 <__swhatbuf_r+0x12>
 80090fc:	9901      	ldr	r1, [sp, #4]
 80090fe:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8009102:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8009106:	4259      	negs	r1, r3
 8009108:	4159      	adcs	r1, r3
 800910a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800910e:	e7eb      	b.n	80090e8 <__swhatbuf_r+0x24>

08009110 <__smakebuf_r>:
 8009110:	898b      	ldrh	r3, [r1, #12]
 8009112:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009114:	079d      	lsls	r5, r3, #30
 8009116:	4606      	mov	r6, r0
 8009118:	460c      	mov	r4, r1
 800911a:	d507      	bpl.n	800912c <__smakebuf_r+0x1c>
 800911c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8009120:	6023      	str	r3, [r4, #0]
 8009122:	6123      	str	r3, [r4, #16]
 8009124:	2301      	movs	r3, #1
 8009126:	6163      	str	r3, [r4, #20]
 8009128:	b002      	add	sp, #8
 800912a:	bd70      	pop	{r4, r5, r6, pc}
 800912c:	ab01      	add	r3, sp, #4
 800912e:	466a      	mov	r2, sp
 8009130:	f7ff ffc8 	bl	80090c4 <__swhatbuf_r>
 8009134:	9900      	ldr	r1, [sp, #0]
 8009136:	4605      	mov	r5, r0
 8009138:	4630      	mov	r0, r6
 800913a:	f7ff f8fb 	bl	8008334 <_malloc_r>
 800913e:	b948      	cbnz	r0, 8009154 <__smakebuf_r+0x44>
 8009140:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009144:	059a      	lsls	r2, r3, #22
 8009146:	d4ef      	bmi.n	8009128 <__smakebuf_r+0x18>
 8009148:	f023 0303 	bic.w	r3, r3, #3
 800914c:	f043 0302 	orr.w	r3, r3, #2
 8009150:	81a3      	strh	r3, [r4, #12]
 8009152:	e7e3      	b.n	800911c <__smakebuf_r+0xc>
 8009154:	89a3      	ldrh	r3, [r4, #12]
 8009156:	6020      	str	r0, [r4, #0]
 8009158:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800915c:	81a3      	strh	r3, [r4, #12]
 800915e:	9b00      	ldr	r3, [sp, #0]
 8009160:	6163      	str	r3, [r4, #20]
 8009162:	9b01      	ldr	r3, [sp, #4]
 8009164:	6120      	str	r0, [r4, #16]
 8009166:	b15b      	cbz	r3, 8009180 <__smakebuf_r+0x70>
 8009168:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800916c:	4630      	mov	r0, r6
 800916e:	f000 f81d 	bl	80091ac <_isatty_r>
 8009172:	b128      	cbz	r0, 8009180 <__smakebuf_r+0x70>
 8009174:	89a3      	ldrh	r3, [r4, #12]
 8009176:	f023 0303 	bic.w	r3, r3, #3
 800917a:	f043 0301 	orr.w	r3, r3, #1
 800917e:	81a3      	strh	r3, [r4, #12]
 8009180:	89a3      	ldrh	r3, [r4, #12]
 8009182:	431d      	orrs	r5, r3
 8009184:	81a5      	strh	r5, [r4, #12]
 8009186:	e7cf      	b.n	8009128 <__smakebuf_r+0x18>

08009188 <_fstat_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d07      	ldr	r5, [pc, #28]	; (80091a8 <_fstat_r+0x20>)
 800918c:	2300      	movs	r3, #0
 800918e:	4604      	mov	r4, r0
 8009190:	4608      	mov	r0, r1
 8009192:	4611      	mov	r1, r2
 8009194:	602b      	str	r3, [r5, #0]
 8009196:	f7f7 fe9c 	bl	8000ed2 <_fstat>
 800919a:	1c43      	adds	r3, r0, #1
 800919c:	d102      	bne.n	80091a4 <_fstat_r+0x1c>
 800919e:	682b      	ldr	r3, [r5, #0]
 80091a0:	b103      	cbz	r3, 80091a4 <_fstat_r+0x1c>
 80091a2:	6023      	str	r3, [r4, #0]
 80091a4:	bd38      	pop	{r3, r4, r5, pc}
 80091a6:	bf00      	nop
 80091a8:	20000620 	.word	0x20000620

080091ac <_isatty_r>:
 80091ac:	b538      	push	{r3, r4, r5, lr}
 80091ae:	4d06      	ldr	r5, [pc, #24]	; (80091c8 <_isatty_r+0x1c>)
 80091b0:	2300      	movs	r3, #0
 80091b2:	4604      	mov	r4, r0
 80091b4:	4608      	mov	r0, r1
 80091b6:	602b      	str	r3, [r5, #0]
 80091b8:	f7f7 fe9b 	bl	8000ef2 <_isatty>
 80091bc:	1c43      	adds	r3, r0, #1
 80091be:	d102      	bne.n	80091c6 <_isatty_r+0x1a>
 80091c0:	682b      	ldr	r3, [r5, #0]
 80091c2:	b103      	cbz	r3, 80091c6 <_isatty_r+0x1a>
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	bd38      	pop	{r3, r4, r5, pc}
 80091c8:	20000620 	.word	0x20000620

080091cc <_init>:
 80091cc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ce:	bf00      	nop
 80091d0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091d2:	bc08      	pop	{r3}
 80091d4:	469e      	mov	lr, r3
 80091d6:	4770      	bx	lr

080091d8 <_fini>:
 80091d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091da:	bf00      	nop
 80091dc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091de:	bc08      	pop	{r3}
 80091e0:	469e      	mov	lr, r3
 80091e2:	4770      	bx	lr
