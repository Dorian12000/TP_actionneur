
NUCLEO-G474RET6-Inverter_Pinout.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001d8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c54c  080001e0  080001e0  000101e0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000004a0  0800c730  0800c730  0001c730  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800cbd0  0800cbd0  00020298  2**0
                  CONTENTS
  4 .ARM          00000008  0800cbd0  0800cbd0  0001cbd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800cbd8  0800cbd8  00020298  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800cbd8  0800cbd8  0001cbd8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800cbdc  0800cbdc  0001cbdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000298  20000000  0800cbe0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005e8  20000298  0800ce78  00020298  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000880  0800ce78  00020880  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020298  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  000202c8  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b468  00000000  00000000  0002030b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000037dd  00000000  00000000  0003b773  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001638  00000000  00000000  0003ef50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001129  00000000  00000000  00040588  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002a55a  00000000  00000000  000416b1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001bcef  00000000  00000000  0006bc0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    0011471e  00000000  00000000  000878fa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000704c  00000000  00000000  0019c018  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000008a  00000000  00000000  001a3064  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001e0 <__do_global_dtors_aux>:
 80001e0:	b510      	push	{r4, lr}
 80001e2:	4c05      	ldr	r4, [pc, #20]	; (80001f8 <__do_global_dtors_aux+0x18>)
 80001e4:	7823      	ldrb	r3, [r4, #0]
 80001e6:	b933      	cbnz	r3, 80001f6 <__do_global_dtors_aux+0x16>
 80001e8:	4b04      	ldr	r3, [pc, #16]	; (80001fc <__do_global_dtors_aux+0x1c>)
 80001ea:	b113      	cbz	r3, 80001f2 <__do_global_dtors_aux+0x12>
 80001ec:	4804      	ldr	r0, [pc, #16]	; (8000200 <__do_global_dtors_aux+0x20>)
 80001ee:	f3af 8000 	nop.w
 80001f2:	2301      	movs	r3, #1
 80001f4:	7023      	strb	r3, [r4, #0]
 80001f6:	bd10      	pop	{r4, pc}
 80001f8:	20000298 	.word	0x20000298
 80001fc:	00000000 	.word	0x00000000
 8000200:	0800c714 	.word	0x0800c714

08000204 <frame_dummy>:
 8000204:	b508      	push	{r3, lr}
 8000206:	4b03      	ldr	r3, [pc, #12]	; (8000214 <frame_dummy+0x10>)
 8000208:	b11b      	cbz	r3, 8000212 <frame_dummy+0xe>
 800020a:	4903      	ldr	r1, [pc, #12]	; (8000218 <frame_dummy+0x14>)
 800020c:	4803      	ldr	r0, [pc, #12]	; (800021c <frame_dummy+0x18>)
 800020e:	f3af 8000 	nop.w
 8000212:	bd08      	pop	{r3, pc}
 8000214:	00000000 	.word	0x00000000
 8000218:	2000029c 	.word	0x2000029c
 800021c:	0800c714 	.word	0x0800c714

08000220 <strcmp>:
 8000220:	f810 2b01 	ldrb.w	r2, [r0], #1
 8000224:	f811 3b01 	ldrb.w	r3, [r1], #1
 8000228:	2a01      	cmp	r2, #1
 800022a:	bf28      	it	cs
 800022c:	429a      	cmpcs	r2, r3
 800022e:	d0f7      	beq.n	8000220 <strcmp>
 8000230:	1ad0      	subs	r0, r2, r3
 8000232:	4770      	bx	lr
	...

08000240 <memchr>:
 8000240:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000244:	2a10      	cmp	r2, #16
 8000246:	db2b      	blt.n	80002a0 <memchr+0x60>
 8000248:	f010 0f07 	tst.w	r0, #7
 800024c:	d008      	beq.n	8000260 <memchr+0x20>
 800024e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000252:	3a01      	subs	r2, #1
 8000254:	428b      	cmp	r3, r1
 8000256:	d02d      	beq.n	80002b4 <memchr+0x74>
 8000258:	f010 0f07 	tst.w	r0, #7
 800025c:	b342      	cbz	r2, 80002b0 <memchr+0x70>
 800025e:	d1f6      	bne.n	800024e <memchr+0xe>
 8000260:	b4f0      	push	{r4, r5, r6, r7}
 8000262:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000266:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800026a:	f022 0407 	bic.w	r4, r2, #7
 800026e:	f07f 0700 	mvns.w	r7, #0
 8000272:	2300      	movs	r3, #0
 8000274:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000278:	3c08      	subs	r4, #8
 800027a:	ea85 0501 	eor.w	r5, r5, r1
 800027e:	ea86 0601 	eor.w	r6, r6, r1
 8000282:	fa85 f547 	uadd8	r5, r5, r7
 8000286:	faa3 f587 	sel	r5, r3, r7
 800028a:	fa86 f647 	uadd8	r6, r6, r7
 800028e:	faa5 f687 	sel	r6, r5, r7
 8000292:	b98e      	cbnz	r6, 80002b8 <memchr+0x78>
 8000294:	d1ee      	bne.n	8000274 <memchr+0x34>
 8000296:	bcf0      	pop	{r4, r5, r6, r7}
 8000298:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800029c:	f002 0207 	and.w	r2, r2, #7
 80002a0:	b132      	cbz	r2, 80002b0 <memchr+0x70>
 80002a2:	f810 3b01 	ldrb.w	r3, [r0], #1
 80002a6:	3a01      	subs	r2, #1
 80002a8:	ea83 0301 	eor.w	r3, r3, r1
 80002ac:	b113      	cbz	r3, 80002b4 <memchr+0x74>
 80002ae:	d1f8      	bne.n	80002a2 <memchr+0x62>
 80002b0:	2000      	movs	r0, #0
 80002b2:	4770      	bx	lr
 80002b4:	3801      	subs	r0, #1
 80002b6:	4770      	bx	lr
 80002b8:	2d00      	cmp	r5, #0
 80002ba:	bf06      	itte	eq
 80002bc:	4635      	moveq	r5, r6
 80002be:	3803      	subeq	r0, #3
 80002c0:	3807      	subne	r0, #7
 80002c2:	f015 0f01 	tst.w	r5, #1
 80002c6:	d107      	bne.n	80002d8 <memchr+0x98>
 80002c8:	3001      	adds	r0, #1
 80002ca:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ce:	bf02      	ittt	eq
 80002d0:	3001      	addeq	r0, #1
 80002d2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002d6:	3001      	addeq	r0, #1
 80002d8:	bcf0      	pop	{r4, r5, r6, r7}
 80002da:	3801      	subs	r0, #1
 80002dc:	4770      	bx	lr
 80002de:	bf00      	nop

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <__aeabi_drsub>:
 80002f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002f4:	e002      	b.n	80002fc <__adddf3>
 80002f6:	bf00      	nop

080002f8 <__aeabi_dsub>:
 80002f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002fc <__adddf3>:
 80002fc:	b530      	push	{r4, r5, lr}
 80002fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000302:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000306:	ea94 0f05 	teq	r4, r5
 800030a:	bf08      	it	eq
 800030c:	ea90 0f02 	teqeq	r0, r2
 8000310:	bf1f      	itttt	ne
 8000312:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000316:	ea55 0c02 	orrsne.w	ip, r5, r2
 800031a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800031e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000322:	f000 80e2 	beq.w	80004ea <__adddf3+0x1ee>
 8000326:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800032a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800032e:	bfb8      	it	lt
 8000330:	426d      	neglt	r5, r5
 8000332:	dd0c      	ble.n	800034e <__adddf3+0x52>
 8000334:	442c      	add	r4, r5
 8000336:	ea80 0202 	eor.w	r2, r0, r2
 800033a:	ea81 0303 	eor.w	r3, r1, r3
 800033e:	ea82 0000 	eor.w	r0, r2, r0
 8000342:	ea83 0101 	eor.w	r1, r3, r1
 8000346:	ea80 0202 	eor.w	r2, r0, r2
 800034a:	ea81 0303 	eor.w	r3, r1, r3
 800034e:	2d36      	cmp	r5, #54	; 0x36
 8000350:	bf88      	it	hi
 8000352:	bd30      	pophi	{r4, r5, pc}
 8000354:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000358:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800035c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000360:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000364:	d002      	beq.n	800036c <__adddf3+0x70>
 8000366:	4240      	negs	r0, r0
 8000368:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800036c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000370:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000374:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000378:	d002      	beq.n	8000380 <__adddf3+0x84>
 800037a:	4252      	negs	r2, r2
 800037c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000380:	ea94 0f05 	teq	r4, r5
 8000384:	f000 80a7 	beq.w	80004d6 <__adddf3+0x1da>
 8000388:	f1a4 0401 	sub.w	r4, r4, #1
 800038c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000390:	db0d      	blt.n	80003ae <__adddf3+0xb2>
 8000392:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000396:	fa22 f205 	lsr.w	r2, r2, r5
 800039a:	1880      	adds	r0, r0, r2
 800039c:	f141 0100 	adc.w	r1, r1, #0
 80003a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80003a4:	1880      	adds	r0, r0, r2
 80003a6:	fa43 f305 	asr.w	r3, r3, r5
 80003aa:	4159      	adcs	r1, r3
 80003ac:	e00e      	b.n	80003cc <__adddf3+0xd0>
 80003ae:	f1a5 0520 	sub.w	r5, r5, #32
 80003b2:	f10e 0e20 	add.w	lr, lr, #32
 80003b6:	2a01      	cmp	r2, #1
 80003b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80003bc:	bf28      	it	cs
 80003be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80003c2:	fa43 f305 	asr.w	r3, r3, r5
 80003c6:	18c0      	adds	r0, r0, r3
 80003c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003d0:	d507      	bpl.n	80003e2 <__adddf3+0xe6>
 80003d2:	f04f 0e00 	mov.w	lr, #0
 80003d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80003da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003de:	eb6e 0101 	sbc.w	r1, lr, r1
 80003e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003e6:	d31b      	bcc.n	8000420 <__adddf3+0x124>
 80003e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003ec:	d30c      	bcc.n	8000408 <__adddf3+0x10c>
 80003ee:	0849      	lsrs	r1, r1, #1
 80003f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80003f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003f8:	f104 0401 	add.w	r4, r4, #1
 80003fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000400:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000404:	f080 809a 	bcs.w	800053c <__adddf3+0x240>
 8000408:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800040c:	bf08      	it	eq
 800040e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000412:	f150 0000 	adcs.w	r0, r0, #0
 8000416:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800041a:	ea41 0105 	orr.w	r1, r1, r5
 800041e:	bd30      	pop	{r4, r5, pc}
 8000420:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000424:	4140      	adcs	r0, r0
 8000426:	eb41 0101 	adc.w	r1, r1, r1
 800042a:	3c01      	subs	r4, #1
 800042c:	bf28      	it	cs
 800042e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000432:	d2e9      	bcs.n	8000408 <__adddf3+0x10c>
 8000434:	f091 0f00 	teq	r1, #0
 8000438:	bf04      	itt	eq
 800043a:	4601      	moveq	r1, r0
 800043c:	2000      	moveq	r0, #0
 800043e:	fab1 f381 	clz	r3, r1
 8000442:	bf08      	it	eq
 8000444:	3320      	addeq	r3, #32
 8000446:	f1a3 030b 	sub.w	r3, r3, #11
 800044a:	f1b3 0220 	subs.w	r2, r3, #32
 800044e:	da0c      	bge.n	800046a <__adddf3+0x16e>
 8000450:	320c      	adds	r2, #12
 8000452:	dd08      	ble.n	8000466 <__adddf3+0x16a>
 8000454:	f102 0c14 	add.w	ip, r2, #20
 8000458:	f1c2 020c 	rsb	r2, r2, #12
 800045c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000460:	fa21 f102 	lsr.w	r1, r1, r2
 8000464:	e00c      	b.n	8000480 <__adddf3+0x184>
 8000466:	f102 0214 	add.w	r2, r2, #20
 800046a:	bfd8      	it	le
 800046c:	f1c2 0c20 	rsble	ip, r2, #32
 8000470:	fa01 f102 	lsl.w	r1, r1, r2
 8000474:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000478:	bfdc      	itt	le
 800047a:	ea41 010c 	orrle.w	r1, r1, ip
 800047e:	4090      	lslle	r0, r2
 8000480:	1ae4      	subs	r4, r4, r3
 8000482:	bfa2      	ittt	ge
 8000484:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000488:	4329      	orrge	r1, r5
 800048a:	bd30      	popge	{r4, r5, pc}
 800048c:	ea6f 0404 	mvn.w	r4, r4
 8000490:	3c1f      	subs	r4, #31
 8000492:	da1c      	bge.n	80004ce <__adddf3+0x1d2>
 8000494:	340c      	adds	r4, #12
 8000496:	dc0e      	bgt.n	80004b6 <__adddf3+0x1ba>
 8000498:	f104 0414 	add.w	r4, r4, #20
 800049c:	f1c4 0220 	rsb	r2, r4, #32
 80004a0:	fa20 f004 	lsr.w	r0, r0, r4
 80004a4:	fa01 f302 	lsl.w	r3, r1, r2
 80004a8:	ea40 0003 	orr.w	r0, r0, r3
 80004ac:	fa21 f304 	lsr.w	r3, r1, r4
 80004b0:	ea45 0103 	orr.w	r1, r5, r3
 80004b4:	bd30      	pop	{r4, r5, pc}
 80004b6:	f1c4 040c 	rsb	r4, r4, #12
 80004ba:	f1c4 0220 	rsb	r2, r4, #32
 80004be:	fa20 f002 	lsr.w	r0, r0, r2
 80004c2:	fa01 f304 	lsl.w	r3, r1, r4
 80004c6:	ea40 0003 	orr.w	r0, r0, r3
 80004ca:	4629      	mov	r1, r5
 80004cc:	bd30      	pop	{r4, r5, pc}
 80004ce:	fa21 f004 	lsr.w	r0, r1, r4
 80004d2:	4629      	mov	r1, r5
 80004d4:	bd30      	pop	{r4, r5, pc}
 80004d6:	f094 0f00 	teq	r4, #0
 80004da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004de:	bf06      	itte	eq
 80004e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004e4:	3401      	addeq	r4, #1
 80004e6:	3d01      	subne	r5, #1
 80004e8:	e74e      	b.n	8000388 <__adddf3+0x8c>
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf18      	it	ne
 80004f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004f4:	d029      	beq.n	800054a <__adddf3+0x24e>
 80004f6:	ea94 0f05 	teq	r4, r5
 80004fa:	bf08      	it	eq
 80004fc:	ea90 0f02 	teqeq	r0, r2
 8000500:	d005      	beq.n	800050e <__adddf3+0x212>
 8000502:	ea54 0c00 	orrs.w	ip, r4, r0
 8000506:	bf04      	itt	eq
 8000508:	4619      	moveq	r1, r3
 800050a:	4610      	moveq	r0, r2
 800050c:	bd30      	pop	{r4, r5, pc}
 800050e:	ea91 0f03 	teq	r1, r3
 8000512:	bf1e      	ittt	ne
 8000514:	2100      	movne	r1, #0
 8000516:	2000      	movne	r0, #0
 8000518:	bd30      	popne	{r4, r5, pc}
 800051a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800051e:	d105      	bne.n	800052c <__adddf3+0x230>
 8000520:	0040      	lsls	r0, r0, #1
 8000522:	4149      	adcs	r1, r1
 8000524:	bf28      	it	cs
 8000526:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800052a:	bd30      	pop	{r4, r5, pc}
 800052c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000530:	bf3c      	itt	cc
 8000532:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000536:	bd30      	popcc	{r4, r5, pc}
 8000538:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800053c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000540:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000544:	f04f 0000 	mov.w	r0, #0
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800054e:	bf1a      	itte	ne
 8000550:	4619      	movne	r1, r3
 8000552:	4610      	movne	r0, r2
 8000554:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000558:	bf1c      	itt	ne
 800055a:	460b      	movne	r3, r1
 800055c:	4602      	movne	r2, r0
 800055e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000562:	bf06      	itte	eq
 8000564:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000568:	ea91 0f03 	teqeq	r1, r3
 800056c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000570:	bd30      	pop	{r4, r5, pc}
 8000572:	bf00      	nop

08000574 <__aeabi_ui2d>:
 8000574:	f090 0f00 	teq	r0, #0
 8000578:	bf04      	itt	eq
 800057a:	2100      	moveq	r1, #0
 800057c:	4770      	bxeq	lr
 800057e:	b530      	push	{r4, r5, lr}
 8000580:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000584:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000588:	f04f 0500 	mov.w	r5, #0
 800058c:	f04f 0100 	mov.w	r1, #0
 8000590:	e750      	b.n	8000434 <__adddf3+0x138>
 8000592:	bf00      	nop

08000594 <__aeabi_i2d>:
 8000594:	f090 0f00 	teq	r0, #0
 8000598:	bf04      	itt	eq
 800059a:	2100      	moveq	r1, #0
 800059c:	4770      	bxeq	lr
 800059e:	b530      	push	{r4, r5, lr}
 80005a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80005ac:	bf48      	it	mi
 80005ae:	4240      	negmi	r0, r0
 80005b0:	f04f 0100 	mov.w	r1, #0
 80005b4:	e73e      	b.n	8000434 <__adddf3+0x138>
 80005b6:	bf00      	nop

080005b8 <__aeabi_f2d>:
 80005b8:	0042      	lsls	r2, r0, #1
 80005ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80005be:	ea4f 0131 	mov.w	r1, r1, rrx
 80005c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80005c6:	bf1f      	itttt	ne
 80005c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005d4:	4770      	bxne	lr
 80005d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005da:	bf08      	it	eq
 80005dc:	4770      	bxeq	lr
 80005de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005e2:	bf04      	itt	eq
 80005e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005e8:	4770      	bxeq	lr
 80005ea:	b530      	push	{r4, r5, lr}
 80005ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f8:	e71c      	b.n	8000434 <__adddf3+0x138>
 80005fa:	bf00      	nop

080005fc <__aeabi_ul2d>:
 80005fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000600:	bf08      	it	eq
 8000602:	4770      	bxeq	lr
 8000604:	b530      	push	{r4, r5, lr}
 8000606:	f04f 0500 	mov.w	r5, #0
 800060a:	e00a      	b.n	8000622 <__aeabi_l2d+0x16>

0800060c <__aeabi_l2d>:
 800060c:	ea50 0201 	orrs.w	r2, r0, r1
 8000610:	bf08      	it	eq
 8000612:	4770      	bxeq	lr
 8000614:	b530      	push	{r4, r5, lr}
 8000616:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800061a:	d502      	bpl.n	8000622 <__aeabi_l2d+0x16>
 800061c:	4240      	negs	r0, r0
 800061e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000622:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000626:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800062a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800062e:	f43f aed8 	beq.w	80003e2 <__adddf3+0xe6>
 8000632:	f04f 0203 	mov.w	r2, #3
 8000636:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800063a:	bf18      	it	ne
 800063c:	3203      	addne	r2, #3
 800063e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000642:	bf18      	it	ne
 8000644:	3203      	addne	r2, #3
 8000646:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800064a:	f1c2 0320 	rsb	r3, r2, #32
 800064e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000652:	fa20 f002 	lsr.w	r0, r0, r2
 8000656:	fa01 fe03 	lsl.w	lr, r1, r3
 800065a:	ea40 000e 	orr.w	r0, r0, lr
 800065e:	fa21 f102 	lsr.w	r1, r1, r2
 8000662:	4414      	add	r4, r2
 8000664:	e6bd      	b.n	80003e2 <__adddf3+0xe6>
 8000666:	bf00      	nop

08000668 <__aeabi_dmul>:
 8000668:	b570      	push	{r4, r5, r6, lr}
 800066a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800066e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000672:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000676:	bf1d      	ittte	ne
 8000678:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800067c:	ea94 0f0c 	teqne	r4, ip
 8000680:	ea95 0f0c 	teqne	r5, ip
 8000684:	f000 f8de 	bleq	8000844 <__aeabi_dmul+0x1dc>
 8000688:	442c      	add	r4, r5
 800068a:	ea81 0603 	eor.w	r6, r1, r3
 800068e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000692:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000696:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800069a:	bf18      	it	ne
 800069c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80006a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80006a8:	d038      	beq.n	800071c <__aeabi_dmul+0xb4>
 80006aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80006ae:	f04f 0500 	mov.w	r5, #0
 80006b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80006b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80006ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80006be:	f04f 0600 	mov.w	r6, #0
 80006c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80006c6:	f09c 0f00 	teq	ip, #0
 80006ca:	bf18      	it	ne
 80006cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80006d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006dc:	d204      	bcs.n	80006e8 <__aeabi_dmul+0x80>
 80006de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006e2:	416d      	adcs	r5, r5
 80006e4:	eb46 0606 	adc.w	r6, r6, r6
 80006e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000700:	bf88      	it	hi
 8000702:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000706:	d81e      	bhi.n	8000746 <__aeabi_dmul+0xde>
 8000708:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800070c:	bf08      	it	eq
 800070e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000712:	f150 0000 	adcs.w	r0, r0, #0
 8000716:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000720:	ea46 0101 	orr.w	r1, r6, r1
 8000724:	ea40 0002 	orr.w	r0, r0, r2
 8000728:	ea81 0103 	eor.w	r1, r1, r3
 800072c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000730:	bfc2      	ittt	gt
 8000732:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000736:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800073a:	bd70      	popgt	{r4, r5, r6, pc}
 800073c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000740:	f04f 0e00 	mov.w	lr, #0
 8000744:	3c01      	subs	r4, #1
 8000746:	f300 80ab 	bgt.w	80008a0 <__aeabi_dmul+0x238>
 800074a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800074e:	bfde      	ittt	le
 8000750:	2000      	movle	r0, #0
 8000752:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000756:	bd70      	pople	{r4, r5, r6, pc}
 8000758:	f1c4 0400 	rsb	r4, r4, #0
 800075c:	3c20      	subs	r4, #32
 800075e:	da35      	bge.n	80007cc <__aeabi_dmul+0x164>
 8000760:	340c      	adds	r4, #12
 8000762:	dc1b      	bgt.n	800079c <__aeabi_dmul+0x134>
 8000764:	f104 0414 	add.w	r4, r4, #20
 8000768:	f1c4 0520 	rsb	r5, r4, #32
 800076c:	fa00 f305 	lsl.w	r3, r0, r5
 8000770:	fa20 f004 	lsr.w	r0, r0, r4
 8000774:	fa01 f205 	lsl.w	r2, r1, r5
 8000778:	ea40 0002 	orr.w	r0, r0, r2
 800077c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000780:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000784:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000788:	fa21 f604 	lsr.w	r6, r1, r4
 800078c:	eb42 0106 	adc.w	r1, r2, r6
 8000790:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000794:	bf08      	it	eq
 8000796:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800079a:	bd70      	pop	{r4, r5, r6, pc}
 800079c:	f1c4 040c 	rsb	r4, r4, #12
 80007a0:	f1c4 0520 	rsb	r5, r4, #32
 80007a4:	fa00 f304 	lsl.w	r3, r0, r4
 80007a8:	fa20 f005 	lsr.w	r0, r0, r5
 80007ac:	fa01 f204 	lsl.w	r2, r1, r4
 80007b0:	ea40 0002 	orr.w	r0, r0, r2
 80007b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80007bc:	f141 0100 	adc.w	r1, r1, #0
 80007c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007c4:	bf08      	it	eq
 80007c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007ca:	bd70      	pop	{r4, r5, r6, pc}
 80007cc:	f1c4 0520 	rsb	r5, r4, #32
 80007d0:	fa00 f205 	lsl.w	r2, r0, r5
 80007d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80007d8:	fa20 f304 	lsr.w	r3, r0, r4
 80007dc:	fa01 f205 	lsl.w	r2, r1, r5
 80007e0:	ea43 0302 	orr.w	r3, r3, r2
 80007e4:	fa21 f004 	lsr.w	r0, r1, r4
 80007e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007ec:	fa21 f204 	lsr.w	r2, r1, r4
 80007f0:	ea20 0002 	bic.w	r0, r0, r2
 80007f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007fc:	bf08      	it	eq
 80007fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000802:	bd70      	pop	{r4, r5, r6, pc}
 8000804:	f094 0f00 	teq	r4, #0
 8000808:	d10f      	bne.n	800082a <__aeabi_dmul+0x1c2>
 800080a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800080e:	0040      	lsls	r0, r0, #1
 8000810:	eb41 0101 	adc.w	r1, r1, r1
 8000814:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000818:	bf08      	it	eq
 800081a:	3c01      	subeq	r4, #1
 800081c:	d0f7      	beq.n	800080e <__aeabi_dmul+0x1a6>
 800081e:	ea41 0106 	orr.w	r1, r1, r6
 8000822:	f095 0f00 	teq	r5, #0
 8000826:	bf18      	it	ne
 8000828:	4770      	bxne	lr
 800082a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800082e:	0052      	lsls	r2, r2, #1
 8000830:	eb43 0303 	adc.w	r3, r3, r3
 8000834:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000838:	bf08      	it	eq
 800083a:	3d01      	subeq	r5, #1
 800083c:	d0f7      	beq.n	800082e <__aeabi_dmul+0x1c6>
 800083e:	ea43 0306 	orr.w	r3, r3, r6
 8000842:	4770      	bx	lr
 8000844:	ea94 0f0c 	teq	r4, ip
 8000848:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800084c:	bf18      	it	ne
 800084e:	ea95 0f0c 	teqne	r5, ip
 8000852:	d00c      	beq.n	800086e <__aeabi_dmul+0x206>
 8000854:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000858:	bf18      	it	ne
 800085a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800085e:	d1d1      	bne.n	8000804 <__aeabi_dmul+0x19c>
 8000860:	ea81 0103 	eor.w	r1, r1, r3
 8000864:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000868:	f04f 0000 	mov.w	r0, #0
 800086c:	bd70      	pop	{r4, r5, r6, pc}
 800086e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000872:	bf06      	itte	eq
 8000874:	4610      	moveq	r0, r2
 8000876:	4619      	moveq	r1, r3
 8000878:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800087c:	d019      	beq.n	80008b2 <__aeabi_dmul+0x24a>
 800087e:	ea94 0f0c 	teq	r4, ip
 8000882:	d102      	bne.n	800088a <__aeabi_dmul+0x222>
 8000884:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000888:	d113      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800088a:	ea95 0f0c 	teq	r5, ip
 800088e:	d105      	bne.n	800089c <__aeabi_dmul+0x234>
 8000890:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000894:	bf1c      	itt	ne
 8000896:	4610      	movne	r0, r2
 8000898:	4619      	movne	r1, r3
 800089a:	d10a      	bne.n	80008b2 <__aeabi_dmul+0x24a>
 800089c:	ea81 0103 	eor.w	r1, r1, r3
 80008a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80008a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80008ac:	f04f 0000 	mov.w	r0, #0
 80008b0:	bd70      	pop	{r4, r5, r6, pc}
 80008b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80008b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80008ba:	bd70      	pop	{r4, r5, r6, pc}

080008bc <__aeabi_ddiv>:
 80008bc:	b570      	push	{r4, r5, r6, lr}
 80008be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80008c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80008c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008ca:	bf1d      	ittte	ne
 80008cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008d0:	ea94 0f0c 	teqne	r4, ip
 80008d4:	ea95 0f0c 	teqne	r5, ip
 80008d8:	f000 f8a7 	bleq	8000a2a <__aeabi_ddiv+0x16e>
 80008dc:	eba4 0405 	sub.w	r4, r4, r5
 80008e0:	ea81 0e03 	eor.w	lr, r1, r3
 80008e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008ec:	f000 8088 	beq.w	8000a00 <__aeabi_ddiv+0x144>
 80008f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000900:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000904:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000908:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800090c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000910:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000914:	429d      	cmp	r5, r3
 8000916:	bf08      	it	eq
 8000918:	4296      	cmpeq	r6, r2
 800091a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800091e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000922:	d202      	bcs.n	800092a <__aeabi_ddiv+0x6e>
 8000924:	085b      	lsrs	r3, r3, #1
 8000926:	ea4f 0232 	mov.w	r2, r2, rrx
 800092a:	1ab6      	subs	r6, r6, r2
 800092c:	eb65 0503 	sbc.w	r5, r5, r3
 8000930:	085b      	lsrs	r3, r3, #1
 8000932:	ea4f 0232 	mov.w	r2, r2, rrx
 8000936:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800093a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800093e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000942:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000946:	bf22      	ittt	cs
 8000948:	1ab6      	subcs	r6, r6, r2
 800094a:	4675      	movcs	r5, lr
 800094c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000950:	085b      	lsrs	r3, r3, #1
 8000952:	ea4f 0232 	mov.w	r2, r2, rrx
 8000956:	ebb6 0e02 	subs.w	lr, r6, r2
 800095a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800095e:	bf22      	ittt	cs
 8000960:	1ab6      	subcs	r6, r6, r2
 8000962:	4675      	movcs	r5, lr
 8000964:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000968:	085b      	lsrs	r3, r3, #1
 800096a:	ea4f 0232 	mov.w	r2, r2, rrx
 800096e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000972:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000976:	bf22      	ittt	cs
 8000978:	1ab6      	subcs	r6, r6, r2
 800097a:	4675      	movcs	r5, lr
 800097c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000980:	085b      	lsrs	r3, r3, #1
 8000982:	ea4f 0232 	mov.w	r2, r2, rrx
 8000986:	ebb6 0e02 	subs.w	lr, r6, r2
 800098a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800098e:	bf22      	ittt	cs
 8000990:	1ab6      	subcs	r6, r6, r2
 8000992:	4675      	movcs	r5, lr
 8000994:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000998:	ea55 0e06 	orrs.w	lr, r5, r6
 800099c:	d018      	beq.n	80009d0 <__aeabi_ddiv+0x114>
 800099e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80009a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80009a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80009aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80009ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80009b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80009b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80009ba:	d1c0      	bne.n	800093e <__aeabi_ddiv+0x82>
 80009bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009c0:	d10b      	bne.n	80009da <__aeabi_ddiv+0x11e>
 80009c2:	ea41 0100 	orr.w	r1, r1, r0
 80009c6:	f04f 0000 	mov.w	r0, #0
 80009ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009ce:	e7b6      	b.n	800093e <__aeabi_ddiv+0x82>
 80009d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009d4:	bf04      	itt	eq
 80009d6:	4301      	orreq	r1, r0
 80009d8:	2000      	moveq	r0, #0
 80009da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009de:	bf88      	it	hi
 80009e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009e4:	f63f aeaf 	bhi.w	8000746 <__aeabi_dmul+0xde>
 80009e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80009ec:	bf04      	itt	eq
 80009ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009f6:	f150 0000 	adcs.w	r0, r0, #0
 80009fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009fe:	bd70      	pop	{r4, r5, r6, pc}
 8000a00:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000a04:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000a08:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000a0c:	bfc2      	ittt	gt
 8000a0e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000a12:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000a16:	bd70      	popgt	{r4, r5, r6, pc}
 8000a18:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000a1c:	f04f 0e00 	mov.w	lr, #0
 8000a20:	3c01      	subs	r4, #1
 8000a22:	e690      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a24:	ea45 0e06 	orr.w	lr, r5, r6
 8000a28:	e68d      	b.n	8000746 <__aeabi_dmul+0xde>
 8000a2a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a2e:	ea94 0f0c 	teq	r4, ip
 8000a32:	bf08      	it	eq
 8000a34:	ea95 0f0c 	teqeq	r5, ip
 8000a38:	f43f af3b 	beq.w	80008b2 <__aeabi_dmul+0x24a>
 8000a3c:	ea94 0f0c 	teq	r4, ip
 8000a40:	d10a      	bne.n	8000a58 <__aeabi_ddiv+0x19c>
 8000a42:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a46:	f47f af34 	bne.w	80008b2 <__aeabi_dmul+0x24a>
 8000a4a:	ea95 0f0c 	teq	r5, ip
 8000a4e:	f47f af25 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a52:	4610      	mov	r0, r2
 8000a54:	4619      	mov	r1, r3
 8000a56:	e72c      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a58:	ea95 0f0c 	teq	r5, ip
 8000a5c:	d106      	bne.n	8000a6c <__aeabi_ddiv+0x1b0>
 8000a5e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a62:	f43f aefd 	beq.w	8000860 <__aeabi_dmul+0x1f8>
 8000a66:	4610      	mov	r0, r2
 8000a68:	4619      	mov	r1, r3
 8000a6a:	e722      	b.n	80008b2 <__aeabi_dmul+0x24a>
 8000a6c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a70:	bf18      	it	ne
 8000a72:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a76:	f47f aec5 	bne.w	8000804 <__aeabi_dmul+0x19c>
 8000a7a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a7e:	f47f af0d 	bne.w	800089c <__aeabi_dmul+0x234>
 8000a82:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a86:	f47f aeeb 	bne.w	8000860 <__aeabi_dmul+0x1f8>
 8000a8a:	e712      	b.n	80008b2 <__aeabi_dmul+0x24a>

08000a8c <__gedf2>:
 8000a8c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a90:	e006      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a92:	bf00      	nop

08000a94 <__ledf2>:
 8000a94:	f04f 0c01 	mov.w	ip, #1
 8000a98:	e002      	b.n	8000aa0 <__cmpdf2+0x4>
 8000a9a:	bf00      	nop

08000a9c <__cmpdf2>:
 8000a9c:	f04f 0c01 	mov.w	ip, #1
 8000aa0:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000aa4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000aa8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000ab0:	bf18      	it	ne
 8000ab2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000ab6:	d01b      	beq.n	8000af0 <__cmpdf2+0x54>
 8000ab8:	b001      	add	sp, #4
 8000aba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000abe:	bf0c      	ite	eq
 8000ac0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000ac4:	ea91 0f03 	teqne	r1, r3
 8000ac8:	bf02      	ittt	eq
 8000aca:	ea90 0f02 	teqeq	r0, r2
 8000ace:	2000      	moveq	r0, #0
 8000ad0:	4770      	bxeq	lr
 8000ad2:	f110 0f00 	cmn.w	r0, #0
 8000ad6:	ea91 0f03 	teq	r1, r3
 8000ada:	bf58      	it	pl
 8000adc:	4299      	cmppl	r1, r3
 8000ade:	bf08      	it	eq
 8000ae0:	4290      	cmpeq	r0, r2
 8000ae2:	bf2c      	ite	cs
 8000ae4:	17d8      	asrcs	r0, r3, #31
 8000ae6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000aea:	f040 0001 	orr.w	r0, r0, #1
 8000aee:	4770      	bx	lr
 8000af0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000af4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000af8:	d102      	bne.n	8000b00 <__cmpdf2+0x64>
 8000afa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000afe:	d107      	bne.n	8000b10 <__cmpdf2+0x74>
 8000b00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b08:	d1d6      	bne.n	8000ab8 <__cmpdf2+0x1c>
 8000b0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b0e:	d0d3      	beq.n	8000ab8 <__cmpdf2+0x1c>
 8000b10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000b14:	4770      	bx	lr
 8000b16:	bf00      	nop

08000b18 <__aeabi_cdrcmple>:
 8000b18:	4684      	mov	ip, r0
 8000b1a:	4610      	mov	r0, r2
 8000b1c:	4662      	mov	r2, ip
 8000b1e:	468c      	mov	ip, r1
 8000b20:	4619      	mov	r1, r3
 8000b22:	4663      	mov	r3, ip
 8000b24:	e000      	b.n	8000b28 <__aeabi_cdcmpeq>
 8000b26:	bf00      	nop

08000b28 <__aeabi_cdcmpeq>:
 8000b28:	b501      	push	{r0, lr}
 8000b2a:	f7ff ffb7 	bl	8000a9c <__cmpdf2>
 8000b2e:	2800      	cmp	r0, #0
 8000b30:	bf48      	it	mi
 8000b32:	f110 0f00 	cmnmi.w	r0, #0
 8000b36:	bd01      	pop	{r0, pc}

08000b38 <__aeabi_dcmpeq>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff fff4 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b40:	bf0c      	ite	eq
 8000b42:	2001      	moveq	r0, #1
 8000b44:	2000      	movne	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmplt>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffea 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b54:	bf34      	ite	cc
 8000b56:	2001      	movcc	r0, #1
 8000b58:	2000      	movcs	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmple>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffe0 	bl	8000b28 <__aeabi_cdcmpeq>
 8000b68:	bf94      	ite	ls
 8000b6a:	2001      	movls	r0, #1
 8000b6c:	2000      	movhi	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpge>:
 8000b74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b78:	f7ff ffce 	bl	8000b18 <__aeabi_cdrcmple>
 8000b7c:	bf94      	ite	ls
 8000b7e:	2001      	movls	r0, #1
 8000b80:	2000      	movhi	r0, #0
 8000b82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b86:	bf00      	nop

08000b88 <__aeabi_dcmpgt>:
 8000b88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b8c:	f7ff ffc4 	bl	8000b18 <__aeabi_cdrcmple>
 8000b90:	bf34      	ite	cc
 8000b92:	2001      	movcc	r0, #1
 8000b94:	2000      	movcs	r0, #0
 8000b96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b9a:	bf00      	nop

08000b9c <__aeabi_dcmpun>:
 8000b9c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000ba0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ba4:	d102      	bne.n	8000bac <__aeabi_dcmpun+0x10>
 8000ba6:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000baa:	d10a      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000bb0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000bb4:	d102      	bne.n	8000bbc <__aeabi_dcmpun+0x20>
 8000bb6:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000bba:	d102      	bne.n	8000bc2 <__aeabi_dcmpun+0x26>
 8000bbc:	f04f 0000 	mov.w	r0, #0
 8000bc0:	4770      	bx	lr
 8000bc2:	f04f 0001 	mov.w	r0, #1
 8000bc6:	4770      	bx	lr

08000bc8 <__aeabi_d2iz>:
 8000bc8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bcc:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bd0:	d215      	bcs.n	8000bfe <__aeabi_d2iz+0x36>
 8000bd2:	d511      	bpl.n	8000bf8 <__aeabi_d2iz+0x30>
 8000bd4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bd8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bdc:	d912      	bls.n	8000c04 <__aeabi_d2iz+0x3c>
 8000bde:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000be2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000be6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bea:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bee:	fa23 f002 	lsr.w	r0, r3, r2
 8000bf2:	bf18      	it	ne
 8000bf4:	4240      	negne	r0, r0
 8000bf6:	4770      	bx	lr
 8000bf8:	f04f 0000 	mov.w	r0, #0
 8000bfc:	4770      	bx	lr
 8000bfe:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000c02:	d105      	bne.n	8000c10 <__aeabi_d2iz+0x48>
 8000c04:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000c08:	bf08      	it	eq
 8000c0a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000c0e:	4770      	bx	lr
 8000c10:	f04f 0000 	mov.w	r0, #0
 8000c14:	4770      	bx	lr
 8000c16:	bf00      	nop

08000c18 <__aeabi_uldivmod>:
 8000c18:	b953      	cbnz	r3, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1a:	b94a      	cbnz	r2, 8000c30 <__aeabi_uldivmod+0x18>
 8000c1c:	2900      	cmp	r1, #0
 8000c1e:	bf08      	it	eq
 8000c20:	2800      	cmpeq	r0, #0
 8000c22:	bf1c      	itt	ne
 8000c24:	f04f 31ff 	movne.w	r1, #4294967295
 8000c28:	f04f 30ff 	movne.w	r0, #4294967295
 8000c2c:	f000 b970 	b.w	8000f10 <__aeabi_idiv0>
 8000c30:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c34:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c38:	f000 f806 	bl	8000c48 <__udivmoddi4>
 8000c3c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c40:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c44:	b004      	add	sp, #16
 8000c46:	4770      	bx	lr

08000c48 <__udivmoddi4>:
 8000c48:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c4c:	9e08      	ldr	r6, [sp, #32]
 8000c4e:	460d      	mov	r5, r1
 8000c50:	4604      	mov	r4, r0
 8000c52:	460f      	mov	r7, r1
 8000c54:	2b00      	cmp	r3, #0
 8000c56:	d14a      	bne.n	8000cee <__udivmoddi4+0xa6>
 8000c58:	428a      	cmp	r2, r1
 8000c5a:	4694      	mov	ip, r2
 8000c5c:	d965      	bls.n	8000d2a <__udivmoddi4+0xe2>
 8000c5e:	fab2 f382 	clz	r3, r2
 8000c62:	b143      	cbz	r3, 8000c76 <__udivmoddi4+0x2e>
 8000c64:	fa02 fc03 	lsl.w	ip, r2, r3
 8000c68:	f1c3 0220 	rsb	r2, r3, #32
 8000c6c:	409f      	lsls	r7, r3
 8000c6e:	fa20 f202 	lsr.w	r2, r0, r2
 8000c72:	4317      	orrs	r7, r2
 8000c74:	409c      	lsls	r4, r3
 8000c76:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000c7a:	fa1f f58c 	uxth.w	r5, ip
 8000c7e:	fbb7 f1fe 	udiv	r1, r7, lr
 8000c82:	0c22      	lsrs	r2, r4, #16
 8000c84:	fb0e 7711 	mls	r7, lr, r1, r7
 8000c88:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000c8c:	fb01 f005 	mul.w	r0, r1, r5
 8000c90:	4290      	cmp	r0, r2
 8000c92:	d90a      	bls.n	8000caa <__udivmoddi4+0x62>
 8000c94:	eb1c 0202 	adds.w	r2, ip, r2
 8000c98:	f101 37ff 	add.w	r7, r1, #4294967295
 8000c9c:	f080 811c 	bcs.w	8000ed8 <__udivmoddi4+0x290>
 8000ca0:	4290      	cmp	r0, r2
 8000ca2:	f240 8119 	bls.w	8000ed8 <__udivmoddi4+0x290>
 8000ca6:	3902      	subs	r1, #2
 8000ca8:	4462      	add	r2, ip
 8000caa:	1a12      	subs	r2, r2, r0
 8000cac:	b2a4      	uxth	r4, r4
 8000cae:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cb2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cb6:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000cba:	fb00 f505 	mul.w	r5, r0, r5
 8000cbe:	42a5      	cmp	r5, r4
 8000cc0:	d90a      	bls.n	8000cd8 <__udivmoddi4+0x90>
 8000cc2:	eb1c 0404 	adds.w	r4, ip, r4
 8000cc6:	f100 32ff 	add.w	r2, r0, #4294967295
 8000cca:	f080 8107 	bcs.w	8000edc <__udivmoddi4+0x294>
 8000cce:	42a5      	cmp	r5, r4
 8000cd0:	f240 8104 	bls.w	8000edc <__udivmoddi4+0x294>
 8000cd4:	4464      	add	r4, ip
 8000cd6:	3802      	subs	r0, #2
 8000cd8:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000cdc:	1b64      	subs	r4, r4, r5
 8000cde:	2100      	movs	r1, #0
 8000ce0:	b11e      	cbz	r6, 8000cea <__udivmoddi4+0xa2>
 8000ce2:	40dc      	lsrs	r4, r3
 8000ce4:	2300      	movs	r3, #0
 8000ce6:	e9c6 4300 	strd	r4, r3, [r6]
 8000cea:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cee:	428b      	cmp	r3, r1
 8000cf0:	d908      	bls.n	8000d04 <__udivmoddi4+0xbc>
 8000cf2:	2e00      	cmp	r6, #0
 8000cf4:	f000 80ed 	beq.w	8000ed2 <__udivmoddi4+0x28a>
 8000cf8:	2100      	movs	r1, #0
 8000cfa:	e9c6 0500 	strd	r0, r5, [r6]
 8000cfe:	4608      	mov	r0, r1
 8000d00:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d04:	fab3 f183 	clz	r1, r3
 8000d08:	2900      	cmp	r1, #0
 8000d0a:	d149      	bne.n	8000da0 <__udivmoddi4+0x158>
 8000d0c:	42ab      	cmp	r3, r5
 8000d0e:	d302      	bcc.n	8000d16 <__udivmoddi4+0xce>
 8000d10:	4282      	cmp	r2, r0
 8000d12:	f200 80f8 	bhi.w	8000f06 <__udivmoddi4+0x2be>
 8000d16:	1a84      	subs	r4, r0, r2
 8000d18:	eb65 0203 	sbc.w	r2, r5, r3
 8000d1c:	2001      	movs	r0, #1
 8000d1e:	4617      	mov	r7, r2
 8000d20:	2e00      	cmp	r6, #0
 8000d22:	d0e2      	beq.n	8000cea <__udivmoddi4+0xa2>
 8000d24:	e9c6 4700 	strd	r4, r7, [r6]
 8000d28:	e7df      	b.n	8000cea <__udivmoddi4+0xa2>
 8000d2a:	b902      	cbnz	r2, 8000d2e <__udivmoddi4+0xe6>
 8000d2c:	deff      	udf	#255	; 0xff
 8000d2e:	fab2 f382 	clz	r3, r2
 8000d32:	2b00      	cmp	r3, #0
 8000d34:	f040 8090 	bne.w	8000e58 <__udivmoddi4+0x210>
 8000d38:	1a8a      	subs	r2, r1, r2
 8000d3a:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d3e:	fa1f fe8c 	uxth.w	lr, ip
 8000d42:	2101      	movs	r1, #1
 8000d44:	fbb2 f5f7 	udiv	r5, r2, r7
 8000d48:	fb07 2015 	mls	r0, r7, r5, r2
 8000d4c:	0c22      	lsrs	r2, r4, #16
 8000d4e:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 8000d52:	fb0e f005 	mul.w	r0, lr, r5
 8000d56:	4290      	cmp	r0, r2
 8000d58:	d908      	bls.n	8000d6c <__udivmoddi4+0x124>
 8000d5a:	eb1c 0202 	adds.w	r2, ip, r2
 8000d5e:	f105 38ff 	add.w	r8, r5, #4294967295
 8000d62:	d202      	bcs.n	8000d6a <__udivmoddi4+0x122>
 8000d64:	4290      	cmp	r0, r2
 8000d66:	f200 80cb 	bhi.w	8000f00 <__udivmoddi4+0x2b8>
 8000d6a:	4645      	mov	r5, r8
 8000d6c:	1a12      	subs	r2, r2, r0
 8000d6e:	b2a4      	uxth	r4, r4
 8000d70:	fbb2 f0f7 	udiv	r0, r2, r7
 8000d74:	fb07 2210 	mls	r2, r7, r0, r2
 8000d78:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000d7c:	fb0e fe00 	mul.w	lr, lr, r0
 8000d80:	45a6      	cmp	lr, r4
 8000d82:	d908      	bls.n	8000d96 <__udivmoddi4+0x14e>
 8000d84:	eb1c 0404 	adds.w	r4, ip, r4
 8000d88:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d8c:	d202      	bcs.n	8000d94 <__udivmoddi4+0x14c>
 8000d8e:	45a6      	cmp	lr, r4
 8000d90:	f200 80bb 	bhi.w	8000f0a <__udivmoddi4+0x2c2>
 8000d94:	4610      	mov	r0, r2
 8000d96:	eba4 040e 	sub.w	r4, r4, lr
 8000d9a:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000d9e:	e79f      	b.n	8000ce0 <__udivmoddi4+0x98>
 8000da0:	f1c1 0720 	rsb	r7, r1, #32
 8000da4:	408b      	lsls	r3, r1
 8000da6:	fa22 fc07 	lsr.w	ip, r2, r7
 8000daa:	ea4c 0c03 	orr.w	ip, ip, r3
 8000dae:	fa05 f401 	lsl.w	r4, r5, r1
 8000db2:	fa20 f307 	lsr.w	r3, r0, r7
 8000db6:	40fd      	lsrs	r5, r7
 8000db8:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000dbc:	4323      	orrs	r3, r4
 8000dbe:	fbb5 f8f9 	udiv	r8, r5, r9
 8000dc2:	fa1f fe8c 	uxth.w	lr, ip
 8000dc6:	fb09 5518 	mls	r5, r9, r8, r5
 8000dca:	0c1c      	lsrs	r4, r3, #16
 8000dcc:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000dd0:	fb08 f50e 	mul.w	r5, r8, lr
 8000dd4:	42a5      	cmp	r5, r4
 8000dd6:	fa02 f201 	lsl.w	r2, r2, r1
 8000dda:	fa00 f001 	lsl.w	r0, r0, r1
 8000dde:	d90b      	bls.n	8000df8 <__udivmoddi4+0x1b0>
 8000de0:	eb1c 0404 	adds.w	r4, ip, r4
 8000de4:	f108 3aff 	add.w	sl, r8, #4294967295
 8000de8:	f080 8088 	bcs.w	8000efc <__udivmoddi4+0x2b4>
 8000dec:	42a5      	cmp	r5, r4
 8000dee:	f240 8085 	bls.w	8000efc <__udivmoddi4+0x2b4>
 8000df2:	f1a8 0802 	sub.w	r8, r8, #2
 8000df6:	4464      	add	r4, ip
 8000df8:	1b64      	subs	r4, r4, r5
 8000dfa:	b29d      	uxth	r5, r3
 8000dfc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e00:	fb09 4413 	mls	r4, r9, r3, r4
 8000e04:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000e08:	fb03 fe0e 	mul.w	lr, r3, lr
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	d908      	bls.n	8000e22 <__udivmoddi4+0x1da>
 8000e10:	eb1c 0404 	adds.w	r4, ip, r4
 8000e14:	f103 35ff 	add.w	r5, r3, #4294967295
 8000e18:	d26c      	bcs.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1a:	45a6      	cmp	lr, r4
 8000e1c:	d96a      	bls.n	8000ef4 <__udivmoddi4+0x2ac>
 8000e1e:	3b02      	subs	r3, #2
 8000e20:	4464      	add	r4, ip
 8000e22:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000e26:	fba3 9502 	umull	r9, r5, r3, r2
 8000e2a:	eba4 040e 	sub.w	r4, r4, lr
 8000e2e:	42ac      	cmp	r4, r5
 8000e30:	46c8      	mov	r8, r9
 8000e32:	46ae      	mov	lr, r5
 8000e34:	d356      	bcc.n	8000ee4 <__udivmoddi4+0x29c>
 8000e36:	d053      	beq.n	8000ee0 <__udivmoddi4+0x298>
 8000e38:	b156      	cbz	r6, 8000e50 <__udivmoddi4+0x208>
 8000e3a:	ebb0 0208 	subs.w	r2, r0, r8
 8000e3e:	eb64 040e 	sbc.w	r4, r4, lr
 8000e42:	fa04 f707 	lsl.w	r7, r4, r7
 8000e46:	40ca      	lsrs	r2, r1
 8000e48:	40cc      	lsrs	r4, r1
 8000e4a:	4317      	orrs	r7, r2
 8000e4c:	e9c6 7400 	strd	r7, r4, [r6]
 8000e50:	4618      	mov	r0, r3
 8000e52:	2100      	movs	r1, #0
 8000e54:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e58:	f1c3 0120 	rsb	r1, r3, #32
 8000e5c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000e60:	fa20 f201 	lsr.w	r2, r0, r1
 8000e64:	fa25 f101 	lsr.w	r1, r5, r1
 8000e68:	409d      	lsls	r5, r3
 8000e6a:	432a      	orrs	r2, r5
 8000e6c:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e70:	fa1f fe8c 	uxth.w	lr, ip
 8000e74:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e78:	fb07 1510 	mls	r5, r7, r0, r1
 8000e7c:	0c11      	lsrs	r1, r2, #16
 8000e7e:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 8000e82:	fb00 f50e 	mul.w	r5, r0, lr
 8000e86:	428d      	cmp	r5, r1
 8000e88:	fa04 f403 	lsl.w	r4, r4, r3
 8000e8c:	d908      	bls.n	8000ea0 <__udivmoddi4+0x258>
 8000e8e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e92:	f100 38ff 	add.w	r8, r0, #4294967295
 8000e96:	d22f      	bcs.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e98:	428d      	cmp	r5, r1
 8000e9a:	d92d      	bls.n	8000ef8 <__udivmoddi4+0x2b0>
 8000e9c:	3802      	subs	r0, #2
 8000e9e:	4461      	add	r1, ip
 8000ea0:	1b49      	subs	r1, r1, r5
 8000ea2:	b292      	uxth	r2, r2
 8000ea4:	fbb1 f5f7 	udiv	r5, r1, r7
 8000ea8:	fb07 1115 	mls	r1, r7, r5, r1
 8000eac:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000eb0:	fb05 f10e 	mul.w	r1, r5, lr
 8000eb4:	4291      	cmp	r1, r2
 8000eb6:	d908      	bls.n	8000eca <__udivmoddi4+0x282>
 8000eb8:	eb1c 0202 	adds.w	r2, ip, r2
 8000ebc:	f105 38ff 	add.w	r8, r5, #4294967295
 8000ec0:	d216      	bcs.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec2:	4291      	cmp	r1, r2
 8000ec4:	d914      	bls.n	8000ef0 <__udivmoddi4+0x2a8>
 8000ec6:	3d02      	subs	r5, #2
 8000ec8:	4462      	add	r2, ip
 8000eca:	1a52      	subs	r2, r2, r1
 8000ecc:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000ed0:	e738      	b.n	8000d44 <__udivmoddi4+0xfc>
 8000ed2:	4631      	mov	r1, r6
 8000ed4:	4630      	mov	r0, r6
 8000ed6:	e708      	b.n	8000cea <__udivmoddi4+0xa2>
 8000ed8:	4639      	mov	r1, r7
 8000eda:	e6e6      	b.n	8000caa <__udivmoddi4+0x62>
 8000edc:	4610      	mov	r0, r2
 8000ede:	e6fb      	b.n	8000cd8 <__udivmoddi4+0x90>
 8000ee0:	4548      	cmp	r0, r9
 8000ee2:	d2a9      	bcs.n	8000e38 <__udivmoddi4+0x1f0>
 8000ee4:	ebb9 0802 	subs.w	r8, r9, r2
 8000ee8:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000eec:	3b01      	subs	r3, #1
 8000eee:	e7a3      	b.n	8000e38 <__udivmoddi4+0x1f0>
 8000ef0:	4645      	mov	r5, r8
 8000ef2:	e7ea      	b.n	8000eca <__udivmoddi4+0x282>
 8000ef4:	462b      	mov	r3, r5
 8000ef6:	e794      	b.n	8000e22 <__udivmoddi4+0x1da>
 8000ef8:	4640      	mov	r0, r8
 8000efa:	e7d1      	b.n	8000ea0 <__udivmoddi4+0x258>
 8000efc:	46d0      	mov	r8, sl
 8000efe:	e77b      	b.n	8000df8 <__udivmoddi4+0x1b0>
 8000f00:	3d02      	subs	r5, #2
 8000f02:	4462      	add	r2, ip
 8000f04:	e732      	b.n	8000d6c <__udivmoddi4+0x124>
 8000f06:	4608      	mov	r0, r1
 8000f08:	e70a      	b.n	8000d20 <__udivmoddi4+0xd8>
 8000f0a:	4464      	add	r4, ip
 8000f0c:	3802      	subs	r0, #2
 8000f0e:	e742      	b.n	8000d96 <__udivmoddi4+0x14e>

08000f10 <__aeabi_idiv0>:
 8000f10:	4770      	bx	lr
 8000f12:	bf00      	nop

08000f14 <MX_ADC1_Init>:
DMA_HandleTypeDef hdma_adc1;
DMA_HandleTypeDef hdma_adc2;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b08c      	sub	sp, #48	; 0x30
 8000f18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 8000f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000f1e:	2200      	movs	r2, #0
 8000f20:	601a      	str	r2, [r3, #0]
 8000f22:	605a      	str	r2, [r3, #4]
 8000f24:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 8000f26:	1d3b      	adds	r3, r7, #4
 8000f28:	2220      	movs	r2, #32
 8000f2a:	2100      	movs	r1, #0
 8000f2c:	4618      	mov	r0, r3
 8000f2e:	f009 fa9c 	bl	800a46a <memset>

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 8000f32:	4b33      	ldr	r3, [pc, #204]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f34:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000f38:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000f3a:	4b31      	ldr	r3, [pc, #196]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f3c:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f40:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f42:	4b2f      	ldr	r3, [pc, #188]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f44:	2200      	movs	r2, #0
 8000f46:	609a      	str	r2, [r3, #8]
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f48:	4b2d      	ldr	r3, [pc, #180]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f4a:	2200      	movs	r2, #0
 8000f4c:	60da      	str	r2, [r3, #12]
  hadc1.Init.GainCompensation = 0;
 8000f4e:	4b2c      	ldr	r3, [pc, #176]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f50:	2200      	movs	r2, #0
 8000f52:	611a      	str	r2, [r3, #16]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000f54:	4b2a      	ldr	r3, [pc, #168]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f56:	2200      	movs	r2, #0
 8000f58:	615a      	str	r2, [r3, #20]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f5a:	4b29      	ldr	r3, [pc, #164]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f5c:	2204      	movs	r2, #4
 8000f5e:	619a      	str	r2, [r3, #24]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000f60:	4b27      	ldr	r3, [pc, #156]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000f66:	4b26      	ldr	r3, [pc, #152]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	775a      	strb	r2, [r3, #29]
  hadc1.Init.NbrOfConversion = 1;
 8000f6c:	4b24      	ldr	r3, [pc, #144]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f6e:	2201      	movs	r2, #1
 8000f70:	621a      	str	r2, [r3, #32]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f72:	4b23      	ldr	r3, [pc, #140]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8000f7a:	4b21      	ldr	r3, [pc, #132]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f7c:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8000f80:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8000f82:	4b1f      	ldr	r3, [pc, #124]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f84:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f88:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8000f8a:	4b1d      	ldr	r3, [pc, #116]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f8c:	2201      	movs	r2, #1
 8000f8e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000f92:	4b1b      	ldr	r3, [pc, #108]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc1.Init.OversamplingMode = DISABLE;
 8000f98:	4b19      	ldr	r3, [pc, #100]	; (8001000 <MX_ADC1_Init+0xec>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000fa0:	4817      	ldr	r0, [pc, #92]	; (8001000 <MX_ADC1_Init+0xec>)
 8000fa2:	f001 fe11 	bl	8002bc8 <HAL_ADC_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_ADC1_Init+0x9c>
  {
    Error_Handler();
 8000fac:	f000 fbda 	bl	8001764 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000fb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000fb8:	4619      	mov	r1, r3
 8000fba:	4811      	ldr	r0, [pc, #68]	; (8001000 <MX_ADC1_Init+0xec>)
 8000fbc:	f002 fef8 	bl	8003db0 <HAL_ADCEx_MultiModeConfigChannel>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_ADC1_Init+0xb6>
  {
    Error_Handler();
 8000fc6:	f000 fbcd 	bl	8001764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_2;
 8000fca:	4b0e      	ldr	r3, [pc, #56]	; (8001004 <MX_ADC1_Init+0xf0>)
 8000fcc:	607b      	str	r3, [r7, #4]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000fce:	2306      	movs	r3, #6
 8000fd0:	60bb      	str	r3, [r7, #8]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 8000fd2:	2302      	movs	r3, #2
 8000fd4:	60fb      	str	r3, [r7, #12]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000fd6:	237f      	movs	r3, #127	; 0x7f
 8000fd8:	613b      	str	r3, [r7, #16]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000fda:	2304      	movs	r3, #4
 8000fdc:	617b      	str	r3, [r7, #20]
  sConfig.Offset = 0;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	61bb      	str	r3, [r7, #24]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4806      	ldr	r0, [pc, #24]	; (8001000 <MX_ADC1_Init+0xec>)
 8000fe8:	f002 f898 	bl	800311c <HAL_ADC_ConfigChannel>
 8000fec:	4603      	mov	r3, r0
 8000fee:	2b00      	cmp	r3, #0
 8000ff0:	d001      	beq.n	8000ff6 <MX_ADC1_Init+0xe2>
  {
    Error_Handler();
 8000ff2:	f000 fbb7 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ff6:	bf00      	nop
 8000ff8:	3730      	adds	r7, #48	; 0x30
 8000ffa:	46bd      	mov	sp, r7
 8000ffc:	bd80      	pop	{r7, pc}
 8000ffe:	bf00      	nop
 8001000:	200002b4 	.word	0x200002b4
 8001004:	08600004 	.word	0x08600004

08001008 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8001008:	b580      	push	{r7, lr}
 800100a:	b088      	sub	sp, #32
 800100c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800100e:	463b      	mov	r3, r7
 8001010:	2220      	movs	r2, #32
 8001012:	2100      	movs	r1, #0
 8001014:	4618      	mov	r0, r3
 8001016:	f009 fa28 	bl	800a46a <memset>

  /* USER CODE END ADC2_Init 1 */

  /** Common config
  */
  hadc2.Instance = ADC2;
 800101a:	4b33      	ldr	r3, [pc, #204]	; (80010e8 <MX_ADC2_Init+0xe0>)
 800101c:	4a33      	ldr	r2, [pc, #204]	; (80010ec <MX_ADC2_Init+0xe4>)
 800101e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8001020:	4b31      	ldr	r3, [pc, #196]	; (80010e8 <MX_ADC2_Init+0xe0>)
 8001022:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001026:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001028:	4b2f      	ldr	r3, [pc, #188]	; (80010e8 <MX_ADC2_Init+0xe0>)
 800102a:	2200      	movs	r2, #0
 800102c:	609a      	str	r2, [r3, #8]
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800102e:	4b2e      	ldr	r3, [pc, #184]	; (80010e8 <MX_ADC2_Init+0xe0>)
 8001030:	2200      	movs	r2, #0
 8001032:	60da      	str	r2, [r3, #12]
  hadc2.Init.GainCompensation = 0;
 8001034:	4b2c      	ldr	r3, [pc, #176]	; (80010e8 <MX_ADC2_Init+0xe0>)
 8001036:	2200      	movs	r2, #0
 8001038:	611a      	str	r2, [r3, #16]
  hadc2.Init.ScanConvMode = ADC_SCAN_ENABLE;
 800103a:	4b2b      	ldr	r3, [pc, #172]	; (80010e8 <MX_ADC2_Init+0xe0>)
 800103c:	2201      	movs	r2, #1
 800103e:	615a      	str	r2, [r3, #20]
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8001040:	4b29      	ldr	r3, [pc, #164]	; (80010e8 <MX_ADC2_Init+0xe0>)
 8001042:	2204      	movs	r2, #4
 8001044:	619a      	str	r2, [r3, #24]
  hadc2.Init.LowPowerAutoWait = DISABLE;
 8001046:	4b28      	ldr	r3, [pc, #160]	; (80010e8 <MX_ADC2_Init+0xe0>)
 8001048:	2200      	movs	r2, #0
 800104a:	771a      	strb	r2, [r3, #28]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800104c:	4b26      	ldr	r3, [pc, #152]	; (80010e8 <MX_ADC2_Init+0xe0>)
 800104e:	2200      	movs	r2, #0
 8001050:	775a      	strb	r2, [r3, #29]
  hadc2.Init.NbrOfConversion = 2;
 8001052:	4b25      	ldr	r3, [pc, #148]	; (80010e8 <MX_ADC2_Init+0xe0>)
 8001054:	2202      	movs	r2, #2
 8001056:	621a      	str	r2, [r3, #32]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001058:	4b23      	ldr	r3, [pc, #140]	; (80010e8 <MX_ADC2_Init+0xe0>)
 800105a:	2200      	movs	r2, #0
 800105c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24
  hadc2.Init.ExternalTrigConv = ADC_EXTERNALTRIG_T1_TRGO;
 8001060:	4b21      	ldr	r3, [pc, #132]	; (80010e8 <MX_ADC2_Init+0xe0>)
 8001062:	f44f 62a4 	mov.w	r2, #1312	; 0x520
 8001066:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8001068:	4b1f      	ldr	r3, [pc, #124]	; (80010e8 <MX_ADC2_Init+0xe0>)
 800106a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800106e:	631a      	str	r2, [r3, #48]	; 0x30
  hadc2.Init.DMAContinuousRequests = ENABLE;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_ADC2_Init+0xe0>)
 8001072:	2201      	movs	r2, #1
 8001074:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hadc2.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8001078:	4b1b      	ldr	r3, [pc, #108]	; (80010e8 <MX_ADC2_Init+0xe0>)
 800107a:	2200      	movs	r2, #0
 800107c:	63da      	str	r2, [r3, #60]	; 0x3c
  hadc2.Init.OversamplingMode = DISABLE;
 800107e:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_ADC2_Init+0xe0>)
 8001080:	2200      	movs	r2, #0
 8001082:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 8001086:	4818      	ldr	r0, [pc, #96]	; (80010e8 <MX_ADC2_Init+0xe0>)
 8001088:	f001 fd9e 	bl	8002bc8 <HAL_ADC_Init>
 800108c:	4603      	mov	r3, r0
 800108e:	2b00      	cmp	r3, #0
 8001090:	d001      	beq.n	8001096 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 8001092:	f000 fb67 	bl	8001764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_6;
 8001096:	4b16      	ldr	r3, [pc, #88]	; (80010f0 <MX_ADC2_Init+0xe8>)
 8001098:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 800109a:	2306      	movs	r3, #6
 800109c:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_12CYCLES_5;
 800109e:	2302      	movs	r3, #2
 80010a0:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 80010a2:	237f      	movs	r3, #127	; 0x7f
 80010a4:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 80010a6:	2304      	movs	r3, #4
 80010a8:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 80010aa:	2300      	movs	r3, #0
 80010ac:	617b      	str	r3, [r7, #20]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010ae:	463b      	mov	r3, r7
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_ADC2_Init+0xe0>)
 80010b4:	f002 f832 	bl	800311c <HAL_ADC_ConfigChannel>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_ADC2_Init+0xba>
  {
    Error_Handler();
 80010be:	f000 fb51 	bl	8001764 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_7;
 80010c2:	4b0c      	ldr	r3, [pc, #48]	; (80010f4 <MX_ADC2_Init+0xec>)
 80010c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_2;
 80010c6:	230c      	movs	r3, #12
 80010c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_ADC2_Init+0xe0>)
 80010d0:	f002 f824 	bl	800311c <HAL_ADC_ConfigChannel>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_ADC2_Init+0xd6>
  {
    Error_Handler();
 80010da:	f000 fb43 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	20000320 	.word	0x20000320
 80010ec:	50000100 	.word	0x50000100
 80010f0:	19200040 	.word	0x19200040
 80010f4:	1d500080 	.word	0x1d500080

080010f8 <HAL_ADC_MspInit>:

static uint32_t HAL_RCC_ADC12_CLK_ENABLED=0;

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 80010f8:	b580      	push	{r7, lr}
 80010fa:	b0a4      	sub	sp, #144	; 0x90
 80010fc:	af00      	add	r7, sp, #0
 80010fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001100:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001104:	2200      	movs	r2, #0
 8001106:	601a      	str	r2, [r3, #0]
 8001108:	605a      	str	r2, [r3, #4]
 800110a:	609a      	str	r2, [r3, #8]
 800110c:	60da      	str	r2, [r3, #12]
 800110e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001110:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001114:	2254      	movs	r2, #84	; 0x54
 8001116:	2100      	movs	r1, #0
 8001118:	4618      	mov	r0, r3
 800111a:	f009 f9a6 	bl	800a46a <memset>
  if(adcHandle->Instance==ADC1)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	681b      	ldr	r3, [r3, #0]
 8001122:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001126:	f040 80a0 	bne.w	800126a <HAL_ADC_MspInit+0x172>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 800112a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800112e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 8001130:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001134:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001136:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800113a:	4618      	mov	r0, r3
 800113c:	f004 fb2a 	bl	8005794 <HAL_RCCEx_PeriphCLKConfig>
 8001140:	4603      	mov	r3, r0
 8001142:	2b00      	cmp	r3, #0
 8001144:	d001      	beq.n	800114a <HAL_ADC_MspInit+0x52>
    {
      Error_Handler();
 8001146:	f000 fb0d 	bl	8001764 <Error_Handler>
    }

    /* ADC1 clock enable */
    HAL_RCC_ADC12_CLK_ENABLED++;
 800114a:	4b9c      	ldr	r3, [pc, #624]	; (80013bc <HAL_ADC_MspInit+0x2c4>)
 800114c:	681b      	ldr	r3, [r3, #0]
 800114e:	3301      	adds	r3, #1
 8001150:	4a9a      	ldr	r2, [pc, #616]	; (80013bc <HAL_ADC_MspInit+0x2c4>)
 8001152:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 8001154:	4b99      	ldr	r3, [pc, #612]	; (80013bc <HAL_ADC_MspInit+0x2c4>)
 8001156:	681b      	ldr	r3, [r3, #0]
 8001158:	2b01      	cmp	r3, #1
 800115a:	d10b      	bne.n	8001174 <HAL_ADC_MspInit+0x7c>
      __HAL_RCC_ADC12_CLK_ENABLE();
 800115c:	4b98      	ldr	r3, [pc, #608]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 800115e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001160:	4a97      	ldr	r2, [pc, #604]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 8001162:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001166:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001168:	4b95      	ldr	r3, [pc, #596]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 800116a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001170:	627b      	str	r3, [r7, #36]	; 0x24
 8001172:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    }

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001174:	4b92      	ldr	r3, [pc, #584]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 8001176:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001178:	4a91      	ldr	r2, [pc, #580]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 800117a:	f043 0304 	orr.w	r3, r3, #4
 800117e:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001180:	4b8f      	ldr	r3, [pc, #572]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 8001182:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001184:	f003 0304 	and.w	r3, r3, #4
 8001188:	623b      	str	r3, [r7, #32]
 800118a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800118c:	4b8c      	ldr	r3, [pc, #560]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 800118e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001190:	4a8b      	ldr	r2, [pc, #556]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 8001192:	f043 0301 	orr.w	r3, r3, #1
 8001196:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001198:	4b89      	ldr	r3, [pc, #548]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 800119a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800119c:	f003 0301 	and.w	r3, r3, #1
 80011a0:	61fb      	str	r3, [r7, #28]
 80011a2:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011a4:	4b86      	ldr	r3, [pc, #536]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80011a6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011a8:	4a85      	ldr	r2, [pc, #532]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80011aa:	f043 0302 	orr.w	r3, r3, #2
 80011ae:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011b0:	4b83      	ldr	r3, [pc, #524]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80011b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011b4:	f003 0302 	and.w	r3, r3, #2
 80011b8:	61bb      	str	r3, [r7, #24]
 80011ba:	69bb      	ldr	r3, [r7, #24]
    PC2     ------> ADC1_IN8
    PA1     ------> ADC1_IN2
    PB0     ------> ADC1_IN15
    PB1     ------> ADC1_IN12
    */
    GPIO_InitStruct.Pin = Bus_Imes_Pin;
 80011bc:	2304      	movs	r3, #4
 80011be:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011c0:	2303      	movs	r3, #3
 80011c2:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011c6:	2300      	movs	r3, #0
 80011c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_Imes_GPIO_Port, &GPIO_InitStruct);
 80011cc:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011d0:	4619      	mov	r1, r3
 80011d2:	487c      	ldr	r0, [pc, #496]	; (80013c4 <HAL_ADC_MspInit+0x2cc>)
 80011d4:	f003 fb06 	bl	80047e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_Imes_Pin;
 80011d8:	2302      	movs	r3, #2
 80011da:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011dc:	2303      	movs	r3, #3
 80011de:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e2:	2300      	movs	r3, #0
 80011e4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(U_Imes_GPIO_Port, &GPIO_InitStruct);
 80011e8:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 80011ec:	4619      	mov	r1, r3
 80011ee:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80011f2:	f003 faf7 	bl	80047e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80011f6:	2303      	movs	r3, #3
 80011f8:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80011fa:	2303      	movs	r3, #3
 80011fc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001206:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800120a:	4619      	mov	r1, r3
 800120c:	486e      	ldr	r0, [pc, #440]	; (80013c8 <HAL_ADC_MspInit+0x2d0>)
 800120e:	f003 fae9 	bl	80047e4 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA1_Channel2;
 8001212:	4b6e      	ldr	r3, [pc, #440]	; (80013cc <HAL_ADC_MspInit+0x2d4>)
 8001214:	4a6e      	ldr	r2, [pc, #440]	; (80013d0 <HAL_ADC_MspInit+0x2d8>)
 8001216:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Request = DMA_REQUEST_ADC1;
 8001218:	4b6c      	ldr	r3, [pc, #432]	; (80013cc <HAL_ADC_MspInit+0x2d4>)
 800121a:	2205      	movs	r2, #5
 800121c:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800121e:	4b6b      	ldr	r3, [pc, #428]	; (80013cc <HAL_ADC_MspInit+0x2d4>)
 8001220:	2200      	movs	r2, #0
 8001222:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8001224:	4b69      	ldr	r3, [pc, #420]	; (80013cc <HAL_ADC_MspInit+0x2d4>)
 8001226:	2200      	movs	r2, #0
 8001228:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 800122a:	4b68      	ldr	r3, [pc, #416]	; (80013cc <HAL_ADC_MspInit+0x2d4>)
 800122c:	2280      	movs	r2, #128	; 0x80
 800122e:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8001230:	4b66      	ldr	r3, [pc, #408]	; (80013cc <HAL_ADC_MspInit+0x2d4>)
 8001232:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001236:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001238:	4b64      	ldr	r3, [pc, #400]	; (80013cc <HAL_ADC_MspInit+0x2d4>)
 800123a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800123e:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 8001240:	4b62      	ldr	r3, [pc, #392]	; (80013cc <HAL_ADC_MspInit+0x2d4>)
 8001242:	2220      	movs	r2, #32
 8001244:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8001246:	4b61      	ldr	r3, [pc, #388]	; (80013cc <HAL_ADC_MspInit+0x2d4>)
 8001248:	2200      	movs	r2, #0
 800124a:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 800124c:	485f      	ldr	r0, [pc, #380]	; (80013cc <HAL_ADC_MspInit+0x2d4>)
 800124e:	f002 ff97 	bl	8004180 <HAL_DMA_Init>
 8001252:	4603      	mov	r3, r0
 8001254:	2b00      	cmp	r3, #0
 8001256:	d001      	beq.n	800125c <HAL_ADC_MspInit+0x164>
    {
      Error_Handler();
 8001258:	f000 fa84 	bl	8001764 <Error_Handler>
    }

    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc1);
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	4a5b      	ldr	r2, [pc, #364]	; (80013cc <HAL_ADC_MspInit+0x2d4>)
 8001260:	655a      	str	r2, [r3, #84]	; 0x54
 8001262:	4a5a      	ldr	r2, [pc, #360]	; (80013cc <HAL_ADC_MspInit+0x2d4>)
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	6293      	str	r3, [r2, #40]	; 0x28

  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }
}
 8001268:	e0a4      	b.n	80013b4 <HAL_ADC_MspInit+0x2bc>
  else if(adcHandle->Instance==ADC2)
 800126a:	687b      	ldr	r3, [r7, #4]
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	4a59      	ldr	r2, [pc, #356]	; (80013d4 <HAL_ADC_MspInit+0x2dc>)
 8001270:	4293      	cmp	r3, r2
 8001272:	f040 809f 	bne.w	80013b4 <HAL_ADC_MspInit+0x2bc>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_ADC12;
 8001276:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800127a:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInit.Adc12ClockSelection = RCC_ADC12CLKSOURCE_SYSCLK;
 800127c:	f04f 5300 	mov.w	r3, #536870912	; 0x20000000
 8001280:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001282:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001286:	4618      	mov	r0, r3
 8001288:	f004 fa84 	bl	8005794 <HAL_RCCEx_PeriphCLKConfig>
 800128c:	4603      	mov	r3, r0
 800128e:	2b00      	cmp	r3, #0
 8001290:	d001      	beq.n	8001296 <HAL_ADC_MspInit+0x19e>
      Error_Handler();
 8001292:	f000 fa67 	bl	8001764 <Error_Handler>
    HAL_RCC_ADC12_CLK_ENABLED++;
 8001296:	4b49      	ldr	r3, [pc, #292]	; (80013bc <HAL_ADC_MspInit+0x2c4>)
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	3301      	adds	r3, #1
 800129c:	4a47      	ldr	r2, [pc, #284]	; (80013bc <HAL_ADC_MspInit+0x2c4>)
 800129e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_ADC12_CLK_ENABLED==1){
 80012a0:	4b46      	ldr	r3, [pc, #280]	; (80013bc <HAL_ADC_MspInit+0x2c4>)
 80012a2:	681b      	ldr	r3, [r3, #0]
 80012a4:	2b01      	cmp	r3, #1
 80012a6:	d10b      	bne.n	80012c0 <HAL_ADC_MspInit+0x1c8>
      __HAL_RCC_ADC12_CLK_ENABLE();
 80012a8:	4b45      	ldr	r3, [pc, #276]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80012aa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012ac:	4a44      	ldr	r2, [pc, #272]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80012ae:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80012b2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012b4:	4b42      	ldr	r3, [pc, #264]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80012b6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80012c0:	4b3f      	ldr	r3, [pc, #252]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80012c2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012c4:	4a3e      	ldr	r2, [pc, #248]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80012c6:	f043 0304 	orr.w	r3, r3, #4
 80012ca:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012cc:	4b3c      	ldr	r3, [pc, #240]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80012ce:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012d0:	f003 0304 	and.w	r3, r3, #4
 80012d4:	613b      	str	r3, [r7, #16]
 80012d6:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80012d8:	4b39      	ldr	r3, [pc, #228]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80012da:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012dc:	4a38      	ldr	r2, [pc, #224]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80012de:	f043 0301 	orr.w	r3, r3, #1
 80012e2:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012e4:	4b36      	ldr	r3, [pc, #216]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80012e6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012e8:	f003 0301 	and.w	r3, r3, #1
 80012ec:	60fb      	str	r3, [r7, #12]
 80012ee:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80012f0:	4b33      	ldr	r3, [pc, #204]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80012f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012f4:	4a32      	ldr	r2, [pc, #200]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80012f6:	f043 0302 	orr.w	r3, r3, #2
 80012fa:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012fc:	4b30      	ldr	r3, [pc, #192]	; (80013c0 <HAL_ADC_MspInit+0x2c8>)
 80012fe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001300:	f003 0302 	and.w	r3, r3, #2
 8001304:	60bb      	str	r3, [r7, #8]
 8001306:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = U_VPh_Pin|W_VPh_Pin|V_VPh_Pin;
 8001308:	230b      	movs	r3, #11
 800130a:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800130c:	2303      	movs	r3, #3
 800130e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001312:	2300      	movs	r3, #0
 8001314:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001318:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 800131c:	4619      	mov	r1, r3
 800131e:	4829      	ldr	r0, [pc, #164]	; (80013c4 <HAL_ADC_MspInit+0x2cc>)
 8001320:	f003 fa60 	bl	80047e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = Bus_V_Pin;
 8001324:	2301      	movs	r3, #1
 8001326:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001328:	2303      	movs	r3, #3
 800132a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(Bus_V_GPIO_Port, &GPIO_InitStruct);
 8001334:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001338:	4619      	mov	r1, r3
 800133a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800133e:	f003 fa51 	bl	80047e4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = V_Imes_Pin;
 8001342:	2304      	movs	r3, #4
 8001344:	67fb      	str	r3, [r7, #124]	; 0x7c
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001346:	2303      	movs	r3, #3
 8001348:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134c:	2300      	movs	r3, #0
 800134e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
    HAL_GPIO_Init(V_Imes_GPIO_Port, &GPIO_InitStruct);
 8001352:	f107 037c 	add.w	r3, r7, #124	; 0x7c
 8001356:	4619      	mov	r1, r3
 8001358:	481b      	ldr	r0, [pc, #108]	; (80013c8 <HAL_ADC_MspInit+0x2d0>)
 800135a:	f003 fa43 	bl	80047e4 <HAL_GPIO_Init>
    hdma_adc2.Instance = DMA1_Channel1;
 800135e:	4b1e      	ldr	r3, [pc, #120]	; (80013d8 <HAL_ADC_MspInit+0x2e0>)
 8001360:	4a1e      	ldr	r2, [pc, #120]	; (80013dc <HAL_ADC_MspInit+0x2e4>)
 8001362:	601a      	str	r2, [r3, #0]
    hdma_adc2.Init.Request = DMA_REQUEST_ADC2;
 8001364:	4b1c      	ldr	r3, [pc, #112]	; (80013d8 <HAL_ADC_MspInit+0x2e0>)
 8001366:	2224      	movs	r2, #36	; 0x24
 8001368:	605a      	str	r2, [r3, #4]
    hdma_adc2.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800136a:	4b1b      	ldr	r3, [pc, #108]	; (80013d8 <HAL_ADC_MspInit+0x2e0>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
    hdma_adc2.Init.PeriphInc = DMA_PINC_DISABLE;
 8001370:	4b19      	ldr	r3, [pc, #100]	; (80013d8 <HAL_ADC_MspInit+0x2e0>)
 8001372:	2200      	movs	r2, #0
 8001374:	60da      	str	r2, [r3, #12]
    hdma_adc2.Init.MemInc = DMA_MINC_ENABLE;
 8001376:	4b18      	ldr	r3, [pc, #96]	; (80013d8 <HAL_ADC_MspInit+0x2e0>)
 8001378:	2280      	movs	r2, #128	; 0x80
 800137a:	611a      	str	r2, [r3, #16]
    hdma_adc2.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800137c:	4b16      	ldr	r3, [pc, #88]	; (80013d8 <HAL_ADC_MspInit+0x2e0>)
 800137e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001382:	615a      	str	r2, [r3, #20]
    hdma_adc2.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8001384:	4b14      	ldr	r3, [pc, #80]	; (80013d8 <HAL_ADC_MspInit+0x2e0>)
 8001386:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800138a:	619a      	str	r2, [r3, #24]
    hdma_adc2.Init.Mode = DMA_CIRCULAR;
 800138c:	4b12      	ldr	r3, [pc, #72]	; (80013d8 <HAL_ADC_MspInit+0x2e0>)
 800138e:	2220      	movs	r2, #32
 8001390:	61da      	str	r2, [r3, #28]
    hdma_adc2.Init.Priority = DMA_PRIORITY_LOW;
 8001392:	4b11      	ldr	r3, [pc, #68]	; (80013d8 <HAL_ADC_MspInit+0x2e0>)
 8001394:	2200      	movs	r2, #0
 8001396:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_adc2) != HAL_OK)
 8001398:	480f      	ldr	r0, [pc, #60]	; (80013d8 <HAL_ADC_MspInit+0x2e0>)
 800139a:	f002 fef1 	bl	8004180 <HAL_DMA_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <HAL_ADC_MspInit+0x2b0>
      Error_Handler();
 80013a4:	f000 f9de 	bl	8001764 <Error_Handler>
    __HAL_LINKDMA(adcHandle,DMA_Handle,hdma_adc2);
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	4a0b      	ldr	r2, [pc, #44]	; (80013d8 <HAL_ADC_MspInit+0x2e0>)
 80013ac:	655a      	str	r2, [r3, #84]	; 0x54
 80013ae:	4a0a      	ldr	r2, [pc, #40]	; (80013d8 <HAL_ADC_MspInit+0x2e0>)
 80013b0:	687b      	ldr	r3, [r7, #4]
 80013b2:	6293      	str	r3, [r2, #40]	; 0x28
}
 80013b4:	bf00      	nop
 80013b6:	3790      	adds	r7, #144	; 0x90
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bd80      	pop	{r7, pc}
 80013bc:	2000044c 	.word	0x2000044c
 80013c0:	40021000 	.word	0x40021000
 80013c4:	48000800 	.word	0x48000800
 80013c8:	48000400 	.word	0x48000400
 80013cc:	2000038c 	.word	0x2000038c
 80013d0:	4002001c 	.word	0x4002001c
 80013d4:	50000100 	.word	0x50000100
 80013d8:	200003ec 	.word	0x200003ec
 80013dc:	40020008 	.word	0x40020008

080013e0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b082      	sub	sp, #8
 80013e4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMAMUX1_CLK_ENABLE();
 80013e6:	4b16      	ldr	r3, [pc, #88]	; (8001440 <MX_DMA_Init+0x60>)
 80013e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013ea:	4a15      	ldr	r2, [pc, #84]	; (8001440 <MX_DMA_Init+0x60>)
 80013ec:	f043 0304 	orr.w	r3, r3, #4
 80013f0:	6493      	str	r3, [r2, #72]	; 0x48
 80013f2:	4b13      	ldr	r3, [pc, #76]	; (8001440 <MX_DMA_Init+0x60>)
 80013f4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80013f6:	f003 0304 	and.w	r3, r3, #4
 80013fa:	607b      	str	r3, [r7, #4]
 80013fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA1_CLK_ENABLE();
 80013fe:	4b10      	ldr	r3, [pc, #64]	; (8001440 <MX_DMA_Init+0x60>)
 8001400:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001402:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <MX_DMA_Init+0x60>)
 8001404:	f043 0301 	orr.w	r3, r3, #1
 8001408:	6493      	str	r3, [r2, #72]	; 0x48
 800140a:	4b0d      	ldr	r3, [pc, #52]	; (8001440 <MX_DMA_Init+0x60>)
 800140c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800140e:	f003 0301 	and.w	r3, r3, #1
 8001412:	603b      	str	r3, [r7, #0]
 8001414:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Channel1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel1_IRQn, 0, 0);
 8001416:	2200      	movs	r2, #0
 8001418:	2100      	movs	r1, #0
 800141a:	200b      	movs	r0, #11
 800141c:	f002 fe88 	bl	8004130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel1_IRQn);
 8001420:	200b      	movs	r0, #11
 8001422:	f002 fe9f 	bl	8004164 <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_IRQn, 0, 0);
 8001426:	2200      	movs	r2, #0
 8001428:	2100      	movs	r1, #0
 800142a:	200c      	movs	r0, #12
 800142c:	f002 fe80 	bl	8004130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_IRQn);
 8001430:	200c      	movs	r0, #12
 8001432:	f002 fe97 	bl	8004164 <HAL_NVIC_EnableIRQ>

}
 8001436:	bf00      	nop
 8001438:	3708      	adds	r7, #8
 800143a:	46bd      	mov	sp, r7
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	40021000 	.word	0x40021000

08001444 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b08a      	sub	sp, #40	; 0x28
 8001448:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800144a:	f107 0314 	add.w	r3, r7, #20
 800144e:	2200      	movs	r2, #0
 8001450:	601a      	str	r2, [r3, #0]
 8001452:	605a      	str	r2, [r3, #4]
 8001454:	609a      	str	r2, [r3, #8]
 8001456:	60da      	str	r2, [r3, #12]
 8001458:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800145a:	4b3f      	ldr	r3, [pc, #252]	; (8001558 <MX_GPIO_Init+0x114>)
 800145c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800145e:	4a3e      	ldr	r2, [pc, #248]	; (8001558 <MX_GPIO_Init+0x114>)
 8001460:	f043 0304 	orr.w	r3, r3, #4
 8001464:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001466:	4b3c      	ldr	r3, [pc, #240]	; (8001558 <MX_GPIO_Init+0x114>)
 8001468:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800146a:	f003 0304 	and.w	r3, r3, #4
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8001472:	4b39      	ldr	r3, [pc, #228]	; (8001558 <MX_GPIO_Init+0x114>)
 8001474:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001476:	4a38      	ldr	r2, [pc, #224]	; (8001558 <MX_GPIO_Init+0x114>)
 8001478:	f043 0320 	orr.w	r3, r3, #32
 800147c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800147e:	4b36      	ldr	r3, [pc, #216]	; (8001558 <MX_GPIO_Init+0x114>)
 8001480:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001482:	f003 0320 	and.w	r3, r3, #32
 8001486:	60fb      	str	r3, [r7, #12]
 8001488:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800148a:	4b33      	ldr	r3, [pc, #204]	; (8001558 <MX_GPIO_Init+0x114>)
 800148c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800148e:	4a32      	ldr	r2, [pc, #200]	; (8001558 <MX_GPIO_Init+0x114>)
 8001490:	f043 0301 	orr.w	r3, r3, #1
 8001494:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001496:	4b30      	ldr	r3, [pc, #192]	; (8001558 <MX_GPIO_Init+0x114>)
 8001498:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800149a:	f003 0301 	and.w	r3, r3, #1
 800149e:	60bb      	str	r3, [r7, #8]
 80014a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014a2:	4b2d      	ldr	r3, [pc, #180]	; (8001558 <MX_GPIO_Init+0x114>)
 80014a4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014a6:	4a2c      	ldr	r2, [pc, #176]	; (8001558 <MX_GPIO_Init+0x114>)
 80014a8:	f043 0302 	orr.w	r3, r3, #2
 80014ac:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014ae:	4b2a      	ldr	r3, [pc, #168]	; (8001558 <MX_GPIO_Init+0x114>)
 80014b0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014b2:	f003 0302 	and.w	r3, r3, #2
 80014b6:	607b      	str	r3, [r7, #4]
 80014b8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80014ba:	4b27      	ldr	r3, [pc, #156]	; (8001558 <MX_GPIO_Init+0x114>)
 80014bc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014be:	4a26      	ldr	r2, [pc, #152]	; (8001558 <MX_GPIO_Init+0x114>)
 80014c0:	f043 0308 	orr.w	r3, r3, #8
 80014c4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80014c6:	4b24      	ldr	r3, [pc, #144]	; (8001558 <MX_GPIO_Init+0x114>)
 80014c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80014ca:	f003 0308 	and.w	r3, r3, #8
 80014ce:	603b      	str	r3, [r7, #0]
 80014d0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USR_LED_GPIO_Port, USR_LED_Pin, GPIO_PIN_RESET);
 80014d2:	2200      	movs	r2, #0
 80014d4:	2120      	movs	r1, #32
 80014d6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80014da:	f003 fb05 	bl	8004ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(NRST_SafetyUC_GPIO_Port, NRST_SafetyUC_Pin, GPIO_PIN_RESET);
 80014de:	2200      	movs	r2, #0
 80014e0:	2104      	movs	r1, #4
 80014e2:	481e      	ldr	r0, [pc, #120]	; (800155c <MX_GPIO_Init+0x118>)
 80014e4:	f003 fb00 	bl	8004ae8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_BTN_Pin;
 80014e8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80014ec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80014ee:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80014f2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014f4:	2300      	movs	r3, #0
 80014f6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(USR_BTN_GPIO_Port, &GPIO_InitStruct);
 80014f8:	f107 0314 	add.w	r3, r7, #20
 80014fc:	4619      	mov	r1, r3
 80014fe:	4818      	ldr	r0, [pc, #96]	; (8001560 <MX_GPIO_Init+0x11c>)
 8001500:	f003 f970 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USR_LED_Pin;
 8001504:	2320      	movs	r3, #32
 8001506:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001508:	2301      	movs	r3, #1
 800150a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800150c:	2300      	movs	r3, #0
 800150e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001510:	2300      	movs	r3, #0
 8001512:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(USR_LED_GPIO_Port, &GPIO_InitStruct);
 8001514:	f107 0314 	add.w	r3, r7, #20
 8001518:	4619      	mov	r1, r3
 800151a:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 800151e:	f003 f961 	bl	80047e4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = NRST_SafetyUC_Pin;
 8001522:	2304      	movs	r3, #4
 8001524:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001526:	2301      	movs	r3, #1
 8001528:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800152a:	2300      	movs	r3, #0
 800152c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800152e:	2300      	movs	r3, #0
 8001530:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(NRST_SafetyUC_GPIO_Port, &GPIO_InitStruct);
 8001532:	f107 0314 	add.w	r3, r7, #20
 8001536:	4619      	mov	r1, r3
 8001538:	4808      	ldr	r0, [pc, #32]	; (800155c <MX_GPIO_Init+0x118>)
 800153a:	f003 f953 	bl	80047e4 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2100      	movs	r1, #0
 8001542:	2028      	movs	r0, #40	; 0x28
 8001544:	f002 fdf4 	bl	8004130 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001548:	2028      	movs	r0, #40	; 0x28
 800154a:	f002 fe0b 	bl	8004164 <HAL_NVIC_EnableIRQ>

}
 800154e:	bf00      	nop
 8001550:	3728      	adds	r7, #40	; 0x28
 8001552:	46bd      	mov	sp, r7
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	40021000 	.word	0x40021000
 800155c:	48000c00 	.word	0x48000c00
 8001560:	48000800 	.word	0x48000800

08001564 <HAL_ADC_ConvCpltCallback>:

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 8001564:	b480      	push	{r7}
 8001566:	b083      	sub	sp, #12
 8001568:	af00      	add	r7, sp, #0
 800156a:	6078      	str	r0, [r7, #4]
	if(hadc->Instance == ADC1)
 800156c:	687b      	ldr	r3, [r7, #4]
 800156e:	681b      	ldr	r3, [r3, #0]
 8001570:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001574:	d12a      	bne.n	80015cc <HAL_ADC_ConvCpltCallback+0x68>
	{
		adcValue[0] = (float)dmaADCU;
 8001576:	4b24      	ldr	r3, [pc, #144]	; (8001608 <HAL_ADC_ConvCpltCallback+0xa4>)
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	ee07 3a90 	vmov	s15, r3
 800157e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_ADC_ConvCpltCallback+0xa8>)
 8001584:	edc3 7a00 	vstr	s15, [r3]
		adcValue[0] = adcValue[0] * 3300 / 4096;
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <HAL_ADC_ConvCpltCallback+0xa8>)
 800158a:	edd3 7a00 	vldr	s15, [r3]
 800158e:	ed9f 7a20 	vldr	s14, [pc, #128]	; 8001610 <HAL_ADC_ConvCpltCallback+0xac>
 8001592:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001596:	eddf 6a1f 	vldr	s13, [pc, #124]	; 8001614 <HAL_ADC_ConvCpltCallback+0xb0>
 800159a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800159e:	4b1b      	ldr	r3, [pc, #108]	; (800160c <HAL_ADC_ConvCpltCallback+0xa8>)
 80015a0:	edc3 7a00 	vstr	s15, [r3]
		adcValue[0] -= OFFSET_SME;
 80015a4:	4b19      	ldr	r3, [pc, #100]	; (800160c <HAL_ADC_ConvCpltCallback+0xa8>)
 80015a6:	edd3 7a00 	vldr	s15, [r3]
 80015aa:	ed9f 7a1b 	vldr	s14, [pc, #108]	; 8001618 <HAL_ADC_ConvCpltCallback+0xb4>
 80015ae:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80015b2:	4b16      	ldr	r3, [pc, #88]	; (800160c <HAL_ADC_ConvCpltCallback+0xa8>)
 80015b4:	edc3 7a00 	vstr	s15, [r3]
		adcValue[0] = adcValue[0] / SENSITIVITY_SME;
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_ADC_ConvCpltCallback+0xa8>)
 80015ba:	ed93 7a00 	vldr	s14, [r3]
 80015be:	eddf 6a17 	vldr	s13, [pc, #92]	; 800161c <HAL_ADC_ConvCpltCallback+0xb8>
 80015c2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80015c6:	4b11      	ldr	r3, [pc, #68]	; (800160c <HAL_ADC_ConvCpltCallback+0xa8>)
 80015c8:	edc3 7a00 	vstr	s15, [r3]
	}
	if(hadc->Instance == ADC2)
 80015cc:	687b      	ldr	r3, [r7, #4]
 80015ce:	681b      	ldr	r3, [r3, #0]
 80015d0:	4a13      	ldr	r2, [pc, #76]	; (8001620 <HAL_ADC_ConvCpltCallback+0xbc>)
 80015d2:	4293      	cmp	r3, r2
 80015d4:	d111      	bne.n	80015fa <HAL_ADC_ConvCpltCallback+0x96>
	{
		adcEncoder[0] = (float)dmaADC_encodeur[0];
 80015d6:	4b13      	ldr	r3, [pc, #76]	; (8001624 <HAL_ADC_ConvCpltCallback+0xc0>)
 80015d8:	681b      	ldr	r3, [r3, #0]
 80015da:	ee07 3a90 	vmov	s15, r3
 80015de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015e2:	4b11      	ldr	r3, [pc, #68]	; (8001628 <HAL_ADC_ConvCpltCallback+0xc4>)
 80015e4:	edc3 7a00 	vstr	s15, [r3]
		adcEncoder[1] = (float)dmaADC_encodeur[1];
 80015e8:	4b0e      	ldr	r3, [pc, #56]	; (8001624 <HAL_ADC_ConvCpltCallback+0xc0>)
 80015ea:	685b      	ldr	r3, [r3, #4]
 80015ec:	ee07 3a90 	vmov	s15, r3
 80015f0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80015f4:	4b0c      	ldr	r3, [pc, #48]	; (8001628 <HAL_ADC_ConvCpltCallback+0xc4>)
 80015f6:	edc3 7a01 	vstr	s15, [r3, #4]
	}
}
 80015fa:	bf00      	nop
 80015fc:	370c      	adds	r7, #12
 80015fe:	46bd      	mov	sp, r7
 8001600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001604:	4770      	bx	lr
 8001606:	bf00      	nop
 8001608:	20000460 	.word	0x20000460
 800160c:	20000464 	.word	0x20000464
 8001610:	454e4000 	.word	0x454e4000
 8001614:	45800000 	.word	0x45800000
 8001618:	44ce4000 	.word	0x44ce4000
 800161c:	42480000 	.word	0x42480000
 8001620:	50000100 	.word	0x50000100
 8001624:	20000450 	.word	0x20000450
 8001628:	20000458 	.word	0x20000458

0800162c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001630:	f001 f829 	bl	8002686 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001634:	f000 f83a 	bl	80016ac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001638:	f7ff ff04 	bl	8001444 <MX_GPIO_Init>
  MX_DMA_Init();
 800163c:	f7ff fed0 	bl	80013e0 <MX_DMA_Init>
  MX_ADC2_Init();
 8001640:	f7ff fce2 	bl	8001008 <MX_ADC2_Init>
  MX_ADC1_Init();
 8001644:	f7ff fc66 	bl	8000f14 <MX_ADC1_Init>
  MX_TIM1_Init();
 8001648:	f000 fa6a 	bl	8001b20 <MX_TIM1_Init>
  MX_TIM3_Init();
 800164c:	f000 fb16 	bl	8001c7c <MX_TIM3_Init>
  MX_USART2_UART_Init();
 8001650:	f000 fc50 	bl	8001ef4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001654:	f000 fc9a 	bl	8001f8c <MX_USART3_UART_Init>
  /* USER CODE BEGIN 2 */
	Shell_Init();
 8001658:	f000 fd8c 	bl	8002174 <Shell_Init>


	if(HAL_ADCEx_Calibration_Start(&hadc1, ADC_SINGLE_ENDED) != HAL_OK)
 800165c:	217f      	movs	r1, #127	; 0x7f
 800165e:	480f      	ldr	r0, [pc, #60]	; (800169c <main+0x70>)
 8001660:	f002 fb44 	bl	8003cec <HAL_ADCEx_Calibration_Start>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <main+0x42>
	{
		Error_Handler();
 800166a:	f000 f87b 	bl	8001764 <Error_Handler>
	}

	if(HAL_ADC_Start_DMA(&hadc1, &dmaADCU, 1) != HAL_OK)
 800166e:	2201      	movs	r2, #1
 8001670:	490b      	ldr	r1, [pc, #44]	; (80016a0 <main+0x74>)
 8001672:	480a      	ldr	r0, [pc, #40]	; (800169c <main+0x70>)
 8001674:	f001 fc6a 	bl	8002f4c <HAL_ADC_Start_DMA>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <main+0x56>
	{
		Error_Handler();
 800167e:	f000 f871 	bl	8001764 <Error_Handler>
	}

	if(HAL_ADC_Start_DMA(&hadc2, dmaADC_encodeur, 2) != HAL_OK)
 8001682:	2202      	movs	r2, #2
 8001684:	4907      	ldr	r1, [pc, #28]	; (80016a4 <main+0x78>)
 8001686:	4808      	ldr	r0, [pc, #32]	; (80016a8 <main+0x7c>)
 8001688:	f001 fc60 	bl	8002f4c <HAL_ADC_Start_DMA>
 800168c:	4603      	mov	r3, r0
 800168e:	2b00      	cmp	r3, #0
 8001690:	d001      	beq.n	8001696 <main+0x6a>
	{
		Error_Handler();
 8001692:	f000 f867 	bl	8001764 <Error_Handler>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1)
	{
		Shell_Loop();
 8001696:	f000 fdad 	bl	80021f4 <Shell_Loop>
 800169a:	e7fc      	b.n	8001696 <main+0x6a>
 800169c:	200002b4 	.word	0x200002b4
 80016a0:	20000460 	.word	0x20000460
 80016a4:	20000450 	.word	0x20000450
 80016a8:	20000320 	.word	0x20000320

080016ac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016ac:	b580      	push	{r7, lr}
 80016ae:	b094      	sub	sp, #80	; 0x50
 80016b0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016b2:	f107 0318 	add.w	r3, r7, #24
 80016b6:	2238      	movs	r2, #56	; 0x38
 80016b8:	2100      	movs	r1, #0
 80016ba:	4618      	mov	r0, r3
 80016bc:	f008 fed5 	bl	800a46a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016c0:	1d3b      	adds	r3, r7, #4
 80016c2:	2200      	movs	r2, #0
 80016c4:	601a      	str	r2, [r3, #0]
 80016c6:	605a      	str	r2, [r3, #4]
 80016c8:	609a      	str	r2, [r3, #8]
 80016ca:	60da      	str	r2, [r3, #12]
 80016cc:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1_BOOST);
 80016ce:	2000      	movs	r0, #0
 80016d0:	f003 fa46 	bl	8004b60 <HAL_PWREx_ControlVoltageScaling>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80016d4:	2301      	movs	r3, #1
 80016d6:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80016d8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80016dc:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016de:	2302      	movs	r3, #2
 80016e0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80016e2:	2303      	movs	r3, #3
 80016e4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = RCC_PLLM_DIV6;
 80016e6:	2306      	movs	r3, #6
 80016e8:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 85;
 80016ea:	2355      	movs	r3, #85	; 0x55
 80016ec:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016ee:	2302      	movs	r3, #2
 80016f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 80016f2:	2302      	movs	r3, #2
 80016f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 80016f6:	2302      	movs	r3, #2
 80016f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fa:	f107 0318 	add.w	r3, r7, #24
 80016fe:	4618      	mov	r0, r3
 8001700:	f003 fae2 	bl	8004cc8 <HAL_RCC_OscConfig>
 8001704:	4603      	mov	r3, r0
 8001706:	2b00      	cmp	r3, #0
 8001708:	d001      	beq.n	800170e <SystemClock_Config+0x62>
  {
    Error_Handler();
 800170a:	f000 f82b 	bl	8001764 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800170e:	230f      	movs	r3, #15
 8001710:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001712:	2303      	movs	r3, #3
 8001714:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001716:	2300      	movs	r3, #0
 8001718:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800171a:	2300      	movs	r3, #0
 800171c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800171e:	2300      	movs	r3, #0
 8001720:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_4) != HAL_OK)
 8001722:	1d3b      	adds	r3, r7, #4
 8001724:	2104      	movs	r1, #4
 8001726:	4618      	mov	r0, r3
 8001728:	f003 fde6 	bl	80052f8 <HAL_RCC_ClockConfig>
 800172c:	4603      	mov	r3, r0
 800172e:	2b00      	cmp	r3, #0
 8001730:	d001      	beq.n	8001736 <SystemClock_Config+0x8a>
  {
    Error_Handler();
 8001732:	f000 f817 	bl	8001764 <Error_Handler>
  }
}
 8001736:	bf00      	nop
 8001738:	3750      	adds	r7, #80	; 0x50
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
	...

08001740 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001740:	b580      	push	{r7, lr}
 8001742:	b082      	sub	sp, #8
 8001744:	af00      	add	r7, sp, #0
 8001746:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	681b      	ldr	r3, [r3, #0]
 800174c:	4a04      	ldr	r2, [pc, #16]	; (8001760 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800174e:	4293      	cmp	r3, r2
 8001750:	d101      	bne.n	8001756 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001752:	f000 ffb1 	bl	80026b8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001756:	bf00      	nop
 8001758:	3708      	adds	r7, #8
 800175a:	46bd      	mov	sp, r7
 800175c:	bd80      	pop	{r7, pc}
 800175e:	bf00      	nop
 8001760:	40001000 	.word	0x40001000

08001764 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001764:	b480      	push	{r7}
 8001766:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001768:	b672      	cpsid	i
}
 800176a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800176c:	e7fe      	b.n	800176c <Error_Handler+0x8>
	...

08001770 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001770:	b580      	push	{r7, lr}
 8001772:	b082      	sub	sp, #8
 8001774:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001776:	4b0f      	ldr	r3, [pc, #60]	; (80017b4 <HAL_MspInit+0x44>)
 8001778:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800177a:	4a0e      	ldr	r2, [pc, #56]	; (80017b4 <HAL_MspInit+0x44>)
 800177c:	f043 0301 	orr.w	r3, r3, #1
 8001780:	6613      	str	r3, [r2, #96]	; 0x60
 8001782:	4b0c      	ldr	r3, [pc, #48]	; (80017b4 <HAL_MspInit+0x44>)
 8001784:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001786:	f003 0301 	and.w	r3, r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800178e:	4b09      	ldr	r3, [pc, #36]	; (80017b4 <HAL_MspInit+0x44>)
 8001790:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001792:	4a08      	ldr	r2, [pc, #32]	; (80017b4 <HAL_MspInit+0x44>)
 8001794:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001798:	6593      	str	r3, [r2, #88]	; 0x58
 800179a:	4b06      	ldr	r3, [pc, #24]	; (80017b4 <HAL_MspInit+0x44>)
 800179c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800179e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80017a2:	603b      	str	r3, [r7, #0]
 80017a4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/

  /** Disable the internal Pull-Up in Dead Battery pins of UCPD peripheral
  */
  HAL_PWREx_DisableUCPDDeadBattery();
 80017a6:	f003 fa7f 	bl	8004ca8 <HAL_PWREx_DisableUCPDDeadBattery>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80017aa:	bf00      	nop
 80017ac:	3708      	adds	r7, #8
 80017ae:	46bd      	mov	sp, r7
 80017b0:	bd80      	pop	{r7, pc}
 80017b2:	bf00      	nop
 80017b4:	40021000 	.word	0x40021000

080017b8 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017b8:	b580      	push	{r7, lr}
 80017ba:	b08c      	sub	sp, #48	; 0x30
 80017bc:	af00      	add	r7, sp, #0
 80017be:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80017c0:	2300      	movs	r3, #0
 80017c2:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              uwPrescalerValue = 0;
 80017c4:	2300      	movs	r3, #0
 80017c6:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 80017c8:	4b2c      	ldr	r3, [pc, #176]	; (800187c <HAL_InitTick+0xc4>)
 80017ca:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017cc:	4a2b      	ldr	r2, [pc, #172]	; (800187c <HAL_InitTick+0xc4>)
 80017ce:	f043 0310 	orr.w	r3, r3, #16
 80017d2:	6593      	str	r3, [r2, #88]	; 0x58
 80017d4:	4b29      	ldr	r3, [pc, #164]	; (800187c <HAL_InitTick+0xc4>)
 80017d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80017d8:	f003 0310 	and.w	r3, r3, #16
 80017dc:	60bb      	str	r3, [r7, #8]
 80017de:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 80017e0:	f107 020c 	add.w	r2, r7, #12
 80017e4:	f107 0310 	add.w	r3, r7, #16
 80017e8:	4611      	mov	r1, r2
 80017ea:	4618      	mov	r0, r3
 80017ec:	f003 ff5a 	bl	80056a4 <HAL_RCC_GetClockConfig>

  /* Compute TIM6 clock */
  uwTimclock = HAL_RCC_GetPCLK1Freq();
 80017f0:	f003 ff2c 	bl	800564c <HAL_RCC_GetPCLK1Freq>
 80017f4:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 80017f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80017f8:	4a21      	ldr	r2, [pc, #132]	; (8001880 <HAL_InitTick+0xc8>)
 80017fa:	fba2 2303 	umull	r2, r3, r2, r3
 80017fe:	0c9b      	lsrs	r3, r3, #18
 8001800:	3b01      	subs	r3, #1
 8001802:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8001804:	4b1f      	ldr	r3, [pc, #124]	; (8001884 <HAL_InitTick+0xcc>)
 8001806:	4a20      	ldr	r2, [pc, #128]	; (8001888 <HAL_InitTick+0xd0>)
 8001808:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 800180a:	4b1e      	ldr	r3, [pc, #120]	; (8001884 <HAL_InitTick+0xcc>)
 800180c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001810:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8001812:	4a1c      	ldr	r2, [pc, #112]	; (8001884 <HAL_InitTick+0xcc>)
 8001814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001816:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8001818:	4b1a      	ldr	r3, [pc, #104]	; (8001884 <HAL_InitTick+0xcc>)
 800181a:	2200      	movs	r2, #0
 800181c:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800181e:	4b19      	ldr	r3, [pc, #100]	; (8001884 <HAL_InitTick+0xcc>)
 8001820:	2200      	movs	r2, #0
 8001822:	609a      	str	r2, [r3, #8]

  status = HAL_TIM_Base_Init(&htim6);
 8001824:	4817      	ldr	r0, [pc, #92]	; (8001884 <HAL_InitTick+0xcc>)
 8001826:	f004 fa03 	bl	8005c30 <HAL_TIM_Base_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001830:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001834:	2b00      	cmp	r3, #0
 8001836:	d11b      	bne.n	8001870 <HAL_InitTick+0xb8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8001838:	4812      	ldr	r0, [pc, #72]	; (8001884 <HAL_InitTick+0xcc>)
 800183a:	f004 fa5b 	bl	8005cf4 <HAL_TIM_Base_Start_IT>
 800183e:	4603      	mov	r3, r0
 8001840:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001844:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001848:	2b00      	cmp	r3, #0
 800184a:	d111      	bne.n	8001870 <HAL_InitTick+0xb8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 800184c:	2036      	movs	r0, #54	; 0x36
 800184e:	f002 fc89 	bl	8004164 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b0f      	cmp	r3, #15
 8001856:	d808      	bhi.n	800186a <HAL_InitTick+0xb2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8001858:	2200      	movs	r2, #0
 800185a:	6879      	ldr	r1, [r7, #4]
 800185c:	2036      	movs	r0, #54	; 0x36
 800185e:	f002 fc67 	bl	8004130 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001862:	4a0a      	ldr	r2, [pc, #40]	; (800188c <HAL_InitTick+0xd4>)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	6013      	str	r3, [r2, #0]
 8001868:	e002      	b.n	8001870 <HAL_InitTick+0xb8>
      }
      else
      {
        status = HAL_ERROR;
 800186a:	2301      	movs	r3, #1
 800186c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001870:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001874:	4618      	mov	r0, r3
 8001876:	3730      	adds	r7, #48	; 0x30
 8001878:	46bd      	mov	sp, r7
 800187a:	bd80      	pop	{r7, pc}
 800187c:	40021000 	.word	0x40021000
 8001880:	431bde83 	.word	0x431bde83
 8001884:	2000046c 	.word	0x2000046c
 8001888:	40001000 	.word	0x40001000
 800188c:	200000c8 	.word	0x200000c8

08001890 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001894:	e7fe      	b.n	8001894 <NMI_Handler+0x4>

08001896 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001896:	b480      	push	{r7}
 8001898:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800189a:	e7fe      	b.n	800189a <HardFault_Handler+0x4>

0800189c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80018a0:	e7fe      	b.n	80018a0 <MemManage_Handler+0x4>

080018a2 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80018a2:	b480      	push	{r7}
 80018a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80018a6:	e7fe      	b.n	80018a6 <BusFault_Handler+0x4>

080018a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80018ac:	e7fe      	b.n	80018ac <UsageFault_Handler+0x4>

080018ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80018ae:	b480      	push	{r7}
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80018b2:	bf00      	nop
 80018b4:	46bd      	mov	sp, r7
 80018b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018ba:	4770      	bx	lr

080018bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80018bc:	b480      	push	{r7}
 80018be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018c0:	bf00      	nop
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr

080018ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018ca:	b480      	push	{r7}
 80018cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	46bd      	mov	sp, r7
 80018d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d6:	4770      	bx	lr

080018d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018d8:	b480      	push	{r7}
 80018da:	af00      	add	r7, sp, #0
  /* USER CODE END SysTick_IRQn 0 */

  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018dc:	bf00      	nop
 80018de:	46bd      	mov	sp, r7
 80018e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018e4:	4770      	bx	lr
	...

080018e8 <DMA1_Channel1_IRQHandler>:

/**
  * @brief This function handles DMA1 channel1 global interrupt.
  */
void DMA1_Channel1_IRQHandler(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel1_IRQn 0 */

  /* USER CODE END DMA1_Channel1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc2);
 80018ec:	4802      	ldr	r0, [pc, #8]	; (80018f8 <DMA1_Channel1_IRQHandler+0x10>)
 80018ee:	f002 fe2a 	bl	8004546 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel1_IRQn 1 */

  /* USER CODE END DMA1_Channel1_IRQn 1 */
}
 80018f2:	bf00      	nop
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	200003ec 	.word	0x200003ec

080018fc <DMA1_Channel2_IRQHandler>:

/**
  * @brief This function handles DMA1 channel2 global interrupt.
  */
void DMA1_Channel2_IRQHandler(void)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_IRQn 0 */

  /* USER CODE END DMA1_Channel2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8001900:	4802      	ldr	r0, [pc, #8]	; (800190c <DMA1_Channel2_IRQHandler+0x10>)
 8001902:	f002 fe20 	bl	8004546 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_IRQn 1 */

  /* USER CODE END DMA1_Channel2_IRQn 1 */
}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	2000038c 	.word	0x2000038c

08001910 <TIM1_UP_TIM16_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM16 global interrupt.
  */
void TIM1_UP_TIM16_IRQHandler(void)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001914:	4802      	ldr	r0, [pc, #8]	; (8001920 <TIM1_UP_TIM16_IRQHandler+0x10>)
 8001916:	f004 fc6b 	bl	80061f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM16_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM16_IRQn 1 */
}
 800191a:	bf00      	nop
 800191c:	bd80      	pop	{r7, pc}
 800191e:	bf00      	nop
 8001920:	200004bc 	.word	0x200004bc

08001924 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt / USART2 wake-up interrupt through EXTI line 26.
  */
void USART2_IRQHandler(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001928:	4802      	ldr	r0, [pc, #8]	; (8001934 <USART2_IRQHandler+0x10>)
 800192a:	f006 f847 	bl	80079bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800192e:	bf00      	nop
 8001930:	bd80      	pop	{r7, pc}
 8001932:	bf00      	nop
 8001934:	20000554 	.word	0x20000554

08001938 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt / USART3 wake-up interrupt through EXTI line 28.
  */
void USART3_IRQHandler(void)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800193c:	4802      	ldr	r0, [pc, #8]	; (8001948 <USART3_IRQHandler+0x10>)
 800193e:	f006 f83d 	bl	80079bc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001942:	bf00      	nop
 8001944:	bd80      	pop	{r7, pc}
 8001946:	bf00      	nop
 8001948:	200005e4 	.word	0x200005e4

0800194c <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(USR_BTN_Pin);
 8001950:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001954:	f003 f8e0 	bl	8004b18 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001958:	bf00      	nop
 800195a:	bd80      	pop	{r7, pc}

0800195c <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC3 channel underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 800195c:	b580      	push	{r7, lr}
 800195e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8001960:	4802      	ldr	r0, [pc, #8]	; (800196c <TIM6_DAC_IRQHandler+0x10>)
 8001962:	f004 fc45 	bl	80061f0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8001966:	bf00      	nop
 8001968:	bd80      	pop	{r7, pc}
 800196a:	bf00      	nop
 800196c:	2000046c 	.word	0x2000046c

08001970 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001970:	b480      	push	{r7}
 8001972:	af00      	add	r7, sp, #0
  return 1;
 8001974:	2301      	movs	r3, #1
}
 8001976:	4618      	mov	r0, r3
 8001978:	46bd      	mov	sp, r7
 800197a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800197e:	4770      	bx	lr

08001980 <_kill>:

int _kill(int pid, int sig)
{
 8001980:	b580      	push	{r7, lr}
 8001982:	b082      	sub	sp, #8
 8001984:	af00      	add	r7, sp, #0
 8001986:	6078      	str	r0, [r7, #4]
 8001988:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800198a:	f008 fe1d 	bl	800a5c8 <__errno>
 800198e:	4603      	mov	r3, r0
 8001990:	2216      	movs	r2, #22
 8001992:	601a      	str	r2, [r3, #0]
  return -1;
 8001994:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001998:	4618      	mov	r0, r3
 800199a:	3708      	adds	r7, #8
 800199c:	46bd      	mov	sp, r7
 800199e:	bd80      	pop	{r7, pc}

080019a0 <_exit>:

void _exit (int status)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	b082      	sub	sp, #8
 80019a4:	af00      	add	r7, sp, #0
 80019a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80019a8:	f04f 31ff 	mov.w	r1, #4294967295
 80019ac:	6878      	ldr	r0, [r7, #4]
 80019ae:	f7ff ffe7 	bl	8001980 <_kill>
  while (1) {}    /* Make sure we hang here */
 80019b2:	e7fe      	b.n	80019b2 <_exit+0x12>

080019b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	b086      	sub	sp, #24
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	60f8      	str	r0, [r7, #12]
 80019bc:	60b9      	str	r1, [r7, #8]
 80019be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019c0:	2300      	movs	r3, #0
 80019c2:	617b      	str	r3, [r7, #20]
 80019c4:	e00a      	b.n	80019dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80019c6:	f3af 8000 	nop.w
 80019ca:	4601      	mov	r1, r0
 80019cc:	68bb      	ldr	r3, [r7, #8]
 80019ce:	1c5a      	adds	r2, r3, #1
 80019d0:	60ba      	str	r2, [r7, #8]
 80019d2:	b2ca      	uxtb	r2, r1
 80019d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019d6:	697b      	ldr	r3, [r7, #20]
 80019d8:	3301      	adds	r3, #1
 80019da:	617b      	str	r3, [r7, #20]
 80019dc:	697a      	ldr	r2, [r7, #20]
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	429a      	cmp	r2, r3
 80019e2:	dbf0      	blt.n	80019c6 <_read+0x12>
  }

  return len;
 80019e4:	687b      	ldr	r3, [r7, #4]
}
 80019e6:	4618      	mov	r0, r3
 80019e8:	3718      	adds	r7, #24
 80019ea:	46bd      	mov	sp, r7
 80019ec:	bd80      	pop	{r7, pc}

080019ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80019ee:	b580      	push	{r7, lr}
 80019f0:	b086      	sub	sp, #24
 80019f2:	af00      	add	r7, sp, #0
 80019f4:	60f8      	str	r0, [r7, #12]
 80019f6:	60b9      	str	r1, [r7, #8]
 80019f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80019fa:	2300      	movs	r3, #0
 80019fc:	617b      	str	r3, [r7, #20]
 80019fe:	e009      	b.n	8001a14 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8001a00:	68bb      	ldr	r3, [r7, #8]
 8001a02:	1c5a      	adds	r2, r3, #1
 8001a04:	60ba      	str	r2, [r7, #8]
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	4618      	mov	r0, r3
 8001a0a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a0e:	697b      	ldr	r3, [r7, #20]
 8001a10:	3301      	adds	r3, #1
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	697a      	ldr	r2, [r7, #20]
 8001a16:	687b      	ldr	r3, [r7, #4]
 8001a18:	429a      	cmp	r2, r3
 8001a1a:	dbf1      	blt.n	8001a00 <_write+0x12>
  }
  return len;
 8001a1c:	687b      	ldr	r3, [r7, #4]
}
 8001a1e:	4618      	mov	r0, r3
 8001a20:	3718      	adds	r7, #24
 8001a22:	46bd      	mov	sp, r7
 8001a24:	bd80      	pop	{r7, pc}

08001a26 <_close>:

int _close(int file)
{
 8001a26:	b480      	push	{r7}
 8001a28:	b083      	sub	sp, #12
 8001a2a:	af00      	add	r7, sp, #0
 8001a2c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a2e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a32:	4618      	mov	r0, r3
 8001a34:	370c      	adds	r7, #12
 8001a36:	46bd      	mov	sp, r7
 8001a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a3c:	4770      	bx	lr

08001a3e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
 8001a46:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a48:	683b      	ldr	r3, [r7, #0]
 8001a4a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001a4e:	605a      	str	r2, [r3, #4]
  return 0;
 8001a50:	2300      	movs	r3, #0
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	370c      	adds	r7, #12
 8001a56:	46bd      	mov	sp, r7
 8001a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a5c:	4770      	bx	lr

08001a5e <_isatty>:

int _isatty(int file)
{
 8001a5e:	b480      	push	{r7}
 8001a60:	b083      	sub	sp, #12
 8001a62:	af00      	add	r7, sp, #0
 8001a64:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a66:	2301      	movs	r3, #1
}
 8001a68:	4618      	mov	r0, r3
 8001a6a:	370c      	adds	r7, #12
 8001a6c:	46bd      	mov	sp, r7
 8001a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a72:	4770      	bx	lr

08001a74 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a74:	b480      	push	{r7}
 8001a76:	b085      	sub	sp, #20
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a80:	2300      	movs	r3, #0
}
 8001a82:	4618      	mov	r0, r3
 8001a84:	3714      	adds	r7, #20
 8001a86:	46bd      	mov	sp, r7
 8001a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8c:	4770      	bx	lr
	...

08001a90 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001a90:	b580      	push	{r7, lr}
 8001a92:	b086      	sub	sp, #24
 8001a94:	af00      	add	r7, sp, #0
 8001a96:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001a98:	4a14      	ldr	r2, [pc, #80]	; (8001aec <_sbrk+0x5c>)
 8001a9a:	4b15      	ldr	r3, [pc, #84]	; (8001af0 <_sbrk+0x60>)
 8001a9c:	1ad3      	subs	r3, r2, r3
 8001a9e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001aa0:	697b      	ldr	r3, [r7, #20]
 8001aa2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001aa4:	4b13      	ldr	r3, [pc, #76]	; (8001af4 <_sbrk+0x64>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d102      	bne.n	8001ab2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001aac:	4b11      	ldr	r3, [pc, #68]	; (8001af4 <_sbrk+0x64>)
 8001aae:	4a12      	ldr	r2, [pc, #72]	; (8001af8 <_sbrk+0x68>)
 8001ab0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001ab2:	4b10      	ldr	r3, [pc, #64]	; (8001af4 <_sbrk+0x64>)
 8001ab4:	681a      	ldr	r2, [r3, #0]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	693a      	ldr	r2, [r7, #16]
 8001abc:	429a      	cmp	r2, r3
 8001abe:	d207      	bcs.n	8001ad0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ac0:	f008 fd82 	bl	800a5c8 <__errno>
 8001ac4:	4603      	mov	r3, r0
 8001ac6:	220c      	movs	r2, #12
 8001ac8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001aca:	f04f 33ff 	mov.w	r3, #4294967295
 8001ace:	e009      	b.n	8001ae4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ad0:	4b08      	ldr	r3, [pc, #32]	; (8001af4 <_sbrk+0x64>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001ad6:	4b07      	ldr	r3, [pc, #28]	; (8001af4 <_sbrk+0x64>)
 8001ad8:	681a      	ldr	r2, [r3, #0]
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	4413      	add	r3, r2
 8001ade:	4a05      	ldr	r2, [pc, #20]	; (8001af4 <_sbrk+0x64>)
 8001ae0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001ae2:	68fb      	ldr	r3, [r7, #12]
}
 8001ae4:	4618      	mov	r0, r3
 8001ae6:	3718      	adds	r7, #24
 8001ae8:	46bd      	mov	sp, r7
 8001aea:	bd80      	pop	{r7, pc}
 8001aec:	20020000 	.word	0x20020000
 8001af0:	00000400 	.word	0x00000400
 8001af4:	200004b8 	.word	0x200004b8
 8001af8:	20000880 	.word	0x20000880

08001afc <SystemInit>:
  * @param  None
  * @retval None
  */

void SystemInit(void)
{
 8001afc:	b480      	push	{r7}
 8001afe:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8001b00:	4b06      	ldr	r3, [pc, #24]	; (8001b1c <SystemInit+0x20>)
 8001b02:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001b06:	4a05      	ldr	r2, [pc, #20]	; (8001b1c <SystemInit+0x20>)
 8001b08:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001b0c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b10:	bf00      	nop
 8001b12:	46bd      	mov	sp, r7
 8001b14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b18:	4770      	bx	lr
 8001b1a:	bf00      	nop
 8001b1c:	e000ed00 	.word	0xe000ed00

08001b20 <MX_TIM1_Init>:
TIM_HandleTypeDef htim1;
TIM_HandleTypeDef htim3;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 8001b20:	b580      	push	{r7, lr}
 8001b22:	b098      	sub	sp, #96	; 0x60
 8001b24:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001b26:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	601a      	str	r2, [r3, #0]
 8001b2e:	605a      	str	r2, [r3, #4]
 8001b30:	609a      	str	r2, [r3, #8]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001b32:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001b36:	2200      	movs	r2, #0
 8001b38:	601a      	str	r2, [r3, #0]
 8001b3a:	605a      	str	r2, [r3, #4]
 8001b3c:	609a      	str	r2, [r3, #8]
 8001b3e:	60da      	str	r2, [r3, #12]
 8001b40:	611a      	str	r2, [r3, #16]
 8001b42:	615a      	str	r2, [r3, #20]
 8001b44:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001b46:	1d3b      	adds	r3, r7, #4
 8001b48:	2234      	movs	r2, #52	; 0x34
 8001b4a:	2100      	movs	r1, #0
 8001b4c:	4618      	mov	r0, r3
 8001b4e:	f008 fc8c 	bl	800a46a <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001b52:	4b48      	ldr	r3, [pc, #288]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001b54:	4a48      	ldr	r2, [pc, #288]	; (8001c78 <MX_TIM1_Init+0x158>)
 8001b56:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 8001b58:	4b46      	ldr	r3, [pc, #280]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_CENTERALIGNED1;
 8001b5e:	4b45      	ldr	r3, [pc, #276]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001b60:	2220      	movs	r2, #32
 8001b62:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 4249;
 8001b64:	4b43      	ldr	r3, [pc, #268]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001b66:	f241 0299 	movw	r2, #4249	; 0x1099
 8001b6a:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001b6c:	4b41      	ldr	r3, [pc, #260]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001b6e:	2200      	movs	r2, #0
 8001b70:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8001b72:	4b40      	ldr	r3, [pc, #256]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001b74:	2200      	movs	r2, #0
 8001b76:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b78:	4b3e      	ldr	r3, [pc, #248]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 8001b7e:	483d      	ldr	r0, [pc, #244]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001b80:	f004 f930 	bl	8005de4 <HAL_TIM_PWM_Init>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d001      	beq.n	8001b8e <MX_TIM1_Init+0x6e>
  {
    Error_Handler();
 8001b8a:	f7ff fdeb 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8001b8e:	2320      	movs	r3, #32
 8001b90:	657b      	str	r3, [r7, #84]	; 0x54
  sMasterConfig.MasterOutputTrigger2 = TIM_TRGO2_RESET;
 8001b92:	2300      	movs	r3, #0
 8001b94:	65bb      	str	r3, [r7, #88]	; 0x58
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_ENABLE;
 8001b96:	2380      	movs	r3, #128	; 0x80
 8001b98:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001b9a:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	4834      	ldr	r0, [pc, #208]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001ba2:	f005 fc1b 	bl	80073dc <HAL_TIMEx_MasterConfigSynchronization>
 8001ba6:	4603      	mov	r3, r0
 8001ba8:	2b00      	cmp	r3, #0
 8001baa:	d001      	beq.n	8001bb0 <MX_TIM1_Init+0x90>
  {
    Error_Handler();
 8001bac:	f7ff fdda 	bl	8001764 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001bb0:	2360      	movs	r3, #96	; 0x60
 8001bb2:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.Pulse = 2146;
 8001bb4:	f640 0362 	movw	r3, #2146	; 0x862
 8001bb8:	63fb      	str	r3, [r7, #60]	; 0x3c
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	643b      	str	r3, [r7, #64]	; 0x40
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	647b      	str	r3, [r7, #68]	; 0x44
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001bc2:	2300      	movs	r3, #0
 8001bc4:	64bb      	str	r3, [r7, #72]	; 0x48
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	64fb      	str	r3, [r7, #76]	; 0x4c
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	653b      	str	r3, [r7, #80]	; 0x50
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001bce:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4827      	ldr	r0, [pc, #156]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001bd8:	f004 fc8a 	bl	80064f0 <HAL_TIM_PWM_ConfigChannel>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d001      	beq.n	8001be6 <MX_TIM1_Init+0xc6>
  {
    Error_Handler();
 8001be2:	f7ff fdbf 	bl	8001764 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001be6:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001bea:	2204      	movs	r2, #4
 8001bec:	4619      	mov	r1, r3
 8001bee:	4821      	ldr	r0, [pc, #132]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001bf0:	f004 fc7e 	bl	80064f0 <HAL_TIM_PWM_ConfigChannel>
 8001bf4:	4603      	mov	r3, r0
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	d001      	beq.n	8001bfe <MX_TIM1_Init+0xde>
  {
    Error_Handler();
 8001bfa:	f7ff fdb3 	bl	8001764 <Error_Handler>
  }
  sConfigOC.Pulse = 0;
 8001bfe:	2300      	movs	r3, #0
 8001c00:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8001c02:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001c06:	2208      	movs	r2, #8
 8001c08:	4619      	mov	r1, r3
 8001c0a:	481a      	ldr	r0, [pc, #104]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001c0c:	f004 fc70 	bl	80064f0 <HAL_TIM_PWM_ConfigChannel>
 8001c10:	4603      	mov	r3, r0
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d001      	beq.n	8001c1a <MX_TIM1_Init+0xfa>
  {
    Error_Handler();
 8001c16:	f7ff fda5 	bl	8001764 <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 8001c1a:	2300      	movs	r3, #0
 8001c1c:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001c1e:	2300      	movs	r3, #0
 8001c20:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001c22:	2300      	movs	r3, #0
 8001c24:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 34;
 8001c26:	2322      	movs	r3, #34	; 0x22
 8001c28:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 8001c2a:	2300      	movs	r3, #0
 8001c2c:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001c2e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c32:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.BreakFilter = 0;
 8001c34:	2300      	movs	r3, #0
 8001c36:	61fb      	str	r3, [r7, #28]
  sBreakDeadTimeConfig.BreakAFMode = TIM_BREAK_AFMODE_INPUT;
 8001c38:	2300      	movs	r3, #0
 8001c3a:	623b      	str	r3, [r7, #32]
  sBreakDeadTimeConfig.Break2State = TIM_BREAK2_DISABLE;
 8001c3c:	2300      	movs	r3, #0
 8001c3e:	627b      	str	r3, [r7, #36]	; 0x24
  sBreakDeadTimeConfig.Break2Polarity = TIM_BREAK2POLARITY_HIGH;
 8001c40:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8001c44:	62bb      	str	r3, [r7, #40]	; 0x28
  sBreakDeadTimeConfig.Break2Filter = 0;
 8001c46:	2300      	movs	r3, #0
 8001c48:	62fb      	str	r3, [r7, #44]	; 0x2c
  sBreakDeadTimeConfig.Break2AFMode = TIM_BREAK_AFMODE_INPUT;
 8001c4a:	2300      	movs	r3, #0
 8001c4c:	633b      	str	r3, [r7, #48]	; 0x30
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001c4e:	2300      	movs	r3, #0
 8001c50:	637b      	str	r3, [r7, #52]	; 0x34
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 8001c52:	1d3b      	adds	r3, r7, #4
 8001c54:	4619      	mov	r1, r3
 8001c56:	4807      	ldr	r0, [pc, #28]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001c58:	f005 fc56 	bl	8007508 <HAL_TIMEx_ConfigBreakDeadTime>
 8001c5c:	4603      	mov	r3, r0
 8001c5e:	2b00      	cmp	r3, #0
 8001c60:	d001      	beq.n	8001c66 <MX_TIM1_Init+0x146>
  {
    Error_Handler();
 8001c62:	f7ff fd7f 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 8001c66:	4803      	ldr	r0, [pc, #12]	; (8001c74 <MX_TIM1_Init+0x154>)
 8001c68:	f000 f8dc 	bl	8001e24 <HAL_TIM_MspPostInit>

}
 8001c6c:	bf00      	nop
 8001c6e:	3760      	adds	r7, #96	; 0x60
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd80      	pop	{r7, pc}
 8001c74:	200004bc 	.word	0x200004bc
 8001c78:	40012c00 	.word	0x40012c00

08001c7c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 8001c7c:	b580      	push	{r7, lr}
 8001c7e:	b088      	sub	sp, #32
 8001c80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_HallSensor_InitTypeDef sConfig = {0};
 8001c82:	f107 0310 	add.w	r3, r7, #16
 8001c86:	2200      	movs	r2, #0
 8001c88:	601a      	str	r2, [r3, #0]
 8001c8a:	605a      	str	r2, [r3, #4]
 8001c8c:	609a      	str	r2, [r3, #8]
 8001c8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001c90:	1d3b      	adds	r3, r7, #4
 8001c92:	2200      	movs	r2, #0
 8001c94:	601a      	str	r2, [r3, #0]
 8001c96:	605a      	str	r2, [r3, #4]
 8001c98:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001c9a:	4b1c      	ldr	r3, [pc, #112]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001c9c:	4a1c      	ldr	r2, [pc, #112]	; (8001d10 <MX_TIM3_Init+0x94>)
 8001c9e:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 8001ca0:	4b1a      	ldr	r3, [pc, #104]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001ca2:	2200      	movs	r2, #0
 8001ca4:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ca6:	4b19      	ldr	r3, [pc, #100]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001ca8:	2200      	movs	r2, #0
 8001caa:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 8001cac:	4b17      	ldr	r3, [pc, #92]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001cae:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001cb2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001cb4:	4b15      	ldr	r3, [pc, #84]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cba:	4b14      	ldr	r3, [pc, #80]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001cbc:	2200      	movs	r2, #0
 8001cbe:	619a      	str	r2, [r3, #24]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001cc0:	2300      	movs	r3, #0
 8001cc2:	613b      	str	r3, [r7, #16]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001cc4:	2300      	movs	r3, #0
 8001cc6:	617b      	str	r3, [r7, #20]
  sConfig.IC1Filter = 0;
 8001cc8:	2300      	movs	r3, #0
 8001cca:	61bb      	str	r3, [r7, #24]
  sConfig.Commutation_Delay = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	61fb      	str	r3, [r7, #28]
  if (HAL_TIMEx_HallSensor_Init(&htim3, &sConfig) != HAL_OK)
 8001cd0:	f107 0310 	add.w	r3, r7, #16
 8001cd4:	4619      	mov	r1, r3
 8001cd6:	480d      	ldr	r0, [pc, #52]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001cd8:	f005 f9b1 	bl	800703e <HAL_TIMEx_HallSensor_Init>
 8001cdc:	4603      	mov	r3, r0
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d001      	beq.n	8001ce6 <MX_TIM3_Init+0x6a>
  {
    Error_Handler();
 8001ce2:	f7ff fd3f 	bl	8001764 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_OC2REF;
 8001ce6:	2350      	movs	r3, #80	; 0x50
 8001ce8:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001cea:	2300      	movs	r3, #0
 8001cec:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001cee:	1d3b      	adds	r3, r7, #4
 8001cf0:	4619      	mov	r1, r3
 8001cf2:	4806      	ldr	r0, [pc, #24]	; (8001d0c <MX_TIM3_Init+0x90>)
 8001cf4:	f005 fb72 	bl	80073dc <HAL_TIMEx_MasterConfigSynchronization>
 8001cf8:	4603      	mov	r3, r0
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d001      	beq.n	8001d02 <MX_TIM3_Init+0x86>
  {
    Error_Handler();
 8001cfe:	f7ff fd31 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001d02:	bf00      	nop
 8001d04:	3720      	adds	r7, #32
 8001d06:	46bd      	mov	sp, r7
 8001d08:	bd80      	pop	{r7, pc}
 8001d0a:	bf00      	nop
 8001d0c:	20000508 	.word	0x20000508
 8001d10:	40000400 	.word	0x40000400

08001d14 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001d14:	b580      	push	{r7, lr}
 8001d16:	b084      	sub	sp, #16
 8001d18:	af00      	add	r7, sp, #0
 8001d1a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM1)
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	4a0d      	ldr	r2, [pc, #52]	; (8001d58 <HAL_TIM_PWM_MspInit+0x44>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d113      	bne.n	8001d4e <HAL_TIM_PWM_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001d26:	4b0d      	ldr	r3, [pc, #52]	; (8001d5c <HAL_TIM_PWM_MspInit+0x48>)
 8001d28:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d2a:	4a0c      	ldr	r2, [pc, #48]	; (8001d5c <HAL_TIM_PWM_MspInit+0x48>)
 8001d2c:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8001d30:	6613      	str	r3, [r2, #96]	; 0x60
 8001d32:	4b0a      	ldr	r3, [pc, #40]	; (8001d5c <HAL_TIM_PWM_MspInit+0x48>)
 8001d34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8001d3a:	60fb      	str	r3, [r7, #12]
 8001d3c:	68fb      	ldr	r3, [r7, #12]

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_UP_TIM16_IRQn, 0, 0);
 8001d3e:	2200      	movs	r2, #0
 8001d40:	2100      	movs	r1, #0
 8001d42:	2019      	movs	r0, #25
 8001d44:	f002 f9f4 	bl	8004130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_UP_TIM16_IRQn);
 8001d48:	2019      	movs	r0, #25
 8001d4a:	f002 fa0b 	bl	8004164 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 8001d4e:	bf00      	nop
 8001d50:	3710      	adds	r7, #16
 8001d52:	46bd      	mov	sp, r7
 8001d54:	bd80      	pop	{r7, pc}
 8001d56:	bf00      	nop
 8001d58:	40012c00 	.word	0x40012c00
 8001d5c:	40021000 	.word	0x40021000

08001d60 <HAL_TIMEx_HallSensor_MspInit>:

void HAL_TIMEx_HallSensor_MspInit(TIM_HandleTypeDef* timex_hallsensorHandle)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	b08a      	sub	sp, #40	; 0x28
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d68:	f107 0314 	add.w	r3, r7, #20
 8001d6c:	2200      	movs	r2, #0
 8001d6e:	601a      	str	r2, [r3, #0]
 8001d70:	605a      	str	r2, [r3, #4]
 8001d72:	609a      	str	r2, [r3, #8]
 8001d74:	60da      	str	r2, [r3, #12]
 8001d76:	611a      	str	r2, [r3, #16]
  if(timex_hallsensorHandle->Instance==TIM3)
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4a26      	ldr	r2, [pc, #152]	; (8001e18 <HAL_TIMEx_HallSensor_MspInit+0xb8>)
 8001d7e:	4293      	cmp	r3, r2
 8001d80:	d145      	bne.n	8001e0e <HAL_TIMEx_HallSensor_MspInit+0xae>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* TIM3 clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001d82:	4b26      	ldr	r3, [pc, #152]	; (8001e1c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d86:	4a25      	ldr	r2, [pc, #148]	; (8001e1c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d88:	f043 0302 	orr.w	r3, r3, #2
 8001d8c:	6593      	str	r3, [r2, #88]	; 0x58
 8001d8e:	4b23      	ldr	r3, [pc, #140]	; (8001e1c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d92:	f003 0302 	and.w	r3, r3, #2
 8001d96:	613b      	str	r3, [r7, #16]
 8001d98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001d9a:	4b20      	ldr	r3, [pc, #128]	; (8001e1c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001d9c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001d9e:	4a1f      	ldr	r2, [pc, #124]	; (8001e1c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001da0:	f043 0301 	orr.w	r3, r3, #1
 8001da4:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001da6:	4b1d      	ldr	r3, [pc, #116]	; (8001e1c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001da8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001daa:	f003 0301 	and.w	r3, r3, #1
 8001dae:	60fb      	str	r3, [r7, #12]
 8001db0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001db2:	4b1a      	ldr	r3, [pc, #104]	; (8001e1c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001db4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001db6:	4a19      	ldr	r2, [pc, #100]	; (8001e1c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001db8:	f043 0304 	orr.w	r3, r3, #4
 8001dbc:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001dbe:	4b17      	ldr	r3, [pc, #92]	; (8001e1c <HAL_TIMEx_HallSensor_MspInit+0xbc>)
 8001dc0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001dc2:	f003 0304 	and.w	r3, r3, #4
 8001dc6:	60bb      	str	r3, [r7, #8]
 8001dc8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA4     ------> TIM3_CH2
    PA6     ------> TIM3_CH1
    PC8     ------> TIM3_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_6;
 8001dca:	2350      	movs	r3, #80	; 0x50
 8001dcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001dce:	2302      	movs	r3, #2
 8001dd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dda:	2302      	movs	r3, #2
 8001ddc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001dde:	f107 0314 	add.w	r3, r7, #20
 8001de2:	4619      	mov	r1, r3
 8001de4:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001de8:	f002 fcfc 	bl	80047e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001dec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001df0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001df2:	2302      	movs	r3, #2
 8001df4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001df6:	2300      	movs	r3, #0
 8001df8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001dfa:	2300      	movs	r3, #0
 8001dfc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8001dfe:	2302      	movs	r3, #2
 8001e00:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e02:	f107 0314 	add.w	r3, r7, #20
 8001e06:	4619      	mov	r1, r3
 8001e08:	4805      	ldr	r0, [pc, #20]	; (8001e20 <HAL_TIMEx_HallSensor_MspInit+0xc0>)
 8001e0a:	f002 fceb 	bl	80047e4 <HAL_GPIO_Init>

  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 8001e0e:	bf00      	nop
 8001e10:	3728      	adds	r7, #40	; 0x28
 8001e12:	46bd      	mov	sp, r7
 8001e14:	bd80      	pop	{r7, pc}
 8001e16:	bf00      	nop
 8001e18:	40000400 	.word	0x40000400
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	48000800 	.word	0x48000800

08001e24 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b08a      	sub	sp, #40	; 0x28
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e2c:	f107 0314 	add.w	r3, r7, #20
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
 8001e34:	605a      	str	r2, [r3, #4]
 8001e36:	609a      	str	r2, [r3, #8]
 8001e38:	60da      	str	r2, [r3, #12]
 8001e3a:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM1)
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	4a29      	ldr	r2, [pc, #164]	; (8001ee8 <HAL_TIM_MspPostInit+0xc4>)
 8001e42:	4293      	cmp	r3, r2
 8001e44:	d14b      	bne.n	8001ede <HAL_TIM_MspPostInit+0xba>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e46:	4b29      	ldr	r3, [pc, #164]	; (8001eec <HAL_TIM_MspPostInit+0xc8>)
 8001e48:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e4a:	4a28      	ldr	r2, [pc, #160]	; (8001eec <HAL_TIM_MspPostInit+0xc8>)
 8001e4c:	f043 0302 	orr.w	r3, r3, #2
 8001e50:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e52:	4b26      	ldr	r3, [pc, #152]	; (8001eec <HAL_TIM_MspPostInit+0xc8>)
 8001e54:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e56:	f003 0302 	and.w	r3, r3, #2
 8001e5a:	613b      	str	r3, [r7, #16]
 8001e5c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e5e:	4b23      	ldr	r3, [pc, #140]	; (8001eec <HAL_TIM_MspPostInit+0xc8>)
 8001e60:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e62:	4a22      	ldr	r2, [pc, #136]	; (8001eec <HAL_TIM_MspPostInit+0xc8>)
 8001e64:	f043 0301 	orr.w	r3, r3, #1
 8001e68:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001e6a:	4b20      	ldr	r3, [pc, #128]	; (8001eec <HAL_TIM_MspPostInit+0xc8>)
 8001e6c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001e6e:	f003 0301 	and.w	r3, r3, #1
 8001e72:	60fb      	str	r3, [r7, #12]
 8001e74:	68fb      	ldr	r3, [r7, #12]
    PB15     ------> TIM1_CH3N
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    PA10     ------> TIM1_CH3
    */
    GPIO_InitStruct.Pin = U_PWM_L_Pin|V_PWM_L_Pin;
 8001e76:	f44f 43c0 	mov.w	r3, #24576	; 0x6000
 8001e7a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e7c:	2302      	movs	r3, #2
 8001e7e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e80:	2300      	movs	r3, #0
 8001e82:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e84:	2300      	movs	r3, #0
 8001e86:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001e88:	2306      	movs	r3, #6
 8001e8a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e8c:	f107 0314 	add.w	r3, r7, #20
 8001e90:	4619      	mov	r1, r3
 8001e92:	4817      	ldr	r0, [pc, #92]	; (8001ef0 <HAL_TIM_MspPostInit+0xcc>)
 8001e94:	f002 fca6 	bl	80047e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = W_PWM_L_Pin;
 8001e98:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001e9c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e9e:	2302      	movs	r3, #2
 8001ea0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_TIM1;
 8001eaa:	2304      	movs	r3, #4
 8001eac:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(W_PWM_L_GPIO_Port, &GPIO_InitStruct);
 8001eae:	f107 0314 	add.w	r3, r7, #20
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	480e      	ldr	r0, [pc, #56]	; (8001ef0 <HAL_TIM_MspPostInit+0xcc>)
 8001eb6:	f002 fc95 	bl	80047e4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = U_PWM_H_Pin|V_PWM_H_Pin|W_PWM_H_Pin;
 8001eba:	f44f 63e0 	mov.w	r3, #1792	; 0x700
 8001ebe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ec0:	2302      	movs	r3, #2
 8001ec2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ec4:	2300      	movs	r3, #0
 8001ec6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ec8:	2300      	movs	r3, #0
 8001eca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF6_TIM1;
 8001ecc:	2306      	movs	r3, #6
 8001ece:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ed0:	f107 0314 	add.w	r3, r7, #20
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8001eda:	f002 fc83 	bl	80047e4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8001ede:	bf00      	nop
 8001ee0:	3728      	adds	r7, #40	; 0x28
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bd80      	pop	{r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	40012c00 	.word	0x40012c00
 8001eec:	40021000 	.word	0x40021000
 8001ef0:	48000400 	.word	0x48000400

08001ef4 <MX_USART2_UART_Init>:
UART_HandleTypeDef huart3;

/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ef8:	4b22      	ldr	r3, [pc, #136]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001efa:	4a23      	ldr	r2, [pc, #140]	; (8001f88 <MX_USART2_UART_Init+0x94>)
 8001efc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001efe:	4b21      	ldr	r3, [pc, #132]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f00:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f04:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001f06:	4b1f      	ldr	r3, [pc, #124]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001f0c:	4b1d      	ldr	r3, [pc, #116]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f0e:	2200      	movs	r2, #0
 8001f10:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001f12:	4b1c      	ldr	r3, [pc, #112]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f14:	2200      	movs	r2, #0
 8001f16:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001f18:	4b1a      	ldr	r3, [pc, #104]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f1a:	220c      	movs	r2, #12
 8001f1c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001f1e:	4b19      	ldr	r3, [pc, #100]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f20:	2200      	movs	r2, #0
 8001f22:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001f24:	4b17      	ldr	r3, [pc, #92]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001f2a:	4b16      	ldr	r3, [pc, #88]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	621a      	str	r2, [r3, #32]
  huart2.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001f30:	4b14      	ldr	r3, [pc, #80]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	625a      	str	r2, [r3, #36]	; 0x24
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001f36:	4b13      	ldr	r3, [pc, #76]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f38:	2200      	movs	r2, #0
 8001f3a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001f3c:	4811      	ldr	r0, [pc, #68]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f3e:	f005 fc00 	bl	8007742 <HAL_UART_Init>
 8001f42:	4603      	mov	r3, r0
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	d001      	beq.n	8001f4c <MX_USART2_UART_Init+0x58>
  {
    Error_Handler();
 8001f48:	f7ff fc0c 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart2, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f4c:	2100      	movs	r1, #0
 8001f4e:	480d      	ldr	r0, [pc, #52]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f50:	f007 fba3 	bl	800969a <HAL_UARTEx_SetTxFifoThreshold>
 8001f54:	4603      	mov	r3, r0
 8001f56:	2b00      	cmp	r3, #0
 8001f58:	d001      	beq.n	8001f5e <MX_USART2_UART_Init+0x6a>
  {
    Error_Handler();
 8001f5a:	f7ff fc03 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart2, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001f5e:	2100      	movs	r1, #0
 8001f60:	4808      	ldr	r0, [pc, #32]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f62:	f007 fbd8 	bl	8009716 <HAL_UARTEx_SetRxFifoThreshold>
 8001f66:	4603      	mov	r3, r0
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	d001      	beq.n	8001f70 <MX_USART2_UART_Init+0x7c>
  {
    Error_Handler();
 8001f6c:	f7ff fbfa 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart2) != HAL_OK)
 8001f70:	4804      	ldr	r0, [pc, #16]	; (8001f84 <MX_USART2_UART_Init+0x90>)
 8001f72:	f007 fb59 	bl	8009628 <HAL_UARTEx_DisableFifoMode>
 8001f76:	4603      	mov	r3, r0
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d001      	beq.n	8001f80 <MX_USART2_UART_Init+0x8c>
  {
    Error_Handler();
 8001f7c:	f7ff fbf2 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001f80:	bf00      	nop
 8001f82:	bd80      	pop	{r7, pc}
 8001f84:	20000554 	.word	0x20000554
 8001f88:	40004400 	.word	0x40004400

08001f8c <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001f92:	4a23      	ldr	r2, [pc, #140]	; (8002020 <MX_USART3_UART_Init+0x94>)
 8001f94:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001f96:	4b21      	ldr	r3, [pc, #132]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001f98:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001f9c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001f9e:	4b1f      	ldr	r3, [pc, #124]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001fa4:	4b1d      	ldr	r3, [pc, #116]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001faa:	4b1c      	ldr	r3, [pc, #112]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001fb0:	4b1a      	ldr	r3, [pc, #104]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001fb2:	220c      	movs	r2, #12
 8001fb4:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001fb6:	4b19      	ldr	r3, [pc, #100]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001fbc:	4b17      	ldr	r3, [pc, #92]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8001fc2:	4b16      	ldr	r3, [pc, #88]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	621a      	str	r2, [r3, #32]
  huart3.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8001fc8:	4b14      	ldr	r3, [pc, #80]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	625a      	str	r2, [r3, #36]	; 0x24
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001fce:	4b13      	ldr	r3, [pc, #76]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001fd4:	4811      	ldr	r0, [pc, #68]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001fd6:	f005 fbb4 	bl	8007742 <HAL_UART_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_USART3_UART_Init+0x58>
  {
    Error_Handler();
 8001fe0:	f7ff fbc0 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart3, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001fe4:	2100      	movs	r1, #0
 8001fe6:	480d      	ldr	r0, [pc, #52]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001fe8:	f007 fb57 	bl	800969a <HAL_UARTEx_SetTxFifoThreshold>
 8001fec:	4603      	mov	r3, r0
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	d001      	beq.n	8001ff6 <MX_USART3_UART_Init+0x6a>
  {
    Error_Handler();
 8001ff2:	f7ff fbb7 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart3, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8001ff6:	2100      	movs	r1, #0
 8001ff8:	4808      	ldr	r0, [pc, #32]	; (800201c <MX_USART3_UART_Init+0x90>)
 8001ffa:	f007 fb8c 	bl	8009716 <HAL_UARTEx_SetRxFifoThreshold>
 8001ffe:	4603      	mov	r3, r0
 8002000:	2b00      	cmp	r3, #0
 8002002:	d001      	beq.n	8002008 <MX_USART3_UART_Init+0x7c>
  {
    Error_Handler();
 8002004:	f7ff fbae 	bl	8001764 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart3) != HAL_OK)
 8002008:	4804      	ldr	r0, [pc, #16]	; (800201c <MX_USART3_UART_Init+0x90>)
 800200a:	f007 fb0d 	bl	8009628 <HAL_UARTEx_DisableFifoMode>
 800200e:	4603      	mov	r3, r0
 8002010:	2b00      	cmp	r3, #0
 8002012:	d001      	beq.n	8002018 <MX_USART3_UART_Init+0x8c>
  {
    Error_Handler();
 8002014:	f7ff fba6 	bl	8001764 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002018:	bf00      	nop
 800201a:	bd80      	pop	{r7, pc}
 800201c:	200005e4 	.word	0x200005e4
 8002020:	40004800 	.word	0x40004800

08002024 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b0a0      	sub	sp, #128	; 0x80
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800202c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002030:	2200      	movs	r2, #0
 8002032:	601a      	str	r2, [r3, #0]
 8002034:	605a      	str	r2, [r3, #4]
 8002036:	609a      	str	r2, [r3, #8]
 8002038:	60da      	str	r2, [r3, #12]
 800203a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 800203c:	f107 0318 	add.w	r3, r7, #24
 8002040:	2254      	movs	r2, #84	; 0x54
 8002042:	2100      	movs	r1, #0
 8002044:	4618      	mov	r0, r3
 8002046:	f008 fa10 	bl	800a46a <memset>
  if(uartHandle->Instance==USART2)
 800204a:	687b      	ldr	r3, [r7, #4]
 800204c:	681b      	ldr	r3, [r3, #0]
 800204e:	4a45      	ldr	r2, [pc, #276]	; (8002164 <HAL_UART_MspInit+0x140>)
 8002050:	4293      	cmp	r3, r2
 8002052:	d13f      	bne.n	80020d4 <HAL_UART_MspInit+0xb0>

  /* USER CODE END USART2_MspInit 0 */

  /** Initializes the peripherals clocks
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002054:	2302      	movs	r3, #2
 8002056:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002058:	2300      	movs	r3, #0
 800205a:	623b      	str	r3, [r7, #32]
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800205c:	f107 0318 	add.w	r3, r7, #24
 8002060:	4618      	mov	r0, r3
 8002062:	f003 fb97 	bl	8005794 <HAL_RCCEx_PeriphCLKConfig>
 8002066:	4603      	mov	r3, r0
 8002068:	2b00      	cmp	r3, #0
 800206a:	d001      	beq.n	8002070 <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 800206c:	f7ff fb7a 	bl	8001764 <Error_Handler>
    }

    /* USART2 clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002070:	4b3d      	ldr	r3, [pc, #244]	; (8002168 <HAL_UART_MspInit+0x144>)
 8002072:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002074:	4a3c      	ldr	r2, [pc, #240]	; (8002168 <HAL_UART_MspInit+0x144>)
 8002076:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800207a:	6593      	str	r3, [r2, #88]	; 0x58
 800207c:	4b3a      	ldr	r3, [pc, #232]	; (8002168 <HAL_UART_MspInit+0x144>)
 800207e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002080:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002084:	617b      	str	r3, [r7, #20]
 8002086:	697b      	ldr	r3, [r7, #20]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002088:	4b37      	ldr	r3, [pc, #220]	; (8002168 <HAL_UART_MspInit+0x144>)
 800208a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800208c:	4a36      	ldr	r2, [pc, #216]	; (8002168 <HAL_UART_MspInit+0x144>)
 800208e:	f043 0301 	orr.w	r3, r3, #1
 8002092:	64d3      	str	r3, [r2, #76]	; 0x4c
 8002094:	4b34      	ldr	r3, [pc, #208]	; (8002168 <HAL_UART_MspInit+0x144>)
 8002096:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002098:	f003 0301 	and.w	r3, r3, #1
 800209c:	613b      	str	r3, [r7, #16]
 800209e:	693b      	ldr	r3, [r7, #16]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020a0:	230c      	movs	r3, #12
 80020a2:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020a4:	2302      	movs	r3, #2
 80020a6:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020a8:	2300      	movs	r3, #0
 80020aa:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020ac:	2300      	movs	r3, #0
 80020ae:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80020b0:	2307      	movs	r3, #7
 80020b2:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020b4:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 80020b8:	4619      	mov	r1, r3
 80020ba:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80020be:	f002 fb91 	bl	80047e4 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80020c2:	2200      	movs	r2, #0
 80020c4:	2100      	movs	r1, #0
 80020c6:	2026      	movs	r0, #38	; 0x26
 80020c8:	f002 f832 	bl	8004130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80020cc:	2026      	movs	r0, #38	; 0x26
 80020ce:	f002 f849 	bl	8004164 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }
}
 80020d2:	e043      	b.n	800215c <HAL_UART_MspInit+0x138>
  else if(uartHandle->Instance==USART3)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	4a24      	ldr	r2, [pc, #144]	; (800216c <HAL_UART_MspInit+0x148>)
 80020da:	4293      	cmp	r3, r2
 80020dc:	d13e      	bne.n	800215c <HAL_UART_MspInit+0x138>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 80020de:	2304      	movs	r3, #4
 80020e0:	61bb      	str	r3, [r7, #24]
    PeriphClkInit.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80020e6:	f107 0318 	add.w	r3, r7, #24
 80020ea:	4618      	mov	r0, r3
 80020ec:	f003 fb52 	bl	8005794 <HAL_RCCEx_PeriphCLKConfig>
 80020f0:	4603      	mov	r3, r0
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d001      	beq.n	80020fa <HAL_UART_MspInit+0xd6>
      Error_Handler();
 80020f6:	f7ff fb35 	bl	8001764 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 80020fa:	4b1b      	ldr	r3, [pc, #108]	; (8002168 <HAL_UART_MspInit+0x144>)
 80020fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020fe:	4a1a      	ldr	r2, [pc, #104]	; (8002168 <HAL_UART_MspInit+0x144>)
 8002100:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002104:	6593      	str	r3, [r2, #88]	; 0x58
 8002106:	4b18      	ldr	r3, [pc, #96]	; (8002168 <HAL_UART_MspInit+0x144>)
 8002108:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800210a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002112:	4b15      	ldr	r3, [pc, #84]	; (8002168 <HAL_UART_MspInit+0x144>)
 8002114:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002116:	4a14      	ldr	r2, [pc, #80]	; (8002168 <HAL_UART_MspInit+0x144>)
 8002118:	f043 0304 	orr.w	r3, r3, #4
 800211c:	64d3      	str	r3, [r2, #76]	; 0x4c
 800211e:	4b12      	ldr	r3, [pc, #72]	; (8002168 <HAL_UART_MspInit+0x144>)
 8002120:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002122:	f003 0304 	and.w	r3, r3, #4
 8002126:	60bb      	str	r3, [r7, #8]
 8002128:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 800212a:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800212e:	66fb      	str	r3, [r7, #108]	; 0x6c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002130:	2302      	movs	r3, #2
 8002132:	673b      	str	r3, [r7, #112]	; 0x70
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002134:	2300      	movs	r3, #0
 8002136:	677b      	str	r3, [r7, #116]	; 0x74
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002138:	2300      	movs	r3, #0
 800213a:	67bb      	str	r3, [r7, #120]	; 0x78
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800213c:	2307      	movs	r3, #7
 800213e:	67fb      	str	r3, [r7, #124]	; 0x7c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002140:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8002144:	4619      	mov	r1, r3
 8002146:	480a      	ldr	r0, [pc, #40]	; (8002170 <HAL_UART_MspInit+0x14c>)
 8002148:	f002 fb4c 	bl	80047e4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 800214c:	2200      	movs	r2, #0
 800214e:	2100      	movs	r1, #0
 8002150:	2027      	movs	r0, #39	; 0x27
 8002152:	f001 ffed 	bl	8004130 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002156:	2027      	movs	r0, #39	; 0x27
 8002158:	f002 f804 	bl	8004164 <HAL_NVIC_EnableIRQ>
}
 800215c:	bf00      	nop
 800215e:	3780      	adds	r7, #128	; 0x80
 8002160:	46bd      	mov	sp, r7
 8002162:	bd80      	pop	{r7, pc}
 8002164:	40004400 	.word	0x40004400
 8002168:	40021000 	.word	0x40021000
 800216c:	40004800 	.word	0x40004800
 8002170:	48000800 	.word	0x48000800

08002174 <Shell_Init>:
char* 		argv[MAX_ARGS];
int		 	argc = 0;
char*		token;
int 		newCmdReady = 0;

void Shell_Init(void){
 8002174:	b580      	push	{r7, lr}
 8002176:	af00      	add	r7, sp, #0
	memset(argv, NULL, MAX_ARGS*sizeof(char*));
 8002178:	2224      	movs	r2, #36	; 0x24
 800217a:	2100      	movs	r1, #0
 800217c:	4816      	ldr	r0, [pc, #88]	; (80021d8 <Shell_Init+0x64>)
 800217e:	f008 f974 	bl	800a46a <memset>
	memset(cmdBuffer, NULL, CMD_BUFFER_SIZE*sizeof(char));
 8002182:	2240      	movs	r2, #64	; 0x40
 8002184:	2100      	movs	r1, #0
 8002186:	4815      	ldr	r0, [pc, #84]	; (80021dc <Shell_Init+0x68>)
 8002188:	f008 f96f 	bl	800a46a <memset>
 800218c:	4b14      	ldr	r3, [pc, #80]	; (80021e0 <Shell_Init+0x6c>)
 800218e:	2200      	movs	r2, #0
 8002190:	701a      	strb	r2, [r3, #0]
	memset(uartRxBuffer, NULL, UART_RX_BUFFER_SIZE*sizeof(char));
	memset(uartTxBuffer, NULL, UART_TX_BUFFER_SIZE*sizeof(char));
 8002192:	2240      	movs	r2, #64	; 0x40
 8002194:	2100      	movs	r1, #0
 8002196:	4813      	ldr	r0, [pc, #76]	; (80021e4 <Shell_Init+0x70>)
 8002198:	f008 f967 	bl	800a46a <memset>

	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 800219c:	2201      	movs	r2, #1
 800219e:	4910      	ldr	r1, [pc, #64]	; (80021e0 <Shell_Init+0x6c>)
 80021a0:	4811      	ldr	r0, [pc, #68]	; (80021e8 <Shell_Init+0x74>)
 80021a2:	f005 fbb5 	bl	8007910 <HAL_UART_Receive_IT>
	HAL_UART_Transmit(&huart2, started, strlen((char *)started), HAL_MAX_DELAY);
 80021a6:	4811      	ldr	r0, [pc, #68]	; (80021ec <Shell_Init+0x78>)
 80021a8:	f7fe f89a 	bl	80002e0 <strlen>
 80021ac:	4603      	mov	r3, r0
 80021ae:	b29a      	uxth	r2, r3
 80021b0:	f04f 33ff 	mov.w	r3, #4294967295
 80021b4:	490d      	ldr	r1, [pc, #52]	; (80021ec <Shell_Init+0x78>)
 80021b6:	480c      	ldr	r0, [pc, #48]	; (80021e8 <Shell_Init+0x74>)
 80021b8:	f005 fb13 	bl	80077e2 <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart2, prompt, strlen((char *)prompt), HAL_MAX_DELAY);
 80021bc:	480c      	ldr	r0, [pc, #48]	; (80021f0 <Shell_Init+0x7c>)
 80021be:	f7fe f88f 	bl	80002e0 <strlen>
 80021c2:	4603      	mov	r3, r0
 80021c4:	b29a      	uxth	r2, r3
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	4909      	ldr	r1, [pc, #36]	; (80021f0 <Shell_Init+0x7c>)
 80021cc:	4806      	ldr	r0, [pc, #24]	; (80021e8 <Shell_Init+0x74>)
 80021ce:	f005 fb08 	bl	80077e2 <HAL_UART_Transmit>
}
 80021d2:	bf00      	nop
 80021d4:	bd80      	pop	{r7, pc}
 80021d6:	bf00      	nop
 80021d8:	20000700 	.word	0x20000700
 80021dc:	200006bc 	.word	0x200006bc
 80021e0:	20000678 	.word	0x20000678
 80021e4:	2000067c 	.word	0x2000067c
 80021e8:	20000554 	.word	0x20000554
 80021ec:	20000020 	.word	0x20000020
 80021f0:	20000004 	.word	0x20000004

080021f4 <Shell_Loop>:

void Shell_Loop(void){
 80021f4:	b5b0      	push	{r4, r5, r7, lr}
 80021f6:	b08a      	sub	sp, #40	; 0x28
 80021f8:	af04      	add	r7, sp, #16
	if(uartRxReceived){
 80021fa:	4ba0      	ldr	r3, [pc, #640]	; (800247c <Shell_Loop+0x288>)
 80021fc:	781b      	ldrb	r3, [r3, #0]
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d05b      	beq.n	80022ba <Shell_Loop+0xc6>
		switch(uartRxBuffer[0]){
 8002202:	4b9f      	ldr	r3, [pc, #636]	; (8002480 <Shell_Loop+0x28c>)
 8002204:	781b      	ldrb	r3, [r3, #0]
 8002206:	2b08      	cmp	r3, #8
 8002208:	d034      	beq.n	8002274 <Shell_Loop+0x80>
 800220a:	2b0d      	cmp	r3, #13
 800220c:	d142      	bne.n	8002294 <Shell_Loop+0xa0>
		case ASCII_CR: // Nouvelle ligne, instruction à traiter
			HAL_UART_Transmit(&huart2, newline, sizeof(newline), HAL_MAX_DELAY);
 800220e:	f04f 33ff 	mov.w	r3, #4294967295
 8002212:	2203      	movs	r2, #3
 8002214:	499b      	ldr	r1, [pc, #620]	; (8002484 <Shell_Loop+0x290>)
 8002216:	489c      	ldr	r0, [pc, #624]	; (8002488 <Shell_Loop+0x294>)
 8002218:	f005 fae3 	bl	80077e2 <HAL_UART_Transmit>
			cmdBuffer[idx_cmd] = '\0';
 800221c:	4b9b      	ldr	r3, [pc, #620]	; (800248c <Shell_Loop+0x298>)
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a9b      	ldr	r2, [pc, #620]	; (8002490 <Shell_Loop+0x29c>)
 8002222:	2100      	movs	r1, #0
 8002224:	54d1      	strb	r1, [r2, r3]
			argc = 0;
 8002226:	4b9b      	ldr	r3, [pc, #620]	; (8002494 <Shell_Loop+0x2a0>)
 8002228:	2200      	movs	r2, #0
 800222a:	601a      	str	r2, [r3, #0]
			token = strtok(cmdBuffer, " ");
 800222c:	499a      	ldr	r1, [pc, #616]	; (8002498 <Shell_Loop+0x2a4>)
 800222e:	4898      	ldr	r0, [pc, #608]	; (8002490 <Shell_Loop+0x29c>)
 8002230:	f008 f924 	bl	800a47c <strtok>
 8002234:	4603      	mov	r3, r0
 8002236:	4a99      	ldr	r2, [pc, #612]	; (800249c <Shell_Loop+0x2a8>)
 8002238:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800223a:	e010      	b.n	800225e <Shell_Loop+0x6a>
				argv[argc++] = token;
 800223c:	4b95      	ldr	r3, [pc, #596]	; (8002494 <Shell_Loop+0x2a0>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	1c5a      	adds	r2, r3, #1
 8002242:	4994      	ldr	r1, [pc, #592]	; (8002494 <Shell_Loop+0x2a0>)
 8002244:	600a      	str	r2, [r1, #0]
 8002246:	4a95      	ldr	r2, [pc, #596]	; (800249c <Shell_Loop+0x2a8>)
 8002248:	6812      	ldr	r2, [r2, #0]
 800224a:	4995      	ldr	r1, [pc, #596]	; (80024a0 <Shell_Loop+0x2ac>)
 800224c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
				token = strtok(NULL, " ");
 8002250:	4991      	ldr	r1, [pc, #580]	; (8002498 <Shell_Loop+0x2a4>)
 8002252:	2000      	movs	r0, #0
 8002254:	f008 f912 	bl	800a47c <strtok>
 8002258:	4603      	mov	r3, r0
 800225a:	4a90      	ldr	r2, [pc, #576]	; (800249c <Shell_Loop+0x2a8>)
 800225c:	6013      	str	r3, [r2, #0]
			while(token!=NULL){
 800225e:	4b8f      	ldr	r3, [pc, #572]	; (800249c <Shell_Loop+0x2a8>)
 8002260:	681b      	ldr	r3, [r3, #0]
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ea      	bne.n	800223c <Shell_Loop+0x48>
			}
			idx_cmd = 0;
 8002266:	4b89      	ldr	r3, [pc, #548]	; (800248c <Shell_Loop+0x298>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]
			newCmdReady = 1;
 800226c:	4b8d      	ldr	r3, [pc, #564]	; (80024a4 <Shell_Loop+0x2b0>)
 800226e:	2201      	movs	r2, #1
 8002270:	601a      	str	r2, [r3, #0]
			break;
 8002272:	e01f      	b.n	80022b4 <Shell_Loop+0xc0>
		case ASCII_BACK: // Suppression du dernier caractère
			cmdBuffer[idx_cmd--] = '\0';
 8002274:	4b85      	ldr	r3, [pc, #532]	; (800248c <Shell_Loop+0x298>)
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	1e5a      	subs	r2, r3, #1
 800227a:	4984      	ldr	r1, [pc, #528]	; (800248c <Shell_Loop+0x298>)
 800227c:	600a      	str	r2, [r1, #0]
 800227e:	4a84      	ldr	r2, [pc, #528]	; (8002490 <Shell_Loop+0x29c>)
 8002280:	2100      	movs	r1, #0
 8002282:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, backspace, sizeof(backspace), HAL_MAX_DELAY);
 8002284:	f04f 33ff 	mov.w	r3, #4294967295
 8002288:	2204      	movs	r2, #4
 800228a:	4987      	ldr	r1, [pc, #540]	; (80024a8 <Shell_Loop+0x2b4>)
 800228c:	487e      	ldr	r0, [pc, #504]	; (8002488 <Shell_Loop+0x294>)
 800228e:	f005 faa8 	bl	80077e2 <HAL_UART_Transmit>
			break;
 8002292:	e00f      	b.n	80022b4 <Shell_Loop+0xc0>

		default: // Nouveau caractère
			cmdBuffer[idx_cmd++] = uartRxBuffer[0];
 8002294:	4b7d      	ldr	r3, [pc, #500]	; (800248c <Shell_Loop+0x298>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	1c5a      	adds	r2, r3, #1
 800229a:	497c      	ldr	r1, [pc, #496]	; (800248c <Shell_Loop+0x298>)
 800229c:	600a      	str	r2, [r1, #0]
 800229e:	4a78      	ldr	r2, [pc, #480]	; (8002480 <Shell_Loop+0x28c>)
 80022a0:	7811      	ldrb	r1, [r2, #0]
 80022a2:	4a7b      	ldr	r2, [pc, #492]	; (8002490 <Shell_Loop+0x29c>)
 80022a4:	54d1      	strb	r1, [r2, r3]
			HAL_UART_Transmit(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE, HAL_MAX_DELAY);
 80022a6:	f04f 33ff 	mov.w	r3, #4294967295
 80022aa:	2201      	movs	r2, #1
 80022ac:	4974      	ldr	r1, [pc, #464]	; (8002480 <Shell_Loop+0x28c>)
 80022ae:	4876      	ldr	r0, [pc, #472]	; (8002488 <Shell_Loop+0x294>)
 80022b0:	f005 fa97 	bl	80077e2 <HAL_UART_Transmit>
		}
		uartRxReceived = 0;
 80022b4:	4b71      	ldr	r3, [pc, #452]	; (800247c <Shell_Loop+0x288>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	701a      	strb	r2, [r3, #0]
	}

	if(newCmdReady){
 80022ba:	4b7a      	ldr	r3, [pc, #488]	; (80024a4 <Shell_Loop+0x2b0>)
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	2b00      	cmp	r3, #0
 80022c0:	f000 8182 	beq.w	80025c8 <Shell_Loop+0x3d4>
		if(strcmp(argv[0],"WhereisBrian?")==0){
 80022c4:	4b76      	ldr	r3, [pc, #472]	; (80024a0 <Shell_Loop+0x2ac>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4978      	ldr	r1, [pc, #480]	; (80024ac <Shell_Loop+0x2b8>)
 80022ca:	4618      	mov	r0, r3
 80022cc:	f7fd ffa8 	bl	8000220 <strcmp>
 80022d0:	4603      	mov	r3, r0
 80022d2:	2b00      	cmp	r3, #0
 80022d4:	d107      	bne.n	80022e6 <Shell_Loop+0xf2>
			HAL_UART_Transmit(&huart2, brian, sizeof(brian), HAL_MAX_DELAY);
 80022d6:	f04f 33ff 	mov.w	r3, #4294967295
 80022da:	221a      	movs	r2, #26
 80022dc:	4974      	ldr	r1, [pc, #464]	; (80024b0 <Shell_Loop+0x2bc>)
 80022de:	486a      	ldr	r0, [pc, #424]	; (8002488 <Shell_Loop+0x294>)
 80022e0:	f005 fa7f 	bl	80077e2 <HAL_UART_Transmit>
 80022e4:	e166      	b.n	80025b4 <Shell_Loop+0x3c0>
		}
		else if(strcmp(argv[0],"help")==0){
 80022e6:	4b6e      	ldr	r3, [pc, #440]	; (80024a0 <Shell_Loop+0x2ac>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4972      	ldr	r1, [pc, #456]	; (80024b4 <Shell_Loop+0x2c0>)
 80022ec:	4618      	mov	r0, r3
 80022ee:	f7fd ff97 	bl	8000220 <strcmp>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d10e      	bne.n	8002316 <Shell_Loop+0x122>
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Print all available functions here\r\n");
 80022f8:	4a6f      	ldr	r2, [pc, #444]	; (80024b8 <Shell_Loop+0x2c4>)
 80022fa:	2140      	movs	r1, #64	; 0x40
 80022fc:	486f      	ldr	r0, [pc, #444]	; (80024bc <Shell_Loop+0x2c8>)
 80022fe:	f008 f83d 	bl	800a37c <sniprintf>
 8002302:	6078      	str	r0, [r7, #4]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002304:	687b      	ldr	r3, [r7, #4]
 8002306:	b29a      	uxth	r2, r3
 8002308:	f04f 33ff 	mov.w	r3, #4294967295
 800230c:	496b      	ldr	r1, [pc, #428]	; (80024bc <Shell_Loop+0x2c8>)
 800230e:	485e      	ldr	r0, [pc, #376]	; (8002488 <Shell_Loop+0x294>)
 8002310:	f005 fa67 	bl	80077e2 <HAL_UART_Transmit>
 8002314:	e14e      	b.n	80025b4 <Shell_Loop+0x3c0>
		}
		else if(strcmp(argv[0], "speed") == 0)
 8002316:	4b62      	ldr	r3, [pc, #392]	; (80024a0 <Shell_Loop+0x2ac>)
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	4969      	ldr	r1, [pc, #420]	; (80024c0 <Shell_Loop+0x2cc>)
 800231c:	4618      	mov	r0, r3
 800231e:	f7fd ff7f 	bl	8000220 <strcmp>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d15d      	bne.n	80023e4 <Shell_Loop+0x1f0>
		{
			uint16_t speedValue = atoi(argv[1]);
 8002328:	4b5d      	ldr	r3, [pc, #372]	; (80024a0 <Shell_Loop+0x2ac>)
 800232a:	685b      	ldr	r3, [r3, #4]
 800232c:	4618      	mov	r0, r3
 800232e:	f007 fa7f 	bl	8009830 <atoi>
 8002332:	4603      	mov	r3, r0
 8002334:	82fb      	strh	r3, [r7, #22]

			if(speedValue > MAX_SPEED)
 8002336:	8afb      	ldrh	r3, [r7, #22]
 8002338:	2b64      	cmp	r3, #100	; 0x64
 800233a:	d901      	bls.n	8002340 <Shell_Loop+0x14c>
			{
				speedValue = MAX_SPEED;
 800233c:	2364      	movs	r3, #100	; 0x64
 800233e:	82fb      	strh	r3, [r7, #22]
			else if(speedValue < MIN_SPEED)
			{
				speedValue = MIN_SPEED;
			}

			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "Wait\r\n");
 8002340:	4a60      	ldr	r2, [pc, #384]	; (80024c4 <Shell_Loop+0x2d0>)
 8002342:	2140      	movs	r1, #64	; 0x40
 8002344:	485d      	ldr	r0, [pc, #372]	; (80024bc <Shell_Loop+0x2c8>)
 8002346:	f008 f819 	bl	800a37c <sniprintf>
 800234a:	60b8      	str	r0, [r7, #8]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 800234c:	68bb      	ldr	r3, [r7, #8]
 800234e:	b29a      	uxth	r2, r3
 8002350:	f04f 33ff 	mov.w	r3, #4294967295
 8002354:	4959      	ldr	r1, [pc, #356]	; (80024bc <Shell_Loop+0x2c8>)
 8002356:	484c      	ldr	r0, [pc, #304]	; (8002488 <Shell_Loop+0x294>)
 8002358:	f005 fa43 	bl	80077e2 <HAL_UART_Transmit>

			while(currentSpeed != speedValue)
 800235c:	e03c      	b.n	80023d8 <Shell_Loop+0x1e4>
			{
				if(currentSpeed > speedValue)
 800235e:	4b5a      	ldr	r3, [pc, #360]	; (80024c8 <Shell_Loop+0x2d4>)
 8002360:	881b      	ldrh	r3, [r3, #0]
 8002362:	8afa      	ldrh	r2, [r7, #22]
 8002364:	429a      	cmp	r2, r3
 8002366:	d206      	bcs.n	8002376 <Shell_Loop+0x182>
				{
					currentSpeed--;
 8002368:	4b57      	ldr	r3, [pc, #348]	; (80024c8 <Shell_Loop+0x2d4>)
 800236a:	881b      	ldrh	r3, [r3, #0]
 800236c:	3b01      	subs	r3, #1
 800236e:	b29a      	uxth	r2, r3
 8002370:	4b55      	ldr	r3, [pc, #340]	; (80024c8 <Shell_Loop+0x2d4>)
 8002372:	801a      	strh	r2, [r3, #0]
 8002374:	e00a      	b.n	800238c <Shell_Loop+0x198>
				}
				else if(currentSpeed < speedValue)
 8002376:	4b54      	ldr	r3, [pc, #336]	; (80024c8 <Shell_Loop+0x2d4>)
 8002378:	881b      	ldrh	r3, [r3, #0]
 800237a:	8afa      	ldrh	r2, [r7, #22]
 800237c:	429a      	cmp	r2, r3
 800237e:	d905      	bls.n	800238c <Shell_Loop+0x198>
				{
					currentSpeed++;
 8002380:	4b51      	ldr	r3, [pc, #324]	; (80024c8 <Shell_Loop+0x2d4>)
 8002382:	881b      	ldrh	r3, [r3, #0]
 8002384:	3301      	adds	r3, #1
 8002386:	b29a      	uxth	r2, r3
 8002388:	4b4f      	ldr	r3, [pc, #316]	; (80024c8 <Shell_Loop+0x2d4>)
 800238a:	801a      	strh	r2, [r3, #0]
				}

				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, (MAX_DUTY_CYCLE * currentSpeed)/100);
 800238c:	4b4e      	ldr	r3, [pc, #312]	; (80024c8 <Shell_Loop+0x2d4>)
 800238e:	881b      	ldrh	r3, [r3, #0]
 8002390:	461a      	mov	r2, r3
 8002392:	f241 0399 	movw	r3, #4249	; 0x1099
 8002396:	fb02 f303 	mul.w	r3, r2, r3
 800239a:	4a4c      	ldr	r2, [pc, #304]	; (80024cc <Shell_Loop+0x2d8>)
 800239c:	fb82 1203 	smull	r1, r2, r2, r3
 80023a0:	1152      	asrs	r2, r2, #5
 80023a2:	17db      	asrs	r3, r3, #31
 80023a4:	1ad2      	subs	r2, r2, r3
 80023a6:	4b4a      	ldr	r3, [pc, #296]	; (80024d0 <Shell_Loop+0x2dc>)
 80023a8:	681b      	ldr	r3, [r3, #0]
 80023aa:	635a      	str	r2, [r3, #52]	; 0x34
				__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, MAX_DUTY_CYCLE - (MAX_DUTY_CYCLE * currentSpeed)/100);
 80023ac:	4b46      	ldr	r3, [pc, #280]	; (80024c8 <Shell_Loop+0x2d4>)
 80023ae:	881b      	ldrh	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	f241 0399 	movw	r3, #4249	; 0x1099
 80023b6:	fb02 f303 	mul.w	r3, r2, r3
 80023ba:	4a44      	ldr	r2, [pc, #272]	; (80024cc <Shell_Loop+0x2d8>)
 80023bc:	fb82 1203 	smull	r1, r2, r2, r3
 80023c0:	1152      	asrs	r2, r2, #5
 80023c2:	17db      	asrs	r3, r3, #31
 80023c4:	1a9b      	subs	r3, r3, r2
 80023c6:	f503 5384 	add.w	r3, r3, #4224	; 0x1080
 80023ca:	3319      	adds	r3, #25
 80023cc:	4a40      	ldr	r2, [pc, #256]	; (80024d0 <Shell_Loop+0x2dc>)
 80023ce:	6812      	ldr	r2, [r2, #0]
 80023d0:	6393      	str	r3, [r2, #56]	; 0x38

				HAL_Delay(100);
 80023d2:	2064      	movs	r0, #100	; 0x64
 80023d4:	f000 f98e 	bl	80026f4 <HAL_Delay>
			while(currentSpeed != speedValue)
 80023d8:	4b3b      	ldr	r3, [pc, #236]	; (80024c8 <Shell_Loop+0x2d4>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	8afa      	ldrh	r2, [r7, #22]
 80023de:	429a      	cmp	r2, r3
 80023e0:	d1bd      	bne.n	800235e <Shell_Loop+0x16a>
 80023e2:	e0e7      	b.n	80025b4 <Shell_Loop+0x3c0>
			}
		}
		else if(strcmp(argv[0], "start") == 0)
 80023e4:	4b2e      	ldr	r3, [pc, #184]	; (80024a0 <Shell_Loop+0x2ac>)
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	493a      	ldr	r1, [pc, #232]	; (80024d4 <Shell_Loop+0x2e0>)
 80023ea:	4618      	mov	r0, r3
 80023ec:	f7fd ff18 	bl	8000220 <strcmp>
 80023f0:	4603      	mov	r3, r0
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d172      	bne.n	80024dc <Shell_Loop+0x2e8>
		{
			if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 80023f6:	2100      	movs	r1, #0
 80023f8:	4835      	ldr	r0, [pc, #212]	; (80024d0 <Shell_Loop+0x2dc>)
 80023fa:	f003 fd4b 	bl	8005e94 <HAL_TIM_PWM_Start>
 80023fe:	4603      	mov	r3, r0
 8002400:	2b00      	cmp	r3, #0
 8002402:	d006      	beq.n	8002412 <Shell_Loop+0x21e>
			{
				HAL_UART_Transmit(&huart2, errorMsg, sizeof(errorMsg), HAL_MAX_DELAY);
 8002404:	f04f 33ff 	mov.w	r3, #4294967295
 8002408:	2206      	movs	r2, #6
 800240a:	4933      	ldr	r1, [pc, #204]	; (80024d8 <Shell_Loop+0x2e4>)
 800240c:	481e      	ldr	r0, [pc, #120]	; (8002488 <Shell_Loop+0x294>)
 800240e:	f005 f9e8 	bl	80077e2 <HAL_UART_Transmit>
			}
			if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_1) != HAL_OK)
 8002412:	2100      	movs	r1, #0
 8002414:	482e      	ldr	r0, [pc, #184]	; (80024d0 <Shell_Loop+0x2dc>)
 8002416:	f004 fec1 	bl	800719c <HAL_TIMEx_PWMN_Start>
 800241a:	4603      	mov	r3, r0
 800241c:	2b00      	cmp	r3, #0
 800241e:	d006      	beq.n	800242e <Shell_Loop+0x23a>
			{
				HAL_UART_Transmit(&huart2, errorMsg, sizeof(errorMsg), HAL_MAX_DELAY);
 8002420:	f04f 33ff 	mov.w	r3, #4294967295
 8002424:	2206      	movs	r2, #6
 8002426:	492c      	ldr	r1, [pc, #176]	; (80024d8 <Shell_Loop+0x2e4>)
 8002428:	4817      	ldr	r0, [pc, #92]	; (8002488 <Shell_Loop+0x294>)
 800242a:	f005 f9da 	bl	80077e2 <HAL_UART_Transmit>
			}
			if(HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 800242e:	2104      	movs	r1, #4
 8002430:	4827      	ldr	r0, [pc, #156]	; (80024d0 <Shell_Loop+0x2dc>)
 8002432:	f003 fd2f 	bl	8005e94 <HAL_TIM_PWM_Start>
 8002436:	4603      	mov	r3, r0
 8002438:	2b00      	cmp	r3, #0
 800243a:	d006      	beq.n	800244a <Shell_Loop+0x256>
			{
				HAL_UART_Transmit(&huart2, errorMsg, sizeof(errorMsg), HAL_MAX_DELAY);
 800243c:	f04f 33ff 	mov.w	r3, #4294967295
 8002440:	2206      	movs	r2, #6
 8002442:	4925      	ldr	r1, [pc, #148]	; (80024d8 <Shell_Loop+0x2e4>)
 8002444:	4810      	ldr	r0, [pc, #64]	; (8002488 <Shell_Loop+0x294>)
 8002446:	f005 f9cc 	bl	80077e2 <HAL_UART_Transmit>
			}
			if(HAL_TIMEx_PWMN_Start(&htim1, TIM_CHANNEL_2) != HAL_OK)
 800244a:	2104      	movs	r1, #4
 800244c:	4820      	ldr	r0, [pc, #128]	; (80024d0 <Shell_Loop+0x2dc>)
 800244e:	f004 fea5 	bl	800719c <HAL_TIMEx_PWMN_Start>
 8002452:	4603      	mov	r3, r0
 8002454:	2b00      	cmp	r3, #0
 8002456:	d006      	beq.n	8002466 <Shell_Loop+0x272>
			{
				HAL_UART_Transmit(&huart2, errorMsg, sizeof(errorMsg), HAL_MAX_DELAY);
 8002458:	f04f 33ff 	mov.w	r3, #4294967295
 800245c:	2206      	movs	r2, #6
 800245e:	491e      	ldr	r1, [pc, #120]	; (80024d8 <Shell_Loop+0x2e4>)
 8002460:	4809      	ldr	r0, [pc, #36]	; (8002488 <Shell_Loop+0x294>)
 8002462:	f005 f9be 	bl	80077e2 <HAL_UART_Transmit>
			}
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_1, MAX_DUTY_CYCLE / 2);
 8002466:	4b1a      	ldr	r3, [pc, #104]	; (80024d0 <Shell_Loop+0x2dc>)
 8002468:	681b      	ldr	r3, [r3, #0]
 800246a:	f640 024c 	movw	r2, #2124	; 0x84c
 800246e:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SET_COMPARE(&htim1, TIM_CHANNEL_2, MAX_DUTY_CYCLE / 2);
 8002470:	4b17      	ldr	r3, [pc, #92]	; (80024d0 <Shell_Loop+0x2dc>)
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f640 024c 	movw	r2, #2124	; 0x84c
 8002478:	639a      	str	r2, [r3, #56]	; 0x38
 800247a:	e09b      	b.n	80025b4 <Shell_Loop+0x3c0>
 800247c:	20000674 	.word	0x20000674
 8002480:	20000678 	.word	0x20000678
 8002484:	20000088 	.word	0x20000088
 8002488:	20000554 	.word	0x20000554
 800248c:	200006fc 	.word	0x200006fc
 8002490:	200006bc 	.word	0x200006bc
 8002494:	20000724 	.word	0x20000724
 8002498:	0800c730 	.word	0x0800c730
 800249c:	20000728 	.word	0x20000728
 80024a0:	20000700 	.word	0x20000700
 80024a4:	2000072c 	.word	0x2000072c
 80024a8:	2000008c 	.word	0x2000008c
 80024ac:	0800c734 	.word	0x0800c734
 80024b0:	200000a4 	.word	0x200000a4
 80024b4:	0800c744 	.word	0x0800c744
 80024b8:	0800c74c 	.word	0x0800c74c
 80024bc:	2000067c 	.word	0x2000067c
 80024c0:	0800c774 	.word	0x0800c774
 80024c4:	0800c77c 	.word	0x0800c77c
 80024c8:	200000c6 	.word	0x200000c6
 80024cc:	51eb851f 	.word	0x51eb851f
 80024d0:	200004bc 	.word	0x200004bc
 80024d4:	0800c784 	.word	0x0800c784
 80024d8:	200000c0 	.word	0x200000c0
		}
		else if(strcmp(argv[0], "stop") == 0)
 80024dc:	4b3c      	ldr	r3, [pc, #240]	; (80025d0 <Shell_Loop+0x3dc>)
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	493c      	ldr	r1, [pc, #240]	; (80025d4 <Shell_Loop+0x3e0>)
 80024e2:	4618      	mov	r0, r3
 80024e4:	f7fd fe9c 	bl	8000220 <strcmp>
 80024e8:	4603      	mov	r3, r0
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d110      	bne.n	8002510 <Shell_Loop+0x31c>
		{
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_1);
 80024ee:	2100      	movs	r1, #0
 80024f0:	4839      	ldr	r0, [pc, #228]	; (80025d8 <Shell_Loop+0x3e4>)
 80024f2:	f003 fde1 	bl	80060b8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_1);
 80024f6:	2100      	movs	r1, #0
 80024f8:	4837      	ldr	r0, [pc, #220]	; (80025d8 <Shell_Loop+0x3e4>)
 80024fa:	f004 ff11 	bl	8007320 <HAL_TIMEx_PWMN_Stop>
			HAL_TIM_PWM_Stop(&htim1, TIM_CHANNEL_2);
 80024fe:	2104      	movs	r1, #4
 8002500:	4835      	ldr	r0, [pc, #212]	; (80025d8 <Shell_Loop+0x3e4>)
 8002502:	f003 fdd9 	bl	80060b8 <HAL_TIM_PWM_Stop>
			HAL_TIMEx_PWMN_Stop(&htim1, TIM_CHANNEL_2);
 8002506:	2104      	movs	r1, #4
 8002508:	4833      	ldr	r0, [pc, #204]	; (80025d8 <Shell_Loop+0x3e4>)
 800250a:	f004 ff09 	bl	8007320 <HAL_TIMEx_PWMN_Stop>
 800250e:	e051      	b.n	80025b4 <Shell_Loop+0x3c0>
		}
		else if(strcmp(argv[0], "readCurrent") == 0)
 8002510:	4b2f      	ldr	r3, [pc, #188]	; (80025d0 <Shell_Loop+0x3dc>)
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4931      	ldr	r1, [pc, #196]	; (80025dc <Shell_Loop+0x3e8>)
 8002516:	4618      	mov	r0, r3
 8002518:	f7fd fe82 	bl	8000220 <strcmp>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	d117      	bne.n	8002552 <Shell_Loop+0x35e>
		{
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "%f\r\n", adcValue[0]);
 8002522:	4b2f      	ldr	r3, [pc, #188]	; (80025e0 <Shell_Loop+0x3ec>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fe f846 	bl	80005b8 <__aeabi_f2d>
 800252c:	4602      	mov	r2, r0
 800252e:	460b      	mov	r3, r1
 8002530:	e9cd 2300 	strd	r2, r3, [sp]
 8002534:	4a2b      	ldr	r2, [pc, #172]	; (80025e4 <Shell_Loop+0x3f0>)
 8002536:	2140      	movs	r1, #64	; 0x40
 8002538:	482b      	ldr	r0, [pc, #172]	; (80025e8 <Shell_Loop+0x3f4>)
 800253a:	f007 ff1f 	bl	800a37c <sniprintf>
 800253e:	60f8      	str	r0, [r7, #12]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002540:	68fb      	ldr	r3, [r7, #12]
 8002542:	b29a      	uxth	r2, r3
 8002544:	f04f 33ff 	mov.w	r3, #4294967295
 8002548:	4927      	ldr	r1, [pc, #156]	; (80025e8 <Shell_Loop+0x3f4>)
 800254a:	4828      	ldr	r0, [pc, #160]	; (80025ec <Shell_Loop+0x3f8>)
 800254c:	f005 f949 	bl	80077e2 <HAL_UART_Transmit>
 8002550:	e030      	b.n	80025b4 <Shell_Loop+0x3c0>
		}
		else if(strcmp(argv[0], "readSpeed") == 0)
 8002552:	4b1f      	ldr	r3, [pc, #124]	; (80025d0 <Shell_Loop+0x3dc>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	4926      	ldr	r1, [pc, #152]	; (80025f0 <Shell_Loop+0x3fc>)
 8002558:	4618      	mov	r0, r3
 800255a:	f7fd fe61 	bl	8000220 <strcmp>
 800255e:	4603      	mov	r3, r0
 8002560:	2b00      	cmp	r3, #0
 8002562:	d120      	bne.n	80025a6 <Shell_Loop+0x3b2>
		{
			int uartTxStringLength = snprintf((char *)uartTxBuffer, UART_TX_BUFFER_SIZE, "%f, %f\r\n", adcEncoder[0], adcEncoder[1]);
 8002564:	4b23      	ldr	r3, [pc, #140]	; (80025f4 <Shell_Loop+0x400>)
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	4618      	mov	r0, r3
 800256a:	f7fe f825 	bl	80005b8 <__aeabi_f2d>
 800256e:	4604      	mov	r4, r0
 8002570:	460d      	mov	r5, r1
 8002572:	4b20      	ldr	r3, [pc, #128]	; (80025f4 <Shell_Loop+0x400>)
 8002574:	685b      	ldr	r3, [r3, #4]
 8002576:	4618      	mov	r0, r3
 8002578:	f7fe f81e 	bl	80005b8 <__aeabi_f2d>
 800257c:	4602      	mov	r2, r0
 800257e:	460b      	mov	r3, r1
 8002580:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002584:	e9cd 4500 	strd	r4, r5, [sp]
 8002588:	4a1b      	ldr	r2, [pc, #108]	; (80025f8 <Shell_Loop+0x404>)
 800258a:	2140      	movs	r1, #64	; 0x40
 800258c:	4816      	ldr	r0, [pc, #88]	; (80025e8 <Shell_Loop+0x3f4>)
 800258e:	f007 fef5 	bl	800a37c <sniprintf>
 8002592:	6138      	str	r0, [r7, #16]
			HAL_UART_Transmit(&huart2, uartTxBuffer, uartTxStringLength, HAL_MAX_DELAY);
 8002594:	693b      	ldr	r3, [r7, #16]
 8002596:	b29a      	uxth	r2, r3
 8002598:	f04f 33ff 	mov.w	r3, #4294967295
 800259c:	4912      	ldr	r1, [pc, #72]	; (80025e8 <Shell_Loop+0x3f4>)
 800259e:	4813      	ldr	r0, [pc, #76]	; (80025ec <Shell_Loop+0x3f8>)
 80025a0:	f005 f91f 	bl	80077e2 <HAL_UART_Transmit>
 80025a4:	e006      	b.n	80025b4 <Shell_Loop+0x3c0>
		}
		else{
			HAL_UART_Transmit(&huart2, cmdNotFound, sizeof(cmdNotFound), HAL_MAX_DELAY);
 80025a6:	f04f 33ff 	mov.w	r3, #4294967295
 80025aa:	2214      	movs	r2, #20
 80025ac:	4913      	ldr	r1, [pc, #76]	; (80025fc <Shell_Loop+0x408>)
 80025ae:	480f      	ldr	r0, [pc, #60]	; (80025ec <Shell_Loop+0x3f8>)
 80025b0:	f005 f917 	bl	80077e2 <HAL_UART_Transmit>
		}
		HAL_UART_Transmit(&huart2, prompt, sizeof(prompt), HAL_MAX_DELAY);
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	221c      	movs	r2, #28
 80025ba:	4911      	ldr	r1, [pc, #68]	; (8002600 <Shell_Loop+0x40c>)
 80025bc:	480b      	ldr	r0, [pc, #44]	; (80025ec <Shell_Loop+0x3f8>)
 80025be:	f005 f910 	bl	80077e2 <HAL_UART_Transmit>
		newCmdReady = 0;
 80025c2:	4b10      	ldr	r3, [pc, #64]	; (8002604 <Shell_Loop+0x410>)
 80025c4:	2200      	movs	r2, #0
 80025c6:	601a      	str	r2, [r3, #0]
	}
}
 80025c8:	bf00      	nop
 80025ca:	3718      	adds	r7, #24
 80025cc:	46bd      	mov	sp, r7
 80025ce:	bdb0      	pop	{r4, r5, r7, pc}
 80025d0:	20000700 	.word	0x20000700
 80025d4:	0800c78c 	.word	0x0800c78c
 80025d8:	200004bc 	.word	0x200004bc
 80025dc:	0800c794 	.word	0x0800c794
 80025e0:	20000464 	.word	0x20000464
 80025e4:	0800c7a0 	.word	0x0800c7a0
 80025e8:	2000067c 	.word	0x2000067c
 80025ec:	20000554 	.word	0x20000554
 80025f0:	0800c7a8 	.word	0x0800c7a8
 80025f4:	20000458 	.word	0x20000458
 80025f8:	0800c7b4 	.word	0x0800c7b4
 80025fc:	20000090 	.word	0x20000090
 8002600:	20000004 	.word	0x20000004
 8002604:	2000072c 	.word	0x2000072c

08002608 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef * huart){
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
	uartRxReceived = 1;
 8002610:	4b05      	ldr	r3, [pc, #20]	; (8002628 <HAL_UART_RxCpltCallback+0x20>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
	HAL_UART_Receive_IT(&huart2, uartRxBuffer, UART_RX_BUFFER_SIZE);
 8002616:	2201      	movs	r2, #1
 8002618:	4904      	ldr	r1, [pc, #16]	; (800262c <HAL_UART_RxCpltCallback+0x24>)
 800261a:	4805      	ldr	r0, [pc, #20]	; (8002630 <HAL_UART_RxCpltCallback+0x28>)
 800261c:	f005 f978 	bl	8007910 <HAL_UART_Receive_IT>
}
 8002620:	bf00      	nop
 8002622:	3708      	adds	r7, #8
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	20000674 	.word	0x20000674
 800262c:	20000678 	.word	0x20000678
 8002630:	20000554 	.word	0x20000554

08002634 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   r0, =_estack
 8002634:	480d      	ldr	r0, [pc, #52]	; (800266c <LoopForever+0x2>)
  mov   sp, r0          /* set stack pointer */
 8002636:	4685      	mov	sp, r0

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002638:	480d      	ldr	r0, [pc, #52]	; (8002670 <LoopForever+0x6>)
  ldr r1, =_edata
 800263a:	490e      	ldr	r1, [pc, #56]	; (8002674 <LoopForever+0xa>)
  ldr r2, =_sidata
 800263c:	4a0e      	ldr	r2, [pc, #56]	; (8002678 <LoopForever+0xe>)
  movs r3, #0
 800263e:	2300      	movs	r3, #0
  b	LoopCopyDataInit
 8002640:	e002      	b.n	8002648 <LoopCopyDataInit>

08002642 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002642:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002644:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002646:	3304      	adds	r3, #4

08002648 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002648:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800264a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800264c:	d3f9      	bcc.n	8002642 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800264e:	4a0b      	ldr	r2, [pc, #44]	; (800267c <LoopForever+0x12>)
  ldr r4, =_ebss
 8002650:	4c0b      	ldr	r4, [pc, #44]	; (8002680 <LoopForever+0x16>)
  movs r3, #0
 8002652:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002654:	e001      	b.n	800265a <LoopFillZerobss>

08002656 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002656:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002658:	3204      	adds	r2, #4

0800265a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800265a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800265c:	d3fb      	bcc.n	8002656 <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 800265e:	f7ff fa4d 	bl	8001afc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002662:	f007 ffb7 	bl	800a5d4 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8002666:	f7fe ffe1 	bl	800162c <main>

0800266a <LoopForever>:

LoopForever:
    b LoopForever
 800266a:	e7fe      	b.n	800266a <LoopForever>
  ldr   r0, =_estack
 800266c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002670:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002674:	20000298 	.word	0x20000298
  ldr r2, =_sidata
 8002678:	0800cbe0 	.word	0x0800cbe0
  ldr r2, =_sbss
 800267c:	20000298 	.word	0x20000298
  ldr r4, =_ebss
 8002680:	20000880 	.word	0x20000880

08002684 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8002684:	e7fe      	b.n	8002684 <ADC1_2_IRQHandler>

08002686 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002686:	b580      	push	{r7, lr}
 8002688:	b082      	sub	sp, #8
 800268a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800268c:	2300      	movs	r3, #0
 800268e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002690:	2003      	movs	r0, #3
 8002692:	f001 fd42 	bl	800411a <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8002696:	200f      	movs	r0, #15
 8002698:	f7ff f88e 	bl	80017b8 <HAL_InitTick>
 800269c:	4603      	mov	r3, r0
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d002      	beq.n	80026a8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80026a2:	2301      	movs	r3, #1
 80026a4:	71fb      	strb	r3, [r7, #7]
 80026a6:	e001      	b.n	80026ac <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80026a8:	f7ff f862 	bl	8001770 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80026ac:	79fb      	ldrb	r3, [r7, #7]

}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3708      	adds	r7, #8
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bd80      	pop	{r7, pc}
	...

080026b8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80026b8:	b480      	push	{r7}
 80026ba:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80026bc:	4b05      	ldr	r3, [pc, #20]	; (80026d4 <HAL_IncTick+0x1c>)
 80026be:	681a      	ldr	r2, [r3, #0]
 80026c0:	4b05      	ldr	r3, [pc, #20]	; (80026d8 <HAL_IncTick+0x20>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4413      	add	r3, r2
 80026c6:	4a03      	ldr	r2, [pc, #12]	; (80026d4 <HAL_IncTick+0x1c>)
 80026c8:	6013      	str	r3, [r2, #0]
}
 80026ca:	bf00      	nop
 80026cc:	46bd      	mov	sp, r7
 80026ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026d2:	4770      	bx	lr
 80026d4:	20000730 	.word	0x20000730
 80026d8:	200000cc 	.word	0x200000cc

080026dc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  return uwTick;
 80026e0:	4b03      	ldr	r3, [pc, #12]	; (80026f0 <HAL_GetTick+0x14>)
 80026e2:	681b      	ldr	r3, [r3, #0]
}
 80026e4:	4618      	mov	r0, r3
 80026e6:	46bd      	mov	sp, r7
 80026e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026ec:	4770      	bx	lr
 80026ee:	bf00      	nop
 80026f0:	20000730 	.word	0x20000730

080026f4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80026f4:	b580      	push	{r7, lr}
 80026f6:	b084      	sub	sp, #16
 80026f8:	af00      	add	r7, sp, #0
 80026fa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80026fc:	f7ff ffee 	bl	80026dc <HAL_GetTick>
 8002700:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002706:	68fb      	ldr	r3, [r7, #12]
 8002708:	f1b3 3fff 	cmp.w	r3, #4294967295
 800270c:	d004      	beq.n	8002718 <HAL_Delay+0x24>
  {
    wait += (uint32_t)(uwTickFreq);
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_Delay+0x40>)
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	68fa      	ldr	r2, [r7, #12]
 8002714:	4413      	add	r3, r2
 8002716:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002718:	bf00      	nop
 800271a:	f7ff ffdf 	bl	80026dc <HAL_GetTick>
 800271e:	4602      	mov	r2, r0
 8002720:	68bb      	ldr	r3, [r7, #8]
 8002722:	1ad3      	subs	r3, r2, r3
 8002724:	68fa      	ldr	r2, [r7, #12]
 8002726:	429a      	cmp	r2, r3
 8002728:	d8f7      	bhi.n	800271a <HAL_Delay+0x26>
  {
  }
}
 800272a:	bf00      	nop
 800272c:	bf00      	nop
 800272e:	3710      	adds	r7, #16
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	200000cc 	.word	0x200000cc

08002738 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8002738:	b480      	push	{r7}
 800273a:	b083      	sub	sp, #12
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
 8002740:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	689b      	ldr	r3, [r3, #8]
 8002746:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800274a:	683b      	ldr	r3, [r7, #0]
 800274c:	431a      	orrs	r2, r3
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	609a      	str	r2, [r3, #8]
}
 8002752:	bf00      	nop
 8002754:	370c      	adds	r7, #12
 8002756:	46bd      	mov	sp, r7
 8002758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800275c:	4770      	bx	lr

0800275e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800275e:	b480      	push	{r7}
 8002760:	b083      	sub	sp, #12
 8002762:	af00      	add	r7, sp, #0
 8002764:	6078      	str	r0, [r7, #4]
 8002766:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL, PathInternal);
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	689b      	ldr	r3, [r3, #8]
 800276c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 8002770:	683b      	ldr	r3, [r7, #0]
 8002772:	431a      	orrs	r2, r3
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	609a      	str	r2, [r3, #8]
}
 8002778:	bf00      	nop
 800277a:	370c      	adds	r7, #12
 800277c:	46bd      	mov	sp, r7
 800277e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002782:	4770      	bx	lr

08002784 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002784:	b480      	push	{r7}
 8002786:	b083      	sub	sp, #12
 8002788:	af00      	add	r7, sp, #0
 800278a:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_VSENSESEL | ADC_CCR_VBATSEL));
 800278c:	687b      	ldr	r3, [r7, #4]
 800278e:	689b      	ldr	r3, [r3, #8]
 8002790:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 8002794:	4618      	mov	r0, r3
 8002796:	370c      	adds	r7, #12
 8002798:	46bd      	mov	sp, r7
 800279a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279e:	4770      	bx	lr

080027a0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0xFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80027a0:	b480      	push	{r7}
 80027a2:	b087      	sub	sp, #28
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027ae:	68fb      	ldr	r3, [r7, #12]
 80027b0:	3360      	adds	r3, #96	; 0x60
 80027b2:	461a      	mov	r2, r3
 80027b4:	68bb      	ldr	r3, [r7, #8]
 80027b6:	009b      	lsls	r3, r3, #2
 80027b8:	4413      	add	r3, r2
 80027ba:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80027bc:	697b      	ldr	r3, [r7, #20]
 80027be:	681a      	ldr	r2, [r3, #0]
 80027c0:	4b08      	ldr	r3, [pc, #32]	; (80027e4 <LL_ADC_SetOffset+0x44>)
 80027c2:	4013      	ands	r3, r2
 80027c4:	687a      	ldr	r2, [r7, #4]
 80027c6:	f002 41f8 	and.w	r1, r2, #2080374784	; 0x7c000000
 80027ca:	683a      	ldr	r2, [r7, #0]
 80027cc:	430a      	orrs	r2, r1
 80027ce:	4313      	orrs	r3, r2
 80027d0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80027d4:	697b      	ldr	r3, [r7, #20]
 80027d6:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN | ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
             ADC_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
}
 80027d8:	bf00      	nop
 80027da:	371c      	adds	r7, #28
 80027dc:	46bd      	mov	sp, r7
 80027de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027e2:	4770      	bx	lr
 80027e4:	03fff000 	.word	0x03fff000

080027e8 <LL_ADC_GetOffsetChannel>:
  *         (1, 2, 3, 4, 5, 7) For ADC channel read back from ADC register,
  *                      comparison with internal channel parameter to be done
  *                      using helper macro @ref __LL_ADC_CHANNEL_INTERNAL_TO_EXTERNAL().
  */
__STATIC_INLINE uint32_t LL_ADC_GetOffsetChannel(ADC_TypeDef *ADCx, uint32_t Offsety)
{
 80027e8:	b480      	push	{r7}
 80027ea:	b085      	sub	sp, #20
 80027ec:	af00      	add	r7, sp, #0
 80027ee:	6078      	str	r0, [r7, #4]
 80027f0:	6039      	str	r1, [r7, #0]
  const __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	3360      	adds	r3, #96	; 0x60
 80027f6:	461a      	mov	r2, r3
 80027f8:	683b      	ldr	r3, [r7, #0]
 80027fa:	009b      	lsls	r3, r3, #2
 80027fc:	4413      	add	r3, r2
 80027fe:	60fb      	str	r3, [r7, #12]

  return (uint32_t) READ_BIT(*preg, ADC_OFR1_OFFSET1_CH);
 8002800:	68fb      	ldr	r3, [r7, #12]
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 43f8 	and.w	r3, r3, #2080374784	; 0x7c000000
}
 8002808:	4618      	mov	r0, r3
 800280a:	3714      	adds	r7, #20
 800280c:	46bd      	mov	sp, r7
 800280e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002812:	4770      	bx	lr

08002814 <LL_ADC_SetOffsetState>:
  *         @arg @ref LL_ADC_OFFSET_DISABLE
  *         @arg @ref LL_ADC_OFFSET_ENABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetState(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetState)
{
 8002814:	b480      	push	{r7}
 8002816:	b087      	sub	sp, #28
 8002818:	af00      	add	r7, sp, #0
 800281a:	60f8      	str	r0, [r7, #12]
 800281c:	60b9      	str	r1, [r7, #8]
 800281e:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	3360      	adds	r3, #96	; 0x60
 8002824:	461a      	mov	r2, r3
 8002826:	68bb      	ldr	r3, [r7, #8]
 8002828:	009b      	lsls	r3, r3, #2
 800282a:	4413      	add	r3, r2
 800282c:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	431a      	orrs	r2, r3
 800283a:	697b      	ldr	r3, [r7, #20]
 800283c:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSET1_EN,
             OffsetState);
}
 800283e:	bf00      	nop
 8002840:	371c      	adds	r7, #28
 8002842:	46bd      	mov	sp, r7
 8002844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002848:	4770      	bx	lr

0800284a <LL_ADC_SetOffsetSign>:
  *         @arg @ref LL_ADC_OFFSET_SIGN_NEGATIVE
  *         @arg @ref LL_ADC_OFFSET_SIGN_POSITIVE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSign(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSign)
{
 800284a:	b480      	push	{r7}
 800284c:	b087      	sub	sp, #28
 800284e:	af00      	add	r7, sp, #0
 8002850:	60f8      	str	r0, [r7, #12]
 8002852:	60b9      	str	r1, [r7, #8]
 8002854:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	3360      	adds	r3, #96	; 0x60
 800285a:	461a      	mov	r2, r3
 800285c:	68bb      	ldr	r3, [r7, #8]
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	4413      	add	r3, r2
 8002862:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002864:	697b      	ldr	r3, [r7, #20]
 8002866:	681b      	ldr	r3, [r3, #0]
 8002868:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	431a      	orrs	r2, r3
 8002870:	697b      	ldr	r3, [r7, #20]
 8002872:	601a      	str	r2, [r3, #0]
             ADC_OFR1_OFFSETPOS,
             OffsetSign);
}
 8002874:	bf00      	nop
 8002876:	371c      	adds	r7, #28
 8002878:	46bd      	mov	sp, r7
 800287a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800287e:	4770      	bx	lr

08002880 <LL_ADC_SetOffsetSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SATURATION_DISABLE
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSaturation)
{
 8002880:	b480      	push	{r7}
 8002882:	b087      	sub	sp, #28
 8002884:	af00      	add	r7, sp, #0
 8002886:	60f8      	str	r0, [r7, #12]
 8002888:	60b9      	str	r1, [r7, #8]
 800288a:	607a      	str	r2, [r7, #4]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800288c:	68fb      	ldr	r3, [r7, #12]
 800288e:	3360      	adds	r3, #96	; 0x60
 8002890:	461a      	mov	r2, r3
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	009b      	lsls	r3, r3, #2
 8002896:	4413      	add	r3, r2
 8002898:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800289a:	697b      	ldr	r3, [r7, #20]
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 80028a2:	687b      	ldr	r3, [r7, #4]
 80028a4:	431a      	orrs	r2, r3
 80028a6:	697b      	ldr	r3, [r7, #20]
 80028a8:	601a      	str	r2, [r3, #0]
             ADC_OFR1_SATEN,
             OffsetSaturation);
}
 80028aa:	bf00      	nop
 80028ac:	371c      	adds	r7, #28
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <LL_ADC_SetSamplingTimeCommonConfig>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_DEFAULT
  *         @arg @ref LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetSamplingTimeCommonConfig(ADC_TypeDef *ADCx, uint32_t SamplingTimeCommonConfig)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
 80028be:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->SMPR1, ADC_SMPR1_SMPPLUS, SamplingTimeCommonConfig);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	695b      	ldr	r3, [r3, #20]
 80028c4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	431a      	orrs	r2, r3
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	615a      	str	r2, [r3, #20]
}
 80028d0:	bf00      	nop
 80028d2:	370c      	adds	r7, #12
 80028d4:	46bd      	mov	sp, r7
 80028d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028da:	4770      	bx	lr

080028dc <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80028dc:	b480      	push	{r7}
 80028de:	b083      	sub	sp, #12
 80028e0:	af00      	add	r7, sp, #0
 80028e2:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	68db      	ldr	r3, [r3, #12]
 80028e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80028ec:	2b00      	cmp	r3, #0
 80028ee:	d101      	bne.n	80028f4 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 80028f0:	2301      	movs	r3, #1
 80028f2:	e000      	b.n	80028f6 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 80028f4:	2300      	movs	r3, #0
}
 80028f6:	4618      	mov	r0, r3
 80028f8:	370c      	adds	r7, #12
 80028fa:	46bd      	mov	sp, r7
 80028fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002900:	4770      	bx	lr

08002902 <LL_ADC_REG_SetSequencerRanks>:
  *         (8) On STM32G4, fast channel allows: 2.5 (sampling) + 12.5 (conversion) = 15 ADC clock cycles (fADC) to convert in 12-bit resolution.
  *             Other channels are slow channels  allows: 6.5 (sampling) + 12.5 (conversion) = 19 ADC clock cycles (fADC) to convert in 12-bit resolution.\n
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 8002902:	b480      	push	{r7}
 8002904:	b087      	sub	sp, #28
 8002906:	af00      	add	r7, sp, #0
 8002908:	60f8      	str	r0, [r7, #12]
 800290a:	60b9      	str	r1, [r7, #8]
 800290c:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 800290e:	68fb      	ldr	r3, [r7, #12]
 8002910:	3330      	adds	r3, #48	; 0x30
 8002912:	461a      	mov	r2, r3
 8002914:	68bb      	ldr	r3, [r7, #8]
 8002916:	0a1b      	lsrs	r3, r3, #8
 8002918:	009b      	lsls	r3, r3, #2
 800291a:	f003 030c 	and.w	r3, r3, #12
 800291e:	4413      	add	r3, r2
 8002920:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 8002922:	697b      	ldr	r3, [r7, #20]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68bb      	ldr	r3, [r7, #8]
 8002928:	f003 031f 	and.w	r3, r3, #31
 800292c:	211f      	movs	r1, #31
 800292e:	fa01 f303 	lsl.w	r3, r1, r3
 8002932:	43db      	mvns	r3, r3
 8002934:	401a      	ands	r2, r3
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	0e9b      	lsrs	r3, r3, #26
 800293a:	f003 011f 	and.w	r1, r3, #31
 800293e:	68bb      	ldr	r3, [r7, #8]
 8002940:	f003 031f 	and.w	r3, r3, #31
 8002944:	fa01 f303 	lsl.w	r3, r1, r3
 8002948:	431a      	orrs	r2, r3
 800294a:	697b      	ldr	r3, [r7, #20]
 800294c:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002958:	4770      	bx	lr

0800295a <LL_ADC_SetChannelSamplingTime>:
  *             can be replaced by 3.5 ADC clock cycles.
  *             Refer to function @ref LL_ADC_SetSamplingTimeCommonConfig().
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800295a:	b480      	push	{r7}
 800295c:	b087      	sub	sp, #28
 800295e:	af00      	add	r7, sp, #0
 8002960:	60f8      	str	r0, [r7, #12]
 8002962:	60b9      	str	r1, [r7, #8]
 8002964:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8002966:	68fb      	ldr	r3, [r7, #12]
 8002968:	3314      	adds	r3, #20
 800296a:	461a      	mov	r2, r3
 800296c:	68bb      	ldr	r3, [r7, #8]
 800296e:	0e5b      	lsrs	r3, r3, #25
 8002970:	009b      	lsls	r3, r3, #2
 8002972:	f003 0304 	and.w	r3, r3, #4
 8002976:	4413      	add	r3, r2
 8002978:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800297a:	697b      	ldr	r3, [r7, #20]
 800297c:	681a      	ldr	r2, [r3, #0]
 800297e:	68bb      	ldr	r3, [r7, #8]
 8002980:	0d1b      	lsrs	r3, r3, #20
 8002982:	f003 031f 	and.w	r3, r3, #31
 8002986:	2107      	movs	r1, #7
 8002988:	fa01 f303 	lsl.w	r3, r1, r3
 800298c:	43db      	mvns	r3, r3
 800298e:	401a      	ands	r2, r3
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	0d1b      	lsrs	r3, r3, #20
 8002994:	f003 031f 	and.w	r3, r3, #31
 8002998:	6879      	ldr	r1, [r7, #4]
 800299a:	fa01 f303 	lsl.w	r3, r1, r3
 800299e:	431a      	orrs	r2, r3
 80029a0:	697b      	ldr	r3, [r7, #20]
 80029a2:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 80029a4:	bf00      	nop
 80029a6:	371c      	adds	r7, #28
 80029a8:	46bd      	mov	sp, r7
 80029aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029ae:	4770      	bx	lr

080029b0 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 80029b0:	b480      	push	{r7}
 80029b2:	b085      	sub	sp, #20
 80029b4:	af00      	add	r7, sp, #0
 80029b6:	60f8      	str	r0, [r7, #12]
 80029b8:	60b9      	str	r1, [r7, #8]
 80029ba:	607a      	str	r2, [r7, #4]
  /* Bits for single or differential mode selection for each channel are set  */
  /* to 1 only when the differential mode is selected, and to 0 when the      */
  /* single mode is selected.                                                 */
  
  if (SingleDiff == LL_ADC_DIFFERENTIAL_ENDED)
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	4a0f      	ldr	r2, [pc, #60]	; (80029fc <LL_ADC_SetChannelSingleDiff+0x4c>)
 80029c0:	4293      	cmp	r3, r2
 80029c2:	d10a      	bne.n	80029da <LL_ADC_SetChannelSingleDiff+0x2a>
  {
    SET_BIT(ADCx->DIFSEL,
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029d0:	431a      	orrs	r2, r3
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
  else
  {
    CLEAR_BIT(ADCx->DIFSEL,
            Channel & ADC_SINGLEDIFF_CHANNEL_MASK);
  }
}
 80029d8:	e00a      	b.n	80029f0 <LL_ADC_SetChannelSingleDiff+0x40>
    CLEAR_BIT(ADCx->DIFSEL,
 80029da:	68fb      	ldr	r3, [r7, #12]
 80029dc:	f8d3 20b0 	ldr.w	r2, [r3, #176]	; 0xb0
 80029e0:	68bb      	ldr	r3, [r7, #8]
 80029e2:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80029e6:	43db      	mvns	r3, r3
 80029e8:	401a      	ands	r2, r3
 80029ea:	68fb      	ldr	r3, [r7, #12]
 80029ec:	f8c3 20b0 	str.w	r2, [r3, #176]	; 0xb0
}
 80029f0:	bf00      	nop
 80029f2:	3714      	adds	r7, #20
 80029f4:	46bd      	mov	sp, r7
 80029f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fa:	4770      	bx	lr
 80029fc:	407f0000 	.word	0x407f0000

08002a00 <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 8002a00:	b480      	push	{r7}
 8002a02:	b083      	sub	sp, #12
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	689b      	ldr	r3, [r3, #8]
 8002a0c:	f003 031f 	and.w	r3, r3, #31
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	370c      	adds	r7, #12
 8002a14:	46bd      	mov	sp, r7
 8002a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a1a:	4770      	bx	lr

08002a1c <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 8002a1c:	b480      	push	{r7}
 8002a1e:	b083      	sub	sp, #12
 8002a20:	af00      	add	r7, sp, #0
 8002a22:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	689b      	ldr	r3, [r3, #8]
 8002a28:	f023 4320 	bic.w	r3, r3, #2684354560	; 0xa0000000
 8002a2c:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	6093      	str	r3, [r2, #8]
}
 8002a34:	bf00      	nop
 8002a36:	370c      	adds	r7, #12
 8002a38:	46bd      	mov	sp, r7
 8002a3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3e:	4770      	bx	lr

08002a40 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8002a40:	b480      	push	{r7}
 8002a42:	b083      	sub	sp, #12
 8002a44:	af00      	add	r7, sp, #0
 8002a46:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8002a48:	687b      	ldr	r3, [r7, #4]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002a50:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002a54:	d101      	bne.n	8002a5a <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 8002a56:	2301      	movs	r3, #1
 8002a58:	e000      	b.n	8002a5c <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8002a5a:	2300      	movs	r3, #0
}
 8002a5c:	4618      	mov	r0, r3
 8002a5e:	370c      	adds	r7, #12
 8002a60:	46bd      	mov	sp, r7
 8002a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a66:	4770      	bx	lr

08002a68 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	b083      	sub	sp, #12
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	689b      	ldr	r3, [r3, #8]
 8002a74:	f023 4310 	bic.w	r3, r3, #2415919104	; 0x90000000
 8002a78:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002a7c:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8002a84:	bf00      	nop
 8002a86:	370c      	adds	r7, #12
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8e:	4770      	bx	lr

08002a90 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8002a90:	b480      	push	{r7}
 8002a92:	b083      	sub	sp, #12
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	689b      	ldr	r3, [r3, #8]
 8002a9c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002aa0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8002aa4:	d101      	bne.n	8002aaa <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 8002aa6:	2301      	movs	r3, #1
 8002aa8:	e000      	b.n	8002aac <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8002aaa:	2300      	movs	r3, #0
}
 8002aac:	4618      	mov	r0, r3
 8002aae:	370c      	adds	r7, #12
 8002ab0:	46bd      	mov	sp, r7
 8002ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab6:	4770      	bx	lr

08002ab8 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8002ab8:	b480      	push	{r7}
 8002aba:	b083      	sub	sp, #12
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	689b      	ldr	r3, [r3, #8]
 8002ac4:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002ac8:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002acc:	f043 0201 	orr.w	r2, r3, #1
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 8002ad4:	bf00      	nop
 8002ad6:	370c      	adds	r7, #12
 8002ad8:	46bd      	mov	sp, r7
 8002ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ade:	4770      	bx	lr

08002ae0 <LL_ADC_Disable>:
  * @rmtoll CR       ADDIS          LL_ADC_Disable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Disable(ADC_TypeDef *ADCx)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002af0:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002af4:	f043 0202 	orr.w	r2, r3, #2
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADDIS);
}
 8002afc:	bf00      	nop
 8002afe:	370c      	adds	r7, #12
 8002b00:	46bd      	mov	sp, r7
 8002b02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b06:	4770      	bx	lr

08002b08 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b083      	sub	sp, #12
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	689b      	ldr	r3, [r3, #8]
 8002b14:	f003 0301 	and.w	r3, r3, #1
 8002b18:	2b01      	cmp	r3, #1
 8002b1a:	d101      	bne.n	8002b20 <LL_ADC_IsEnabled+0x18>
 8002b1c:	2301      	movs	r3, #1
 8002b1e:	e000      	b.n	8002b22 <LL_ADC_IsEnabled+0x1a>
 8002b20:	2300      	movs	r3, #0
}
 8002b22:	4618      	mov	r0, r3
 8002b24:	370c      	adds	r7, #12
 8002b26:	46bd      	mov	sp, r7
 8002b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b2c:	4770      	bx	lr

08002b2e <LL_ADC_IsDisableOngoing>:
  * @rmtoll CR       ADDIS          LL_ADC_IsDisableOngoing
  * @param  ADCx ADC instance
  * @retval 0: no ADC disable command on going.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDisableOngoing(ADC_TypeDef *ADCx)
{
 8002b2e:	b480      	push	{r7}
 8002b30:	b083      	sub	sp, #12
 8002b32:	af00      	add	r7, sp, #0
 8002b34:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADDIS) == (ADC_CR_ADDIS)) ? 1UL : 0UL);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	689b      	ldr	r3, [r3, #8]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d101      	bne.n	8002b46 <LL_ADC_IsDisableOngoing+0x18>
 8002b42:	2301      	movs	r3, #1
 8002b44:	e000      	b.n	8002b48 <LL_ADC_IsDisableOngoing+0x1a>
 8002b46:	2300      	movs	r3, #0
}
 8002b48:	4618      	mov	r0, r3
 8002b4a:	370c      	adds	r7, #12
 8002b4c:	46bd      	mov	sp, r7
 8002b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b52:	4770      	bx	lr

08002b54 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 8002b54:	b480      	push	{r7}
 8002b56:	b083      	sub	sp, #12
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	689b      	ldr	r3, [r3, #8]
 8002b60:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8002b64:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002b68:	f043 0204 	orr.w	r2, r3, #4
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 8002b70:	bf00      	nop
 8002b72:	370c      	adds	r7, #12
 8002b74:	46bd      	mov	sp, r7
 8002b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b7a:	4770      	bx	lr

08002b7c <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002b7c:	b480      	push	{r7}
 8002b7e:	b083      	sub	sp, #12
 8002b80:	af00      	add	r7, sp, #0
 8002b82:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	689b      	ldr	r3, [r3, #8]
 8002b88:	f003 0304 	and.w	r3, r3, #4
 8002b8c:	2b04      	cmp	r3, #4
 8002b8e:	d101      	bne.n	8002b94 <LL_ADC_REG_IsConversionOngoing+0x18>
 8002b90:	2301      	movs	r3, #1
 8002b92:	e000      	b.n	8002b96 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8002b94:	2300      	movs	r3, #0
}
 8002b96:	4618      	mov	r0, r3
 8002b98:	370c      	adds	r7, #12
 8002b9a:	46bd      	mov	sp, r7
 8002b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ba0:	4770      	bx	lr

08002ba2 <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8002ba2:	b480      	push	{r7}
 8002ba4:	b083      	sub	sp, #12
 8002ba6:	af00      	add	r7, sp, #0
 8002ba8:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	689b      	ldr	r3, [r3, #8]
 8002bae:	f003 0308 	and.w	r3, r3, #8
 8002bb2:	2b08      	cmp	r3, #8
 8002bb4:	d101      	bne.n	8002bba <LL_ADC_INJ_IsConversionOngoing+0x18>
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e000      	b.n	8002bbc <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8002bba:	2300      	movs	r3, #0
}
 8002bbc:	4618      	mov	r0, r3
 8002bbe:	370c      	adds	r7, #12
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bc6:	4770      	bx	lr

08002bc8 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8002bc8:	b590      	push	{r4, r7, lr}
 8002bca:	b089      	sub	sp, #36	; 0x24
 8002bcc:	af00      	add	r7, sp, #0
 8002bce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8002bd4:	2300      	movs	r3, #0
 8002bd6:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2b00      	cmp	r3, #0
 8002bdc:	d101      	bne.n	8002be2 <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 8002bde:	2301      	movs	r3, #1
 8002be0:	e1af      	b.n	8002f42 <HAL_ADC_Init+0x37a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	695b      	ldr	r3, [r3, #20]
 8002be6:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	d109      	bne.n	8002c04 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002bf0:	6878      	ldr	r0, [r7, #4]
 8002bf2:	f7fe fa81 	bl	80010f8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	661a      	str	r2, [r3, #96]	; 0x60

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2200      	movs	r2, #0
 8002c00:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4618      	mov	r0, r3
 8002c0a:	f7ff ff19 	bl	8002a40 <LL_ADC_IsDeepPowerDownEnabled>
 8002c0e:	4603      	mov	r3, r0
 8002c10:	2b00      	cmp	r3, #0
 8002c12:	d004      	beq.n	8002c1e <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4618      	mov	r0, r3
 8002c1a:	f7ff feff 	bl	8002a1c <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4618      	mov	r0, r3
 8002c24:	f7ff ff34 	bl	8002a90 <LL_ADC_IsInternalRegulatorEnabled>
 8002c28:	4603      	mov	r3, r0
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d115      	bne.n	8002c5a <HAL_ADC_Init+0x92>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4618      	mov	r0, r3
 8002c34:	f7ff ff18 	bl	8002a68 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002c38:	4b9f      	ldr	r3, [pc, #636]	; (8002eb8 <HAL_ADC_Init+0x2f0>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	099b      	lsrs	r3, r3, #6
 8002c3e:	4a9f      	ldr	r2, [pc, #636]	; (8002ebc <HAL_ADC_Init+0x2f4>)
 8002c40:	fba2 2303 	umull	r2, r3, r2, r3
 8002c44:	099b      	lsrs	r3, r3, #6
 8002c46:	3301      	adds	r3, #1
 8002c48:	005b      	lsls	r3, r3, #1
 8002c4a:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c4c:	e002      	b.n	8002c54 <HAL_ADC_Init+0x8c>
    {
      wait_loop_index--;
 8002c4e:	68bb      	ldr	r3, [r7, #8]
 8002c50:	3b01      	subs	r3, #1
 8002c52:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 8002c54:	68bb      	ldr	r3, [r7, #8]
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d1f9      	bne.n	8002c4e <HAL_ADC_Init+0x86>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	4618      	mov	r0, r3
 8002c60:	f7ff ff16 	bl	8002a90 <LL_ADC_IsInternalRegulatorEnabled>
 8002c64:	4603      	mov	r3, r0
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	d10d      	bne.n	8002c86 <HAL_ADC_Init+0xbe>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c6e:	f043 0210 	orr.w	r2, r3, #16
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002c7a:	f043 0201 	orr.w	r2, r3, #1
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	661a      	str	r2, [r3, #96]	; 0x60

    tmp_hal_status = HAL_ERROR;
 8002c82:	2301      	movs	r3, #1
 8002c84:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002c86:	687b      	ldr	r3, [r7, #4]
 8002c88:	681b      	ldr	r3, [r3, #0]
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	f7ff ff76 	bl	8002b7c <LL_ADC_REG_IsConversionOngoing>
 8002c90:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002c96:	f003 0310 	and.w	r3, r3, #16
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f040 8148 	bne.w	8002f30 <HAL_ADC_Init+0x368>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 8002ca0:	697b      	ldr	r3, [r7, #20]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	f040 8144 	bne.w	8002f30 <HAL_ADC_Init+0x368>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002cac:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 8002cb0:	f043 0202 	orr.w	r2, r3, #2
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7ff ff23 	bl	8002b08 <LL_ADC_IsEnabled>
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	2b00      	cmp	r3, #0
 8002cc6:	d141      	bne.n	8002d4c <HAL_ADC_Init+0x184>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002cd0:	d004      	beq.n	8002cdc <HAL_ADC_Init+0x114>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a7a      	ldr	r2, [pc, #488]	; (8002ec0 <HAL_ADC_Init+0x2f8>)
 8002cd8:	4293      	cmp	r3, r2
 8002cda:	d10f      	bne.n	8002cfc <HAL_ADC_Init+0x134>
 8002cdc:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8002ce0:	f7ff ff12 	bl	8002b08 <LL_ADC_IsEnabled>
 8002ce4:	4604      	mov	r4, r0
 8002ce6:	4876      	ldr	r0, [pc, #472]	; (8002ec0 <HAL_ADC_Init+0x2f8>)
 8002ce8:	f7ff ff0e 	bl	8002b08 <LL_ADC_IsEnabled>
 8002cec:	4603      	mov	r3, r0
 8002cee:	4323      	orrs	r3, r4
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	bf0c      	ite	eq
 8002cf4:	2301      	moveq	r3, #1
 8002cf6:	2300      	movne	r3, #0
 8002cf8:	b2db      	uxtb	r3, r3
 8002cfa:	e012      	b.n	8002d22 <HAL_ADC_Init+0x15a>
 8002cfc:	4871      	ldr	r0, [pc, #452]	; (8002ec4 <HAL_ADC_Init+0x2fc>)
 8002cfe:	f7ff ff03 	bl	8002b08 <LL_ADC_IsEnabled>
 8002d02:	4604      	mov	r4, r0
 8002d04:	4870      	ldr	r0, [pc, #448]	; (8002ec8 <HAL_ADC_Init+0x300>)
 8002d06:	f7ff feff 	bl	8002b08 <LL_ADC_IsEnabled>
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	431c      	orrs	r4, r3
 8002d0e:	486f      	ldr	r0, [pc, #444]	; (8002ecc <HAL_ADC_Init+0x304>)
 8002d10:	f7ff fefa 	bl	8002b08 <LL_ADC_IsEnabled>
 8002d14:	4603      	mov	r3, r0
 8002d16:	4323      	orrs	r3, r4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	bf0c      	ite	eq
 8002d1c:	2301      	moveq	r3, #1
 8002d1e:	2300      	movne	r3, #0
 8002d20:	b2db      	uxtb	r3, r3
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d012      	beq.n	8002d4c <HAL_ADC_Init+0x184>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002d2e:	d004      	beq.n	8002d3a <HAL_ADC_Init+0x172>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	4a62      	ldr	r2, [pc, #392]	; (8002ec0 <HAL_ADC_Init+0x2f8>)
 8002d36:	4293      	cmp	r3, r2
 8002d38:	d101      	bne.n	8002d3e <HAL_ADC_Init+0x176>
 8002d3a:	4a65      	ldr	r2, [pc, #404]	; (8002ed0 <HAL_ADC_Init+0x308>)
 8002d3c:	e000      	b.n	8002d40 <HAL_ADC_Init+0x178>
 8002d3e:	4a65      	ldr	r2, [pc, #404]	; (8002ed4 <HAL_ADC_Init+0x30c>)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	4619      	mov	r1, r3
 8002d46:	4610      	mov	r0, r2
 8002d48:	f7ff fcf6 	bl	8002738 <LL_ADC_SetCommonClock>
    /*  - external trigger polarity                Init.ExternalTrigConvEdge  */
    /*  - continuous conversion mode               Init.ContinuousConvMode    */
    /*  - overrun                                  Init.Overrun               */
    /*  - discontinuous mode                       Init.DiscontinuousConvMode */
    /*  - discontinuous mode channel count         Init.NbrOfDiscConversion   */
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	7f5b      	ldrb	r3, [r3, #29]
 8002d50:	035a      	lsls	r2, r3, #13
                hadc->Init.Overrun                                                     |
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d56:	431a      	orrs	r2, r3
                hadc->Init.DataAlign                                                   |
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	68db      	ldr	r3, [r3, #12]
                hadc->Init.Overrun                                                     |
 8002d5c:	431a      	orrs	r2, r3
                hadc->Init.Resolution                                                  |
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	689b      	ldr	r3, [r3, #8]
                hadc->Init.DataAlign                                                   |
 8002d62:	431a      	orrs	r2, r3
                ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d6a:	041b      	lsls	r3, r3, #16
    tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)           |
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8002d76:	2b01      	cmp	r3, #1
 8002d78:	d106      	bne.n	8002d88 <HAL_ADC_Init+0x1c0>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d7e:	3b01      	subs	r3, #1
 8002d80:	045b      	lsls	r3, r3, #17
 8002d82:	69ba      	ldr	r2, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d009      	beq.n	8002da4 <HAL_ADC_Init+0x1dc>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d94:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8002d9e:	69ba      	ldr	r2, [r7, #24]
 8002da0:	4313      	orrs	r3, r2
 8002da2:	61bb      	str	r3, [r7, #24]
                 );
    }

    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	681b      	ldr	r3, [r3, #0]
 8002da8:	68da      	ldr	r2, [r3, #12]
 8002daa:	4b4b      	ldr	r3, [pc, #300]	; (8002ed8 <HAL_ADC_Init+0x310>)
 8002dac:	4013      	ands	r3, r2
 8002dae:	687a      	ldr	r2, [r7, #4]
 8002db0:	6812      	ldr	r2, [r2, #0]
 8002db2:	69b9      	ldr	r1, [r7, #24]
 8002db4:	430b      	orrs	r3, r1
 8002db6:	60d3      	str	r3, [r2, #12]

    /* Configuration of sampling mode */
    MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_BULB | ADC_CFGR2_SMPTRIG, hadc->Init.SamplingMode);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	691b      	ldr	r3, [r3, #16]
 8002dbe:	f023 6140 	bic.w	r1, r3, #201326592	; 0xc000000
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	430a      	orrs	r2, r1
 8002dcc:	611a      	str	r2, [r3, #16]
    /* conversion on going on regular and injected groups:                    */
    /*  - Gain Compensation               Init.GainCompensation               */
    /*  - DMA continuous request          Init.DMAContinuousRequests          */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	4618      	mov	r0, r3
 8002dd4:	f7ff fed2 	bl	8002b7c <LL_ADC_REG_IsConversionOngoing>
 8002dd8:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	4618      	mov	r0, r3
 8002de0:	f7ff fedf 	bl	8002ba2 <LL_ADC_INJ_IsConversionOngoing>
 8002de4:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8002de6:	693b      	ldr	r3, [r7, #16]
 8002de8:	2b00      	cmp	r3, #0
 8002dea:	d17f      	bne.n	8002eec <HAL_ADC_Init+0x324>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8002dec:	68fb      	ldr	r3, [r7, #12]
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d17c      	bne.n	8002eec <HAL_ADC_Init+0x324>
       )
    {
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
                 ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	7f1b      	ldrb	r3, [r3, #28]
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002df6:	039a      	lsls	r2, r3, #14
                 ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests));
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8002dfe:	005b      	lsls	r3, r3, #1
      tmpCFGR = (ADC_CFGR_DFSDM(hadc)                                            |
 8002e00:	4313      	orrs	r3, r2
 8002e02:	61bb      	str	r3, [r7, #24]

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	68db      	ldr	r3, [r3, #12]
 8002e0a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8002e0e:	f023 0302 	bic.w	r3, r3, #2
 8002e12:	687a      	ldr	r2, [r7, #4]
 8002e14:	6812      	ldr	r2, [r2, #0]
 8002e16:	69b9      	ldr	r1, [r7, #24]
 8002e18:	430b      	orrs	r3, r1
 8002e1a:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.GainCompensation != 0UL)
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	691b      	ldr	r3, [r3, #16]
 8002e20:	2b00      	cmp	r3, #0
 8002e22:	d017      	beq.n	8002e54 <HAL_ADC_Init+0x28c>
      {
        SET_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	691a      	ldr	r2, [r3, #16]
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f442 3280 	orr.w	r2, r2, #65536	; 0x10000
 8002e32:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, hadc->Init.GainCompensation);
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	681b      	ldr	r3, [r3, #0]
 8002e38:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e3c:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e40:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e44:	687a      	ldr	r2, [r7, #4]
 8002e46:	6911      	ldr	r1, [r2, #16]
 8002e48:	687a      	ldr	r2, [r7, #4]
 8002e4a:	6812      	ldr	r2, [r2, #0]
 8002e4c:	430b      	orrs	r3, r1
 8002e4e:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
 8002e52:	e013      	b.n	8002e7c <HAL_ADC_Init+0x2b4>
      }
      else
      {
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_GCOMP);
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	691a      	ldr	r2, [r3, #16]
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8002e62:	611a      	str	r2, [r3, #16]
        MODIFY_REG(hadc->Instance->GCOMP, ADC_GCOMP_GCOMPCOEFF, 0UL);
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 8002e6c:	687a      	ldr	r2, [r7, #4]
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	f423 537f 	bic.w	r3, r3, #16320	; 0x3fc0
 8002e74:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8002e78:	f8c2 30c0 	str.w	r3, [r2, #192]	; 0xc0
      }

      if (hadc->Init.OversamplingMode == ENABLE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002e82:	2b01      	cmp	r3, #1
 8002e84:	d12a      	bne.n	8002edc <HAL_ADC_Init+0x314>
        /* Configuration of Oversampler:                                      */
        /*  - Oversampling Ratio                                              */
        /*  - Right bit shift                                                 */
        /*  - Triggered mode                                                  */
        /*  - Oversampling mode (continued/resumed)                           */
        MODIFY_REG(hadc->Instance->CFGR2,
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	691b      	ldr	r3, [r3, #16]
 8002e8c:	f423 63ff 	bic.w	r3, r3, #2040	; 0x7f8
 8002e90:	f023 0304 	bic.w	r3, r3, #4
 8002e94:	687a      	ldr	r2, [r7, #4]
 8002e96:	6c51      	ldr	r1, [r2, #68]	; 0x44
 8002e98:	687a      	ldr	r2, [r7, #4]
 8002e9a:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8002e9c:	4311      	orrs	r1, r2
 8002e9e:	687a      	ldr	r2, [r7, #4]
 8002ea0:	6cd2      	ldr	r2, [r2, #76]	; 0x4c
 8002ea2:	4311      	orrs	r1, r2
 8002ea4:	687a      	ldr	r2, [r7, #4]
 8002ea6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8002ea8:	430a      	orrs	r2, r1
 8002eaa:	431a      	orrs	r2, r3
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	f042 0201 	orr.w	r2, r2, #1
 8002eb4:	611a      	str	r2, [r3, #16]
 8002eb6:	e019      	b.n	8002eec <HAL_ADC_Init+0x324>
 8002eb8:	20000000 	.word	0x20000000
 8002ebc:	053e2d63 	.word	0x053e2d63
 8002ec0:	50000100 	.word	0x50000100
 8002ec4:	50000400 	.word	0x50000400
 8002ec8:	50000500 	.word	0x50000500
 8002ecc:	50000600 	.word	0x50000600
 8002ed0:	50000300 	.word	0x50000300
 8002ed4:	50000700 	.word	0x50000700
 8002ed8:	fff04007 	.word	0xfff04007
                  );
      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 8002edc:	687b      	ldr	r3, [r7, #4]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	691a      	ldr	r2, [r3, #16]
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f022 0201 	bic.w	r2, r2, #1
 8002eea:	611a      	str	r2, [r3, #16]
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	695b      	ldr	r3, [r3, #20]
 8002ef0:	2b01      	cmp	r3, #1
 8002ef2:	d10c      	bne.n	8002f0e <HAL_ADC_Init+0x346>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efa:	f023 010f 	bic.w	r1, r3, #15
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	6a1b      	ldr	r3, [r3, #32]
 8002f02:	1e5a      	subs	r2, r3, #1
 8002f04:	687b      	ldr	r3, [r7, #4]
 8002f06:	681b      	ldr	r3, [r3, #0]
 8002f08:	430a      	orrs	r2, r1
 8002f0a:	631a      	str	r2, [r3, #48]	; 0x30
 8002f0c:	e007      	b.n	8002f1e <HAL_ADC_Init+0x356>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	681b      	ldr	r3, [r3, #0]
 8002f18:	f022 020f 	bic.w	r2, r2, #15
 8002f1c:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f22:	f023 0303 	bic.w	r3, r3, #3
 8002f26:	f043 0201 	orr.w	r2, r3, #1
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	65da      	str	r2, [r3, #92]	; 0x5c
 8002f2e:	e007      	b.n	8002f40 <HAL_ADC_Init+0x378>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002f34:	f043 0210 	orr.w	r2, r3, #16
 8002f38:	687b      	ldr	r3, [r7, #4]
 8002f3a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8002f3c:	2301      	movs	r3, #1
 8002f3e:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 8002f40:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f42:	4618      	mov	r0, r3
 8002f44:	3724      	adds	r7, #36	; 0x24
 8002f46:	46bd      	mov	sp, r7
 8002f48:	bd90      	pop	{r4, r7, pc}
 8002f4a:	bf00      	nop

08002f4c <HAL_ADC_Start_DMA>:
  * @param pData Destination Buffer address.
  * @param Length Number of data to be transferred from ADC peripheral to memory
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef *hadc, uint32_t *pData, uint32_t Length)
{
 8002f4c:	b580      	push	{r7, lr}
 8002f4e:	b086      	sub	sp, #24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	60f8      	str	r0, [r7, #12]
 8002f54:	60b9      	str	r1, [r7, #8]
 8002f56:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
#if defined(ADC_MULTIMODE_SUPPORT)
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8002f60:	d004      	beq.n	8002f6c <HAL_ADC_Start_DMA+0x20>
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	4a5a      	ldr	r2, [pc, #360]	; (80030d0 <HAL_ADC_Start_DMA+0x184>)
 8002f68:	4293      	cmp	r3, r2
 8002f6a:	d101      	bne.n	8002f70 <HAL_ADC_Start_DMA+0x24>
 8002f6c:	4b59      	ldr	r3, [pc, #356]	; (80030d4 <HAL_ADC_Start_DMA+0x188>)
 8002f6e:	e000      	b.n	8002f72 <HAL_ADC_Start_DMA+0x26>
 8002f70:	4b59      	ldr	r3, [pc, #356]	; (80030d8 <HAL_ADC_Start_DMA+0x18c>)
 8002f72:	4618      	mov	r0, r3
 8002f74:	f7ff fd44 	bl	8002a00 <LL_ADC_GetMultimode>
 8002f78:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	4618      	mov	r0, r3
 8002f80:	f7ff fdfc 	bl	8002b7c <LL_ADC_REG_IsConversionOngoing>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f040 809b 	bne.w	80030c2 <HAL_ADC_Start_DMA+0x176>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8002f92:	2b01      	cmp	r3, #1
 8002f94:	d101      	bne.n	8002f9a <HAL_ADC_Start_DMA+0x4e>
 8002f96:	2302      	movs	r3, #2
 8002f98:	e096      	b.n	80030c8 <HAL_ADC_Start_DMA+0x17c>
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2201      	movs	r2, #1
 8002f9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

#if defined(ADC_MULTIMODE_SUPPORT)
    /* Ensure that multimode regular conversions are not enabled.   */
    /* Otherwise, dedicated API HAL_ADCEx_MultiModeStart_DMA() must be used.  */
    if ((ADC_IS_INDEPENDENT(hadc) != RESET)
 8002fa2:	68fb      	ldr	r3, [r7, #12]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a4d      	ldr	r2, [pc, #308]	; (80030dc <HAL_ADC_Start_DMA+0x190>)
 8002fa8:	4293      	cmp	r3, r2
 8002faa:	d008      	beq.n	8002fbe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	2b00      	cmp	r3, #0
 8002fb0:	d005      	beq.n	8002fbe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8002fb2:	693b      	ldr	r3, [r7, #16]
 8002fb4:	2b05      	cmp	r3, #5
 8002fb6:	d002      	beq.n	8002fbe <HAL_ADC_Start_DMA+0x72>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8002fb8:	693b      	ldr	r3, [r7, #16]
 8002fba:	2b09      	cmp	r3, #9
 8002fbc:	d17a      	bne.n	80030b4 <HAL_ADC_Start_DMA+0x168>
       )
#endif /* ADC_MULTIMODE_SUPPORT */
    {
      /* Enable the ADC peripheral */
      tmp_hal_status = ADC_Enable(hadc);
 8002fbe:	68f8      	ldr	r0, [r7, #12]
 8002fc0:	f000 fcec 	bl	800399c <ADC_Enable>
 8002fc4:	4603      	mov	r3, r0
 8002fc6:	75fb      	strb	r3, [r7, #23]

      /* Start conversion if ADC is effectively enabled */
      if (tmp_hal_status == HAL_OK)
 8002fc8:	7dfb      	ldrb	r3, [r7, #23]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d16d      	bne.n	80030aa <HAL_ADC_Start_DMA+0x15e>
      {
        /* Set ADC state                                                        */
        /* - Clear state bitfield related to regular group conversion results   */
        /* - Set state bitfield related to regular operation                    */
        ADC_STATE_CLR_SET(hadc->State,
 8002fce:	68fb      	ldr	r3, [r7, #12]
 8002fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002fd2:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8002fd6:	f023 0301 	bic.w	r3, r3, #1
 8002fda:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	65da      	str	r2, [r3, #92]	; 0x5c

#if defined(ADC_MULTIMODE_SUPPORT)
        /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
          - if ADC instance is master or if multimode feature is not available
          - if multimode setting is disabled (ADC instance slave in independent mode) */
        if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8002fe2:	68fb      	ldr	r3, [r7, #12]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	4a3a      	ldr	r2, [pc, #232]	; (80030d0 <HAL_ADC_Start_DMA+0x184>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d009      	beq.n	8003000 <HAL_ADC_Start_DMA+0xb4>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	4a3b      	ldr	r2, [pc, #236]	; (80030e0 <HAL_ADC_Start_DMA+0x194>)
 8002ff2:	4293      	cmp	r3, r2
 8002ff4:	d002      	beq.n	8002ffc <HAL_ADC_Start_DMA+0xb0>
 8002ff6:	68fb      	ldr	r3, [r7, #12]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	e003      	b.n	8003004 <HAL_ADC_Start_DMA+0xb8>
 8002ffc:	4b39      	ldr	r3, [pc, #228]	; (80030e4 <HAL_ADC_Start_DMA+0x198>)
 8002ffe:	e001      	b.n	8003004 <HAL_ADC_Start_DMA+0xb8>
 8003000:	f04f 43a0 	mov.w	r3, #1342177280	; 0x50000000
 8003004:	68fa      	ldr	r2, [r7, #12]
 8003006:	6812      	ldr	r2, [r2, #0]
 8003008:	4293      	cmp	r3, r2
 800300a:	d002      	beq.n	8003012 <HAL_ADC_Start_DMA+0xc6>
            || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 800300c:	693b      	ldr	r3, [r7, #16]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d105      	bne.n	800301e <HAL_ADC_Start_DMA+0xd2>
           )
        {
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003016:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	65da      	str	r2, [r3, #92]	; 0x5c
        }
#endif

        /* Check if a conversion is on going on ADC group injected */
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 800301e:	68fb      	ldr	r3, [r7, #12]
 8003020:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003022:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003026:	2b00      	cmp	r3, #0
 8003028:	d006      	beq.n	8003038 <HAL_ADC_Start_DMA+0xec>
        {
          /* Reset ADC error code fields related to regular conversions only */
          CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800302e:	f023 0206 	bic.w	r2, r3, #6
 8003032:	68fb      	ldr	r3, [r7, #12]
 8003034:	661a      	str	r2, [r3, #96]	; 0x60
 8003036:	e002      	b.n	800303e <HAL_ADC_Start_DMA+0xf2>
        }
        else
        {
          /* Reset all ADC error code fields */
          ADC_CLEAR_ERRORCODE(hadc);
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	2200      	movs	r2, #0
 800303c:	661a      	str	r2, [r3, #96]	; 0x60
        }

        /* Set the DMA transfer complete callback */
        hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003042:	4a29      	ldr	r2, [pc, #164]	; (80030e8 <HAL_ADC_Start_DMA+0x19c>)
 8003044:	62da      	str	r2, [r3, #44]	; 0x2c

        /* Set the DMA half transfer complete callback */
        hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800304a:	4a28      	ldr	r2, [pc, #160]	; (80030ec <HAL_ADC_Start_DMA+0x1a0>)
 800304c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Set the DMA error callback */
        hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003052:	4a27      	ldr	r2, [pc, #156]	; (80030f0 <HAL_ADC_Start_DMA+0x1a4>)
 8003054:	635a      	str	r2, [r3, #52]	; 0x34
        /* ADC start (in case of SW start):                                   */

        /* Clear regular group conversion flag and overrun flag               */
        /* (To ensure of no unknown state from potential previous ADC         */
        /* operations)                                                        */
        __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	221c      	movs	r2, #28
 800305c:	601a      	str	r2, [r3, #0]

        /* Process unlocked */
        /* Unlock before starting ADC conversions: in case of potential         */
        /* interruption, to let the process to ADC IRQ Handler.                 */
        __HAL_UNLOCK(hadc);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	2200      	movs	r2, #0
 8003062:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        /* With DMA, overrun event is always considered as an error even if
           hadc->Init.Overrun is set to ADC_OVR_DATA_OVERWRITTEN. Therefore,
           ADC_IT_OVR is enabled. */
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	685a      	ldr	r2, [r3, #4]
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	f042 0210 	orr.w	r2, r2, #16
 8003074:	605a      	str	r2, [r3, #4]

        /* Enable ADC DMA mode */
        SET_BIT(hadc->Instance->CFGR, ADC_CFGR_DMAEN);
 8003076:	68fb      	ldr	r3, [r7, #12]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68da      	ldr	r2, [r3, #12]
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f042 0201 	orr.w	r2, r2, #1
 8003084:	60da      	str	r2, [r3, #12]

        /* Start the DMA channel */
        tmp_hal_status = HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8003086:	68fb      	ldr	r3, [r7, #12]
 8003088:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	3340      	adds	r3, #64	; 0x40
 8003090:	4619      	mov	r1, r3
 8003092:	68ba      	ldr	r2, [r7, #8]
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	f001 f91b 	bl	80042d0 <HAL_DMA_Start_IT>
 800309a:	4603      	mov	r3, r0
 800309c:	75fb      	strb	r3, [r7, #23]
        /* Enable conversion of regular group.                                  */
        /* If software start has been selected, conversion starts immediately.  */
        /* If external trigger has been selected, conversion will start at next */
        /* trigger event.                                                       */
        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	4618      	mov	r0, r3
 80030a4:	f7ff fd56 	bl	8002b54 <LL_ADC_REG_StartConversion>
      if (tmp_hal_status == HAL_OK)
 80030a8:	e00d      	b.n	80030c6 <HAL_ADC_Start_DMA+0x17a>
      }
      else
      {
        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 80030aa:	68fb      	ldr	r3, [r7, #12]
 80030ac:	2200      	movs	r2, #0
 80030ae:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
      if (tmp_hal_status == HAL_OK)
 80030b2:	e008      	b.n	80030c6 <HAL_ADC_Start_DMA+0x17a>

    }
#if defined(ADC_MULTIMODE_SUPPORT)
    else
    {
      tmp_hal_status = HAL_ERROR;
 80030b4:	2301      	movs	r3, #1
 80030b6:	75fb      	strb	r3, [r7, #23]
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	2200      	movs	r2, #0
 80030bc:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
 80030c0:	e001      	b.n	80030c6 <HAL_ADC_Start_DMA+0x17a>
    }
#endif
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 80030c2:	2302      	movs	r3, #2
 80030c4:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 80030c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80030c8:	4618      	mov	r0, r3
 80030ca:	3718      	adds	r7, #24
 80030cc:	46bd      	mov	sp, r7
 80030ce:	bd80      	pop	{r7, pc}
 80030d0:	50000100 	.word	0x50000100
 80030d4:	50000300 	.word	0x50000300
 80030d8:	50000700 	.word	0x50000700
 80030dc:	50000600 	.word	0x50000600
 80030e0:	50000500 	.word	0x50000500
 80030e4:	50000400 	.word	0x50000400
 80030e8:	08003b1f 	.word	0x08003b1f
 80030ec:	08003bf7 	.word	0x08003bf7
 80030f0:	08003c13 	.word	0x08003c13

080030f4 <HAL_ADC_ConvHalfCpltCallback>:
  * @brief  Conversion DMA half-transfer callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef *hadc)
{
 80030f4:	b480      	push	{r7}
 80030f6:	b083      	sub	sp, #12
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ConvHalfCpltCallback must be implemented in the user file.
  */
}
 80030fc:	bf00      	nop
 80030fe:	370c      	adds	r7, #12
 8003100:	46bd      	mov	sp, r7
 8003102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003106:	4770      	bx	lr

08003108 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8003108:	b480      	push	{r7}
 800310a:	b083      	sub	sp, #12
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8003110:	bf00      	nop
 8003112:	370c      	adds	r7, #12
 8003114:	46bd      	mov	sp, r7
 8003116:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311a:	4770      	bx	lr

0800311c <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b0b6      	sub	sp, #216	; 0xd8
 8003120:	af00      	add	r7, sp, #0
 8003122:	6078      	str	r0, [r7, #4]
 8003124:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003126:	2300      	movs	r3, #0
 8003128:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0UL;
 800312c:	2300      	movs	r3, #0
 800312e:	60fb      	str	r3, [r7, #12]
  {
    assert_param(IS_ADC_DIFF_CHANNEL(hadc, sConfig->Channel));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003136:	2b01      	cmp	r3, #1
 8003138:	d102      	bne.n	8003140 <HAL_ADC_ConfigChannel+0x24>
 800313a:	2302      	movs	r3, #2
 800313c:	f000 bc13 	b.w	8003966 <HAL_ADC_ConfigChannel+0x84a>
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2201      	movs	r2, #1
 8003144:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003148:	687b      	ldr	r3, [r7, #4]
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7ff fd15 	bl	8002b7c <LL_ADC_REG_IsConversionOngoing>
 8003152:	4603      	mov	r3, r0
 8003154:	2b00      	cmp	r3, #0
 8003156:	f040 83f3 	bne.w	8003940 <HAL_ADC_ConfigChannel+0x824>
  {
    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	6818      	ldr	r0, [r3, #0]
 800315e:	683b      	ldr	r3, [r7, #0]
 8003160:	6859      	ldr	r1, [r3, #4]
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	461a      	mov	r2, r3
 8003168:	f7ff fbcb 	bl	8002902 <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	4618      	mov	r0, r3
 8003172:	f7ff fd03 	bl	8002b7c <LL_ADC_REG_IsConversionOngoing>
 8003176:	f8c7 00d0 	str.w	r0, [r7, #208]	; 0xd0
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff fd0f 	bl	8002ba2 <LL_ADC_INJ_IsConversionOngoing>
 8003184:	f8c7 00cc 	str.w	r0, [r7, #204]	; 0xcc
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8003188:	f8d7 30d0 	ldr.w	r3, [r7, #208]	; 0xd0
 800318c:	2b00      	cmp	r3, #0
 800318e:	f040 81d9 	bne.w	8003544 <HAL_ADC_ConfigChannel+0x428>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8003192:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 8003196:	2b00      	cmp	r3, #0
 8003198:	f040 81d4 	bne.w	8003544 <HAL_ADC_ConfigChannel+0x428>
       )
    {
      /* Manage specific case of sampling time 3.5 cycles replacing 2.5 cyles */
      if (sConfig->SamplingTime == ADC_SAMPLETIME_3CYCLES_5)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	689b      	ldr	r3, [r3, #8]
 80031a0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80031a4:	d10f      	bne.n	80031c6 <HAL_ADC_ConfigChannel+0xaa>
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, LL_ADC_SAMPLINGTIME_2CYCLES_5);
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6818      	ldr	r0, [r3, #0]
 80031aa:	683b      	ldr	r3, [r7, #0]
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	2200      	movs	r2, #0
 80031b0:	4619      	mov	r1, r3
 80031b2:	f7ff fbd2 	bl	800295a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_3C5_REPL_2C5);
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	681b      	ldr	r3, [r3, #0]
 80031ba:	f04f 4100 	mov.w	r1, #2147483648	; 0x80000000
 80031be:	4618      	mov	r0, r3
 80031c0:	f7ff fb79 	bl	80028b6 <LL_ADC_SetSamplingTimeCommonConfig>
 80031c4:	e00e      	b.n	80031e4 <HAL_ADC_ConfigChannel+0xc8>
      }
      else
      {
        /* Set sampling time of the selected ADC channel */
        LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	6818      	ldr	r0, [r3, #0]
 80031ca:	683b      	ldr	r3, [r7, #0]
 80031cc:	6819      	ldr	r1, [r3, #0]
 80031ce:	683b      	ldr	r3, [r7, #0]
 80031d0:	689b      	ldr	r3, [r3, #8]
 80031d2:	461a      	mov	r2, r3
 80031d4:	f7ff fbc1 	bl	800295a <LL_ADC_SetChannelSamplingTime>

        /* Set ADC sampling time common configuration */
        LL_ADC_SetSamplingTimeCommonConfig(hadc->Instance, LL_ADC_SAMPLINGTIME_COMMON_DEFAULT);
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	2100      	movs	r1, #0
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff fb69 	bl	80028b6 <LL_ADC_SetSamplingTimeCommonConfig>

      /* Configure the offset: offset enable/disable, channel, offset value */

      /* Shift the offset with respect to the selected ADC resolution. */
      /* Offset has to be left-aligned on bit 11, the LSB (right bits) are set to 0 */
      tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	695a      	ldr	r2, [r3, #20]
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	68db      	ldr	r3, [r3, #12]
 80031ee:	08db      	lsrs	r3, r3, #3
 80031f0:	f003 0303 	and.w	r3, r3, #3
 80031f4:	005b      	lsls	r3, r3, #1
 80031f6:	fa02 f303 	lsl.w	r3, r2, r3
 80031fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8

      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	691b      	ldr	r3, [r3, #16]
 8003202:	2b04      	cmp	r3, #4
 8003204:	d022      	beq.n	800324c <HAL_ADC_ConfigChannel+0x130>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6818      	ldr	r0, [r3, #0]
 800320a:	683b      	ldr	r3, [r7, #0]
 800320c:	6919      	ldr	r1, [r3, #16]
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	681a      	ldr	r2, [r3, #0]
 8003212:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8003216:	f7ff fac3 	bl	80027a0 <LL_ADC_SetOffset>

        assert_param(IS_ADC_OFFSET_SIGN(sConfig->OffsetSign));
        assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSaturation));
        /* Set ADC selected offset sign & saturation */
        LL_ADC_SetOffsetSign(hadc->Instance, sConfig->OffsetNumber, sConfig->OffsetSign);
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	6818      	ldr	r0, [r3, #0]
 800321e:	683b      	ldr	r3, [r7, #0]
 8003220:	6919      	ldr	r1, [r3, #16]
 8003222:	683b      	ldr	r3, [r7, #0]
 8003224:	699b      	ldr	r3, [r3, #24]
 8003226:	461a      	mov	r2, r3
 8003228:	f7ff fb0f 	bl	800284a <LL_ADC_SetOffsetSign>
        LL_ADC_SetOffsetSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSaturation == ENABLE) ? LL_ADC_OFFSET_SATURATION_ENABLE : LL_ADC_OFFSET_SATURATION_DISABLE);
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6818      	ldr	r0, [r3, #0]
 8003230:	683b      	ldr	r3, [r7, #0]
 8003232:	6919      	ldr	r1, [r3, #16]
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	7f1b      	ldrb	r3, [r3, #28]
 8003238:	2b01      	cmp	r3, #1
 800323a:	d102      	bne.n	8003242 <HAL_ADC_ConfigChannel+0x126>
 800323c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8003240:	e000      	b.n	8003244 <HAL_ADC_ConfigChannel+0x128>
 8003242:	2300      	movs	r3, #0
 8003244:	461a      	mov	r2, r3
 8003246:	f7ff fb1b 	bl	8002880 <LL_ADC_SetOffsetSaturation>
 800324a:	e17b      	b.n	8003544 <HAL_ADC_ConfigChannel+0x428>
      }
      else
      {
        /* Scan each offset register to check if the selected channel is targeted. */
        /* If this is the case, the corresponding offset number is disabled.       */
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 800324c:	687b      	ldr	r3, [r7, #4]
 800324e:	681b      	ldr	r3, [r3, #0]
 8003250:	2100      	movs	r1, #0
 8003252:	4618      	mov	r0, r3
 8003254:	f7ff fac8 	bl	80027e8 <LL_ADC_GetOffsetChannel>
 8003258:	4603      	mov	r3, r0
 800325a:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800325e:	2b00      	cmp	r3, #0
 8003260:	d10a      	bne.n	8003278 <HAL_ADC_ConfigChannel+0x15c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	2100      	movs	r1, #0
 8003268:	4618      	mov	r0, r3
 800326a:	f7ff fabd 	bl	80027e8 <LL_ADC_GetOffsetChannel>
 800326e:	4603      	mov	r3, r0
 8003270:	0e9b      	lsrs	r3, r3, #26
 8003272:	f003 021f 	and.w	r2, r3, #31
 8003276:	e01e      	b.n	80032b6 <HAL_ADC_ConfigChannel+0x19a>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	2100      	movs	r1, #0
 800327e:	4618      	mov	r0, r3
 8003280:	f7ff fab2 	bl	80027e8 <LL_ADC_GetOffsetChannel>
 8003284:	4603      	mov	r3, r0
 8003286:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800328a:	f8d7 30bc 	ldr.w	r3, [r7, #188]	; 0xbc
 800328e:	fa93 f3a3 	rbit	r3, r3
 8003292:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8003296:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800329a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 800329e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d101      	bne.n	80032aa <HAL_ADC_ConfigChannel+0x18e>
  {
    return 32U;
 80032a6:	2320      	movs	r3, #32
 80032a8:	e004      	b.n	80032b4 <HAL_ADC_ConfigChannel+0x198>
  }
  return __builtin_clz(value);
 80032aa:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 80032ae:	fab3 f383 	clz	r3, r3
 80032b2:	b2db      	uxtb	r3, r3
 80032b4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d105      	bne.n	80032ce <HAL_ADC_ConfigChannel+0x1b2>
 80032c2:	683b      	ldr	r3, [r7, #0]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	0e9b      	lsrs	r3, r3, #26
 80032c8:	f003 031f 	and.w	r3, r3, #31
 80032cc:	e018      	b.n	8003300 <HAL_ADC_ConfigChannel+0x1e4>
 80032ce:	683b      	ldr	r3, [r7, #0]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80032d6:	f8d7 30b0 	ldr.w	r3, [r7, #176]	; 0xb0
 80032da:	fa93 f3a3 	rbit	r3, r3
 80032de:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
  return result;
 80032e2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 80032e6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
  if (value == 0U)
 80032ea:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032ee:	2b00      	cmp	r3, #0
 80032f0:	d101      	bne.n	80032f6 <HAL_ADC_ConfigChannel+0x1da>
    return 32U;
 80032f2:	2320      	movs	r3, #32
 80032f4:	e004      	b.n	8003300 <HAL_ADC_ConfigChannel+0x1e4>
  return __builtin_clz(value);
 80032f6:	f8d7 30b4 	ldr.w	r3, [r7, #180]	; 0xb4
 80032fa:	fab3 f383 	clz	r3, r3
 80032fe:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_1))
 8003300:	429a      	cmp	r2, r3
 8003302:	d106      	bne.n	8003312 <HAL_ADC_ConfigChannel+0x1f6>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_1, LL_ADC_OFFSET_DISABLE);
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	2200      	movs	r2, #0
 800330a:	2100      	movs	r1, #0
 800330c:	4618      	mov	r0, r3
 800330e:	f7ff fa81 	bl	8002814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	2101      	movs	r1, #1
 8003318:	4618      	mov	r0, r3
 800331a:	f7ff fa65 	bl	80027e8 <LL_ADC_GetOffsetChannel>
 800331e:	4603      	mov	r3, r0
 8003320:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003324:	2b00      	cmp	r3, #0
 8003326:	d10a      	bne.n	800333e <HAL_ADC_ConfigChannel+0x222>
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	2101      	movs	r1, #1
 800332e:	4618      	mov	r0, r3
 8003330:	f7ff fa5a 	bl	80027e8 <LL_ADC_GetOffsetChannel>
 8003334:	4603      	mov	r3, r0
 8003336:	0e9b      	lsrs	r3, r3, #26
 8003338:	f003 021f 	and.w	r2, r3, #31
 800333c:	e01e      	b.n	800337c <HAL_ADC_ConfigChannel+0x260>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	2101      	movs	r1, #1
 8003344:	4618      	mov	r0, r3
 8003346:	f7ff fa4f 	bl	80027e8 <LL_ADC_GetOffsetChannel>
 800334a:	4603      	mov	r3, r0
 800334c:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003350:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 8003354:	fa93 f3a3 	rbit	r3, r3
 8003358:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  return result;
 800335c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8003360:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
  if (value == 0U)
 8003364:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003368:	2b00      	cmp	r3, #0
 800336a:	d101      	bne.n	8003370 <HAL_ADC_ConfigChannel+0x254>
    return 32U;
 800336c:	2320      	movs	r3, #32
 800336e:	e004      	b.n	800337a <HAL_ADC_ConfigChannel+0x25e>
  return __builtin_clz(value);
 8003370:	f8d7 30a8 	ldr.w	r3, [r7, #168]	; 0xa8
 8003374:	fab3 f383 	clz	r3, r3
 8003378:	b2db      	uxtb	r3, r3
 800337a:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 800337c:	683b      	ldr	r3, [r7, #0]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003384:	2b00      	cmp	r3, #0
 8003386:	d105      	bne.n	8003394 <HAL_ADC_ConfigChannel+0x278>
 8003388:	683b      	ldr	r3, [r7, #0]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	0e9b      	lsrs	r3, r3, #26
 800338e:	f003 031f 	and.w	r3, r3, #31
 8003392:	e018      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x2aa>
 8003394:	683b      	ldr	r3, [r7, #0]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800339c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80033a0:	fa93 f3a3 	rbit	r3, r3
 80033a4:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  return result;
 80033a8:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80033ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  if (value == 0U)
 80033b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_ADC_ConfigChannel+0x2a0>
    return 32U;
 80033b8:	2320      	movs	r3, #32
 80033ba:	e004      	b.n	80033c6 <HAL_ADC_ConfigChannel+0x2aa>
  return __builtin_clz(value);
 80033bc:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80033c0:	fab3 f383 	clz	r3, r3
 80033c4:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_2))
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d106      	bne.n	80033d8 <HAL_ADC_ConfigChannel+0x2bc>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_2, LL_ADC_OFFSET_DISABLE);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	2200      	movs	r2, #0
 80033d0:	2101      	movs	r1, #1
 80033d2:	4618      	mov	r0, r3
 80033d4:	f7ff fa1e 	bl	8002814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	681b      	ldr	r3, [r3, #0]
 80033dc:	2102      	movs	r1, #2
 80033de:	4618      	mov	r0, r3
 80033e0:	f7ff fa02 	bl	80027e8 <LL_ADC_GetOffsetChannel>
 80033e4:	4603      	mov	r3, r0
 80033e6:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80033ea:	2b00      	cmp	r3, #0
 80033ec:	d10a      	bne.n	8003404 <HAL_ADC_ConfigChannel+0x2e8>
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	2102      	movs	r1, #2
 80033f4:	4618      	mov	r0, r3
 80033f6:	f7ff f9f7 	bl	80027e8 <LL_ADC_GetOffsetChannel>
 80033fa:	4603      	mov	r3, r0
 80033fc:	0e9b      	lsrs	r3, r3, #26
 80033fe:	f003 021f 	and.w	r2, r3, #31
 8003402:	e01e      	b.n	8003442 <HAL_ADC_ConfigChannel+0x326>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	2102      	movs	r1, #2
 800340a:	4618      	mov	r0, r3
 800340c:	f7ff f9ec 	bl	80027e8 <LL_ADC_GetOffsetChannel>
 8003410:	4603      	mov	r3, r0
 8003412:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003416:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800341a:	fa93 f3a3 	rbit	r3, r3
 800341e:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  return result;
 8003422:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8003426:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  if (value == 0U)
 800342a:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800342e:	2b00      	cmp	r3, #0
 8003430:	d101      	bne.n	8003436 <HAL_ADC_ConfigChannel+0x31a>
    return 32U;
 8003432:	2320      	movs	r3, #32
 8003434:	e004      	b.n	8003440 <HAL_ADC_ConfigChannel+0x324>
  return __builtin_clz(value);
 8003436:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 800343a:	fab3 f383 	clz	r3, r3
 800343e:	b2db      	uxtb	r3, r3
 8003440:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800344a:	2b00      	cmp	r3, #0
 800344c:	d105      	bne.n	800345a <HAL_ADC_ConfigChannel+0x33e>
 800344e:	683b      	ldr	r3, [r7, #0]
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	0e9b      	lsrs	r3, r3, #26
 8003454:	f003 031f 	and.w	r3, r3, #31
 8003458:	e016      	b.n	8003488 <HAL_ADC_ConfigChannel+0x36c>
 800345a:	683b      	ldr	r3, [r7, #0]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003462:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8003466:	fa93 f3a3 	rbit	r3, r3
 800346a:	67fb      	str	r3, [r7, #124]	; 0x7c
  return result;
 800346c:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800346e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (value == 0U)
 8003472:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003476:	2b00      	cmp	r3, #0
 8003478:	d101      	bne.n	800347e <HAL_ADC_ConfigChannel+0x362>
    return 32U;
 800347a:	2320      	movs	r3, #32
 800347c:	e004      	b.n	8003488 <HAL_ADC_ConfigChannel+0x36c>
  return __builtin_clz(value);
 800347e:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8003482:	fab3 f383 	clz	r3, r3
 8003486:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_3))
 8003488:	429a      	cmp	r2, r3
 800348a:	d106      	bne.n	800349a <HAL_ADC_ConfigChannel+0x37e>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_3, LL_ADC_OFFSET_DISABLE);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	2200      	movs	r2, #0
 8003492:	2102      	movs	r1, #2
 8003494:	4618      	mov	r0, r3
 8003496:	f7ff f9bd 	bl	8002814 <LL_ADC_SetOffsetState>
        }
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	2103      	movs	r1, #3
 80034a0:	4618      	mov	r0, r3
 80034a2:	f7ff f9a1 	bl	80027e8 <LL_ADC_GetOffsetChannel>
 80034a6:	4603      	mov	r3, r0
 80034a8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d10a      	bne.n	80034c6 <HAL_ADC_ConfigChannel+0x3aa>
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	2103      	movs	r1, #3
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff f996 	bl	80027e8 <LL_ADC_GetOffsetChannel>
 80034bc:	4603      	mov	r3, r0
 80034be:	0e9b      	lsrs	r3, r3, #26
 80034c0:	f003 021f 	and.w	r2, r3, #31
 80034c4:	e017      	b.n	80034f6 <HAL_ADC_ConfigChannel+0x3da>
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	2103      	movs	r1, #3
 80034cc:	4618      	mov	r0, r3
 80034ce:	f7ff f98b 	bl	80027e8 <LL_ADC_GetOffsetChannel>
 80034d2:	4603      	mov	r3, r0
 80034d4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80034d6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80034d8:	fa93 f3a3 	rbit	r3, r3
 80034dc:	673b      	str	r3, [r7, #112]	; 0x70
  return result;
 80034de:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80034e0:	67bb      	str	r3, [r7, #120]	; 0x78
  if (value == 0U)
 80034e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d101      	bne.n	80034ec <HAL_ADC_ConfigChannel+0x3d0>
    return 32U;
 80034e8:	2320      	movs	r3, #32
 80034ea:	e003      	b.n	80034f4 <HAL_ADC_ConfigChannel+0x3d8>
  return __builtin_clz(value);
 80034ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80034ee:	fab3 f383 	clz	r3, r3
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	461a      	mov	r2, r3
            == __LL_ADC_CHANNEL_TO_DECIMAL_NB(sConfig->Channel))
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80034fe:	2b00      	cmp	r3, #0
 8003500:	d105      	bne.n	800350e <HAL_ADC_ConfigChannel+0x3f2>
 8003502:	683b      	ldr	r3, [r7, #0]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	0e9b      	lsrs	r3, r3, #26
 8003508:	f003 031f 	and.w	r3, r3, #31
 800350c:	e011      	b.n	8003532 <HAL_ADC_ConfigChannel+0x416>
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003514:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8003516:	fa93 f3a3 	rbit	r3, r3
 800351a:	667b      	str	r3, [r7, #100]	; 0x64
  return result;
 800351c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800351e:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (value == 0U)
 8003520:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8003522:	2b00      	cmp	r3, #0
 8003524:	d101      	bne.n	800352a <HAL_ADC_ConfigChannel+0x40e>
    return 32U;
 8003526:	2320      	movs	r3, #32
 8003528:	e003      	b.n	8003532 <HAL_ADC_ConfigChannel+0x416>
  return __builtin_clz(value);
 800352a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800352c:	fab3 f383 	clz	r3, r3
 8003530:	b2db      	uxtb	r3, r3
        if (__LL_ADC_CHANNEL_TO_DECIMAL_NB(LL_ADC_GetOffsetChannel(hadc->Instance, LL_ADC_OFFSET_4))
 8003532:	429a      	cmp	r2, r3
 8003534:	d106      	bne.n	8003544 <HAL_ADC_ConfigChannel+0x428>
        {
          LL_ADC_SetOffsetState(hadc->Instance, LL_ADC_OFFSET_4, LL_ADC_OFFSET_DISABLE);
 8003536:	687b      	ldr	r3, [r7, #4]
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	2200      	movs	r2, #0
 800353c:	2103      	movs	r1, #3
 800353e:	4618      	mov	r0, r3
 8003540:	f7ff f968 	bl	8002814 <LL_ADC_SetOffsetState>
    }

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	4618      	mov	r0, r3
 800354a:	f7ff fadd 	bl	8002b08 <LL_ADC_IsEnabled>
 800354e:	4603      	mov	r3, r0
 8003550:	2b00      	cmp	r3, #0
 8003552:	f040 813d 	bne.w	80037d0 <HAL_ADC_ConfigChannel+0x6b4>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6818      	ldr	r0, [r3, #0]
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	6819      	ldr	r1, [r3, #0]
 800355e:	683b      	ldr	r3, [r7, #0]
 8003560:	68db      	ldr	r3, [r3, #12]
 8003562:	461a      	mov	r2, r3
 8003564:	f7ff fa24 	bl	80029b0 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	4aa2      	ldr	r2, [pc, #648]	; (80037f8 <HAL_ADC_ConfigChannel+0x6dc>)
 800356e:	4293      	cmp	r3, r2
 8003570:	f040 812e 	bne.w	80037d0 <HAL_ADC_ConfigChannel+0x6b4>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	681b      	ldr	r3, [r3, #0]
 800357c:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003580:	2b00      	cmp	r3, #0
 8003582:	d10b      	bne.n	800359c <HAL_ADC_ConfigChannel+0x480>
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	681b      	ldr	r3, [r3, #0]
 8003588:	0e9b      	lsrs	r3, r3, #26
 800358a:	3301      	adds	r3, #1
 800358c:	f003 031f 	and.w	r3, r3, #31
 8003590:	2b09      	cmp	r3, #9
 8003592:	bf94      	ite	ls
 8003594:	2301      	movls	r3, #1
 8003596:	2300      	movhi	r3, #0
 8003598:	b2db      	uxtb	r3, r3
 800359a:	e019      	b.n	80035d0 <HAL_ADC_ConfigChannel+0x4b4>
 800359c:	683b      	ldr	r3, [r7, #0]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80035a4:	fa93 f3a3 	rbit	r3, r3
 80035a8:	65bb      	str	r3, [r7, #88]	; 0x58
  return result;
 80035aa:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80035ac:	663b      	str	r3, [r7, #96]	; 0x60
  if (value == 0U)
 80035ae:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d101      	bne.n	80035b8 <HAL_ADC_ConfigChannel+0x49c>
    return 32U;
 80035b4:	2320      	movs	r3, #32
 80035b6:	e003      	b.n	80035c0 <HAL_ADC_ConfigChannel+0x4a4>
  return __builtin_clz(value);
 80035b8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80035ba:	fab3 f383 	clz	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	3301      	adds	r3, #1
 80035c2:	f003 031f 	and.w	r3, r3, #31
 80035c6:	2b09      	cmp	r3, #9
 80035c8:	bf94      	ite	ls
 80035ca:	2301      	movls	r3, #1
 80035cc:	2300      	movhi	r3, #0
 80035ce:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d079      	beq.n	80036c8 <HAL_ADC_ConfigChannel+0x5ac>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80035d4:	683b      	ldr	r3, [r7, #0]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80035dc:	2b00      	cmp	r3, #0
 80035de:	d107      	bne.n	80035f0 <HAL_ADC_ConfigChannel+0x4d4>
 80035e0:	683b      	ldr	r3, [r7, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	0e9b      	lsrs	r3, r3, #26
 80035e6:	3301      	adds	r3, #1
 80035e8:	069b      	lsls	r3, r3, #26
 80035ea:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80035ee:	e015      	b.n	800361c <HAL_ADC_ConfigChannel+0x500>
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	681b      	ldr	r3, [r3, #0]
 80035f4:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80035f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80035f8:	fa93 f3a3 	rbit	r3, r3
 80035fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  return result;
 80035fe:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003600:	657b      	str	r3, [r7, #84]	; 0x54
  if (value == 0U)
 8003602:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8003604:	2b00      	cmp	r3, #0
 8003606:	d101      	bne.n	800360c <HAL_ADC_ConfigChannel+0x4f0>
    return 32U;
 8003608:	2320      	movs	r3, #32
 800360a:	e003      	b.n	8003614 <HAL_ADC_ConfigChannel+0x4f8>
  return __builtin_clz(value);
 800360c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800360e:	fab3 f383 	clz	r3, r3
 8003612:	b2db      	uxtb	r3, r3
 8003614:	3301      	adds	r3, #1
 8003616:	069b      	lsls	r3, r3, #26
 8003618:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800361c:	683b      	ldr	r3, [r7, #0]
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003624:	2b00      	cmp	r3, #0
 8003626:	d109      	bne.n	800363c <HAL_ADC_ConfigChannel+0x520>
 8003628:	683b      	ldr	r3, [r7, #0]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	0e9b      	lsrs	r3, r3, #26
 800362e:	3301      	adds	r3, #1
 8003630:	f003 031f 	and.w	r3, r3, #31
 8003634:	2101      	movs	r1, #1
 8003636:	fa01 f303 	lsl.w	r3, r1, r3
 800363a:	e017      	b.n	800366c <HAL_ADC_ConfigChannel+0x550>
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003642:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003644:	fa93 f3a3 	rbit	r3, r3
 8003648:	643b      	str	r3, [r7, #64]	; 0x40
  return result;
 800364a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800364c:	64bb      	str	r3, [r7, #72]	; 0x48
  if (value == 0U)
 800364e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8003650:	2b00      	cmp	r3, #0
 8003652:	d101      	bne.n	8003658 <HAL_ADC_ConfigChannel+0x53c>
    return 32U;
 8003654:	2320      	movs	r3, #32
 8003656:	e003      	b.n	8003660 <HAL_ADC_ConfigChannel+0x544>
  return __builtin_clz(value);
 8003658:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800365a:	fab3 f383 	clz	r3, r3
 800365e:	b2db      	uxtb	r3, r3
 8003660:	3301      	adds	r3, #1
 8003662:	f003 031f 	and.w	r3, r3, #31
 8003666:	2101      	movs	r1, #1
 8003668:	fa01 f303 	lsl.w	r3, r1, r3
 800366c:	ea42 0103 	orr.w	r1, r2, r3
 8003670:	683b      	ldr	r3, [r7, #0]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003678:	2b00      	cmp	r3, #0
 800367a:	d10a      	bne.n	8003692 <HAL_ADC_ConfigChannel+0x576>
 800367c:	683b      	ldr	r3, [r7, #0]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	0e9b      	lsrs	r3, r3, #26
 8003682:	3301      	adds	r3, #1
 8003684:	f003 021f 	and.w	r2, r3, #31
 8003688:	4613      	mov	r3, r2
 800368a:	005b      	lsls	r3, r3, #1
 800368c:	4413      	add	r3, r2
 800368e:	051b      	lsls	r3, r3, #20
 8003690:	e018      	b.n	80036c4 <HAL_ADC_ConfigChannel+0x5a8>
 8003692:	683b      	ldr	r3, [r7, #0]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003698:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800369a:	fa93 f3a3 	rbit	r3, r3
 800369e:	637b      	str	r3, [r7, #52]	; 0x34
  return result;
 80036a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80036a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (value == 0U)
 80036a4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_ADC_ConfigChannel+0x592>
    return 32U;
 80036aa:	2320      	movs	r3, #32
 80036ac:	e003      	b.n	80036b6 <HAL_ADC_ConfigChannel+0x59a>
  return __builtin_clz(value);
 80036ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80036b0:	fab3 f383 	clz	r3, r3
 80036b4:	b2db      	uxtb	r3, r3
 80036b6:	3301      	adds	r3, #1
 80036b8:	f003 021f 	and.w	r2, r3, #31
 80036bc:	4613      	mov	r3, r2
 80036be:	005b      	lsls	r3, r3, #1
 80036c0:	4413      	add	r3, r2
 80036c2:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80036c4:	430b      	orrs	r3, r1
 80036c6:	e07e      	b.n	80037c6 <HAL_ADC_ConfigChannel+0x6aa>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f3c3 0312 	ubfx	r3, r3, #0, #19
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d107      	bne.n	80036e4 <HAL_ADC_ConfigChannel+0x5c8>
 80036d4:	683b      	ldr	r3, [r7, #0]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	0e9b      	lsrs	r3, r3, #26
 80036da:	3301      	adds	r3, #1
 80036dc:	069b      	lsls	r3, r3, #26
 80036de:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80036e2:	e015      	b.n	8003710 <HAL_ADC_ConfigChannel+0x5f4>
 80036e4:	683b      	ldr	r3, [r7, #0]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80036ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80036ec:	fa93 f3a3 	rbit	r3, r3
 80036f0:	62bb      	str	r3, [r7, #40]	; 0x28
  return result;
 80036f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80036f4:	633b      	str	r3, [r7, #48]	; 0x30
  if (value == 0U)
 80036f6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d101      	bne.n	8003700 <HAL_ADC_ConfigChannel+0x5e4>
    return 32U;
 80036fc:	2320      	movs	r3, #32
 80036fe:	e003      	b.n	8003708 <HAL_ADC_ConfigChannel+0x5ec>
  return __builtin_clz(value);
 8003700:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003702:	fab3 f383 	clz	r3, r3
 8003706:	b2db      	uxtb	r3, r3
 8003708:	3301      	adds	r3, #1
 800370a:	069b      	lsls	r3, r3, #26
 800370c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f3c3 0312 	ubfx	r3, r3, #0, #19
 8003718:	2b00      	cmp	r3, #0
 800371a:	d109      	bne.n	8003730 <HAL_ADC_ConfigChannel+0x614>
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	0e9b      	lsrs	r3, r3, #26
 8003722:	3301      	adds	r3, #1
 8003724:	f003 031f 	and.w	r3, r3, #31
 8003728:	2101      	movs	r1, #1
 800372a:	fa01 f303 	lsl.w	r3, r1, r3
 800372e:	e017      	b.n	8003760 <HAL_ADC_ConfigChannel+0x644>
 8003730:	683b      	ldr	r3, [r7, #0]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	623b      	str	r3, [r7, #32]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003736:	6a3b      	ldr	r3, [r7, #32]
 8003738:	fa93 f3a3 	rbit	r3, r3
 800373c:	61fb      	str	r3, [r7, #28]
  return result;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	627b      	str	r3, [r7, #36]	; 0x24
  if (value == 0U)
 8003742:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003744:	2b00      	cmp	r3, #0
 8003746:	d101      	bne.n	800374c <HAL_ADC_ConfigChannel+0x630>
    return 32U;
 8003748:	2320      	movs	r3, #32
 800374a:	e003      	b.n	8003754 <HAL_ADC_ConfigChannel+0x638>
  return __builtin_clz(value);
 800374c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800374e:	fab3 f383 	clz	r3, r3
 8003752:	b2db      	uxtb	r3, r3
 8003754:	3301      	adds	r3, #1
 8003756:	f003 031f 	and.w	r3, r3, #31
 800375a:	2101      	movs	r1, #1
 800375c:	fa01 f303 	lsl.w	r3, r1, r3
 8003760:	ea42 0103 	orr.w	r1, r2, r3
 8003764:	683b      	ldr	r3, [r7, #0]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f3c3 0312 	ubfx	r3, r3, #0, #19
 800376c:	2b00      	cmp	r3, #0
 800376e:	d10d      	bne.n	800378c <HAL_ADC_ConfigChannel+0x670>
 8003770:	683b      	ldr	r3, [r7, #0]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	0e9b      	lsrs	r3, r3, #26
 8003776:	3301      	adds	r3, #1
 8003778:	f003 021f 	and.w	r2, r3, #31
 800377c:	4613      	mov	r3, r2
 800377e:	005b      	lsls	r3, r3, #1
 8003780:	4413      	add	r3, r2
 8003782:	3b1e      	subs	r3, #30
 8003784:	051b      	lsls	r3, r3, #20
 8003786:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800378a:	e01b      	b.n	80037c4 <HAL_ADC_ConfigChannel+0x6a8>
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	617b      	str	r3, [r7, #20]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8003792:	697b      	ldr	r3, [r7, #20]
 8003794:	fa93 f3a3 	rbit	r3, r3
 8003798:	613b      	str	r3, [r7, #16]
  return result;
 800379a:	693b      	ldr	r3, [r7, #16]
 800379c:	61bb      	str	r3, [r7, #24]
  if (value == 0U)
 800379e:	69bb      	ldr	r3, [r7, #24]
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d101      	bne.n	80037a8 <HAL_ADC_ConfigChannel+0x68c>
    return 32U;
 80037a4:	2320      	movs	r3, #32
 80037a6:	e003      	b.n	80037b0 <HAL_ADC_ConfigChannel+0x694>
  return __builtin_clz(value);
 80037a8:	69bb      	ldr	r3, [r7, #24]
 80037aa:	fab3 f383 	clz	r3, r3
 80037ae:	b2db      	uxtb	r3, r3
 80037b0:	3301      	adds	r3, #1
 80037b2:	f003 021f 	and.w	r2, r3, #31
 80037b6:	4613      	mov	r3, r2
 80037b8:	005b      	lsls	r3, r3, #1
 80037ba:	4413      	add	r3, r2
 80037bc:	3b1e      	subs	r3, #30
 80037be:	051b      	lsls	r3, r3, #20
 80037c0:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 80037c4:	430b      	orrs	r3, r1
 80037c6:	683a      	ldr	r2, [r7, #0]
 80037c8:	6892      	ldr	r2, [r2, #8]
 80037ca:	4619      	mov	r1, r3
 80037cc:	f7ff f8c5 	bl	800295a <LL_ADC_SetChannelSamplingTime>
    /* If internal channel selected, enable dedicated internal buffers and    */
    /* paths.                                                                 */
    /* Note: these internal measurement paths can be disabled using           */
    /* HAL_ADC_DeInit().                                                      */

    if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 80037d0:	683b      	ldr	r3, [r7, #0]
 80037d2:	681a      	ldr	r2, [r3, #0]
 80037d4:	4b09      	ldr	r3, [pc, #36]	; (80037fc <HAL_ADC_ConfigChannel+0x6e0>)
 80037d6:	4013      	ands	r3, r2
 80037d8:	2b00      	cmp	r3, #0
 80037da:	f000 80be 	beq.w	800395a <HAL_ADC_ConfigChannel+0x83e>
    {
      tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80037e6:	d004      	beq.n	80037f2 <HAL_ADC_ConfigChannel+0x6d6>
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a04      	ldr	r2, [pc, #16]	; (8003800 <HAL_ADC_ConfigChannel+0x6e4>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d10a      	bne.n	8003808 <HAL_ADC_ConfigChannel+0x6ec>
 80037f2:	4b04      	ldr	r3, [pc, #16]	; (8003804 <HAL_ADC_ConfigChannel+0x6e8>)
 80037f4:	e009      	b.n	800380a <HAL_ADC_ConfigChannel+0x6ee>
 80037f6:	bf00      	nop
 80037f8:	407f0000 	.word	0x407f0000
 80037fc:	80080000 	.word	0x80080000
 8003800:	50000100 	.word	0x50000100
 8003804:	50000300 	.word	0x50000300
 8003808:	4b59      	ldr	r3, [pc, #356]	; (8003970 <HAL_ADC_ConfigChannel+0x854>)
 800380a:	4618      	mov	r0, r3
 800380c:	f7fe ffba 	bl	8002784 <LL_ADC_GetCommonPathInternalCh>
 8003810:	f8c7 00c4 	str.w	r0, [r7, #196]	; 0xc4

      /* If the requested internal measurement path has already been enabled, */
      /* bypass the configuration processing.                                 */
      if (((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC1) || (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR_ADC5))
 8003814:	683b      	ldr	r3, [r7, #0]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	4a56      	ldr	r2, [pc, #344]	; (8003974 <HAL_ADC_ConfigChannel+0x858>)
 800381a:	4293      	cmp	r3, r2
 800381c:	d004      	beq.n	8003828 <HAL_ADC_ConfigChannel+0x70c>
 800381e:	683b      	ldr	r3, [r7, #0]
 8003820:	681b      	ldr	r3, [r3, #0]
 8003822:	4a55      	ldr	r2, [pc, #340]	; (8003978 <HAL_ADC_ConfigChannel+0x85c>)
 8003824:	4293      	cmp	r3, r2
 8003826:	d13a      	bne.n	800389e <HAL_ADC_ConfigChannel+0x782>
          && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 8003828:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 800382c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d134      	bne.n	800389e <HAL_ADC_ConfigChannel+0x782>
      {
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800383c:	d005      	beq.n	800384a <HAL_ADC_ConfigChannel+0x72e>
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	4a4e      	ldr	r2, [pc, #312]	; (800397c <HAL_ADC_ConfigChannel+0x860>)
 8003844:	4293      	cmp	r3, r2
 8003846:	f040 8085 	bne.w	8003954 <HAL_ADC_ConfigChannel+0x838>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003852:	d004      	beq.n	800385e <HAL_ADC_ConfigChannel+0x742>
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	4a49      	ldr	r2, [pc, #292]	; (8003980 <HAL_ADC_ConfigChannel+0x864>)
 800385a:	4293      	cmp	r3, r2
 800385c:	d101      	bne.n	8003862 <HAL_ADC_ConfigChannel+0x746>
 800385e:	4a49      	ldr	r2, [pc, #292]	; (8003984 <HAL_ADC_ConfigChannel+0x868>)
 8003860:	e000      	b.n	8003864 <HAL_ADC_ConfigChannel+0x748>
 8003862:	4a43      	ldr	r2, [pc, #268]	; (8003970 <HAL_ADC_ConfigChannel+0x854>)
 8003864:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003868:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800386c:	4619      	mov	r1, r3
 800386e:	4610      	mov	r0, r2
 8003870:	f7fe ff75 	bl	800275e <LL_ADC_SetCommonPathInternalCh>
          /* Delay for temperature sensor stabilization time */
          /* Wait loop initialization and execution */
          /* Note: Variable divided by 2 to compensate partially              */
          /*       CPU processing cycles, scaling in us split to not          */
          /*       exceed 32 bits register capacity and handle low frequency. */
          wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8003874:	4b44      	ldr	r3, [pc, #272]	; (8003988 <HAL_ADC_ConfigChannel+0x86c>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	099b      	lsrs	r3, r3, #6
 800387a:	4a44      	ldr	r2, [pc, #272]	; (800398c <HAL_ADC_ConfigChannel+0x870>)
 800387c:	fba2 2303 	umull	r2, r3, r2, r3
 8003880:	099b      	lsrs	r3, r3, #6
 8003882:	1c5a      	adds	r2, r3, #1
 8003884:	4613      	mov	r3, r2
 8003886:	005b      	lsls	r3, r3, #1
 8003888:	4413      	add	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 800388e:	e002      	b.n	8003896 <HAL_ADC_ConfigChannel+0x77a>
          {
            wait_loop_index--;
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	3b01      	subs	r3, #1
 8003894:	60fb      	str	r3, [r7, #12]
          while (wait_loop_index != 0UL)
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	2b00      	cmp	r3, #0
 800389a:	d1f9      	bne.n	8003890 <HAL_ADC_ConfigChannel+0x774>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 800389c:	e05a      	b.n	8003954 <HAL_ADC_ConfigChannel+0x838>
          }
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	4a3b      	ldr	r2, [pc, #236]	; (8003990 <HAL_ADC_ConfigChannel+0x874>)
 80038a4:	4293      	cmp	r3, r2
 80038a6:	d125      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x7d8>
 80038a8:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038ac:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80038b0:	2b00      	cmp	r3, #0
 80038b2:	d11f      	bne.n	80038f4 <HAL_ADC_ConfigChannel+0x7d8>
      {
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	4a31      	ldr	r2, [pc, #196]	; (8003980 <HAL_ADC_ConfigChannel+0x864>)
 80038ba:	4293      	cmp	r3, r2
 80038bc:	d104      	bne.n	80038c8 <HAL_ADC_ConfigChannel+0x7ac>
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4a34      	ldr	r2, [pc, #208]	; (8003994 <HAL_ADC_ConfigChannel+0x878>)
 80038c4:	4293      	cmp	r3, r2
 80038c6:	d047      	beq.n	8003958 <HAL_ADC_ConfigChannel+0x83c>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 80038d0:	d004      	beq.n	80038dc <HAL_ADC_ConfigChannel+0x7c0>
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	4a2a      	ldr	r2, [pc, #168]	; (8003980 <HAL_ADC_ConfigChannel+0x864>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d101      	bne.n	80038e0 <HAL_ADC_ConfigChannel+0x7c4>
 80038dc:	4a29      	ldr	r2, [pc, #164]	; (8003984 <HAL_ADC_ConfigChannel+0x868>)
 80038de:	e000      	b.n	80038e2 <HAL_ADC_ConfigChannel+0x7c6>
 80038e0:	4a23      	ldr	r2, [pc, #140]	; (8003970 <HAL_ADC_ConfigChannel+0x854>)
 80038e2:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 80038e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038ea:	4619      	mov	r1, r3
 80038ec:	4610      	mov	r0, r2
 80038ee:	f7fe ff36 	bl	800275e <LL_ADC_SetCommonPathInternalCh>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80038f2:	e031      	b.n	8003958 <HAL_ADC_ConfigChannel+0x83c>
                                         LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
        }
      }
      else if ((sConfig->Channel == ADC_CHANNEL_VREFINT)
 80038f4:	683b      	ldr	r3, [r7, #0]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	4a27      	ldr	r2, [pc, #156]	; (8003998 <HAL_ADC_ConfigChannel+0x87c>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d12d      	bne.n	800395a <HAL_ADC_ConfigChannel+0x83e>
               && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80038fe:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003906:	2b00      	cmp	r3, #0
 8003908:	d127      	bne.n	800395a <HAL_ADC_ConfigChannel+0x83e>
      {
        if (ADC_VREFINT_INSTANCE(hadc))
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	4a1c      	ldr	r2, [pc, #112]	; (8003980 <HAL_ADC_ConfigChannel+0x864>)
 8003910:	4293      	cmp	r3, r2
 8003912:	d022      	beq.n	800395a <HAL_ADC_ConfigChannel+0x83e>
        {
          LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance),
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800391c:	d004      	beq.n	8003928 <HAL_ADC_ConfigChannel+0x80c>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	4a17      	ldr	r2, [pc, #92]	; (8003980 <HAL_ADC_ConfigChannel+0x864>)
 8003924:	4293      	cmp	r3, r2
 8003926:	d101      	bne.n	800392c <HAL_ADC_ConfigChannel+0x810>
 8003928:	4a16      	ldr	r2, [pc, #88]	; (8003984 <HAL_ADC_ConfigChannel+0x868>)
 800392a:	e000      	b.n	800392e <HAL_ADC_ConfigChannel+0x812>
 800392c:	4a10      	ldr	r2, [pc, #64]	; (8003970 <HAL_ADC_ConfigChannel+0x854>)
 800392e:	f8d7 30c4 	ldr.w	r3, [r7, #196]	; 0xc4
 8003932:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003936:	4619      	mov	r1, r3
 8003938:	4610      	mov	r0, r2
 800393a:	f7fe ff10 	bl	800275e <LL_ADC_SetCommonPathInternalCh>
 800393e:	e00c      	b.n	800395a <HAL_ADC_ConfigChannel+0x83e>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003944:	f043 0220 	orr.w	r2, r3, #32
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 800394c:	2301      	movs	r3, #1
 800394e:	f887 30d7 	strb.w	r3, [r7, #215]	; 0xd7
 8003952:	e002      	b.n	800395a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8003954:	bf00      	nop
 8003956:	e000      	b.n	800395a <HAL_ADC_ConfigChannel+0x83e>
        if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 8003958:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	2200      	movs	r2, #0
 800395e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003962:	f897 30d7 	ldrb.w	r3, [r7, #215]	; 0xd7
}
 8003966:	4618      	mov	r0, r3
 8003968:	37d8      	adds	r7, #216	; 0xd8
 800396a:	46bd      	mov	sp, r7
 800396c:	bd80      	pop	{r7, pc}
 800396e:	bf00      	nop
 8003970:	50000700 	.word	0x50000700
 8003974:	c3210000 	.word	0xc3210000
 8003978:	90c00010 	.word	0x90c00010
 800397c:	50000600 	.word	0x50000600
 8003980:	50000100 	.word	0x50000100
 8003984:	50000300 	.word	0x50000300
 8003988:	20000000 	.word	0x20000000
 800398c:	053e2d63 	.word	0x053e2d63
 8003990:	c7520000 	.word	0xc7520000
 8003994:	50000500 	.word	0x50000500
 8003998:	cb840000 	.word	0xcb840000

0800399c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800399c:	b580      	push	{r7, lr}
 800399e:	b084      	sub	sp, #16
 80039a0:	af00      	add	r7, sp, #0
 80039a2:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	681b      	ldr	r3, [r3, #0]
 80039a8:	4618      	mov	r0, r3
 80039aa:	f7ff f8ad 	bl	8002b08 <LL_ADC_IsEnabled>
 80039ae:	4603      	mov	r3, r0
 80039b0:	2b00      	cmp	r3, #0
 80039b2:	d14d      	bne.n	8003a50 <ADC_Enable+0xb4>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	689a      	ldr	r2, [r3, #8]
 80039ba:	4b28      	ldr	r3, [pc, #160]	; (8003a5c <ADC_Enable+0xc0>)
 80039bc:	4013      	ands	r3, r2
 80039be:	2b00      	cmp	r3, #0
 80039c0:	d00d      	beq.n	80039de <ADC_Enable+0x42>
                               | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80039c6:	f043 0210 	orr.w	r2, r3, #16
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	65da      	str	r2, [r3, #92]	; 0x5c

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80039d2:	f043 0201 	orr.w	r2, r3, #1
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	661a      	str	r2, [r3, #96]	; 0x60

      return HAL_ERROR;
 80039da:	2301      	movs	r3, #1
 80039dc:	e039      	b.n	8003a52 <ADC_Enable+0xb6>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff f868 	bl	8002ab8 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80039e8:	f7fe fe78 	bl	80026dc <HAL_GetTick>
 80039ec:	60f8      	str	r0, [r7, #12]

    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 80039ee:	e028      	b.n	8003a42 <ADC_Enable+0xa6>
          The workaround is to continue setting ADEN until ADRDY is becomes 1.
          Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
          4 ADC clock cycle duration */
      /* Note: Test of ADC enabled required due to hardware constraint to     */
      /*       not enable ADC if already enabled.                             */
      if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	4618      	mov	r0, r3
 80039f6:	f7ff f887 	bl	8002b08 <LL_ADC_IsEnabled>
 80039fa:	4603      	mov	r3, r0
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d104      	bne.n	8003a0a <ADC_Enable+0x6e>
      {
        LL_ADC_Enable(hadc->Instance);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4618      	mov	r0, r3
 8003a06:	f7ff f857 	bl	8002ab8 <LL_ADC_Enable>
      }

      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 8003a0a:	f7fe fe67 	bl	80026dc <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	1ad3      	subs	r3, r2, r3
 8003a14:	2b02      	cmp	r3, #2
 8003a16:	d914      	bls.n	8003a42 <ADC_Enable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f003 0301 	and.w	r3, r3, #1
 8003a22:	2b01      	cmp	r3, #1
 8003a24:	d00d      	beq.n	8003a42 <ADC_Enable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003a2a:	f043 0210 	orr.w	r2, r3, #16
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003a32:	687b      	ldr	r3, [r7, #4]
 8003a34:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003a36:	f043 0201 	orr.w	r2, r3, #1
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	e007      	b.n	8003a52 <ADC_Enable+0xb6>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	f003 0301 	and.w	r3, r3, #1
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d1cf      	bne.n	80039f0 <ADC_Enable+0x54>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003a50:	2300      	movs	r3, #0
}
 8003a52:	4618      	mov	r0, r3
 8003a54:	3710      	adds	r7, #16
 8003a56:	46bd      	mov	sp, r7
 8003a58:	bd80      	pop	{r7, pc}
 8003a5a:	bf00      	nop
 8003a5c:	8000003f 	.word	0x8000003f

08003a60 <ADC_Disable>:
  *         stopped.
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Disable(ADC_HandleTypeDef *hadc)
{
 8003a60:	b580      	push	{r7, lr}
 8003a62:	b084      	sub	sp, #16
 8003a64:	af00      	add	r7, sp, #0
 8003a66:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  const uint32_t tmp_adc_is_disable_on_going = LL_ADC_IsDisableOngoing(hadc->Instance);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	4618      	mov	r0, r3
 8003a6e:	f7ff f85e 	bl	8002b2e <LL_ADC_IsDisableOngoing>
 8003a72:	60f8      	str	r0, [r7, #12]

  /* Verification if ADC is not already disabled:                             */
  /* Note: forbidden to disable ADC (set bit ADC_CR_ADDIS) if ADC is already  */
  /*       disabled.                                                          */
  if ((LL_ADC_IsEnabled(hadc->Instance) != 0UL)
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	4618      	mov	r0, r3
 8003a7a:	f7ff f845 	bl	8002b08 <LL_ADC_IsEnabled>
 8003a7e:	4603      	mov	r3, r0
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d047      	beq.n	8003b14 <ADC_Disable+0xb4>
      && (tmp_adc_is_disable_on_going == 0UL)
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d144      	bne.n	8003b14 <ADC_Disable+0xb4>
     )
  {
    /* Check if conditions to disable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADEN)) == ADC_CR_ADEN)
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	f003 030d 	and.w	r3, r3, #13
 8003a94:	2b01      	cmp	r3, #1
 8003a96:	d10c      	bne.n	8003ab2 <ADC_Disable+0x52>
    {
      /* Disable the ADC peripheral */
      LL_ADC_Disable(hadc->Instance);
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4618      	mov	r0, r3
 8003a9e:	f7ff f81f 	bl	8002ae0 <LL_ADC_Disable>
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOSMP | ADC_FLAG_RDY));
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	2203      	movs	r2, #3
 8003aa8:	601a      	str	r2, [r3, #0]
      return HAL_ERROR;
    }

    /* Wait for ADC effectively disabled */
    /* Get tick count */
    tickstart = HAL_GetTick();
 8003aaa:	f7fe fe17 	bl	80026dc <HAL_GetTick>
 8003aae:	60b8      	str	r0, [r7, #8]

    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003ab0:	e029      	b.n	8003b06 <ADC_Disable+0xa6>
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ab6:	f043 0210 	orr.w	r2, r3, #16
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	65da      	str	r2, [r3, #92]	; 0x5c
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003ac2:	f043 0201 	orr.w	r2, r3, #1
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_ERROR;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e023      	b.n	8003b16 <ADC_Disable+0xb6>
    {
      if ((HAL_GetTick() - tickstart) > ADC_DISABLE_TIMEOUT)
 8003ace:	f7fe fe05 	bl	80026dc <HAL_GetTick>
 8003ad2:	4602      	mov	r2, r0
 8003ad4:	68bb      	ldr	r3, [r7, #8]
 8003ad6:	1ad3      	subs	r3, r2, r3
 8003ad8:	2b02      	cmp	r3, #2
 8003ada:	d914      	bls.n	8003b06 <ADC_Disable+0xa6>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681b      	ldr	r3, [r3, #0]
 8003ae0:	689b      	ldr	r3, [r3, #8]
 8003ae2:	f003 0301 	and.w	r3, r3, #1
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d00d      	beq.n	8003b06 <ADC_Disable+0xa6>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003aea:	687b      	ldr	r3, [r7, #4]
 8003aec:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003aee:	f043 0210 	orr.w	r2, r3, #16
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	65da      	str	r2, [r3, #92]	; 0x5c

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003afa:	f043 0201 	orr.w	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	661a      	str	r2, [r3, #96]	; 0x60

          return HAL_ERROR;
 8003b02:	2301      	movs	r3, #1
 8003b04:	e007      	b.n	8003b16 <ADC_Disable+0xb6>
    while ((hadc->Instance->CR & ADC_CR_ADEN) != 0UL)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d1dc      	bne.n	8003ace <ADC_Disable+0x6e>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8003b14:	2300      	movs	r3, #0
}
 8003b16:	4618      	mov	r0, r3
 8003b18:	3710      	adds	r7, #16
 8003b1a:	46bd      	mov	sp, r7
 8003b1c:	bd80      	pop	{r7, pc}

08003b1e <ADC_DMAConvCplt>:
  * @brief  DMA transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)
{
 8003b1e:	b580      	push	{r7, lr}
 8003b20:	b084      	sub	sp, #16
 8003b22:	af00      	add	r7, sp, #0
 8003b24:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b2a:	60fb      	str	r3, [r7, #12]

  /* Update state machine on conversion status if not in error state */
  if ((hadc->State & (HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA)) == 0UL)
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8003b34:	2b00      	cmp	r3, #0
 8003b36:	d14b      	bne.n	8003bd0 <ADC_DMAConvCplt+0xb2>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b3c:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    /* Is it the end of the regular sequence ? */
    if ((hadc->Instance->ISR & ADC_FLAG_EOS) != 0UL)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	f003 0308 	and.w	r3, r3, #8
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	d021      	beq.n	8003b96 <ADC_DMAConvCplt+0x78>
    {
      /* Are conversions software-triggered ? */
      if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4618      	mov	r0, r3
 8003b58:	f7fe fec0 	bl	80028dc <LL_ADC_REG_IsTriggerSourceSWStart>
 8003b5c:	4603      	mov	r3, r0
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d032      	beq.n	8003bc8 <ADC_DMAConvCplt+0xaa>
      {
        /* Is CONT bit set ? */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_CONT) == 0UL)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	68db      	ldr	r3, [r3, #12]
 8003b68:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d12b      	bne.n	8003bc8 <ADC_DMAConvCplt+0xaa>
        {
          /* CONT bit is not set, no more conversions expected */
          CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b74:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	65da      	str	r2, [r3, #92]	; 0x5c
          if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b80:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	d11f      	bne.n	8003bc8 <ADC_DMAConvCplt+0xaa>
          {
            SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003b8c:	f043 0201 	orr.w	r2, r3, #1
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	65da      	str	r2, [r3, #92]	; 0x5c
 8003b94:	e018      	b.n	8003bc8 <ADC_DMAConvCplt+0xaa>
    }
    else
    {
      /* DMA End of Transfer interrupt was triggered but conversions sequence
         is not over. If DMACFG is set to 0, conversions are stopped. */
      if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_DMACFG) == 0UL)
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	68db      	ldr	r3, [r3, #12]
 8003b9c:	f003 0302 	and.w	r3, r3, #2
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d111      	bne.n	8003bc8 <ADC_DMAConvCplt+0xaa>
      {
        /* DMACFG bit is not set, conversions are stopped. */
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003ba8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	65da      	str	r2, [r3, #92]	; 0x5c
        if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bb4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d105      	bne.n	8003bc8 <ADC_DMAConvCplt+0xaa>
        {
          SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bc0:	f043 0201 	orr.w	r2, r3, #1
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8003bc8:	68f8      	ldr	r0, [r7, #12]
 8003bca:	f7fd fccb 	bl	8001564 <HAL_ADC_ConvCpltCallback>
    {
      /* Call ADC DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 8003bce:	e00e      	b.n	8003bee <ADC_DMAConvCplt+0xd0>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003bd4:	f003 0310 	and.w	r3, r3, #16
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d003      	beq.n	8003be4 <ADC_DMAConvCplt+0xc6>
      HAL_ADC_ErrorCallback(hadc);
 8003bdc:	68f8      	ldr	r0, [r7, #12]
 8003bde:	f7ff fa93 	bl	8003108 <HAL_ADC_ErrorCallback>
}
 8003be2:	e004      	b.n	8003bee <ADC_DMAConvCplt+0xd0>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003be8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003bea:	6878      	ldr	r0, [r7, #4]
 8003bec:	4798      	blx	r3
}
 8003bee:	bf00      	nop
 8003bf0:	3710      	adds	r7, #16
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}

08003bf6 <ADC_DMAHalfConvCplt>:
  * @brief  DMA half transfer complete callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)
{
 8003bf6:	b580      	push	{r7, lr}
 8003bf8:	b084      	sub	sp, #16
 8003bfa:	af00      	add	r7, sp, #0
 8003bfc:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003bfe:	687b      	ldr	r3, [r7, #4]
 8003c00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c02:	60fb      	str	r3, [r7, #12]

  /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8003c04:	68f8      	ldr	r0, [r7, #12]
 8003c06:	f7ff fa75 	bl	80030f4 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c0a:	bf00      	nop
 8003c0c:	3710      	adds	r7, #16
 8003c0e:	46bd      	mov	sp, r7
 8003c10:	bd80      	pop	{r7, pc}

08003c12 <ADC_DMAError>:
  * @brief  DMA error callback.
  * @param hdma pointer to DMA handle.
  * @retval None
  */
void ADC_DMAError(DMA_HandleTypeDef *hdma)
{
 8003c12:	b580      	push	{r7, lr}
 8003c14:	b084      	sub	sp, #16
 8003c16:	af00      	add	r7, sp, #0
 8003c18:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef *hadc = (ADC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c1e:	60fb      	str	r3, [r7, #12]

  /* Set ADC state */
  SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_DMA);
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003c24:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	65da      	str	r2, [r3, #92]	; 0x5c

  /* Set ADC error code to DMA error */
  SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_DMA);
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003c30:	f043 0204 	orr.w	r2, r3, #4
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	661a      	str	r2, [r3, #96]	; 0x60

  /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8003c38:	68f8      	ldr	r0, [r7, #12]
 8003c3a:	f7ff fa65 	bl	8003108 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8003c3e:	bf00      	nop
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}

08003c46 <LL_ADC_IsEnabled>:
{
 8003c46:	b480      	push	{r7}
 8003c48:	b083      	sub	sp, #12
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 0301 	and.w	r3, r3, #1
 8003c56:	2b01      	cmp	r3, #1
 8003c58:	d101      	bne.n	8003c5e <LL_ADC_IsEnabled+0x18>
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <LL_ADC_IsEnabled+0x1a>
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	370c      	adds	r7, #12
 8003c64:	46bd      	mov	sp, r7
 8003c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6a:	4770      	bx	lr

08003c6c <LL_ADC_StartCalibration>:
{
 8003c6c:	b480      	push	{r7}
 8003c6e:	b083      	sub	sp, #12
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
 8003c74:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCx->CR,
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	689b      	ldr	r3, [r3, #8]
 8003c7a:	f023 4340 	bic.w	r3, r3, #3221225472	; 0xc0000000
 8003c7e:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8003c82:	683a      	ldr	r2, [r7, #0]
 8003c84:	f002 4280 	and.w	r2, r2, #1073741824	; 0x40000000
 8003c88:	4313      	orrs	r3, r2
 8003c8a:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	609a      	str	r2, [r3, #8]
}
 8003c92:	bf00      	nop
 8003c94:	370c      	adds	r7, #12
 8003c96:	46bd      	mov	sp, r7
 8003c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c9c:	4770      	bx	lr

08003c9e <LL_ADC_IsCalibrationOnGoing>:
{
 8003c9e:	b480      	push	{r7}
 8003ca0:	b083      	sub	sp, #12
 8003ca2:	af00      	add	r7, sp, #0
 8003ca4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADCAL) == (ADC_CR_ADCAL)) ? 1UL : 0UL);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	689b      	ldr	r3, [r3, #8]
 8003caa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003cae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003cb2:	d101      	bne.n	8003cb8 <LL_ADC_IsCalibrationOnGoing+0x1a>
 8003cb4:	2301      	movs	r3, #1
 8003cb6:	e000      	b.n	8003cba <LL_ADC_IsCalibrationOnGoing+0x1c>
 8003cb8:	2300      	movs	r3, #0
}
 8003cba:	4618      	mov	r0, r3
 8003cbc:	370c      	adds	r7, #12
 8003cbe:	46bd      	mov	sp, r7
 8003cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc4:	4770      	bx	lr

08003cc6 <LL_ADC_REG_IsConversionOngoing>:
{
 8003cc6:	b480      	push	{r7}
 8003cc8:	b083      	sub	sp, #12
 8003cca:	af00      	add	r7, sp, #0
 8003ccc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	689b      	ldr	r3, [r3, #8]
 8003cd2:	f003 0304 	and.w	r3, r3, #4
 8003cd6:	2b04      	cmp	r3, #4
 8003cd8:	d101      	bne.n	8003cde <LL_ADC_REG_IsConversionOngoing+0x18>
 8003cda:	2301      	movs	r3, #1
 8003cdc:	e000      	b.n	8003ce0 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8003cde:	2300      	movs	r3, #0
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	370c      	adds	r7, #12
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cea:	4770      	bx	lr

08003cec <HAL_ADCEx_Calibration_Start>:
  *           @arg @ref ADC_SINGLE_ENDED       Channel in mode input single ended
  *           @arg @ref ADC_DIFFERENTIAL_ENDED Channel in mode input differential ended
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_Calibration_Start(ADC_HandleTypeDef *hadc, uint32_t SingleDiff)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b084      	sub	sp, #16
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	6078      	str	r0, [r7, #4]
 8003cf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status;
  __IO uint32_t wait_loop_index = 0UL;
 8003cf6:	2300      	movs	r3, #0
 8003cf8:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_SINGLE_DIFFERENTIAL(SingleDiff));

  /* Process locked */
  __HAL_LOCK(hadc);
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003d00:	2b01      	cmp	r3, #1
 8003d02:	d101      	bne.n	8003d08 <HAL_ADCEx_Calibration_Start+0x1c>
 8003d04:	2302      	movs	r3, #2
 8003d06:	e04d      	b.n	8003da4 <HAL_ADCEx_Calibration_Start+0xb8>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Calibration prerequisite: ADC must be disabled. */

  /* Disable the ADC (if not already disabled) */
  tmp_hal_status = ADC_Disable(hadc);
 8003d10:	6878      	ldr	r0, [r7, #4]
 8003d12:	f7ff fea5 	bl	8003a60 <ADC_Disable>
 8003d16:	4603      	mov	r3, r0
 8003d18:	73fb      	strb	r3, [r7, #15]

  /* Check if ADC is effectively disabled */
  if (tmp_hal_status == HAL_OK)
 8003d1a:	7bfb      	ldrb	r3, [r7, #15]
 8003d1c:	2b00      	cmp	r3, #0
 8003d1e:	d136      	bne.n	8003d8e <HAL_ADCEx_Calibration_Start+0xa2>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d24:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8003d28:	f023 0302 	bic.w	r3, r3, #2
 8003d2c:	f043 0202 	orr.w	r2, r3, #2
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	65da      	str	r2, [r3, #92]	; 0x5c
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);

    /* Start ADC calibration in mode single-ended or differential */
    LL_ADC_StartCalibration(hadc->Instance, SingleDiff);
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	6839      	ldr	r1, [r7, #0]
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	f7ff ff96 	bl	8003c6c <LL_ADC_StartCalibration>

    /* Wait for calibration completion */
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d40:	e014      	b.n	8003d6c <HAL_ADCEx_Calibration_Start+0x80>
    {
      wait_loop_index++;
 8003d42:	68bb      	ldr	r3, [r7, #8]
 8003d44:	3301      	adds	r3, #1
 8003d46:	60bb      	str	r3, [r7, #8]
      if (wait_loop_index >= ADC_CALIBRATION_TIMEOUT)
 8003d48:	68bb      	ldr	r3, [r7, #8]
 8003d4a:	4a18      	ldr	r2, [pc, #96]	; (8003dac <HAL_ADCEx_Calibration_Start+0xc0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d90d      	bls.n	8003d6c <HAL_ADCEx_Calibration_Start+0x80>
      {
        /* Update ADC state machine to error */
        ADC_STATE_CLR_SET(hadc->State,
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d54:	f023 0312 	bic.w	r3, r3, #18
 8003d58:	f043 0210 	orr.w	r2, r3, #16
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	65da      	str	r2, [r3, #92]	; 0x5c
                          HAL_ADC_STATE_BUSY_INTERNAL,
                          HAL_ADC_STATE_ERROR_INTERNAL);

        /* Process unlocked */
        __HAL_UNLOCK(hadc);
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2200      	movs	r2, #0
 8003d64:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

        return HAL_ERROR;
 8003d68:	2301      	movs	r3, #1
 8003d6a:	e01b      	b.n	8003da4 <HAL_ADCEx_Calibration_Start+0xb8>
    while (LL_ADC_IsCalibrationOnGoing(hadc->Instance) != 0UL)
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	4618      	mov	r0, r3
 8003d72:	f7ff ff94 	bl	8003c9e <LL_ADC_IsCalibrationOnGoing>
 8003d76:	4603      	mov	r3, r0
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d1e2      	bne.n	8003d42 <HAL_ADCEx_Calibration_Start+0x56>
      }
    }

    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d80:	f023 0303 	bic.w	r3, r3, #3
 8003d84:	f043 0201 	orr.w	r2, r3, #1
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	65da      	str	r2, [r3, #92]	; 0x5c
 8003d8c:	e005      	b.n	8003d9a <HAL_ADCEx_Calibration_Start+0xae>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003d92:	f043 0210 	orr.w	r2, r3, #16
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	65da      	str	r2, [r3, #92]	; 0x5c
    /* Note: No need to update variable "tmp_hal_status" here: already set    */
    /*       to state "HAL_ERROR" by function disabling the ADC.              */
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003d9a:	687b      	ldr	r3, [r7, #4]
 8003d9c:	2200      	movs	r2, #0
 8003d9e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003da2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003da4:	4618      	mov	r0, r3
 8003da6:	3710      	adds	r7, #16
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	0004de01 	.word	0x0004de01

08003db0 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8003db0:	b590      	push	{r4, r7, lr}
 8003db2:	b0a1      	sub	sp, #132	; 0x84
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
 8003db8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003dba:	2300      	movs	r3, #0
 8003dbc:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
    assert_param(IS_ADC_DMA_ACCESS_MULTIMODE(multimode->DMAAccessMode));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	f893 3058 	ldrb.w	r3, [r3, #88]	; 0x58
 8003dc6:	2b01      	cmp	r3, #1
 8003dc8:	d101      	bne.n	8003dce <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8003dca:	2302      	movs	r3, #2
 8003dcc:	e0e7      	b.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2201      	movs	r2, #1
 8003dd2:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Temporary handle minimum initialization */
  __HAL_ADC_RESET_HANDLE_STATE(&tmphadcSlave);
 8003dd6:	2300      	movs	r3, #0
 8003dd8:	667b      	str	r3, [r7, #100]	; 0x64
  ADC_CLEAR_ERRORCODE(&tmphadcSlave);
 8003dda:	2300      	movs	r3, #0
 8003ddc:	66bb      	str	r3, [r7, #104]	; 0x68

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003de6:	d102      	bne.n	8003dee <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8003de8:	4b6f      	ldr	r3, [pc, #444]	; (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003dea:	60bb      	str	r3, [r7, #8]
 8003dec:	e009      	b.n	8003e02 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	4a6e      	ldr	r2, [pc, #440]	; (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003df4:	4293      	cmp	r3, r2
 8003df6:	d102      	bne.n	8003dfe <HAL_ADCEx_MultiModeConfigChannel+0x4e>
 8003df8:	4b6d      	ldr	r3, [pc, #436]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003dfa:	60bb      	str	r3, [r7, #8]
 8003dfc:	e001      	b.n	8003e02 <HAL_ADCEx_MultiModeConfigChannel+0x52>
 8003dfe:	2300      	movs	r3, #0
 8003e00:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 8003e02:	68bb      	ldr	r3, [r7, #8]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d10b      	bne.n	8003e20 <HAL_ADCEx_MultiModeConfigChannel+0x70>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e0c:	f043 0220 	orr.w	r2, r3, #32
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	65da      	str	r2, [r3, #92]	; 0x5c

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2200      	movs	r2, #0
 8003e18:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

    return HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	e0be      	b.n	8003f9e <HAL_ADCEx_MultiModeConfigChannel+0x1ee>
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DMA configuration                                           */
  /*  - Multimode DMA mode                                                    */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 8003e20:	68bb      	ldr	r3, [r7, #8]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7ff ff4f 	bl	8003cc6 <LL_ADC_REG_IsConversionOngoing>
 8003e28:	67b8      	str	r0, [r7, #120]	; 0x78
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4618      	mov	r0, r3
 8003e30:	f7ff ff49 	bl	8003cc6 <LL_ADC_REG_IsConversionOngoing>
 8003e34:	4603      	mov	r3, r0
 8003e36:	2b00      	cmp	r3, #0
 8003e38:	f040 80a0 	bne.w	8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
      && (tmphadcSlave_conversion_on_going == 0UL))
 8003e3c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	f040 809c 	bne.w	8003f7c <HAL_ADCEx_MultiModeConfigChannel+0x1cc>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e4c:	d004      	beq.n	8003e58 <HAL_ADCEx_MultiModeConfigChannel+0xa8>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a55      	ldr	r2, [pc, #340]	; (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d101      	bne.n	8003e5c <HAL_ADCEx_MultiModeConfigChannel+0xac>
 8003e58:	4b56      	ldr	r3, [pc, #344]	; (8003fb4 <HAL_ADCEx_MultiModeConfigChannel+0x204>)
 8003e5a:	e000      	b.n	8003e5e <HAL_ADCEx_MultiModeConfigChannel+0xae>
 8003e5c:	4b56      	ldr	r3, [pc, #344]	; (8003fb8 <HAL_ADCEx_MultiModeConfigChannel+0x208>)
 8003e5e:	677b      	str	r3, [r7, #116]	; 0x74

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d04b      	beq.n	8003f00 <HAL_ADCEx_MultiModeConfigChannel+0x150>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG,
 8003e68:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	6859      	ldr	r1, [r3, #4]
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 8003e7a:	035b      	lsls	r3, r3, #13
 8003e7c:	430b      	orrs	r3, r1
 8003e7e:	431a      	orrs	r2, r3
 8003e80:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003e82:	609a      	str	r2, [r3, #8]
      /*      from 1 to 10 clock cycles for 10 bits,                              */
      /*      from 1 to 8 clock cycles for 8 bits                                 */
      /*      from 1 to 6 clock cycles for 6 bits                                 */
      /*    If a higher delay is selected, it will be clipped to maximum delay    */
      /*    range                                                                 */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003e8c:	d004      	beq.n	8003e98 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	4a45      	ldr	r2, [pc, #276]	; (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003e94:	4293      	cmp	r3, r2
 8003e96:	d10f      	bne.n	8003eb8 <HAL_ADCEx_MultiModeConfigChannel+0x108>
 8003e98:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003e9c:	f7ff fed3 	bl	8003c46 <LL_ADC_IsEnabled>
 8003ea0:	4604      	mov	r4, r0
 8003ea2:	4841      	ldr	r0, [pc, #260]	; (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003ea4:	f7ff fecf 	bl	8003c46 <LL_ADC_IsEnabled>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	4323      	orrs	r3, r4
 8003eac:	2b00      	cmp	r3, #0
 8003eae:	bf0c      	ite	eq
 8003eb0:	2301      	moveq	r3, #1
 8003eb2:	2300      	movne	r3, #0
 8003eb4:	b2db      	uxtb	r3, r3
 8003eb6:	e012      	b.n	8003ede <HAL_ADCEx_MultiModeConfigChannel+0x12e>
 8003eb8:	483c      	ldr	r0, [pc, #240]	; (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003eba:	f7ff fec4 	bl	8003c46 <LL_ADC_IsEnabled>
 8003ebe:	4604      	mov	r4, r0
 8003ec0:	483b      	ldr	r0, [pc, #236]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003ec2:	f7ff fec0 	bl	8003c46 <LL_ADC_IsEnabled>
 8003ec6:	4603      	mov	r3, r0
 8003ec8:	431c      	orrs	r4, r3
 8003eca:	483c      	ldr	r0, [pc, #240]	; (8003fbc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003ecc:	f7ff febb 	bl	8003c46 <LL_ADC_IsEnabled>
 8003ed0:	4603      	mov	r3, r0
 8003ed2:	4323      	orrs	r3, r4
 8003ed4:	2b00      	cmp	r3, #0
 8003ed6:	bf0c      	ite	eq
 8003ed8:	2301      	moveq	r3, #1
 8003eda:	2300      	movne	r3, #0
 8003edc:	b2db      	uxtb	r3, r3
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d056      	beq.n	8003f90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8003ee2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003ee4:	689b      	ldr	r3, [r3, #8]
 8003ee6:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003eea:	f023 030f 	bic.w	r3, r3, #15
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	6811      	ldr	r1, [r2, #0]
 8003ef2:	683a      	ldr	r2, [r7, #0]
 8003ef4:	6892      	ldr	r2, [r2, #8]
 8003ef6:	430a      	orrs	r2, r1
 8003ef8:	431a      	orrs	r2, r3
 8003efa:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003efc:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003efe:	e047      	b.n	8003f90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_MDMA | ADC_CCR_DMACFG);
 8003f00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f02:	689b      	ldr	r3, [r3, #8]
 8003f04:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003f08:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f0a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8003f14:	d004      	beq.n	8003f20 <HAL_ADCEx_MultiModeConfigChannel+0x170>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	4a23      	ldr	r2, [pc, #140]	; (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f1c:	4293      	cmp	r3, r2
 8003f1e:	d10f      	bne.n	8003f40 <HAL_ADCEx_MultiModeConfigChannel+0x190>
 8003f20:	f04f 40a0 	mov.w	r0, #1342177280	; 0x50000000
 8003f24:	f7ff fe8f 	bl	8003c46 <LL_ADC_IsEnabled>
 8003f28:	4604      	mov	r4, r0
 8003f2a:	481f      	ldr	r0, [pc, #124]	; (8003fa8 <HAL_ADCEx_MultiModeConfigChannel+0x1f8>)
 8003f2c:	f7ff fe8b 	bl	8003c46 <LL_ADC_IsEnabled>
 8003f30:	4603      	mov	r3, r0
 8003f32:	4323      	orrs	r3, r4
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	bf0c      	ite	eq
 8003f38:	2301      	moveq	r3, #1
 8003f3a:	2300      	movne	r3, #0
 8003f3c:	b2db      	uxtb	r3, r3
 8003f3e:	e012      	b.n	8003f66 <HAL_ADCEx_MultiModeConfigChannel+0x1b6>
 8003f40:	481a      	ldr	r0, [pc, #104]	; (8003fac <HAL_ADCEx_MultiModeConfigChannel+0x1fc>)
 8003f42:	f7ff fe80 	bl	8003c46 <LL_ADC_IsEnabled>
 8003f46:	4604      	mov	r4, r0
 8003f48:	4819      	ldr	r0, [pc, #100]	; (8003fb0 <HAL_ADCEx_MultiModeConfigChannel+0x200>)
 8003f4a:	f7ff fe7c 	bl	8003c46 <LL_ADC_IsEnabled>
 8003f4e:	4603      	mov	r3, r0
 8003f50:	431c      	orrs	r4, r3
 8003f52:	481a      	ldr	r0, [pc, #104]	; (8003fbc <HAL_ADCEx_MultiModeConfigChannel+0x20c>)
 8003f54:	f7ff fe77 	bl	8003c46 <LL_ADC_IsEnabled>
 8003f58:	4603      	mov	r3, r0
 8003f5a:	4323      	orrs	r3, r4
 8003f5c:	2b00      	cmp	r3, #0
 8003f5e:	bf0c      	ite	eq
 8003f60:	2301      	moveq	r3, #1
 8003f62:	2300      	movne	r3, #0
 8003f64:	b2db      	uxtb	r3, r3
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d012      	beq.n	8003f90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8003f6a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8003f6c:	689b      	ldr	r3, [r3, #8]
 8003f6e:	f423 6371 	bic.w	r3, r3, #3856	; 0xf10
 8003f72:	f023 030f 	bic.w	r3, r3, #15
 8003f76:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8003f78:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f7a:	e009      	b.n	8003f90 <HAL_ADCEx_MultiModeConfigChannel+0x1e0>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f80:	f043 0220 	orr.w	r2, r3, #32
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	65da      	str	r2, [r3, #92]	; 0x5c

    tmp_hal_status = HAL_ERROR;
 8003f88:	2301      	movs	r3, #1
 8003f8a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 8003f8e:	e000      	b.n	8003f92 <HAL_ADCEx_MultiModeConfigChannel+0x1e2>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8003f90:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58

  /* Return function status */
  return tmp_hal_status;
 8003f9a:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 8003f9e:	4618      	mov	r0, r3
 8003fa0:	3784      	adds	r7, #132	; 0x84
 8003fa2:	46bd      	mov	sp, r7
 8003fa4:	bd90      	pop	{r4, r7, pc}
 8003fa6:	bf00      	nop
 8003fa8:	50000100 	.word	0x50000100
 8003fac:	50000400 	.word	0x50000400
 8003fb0:	50000500 	.word	0x50000500
 8003fb4:	50000300 	.word	0x50000300
 8003fb8:	50000700 	.word	0x50000700
 8003fbc:	50000600 	.word	0x50000600

08003fc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	f003 0307 	and.w	r3, r3, #7
 8003fce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003fd0:	4b0c      	ldr	r3, [pc, #48]	; (8004004 <__NVIC_SetPriorityGrouping+0x44>)
 8003fd2:	68db      	ldr	r3, [r3, #12]
 8003fd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003fd6:	68ba      	ldr	r2, [r7, #8]
 8003fd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003fdc:	4013      	ands	r3, r2
 8003fde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003fe4:	68bb      	ldr	r3, [r7, #8]
 8003fe6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003fe8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003fec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ff0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ff2:	4a04      	ldr	r2, [pc, #16]	; (8004004 <__NVIC_SetPriorityGrouping+0x44>)
 8003ff4:	68bb      	ldr	r3, [r7, #8]
 8003ff6:	60d3      	str	r3, [r2, #12]
}
 8003ff8:	bf00      	nop
 8003ffa:	3714      	adds	r7, #20
 8003ffc:	46bd      	mov	sp, r7
 8003ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004002:	4770      	bx	lr
 8004004:	e000ed00 	.word	0xe000ed00

08004008 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800400c:	4b04      	ldr	r3, [pc, #16]	; (8004020 <__NVIC_GetPriorityGrouping+0x18>)
 800400e:	68db      	ldr	r3, [r3, #12]
 8004010:	0a1b      	lsrs	r3, r3, #8
 8004012:	f003 0307 	and.w	r3, r3, #7
}
 8004016:	4618      	mov	r0, r3
 8004018:	46bd      	mov	sp, r7
 800401a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800401e:	4770      	bx	lr
 8004020:	e000ed00 	.word	0xe000ed00

08004024 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004024:	b480      	push	{r7}
 8004026:	b083      	sub	sp, #12
 8004028:	af00      	add	r7, sp, #0
 800402a:	4603      	mov	r3, r0
 800402c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800402e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004032:	2b00      	cmp	r3, #0
 8004034:	db0b      	blt.n	800404e <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004036:	79fb      	ldrb	r3, [r7, #7]
 8004038:	f003 021f 	and.w	r2, r3, #31
 800403c:	4907      	ldr	r1, [pc, #28]	; (800405c <__NVIC_EnableIRQ+0x38>)
 800403e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004042:	095b      	lsrs	r3, r3, #5
 8004044:	2001      	movs	r0, #1
 8004046:	fa00 f202 	lsl.w	r2, r0, r2
 800404a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004058:	4770      	bx	lr
 800405a:	bf00      	nop
 800405c:	e000e100 	.word	0xe000e100

08004060 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004060:	b480      	push	{r7}
 8004062:	b083      	sub	sp, #12
 8004064:	af00      	add	r7, sp, #0
 8004066:	4603      	mov	r3, r0
 8004068:	6039      	str	r1, [r7, #0]
 800406a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800406c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004070:	2b00      	cmp	r3, #0
 8004072:	db0a      	blt.n	800408a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004074:	683b      	ldr	r3, [r7, #0]
 8004076:	b2da      	uxtb	r2, r3
 8004078:	490c      	ldr	r1, [pc, #48]	; (80040ac <__NVIC_SetPriority+0x4c>)
 800407a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800407e:	0112      	lsls	r2, r2, #4
 8004080:	b2d2      	uxtb	r2, r2
 8004082:	440b      	add	r3, r1
 8004084:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8004088:	e00a      	b.n	80040a0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	b2da      	uxtb	r2, r3
 800408e:	4908      	ldr	r1, [pc, #32]	; (80040b0 <__NVIC_SetPriority+0x50>)
 8004090:	79fb      	ldrb	r3, [r7, #7]
 8004092:	f003 030f 	and.w	r3, r3, #15
 8004096:	3b04      	subs	r3, #4
 8004098:	0112      	lsls	r2, r2, #4
 800409a:	b2d2      	uxtb	r2, r2
 800409c:	440b      	add	r3, r1
 800409e:	761a      	strb	r2, [r3, #24]
}
 80040a0:	bf00      	nop
 80040a2:	370c      	adds	r7, #12
 80040a4:	46bd      	mov	sp, r7
 80040a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040aa:	4770      	bx	lr
 80040ac:	e000e100 	.word	0xe000e100
 80040b0:	e000ed00 	.word	0xe000ed00

080040b4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80040b4:	b480      	push	{r7}
 80040b6:	b089      	sub	sp, #36	; 0x24
 80040b8:	af00      	add	r7, sp, #0
 80040ba:	60f8      	str	r0, [r7, #12]
 80040bc:	60b9      	str	r1, [r7, #8]
 80040be:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	f003 0307 	and.w	r3, r3, #7
 80040c6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80040c8:	69fb      	ldr	r3, [r7, #28]
 80040ca:	f1c3 0307 	rsb	r3, r3, #7
 80040ce:	2b04      	cmp	r3, #4
 80040d0:	bf28      	it	cs
 80040d2:	2304      	movcs	r3, #4
 80040d4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80040d6:	69fb      	ldr	r3, [r7, #28]
 80040d8:	3304      	adds	r3, #4
 80040da:	2b06      	cmp	r3, #6
 80040dc:	d902      	bls.n	80040e4 <NVIC_EncodePriority+0x30>
 80040de:	69fb      	ldr	r3, [r7, #28]
 80040e0:	3b03      	subs	r3, #3
 80040e2:	e000      	b.n	80040e6 <NVIC_EncodePriority+0x32>
 80040e4:	2300      	movs	r3, #0
 80040e6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80040e8:	f04f 32ff 	mov.w	r2, #4294967295
 80040ec:	69bb      	ldr	r3, [r7, #24]
 80040ee:	fa02 f303 	lsl.w	r3, r2, r3
 80040f2:	43da      	mvns	r2, r3
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	401a      	ands	r2, r3
 80040f8:	697b      	ldr	r3, [r7, #20]
 80040fa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80040fc:	f04f 31ff 	mov.w	r1, #4294967295
 8004100:	697b      	ldr	r3, [r7, #20]
 8004102:	fa01 f303 	lsl.w	r3, r1, r3
 8004106:	43d9      	mvns	r1, r3
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800410c:	4313      	orrs	r3, r2
         );
}
 800410e:	4618      	mov	r0, r3
 8004110:	3724      	adds	r7, #36	; 0x24
 8004112:	46bd      	mov	sp, r7
 8004114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004118:	4770      	bx	lr

0800411a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800411a:	b580      	push	{r7, lr}
 800411c:	b082      	sub	sp, #8
 800411e:	af00      	add	r7, sp, #0
 8004120:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004122:	6878      	ldr	r0, [r7, #4]
 8004124:	f7ff ff4c 	bl	8003fc0 <__NVIC_SetPriorityGrouping>
}
 8004128:	bf00      	nop
 800412a:	3708      	adds	r7, #8
 800412c:	46bd      	mov	sp, r7
 800412e:	bd80      	pop	{r7, pc}

08004130 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004130:	b580      	push	{r7, lr}
 8004132:	b086      	sub	sp, #24
 8004134:	af00      	add	r7, sp, #0
 8004136:	4603      	mov	r3, r0
 8004138:	60b9      	str	r1, [r7, #8]
 800413a:	607a      	str	r2, [r7, #4]
 800413c:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 800413e:	f7ff ff63 	bl	8004008 <__NVIC_GetPriorityGrouping>
 8004142:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8004144:	687a      	ldr	r2, [r7, #4]
 8004146:	68b9      	ldr	r1, [r7, #8]
 8004148:	6978      	ldr	r0, [r7, #20]
 800414a:	f7ff ffb3 	bl	80040b4 <NVIC_EncodePriority>
 800414e:	4602      	mov	r2, r0
 8004150:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8004154:	4611      	mov	r1, r2
 8004156:	4618      	mov	r0, r3
 8004158:	f7ff ff82 	bl	8004060 <__NVIC_SetPriority>
}
 800415c:	bf00      	nop
 800415e:	3718      	adds	r7, #24
 8004160:	46bd      	mov	sp, r7
 8004162:	bd80      	pop	{r7, pc}

08004164 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32g4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004164:	b580      	push	{r7, lr}
 8004166:	b082      	sub	sp, #8
 8004168:	af00      	add	r7, sp, #0
 800416a:	4603      	mov	r3, r0
 800416c:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800416e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004172:	4618      	mov	r0, r3
 8004174:	f7ff ff56 	bl	8004024 <__NVIC_EnableIRQ>
}
 8004178:	bf00      	nop
 800417a:	3708      	adds	r7, #8
 800417c:	46bd      	mov	sp, r7
 800417e:	bd80      	pop	{r7, pc}

08004180 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	b084      	sub	sp, #16
 8004184:	af00      	add	r7, sp, #0
 8004186:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if (hdma == NULL)
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2b00      	cmp	r3, #0
 800418c:	d101      	bne.n	8004192 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800418e:	2301      	movs	r3, #1
 8004190:	e08d      	b.n	80042ae <HAL_DMA_Init+0x12e>
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  assert_param(IS_DMA_ALL_REQUEST(hdma->Init.Request));

  /* Compute the channel index */
  if ((uint32_t)(hdma->Instance) < (uint32_t)(DMA2_Channel1))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	461a      	mov	r2, r3
 8004198:	4b47      	ldr	r3, [pc, #284]	; (80042b8 <HAL_DMA_Init+0x138>)
 800419a:	429a      	cmp	r2, r3
 800419c:	d80f      	bhi.n	80041be <HAL_DMA_Init+0x3e>
  {
    /* DMA1 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	461a      	mov	r2, r3
 80041a4:	4b45      	ldr	r3, [pc, #276]	; (80042bc <HAL_DMA_Init+0x13c>)
 80041a6:	4413      	add	r3, r2
 80041a8:	4a45      	ldr	r2, [pc, #276]	; (80042c0 <HAL_DMA_Init+0x140>)
 80041aa:	fba2 2303 	umull	r2, r3, r2, r3
 80041ae:	091b      	lsrs	r3, r3, #4
 80041b0:	009a      	lsls	r2, r3, #2
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	4a42      	ldr	r2, [pc, #264]	; (80042c4 <HAL_DMA_Init+0x144>)
 80041ba:	641a      	str	r2, [r3, #64]	; 0x40
 80041bc:	e00e      	b.n	80041dc <HAL_DMA_Init+0x5c>
  }
  else
  {
    /* DMA2 */
    hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA2_Channel1) / ((uint32_t)DMA2_Channel2 - (uint32_t)DMA2_Channel1)) << 2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	461a      	mov	r2, r3
 80041c4:	4b40      	ldr	r3, [pc, #256]	; (80042c8 <HAL_DMA_Init+0x148>)
 80041c6:	4413      	add	r3, r2
 80041c8:	4a3d      	ldr	r2, [pc, #244]	; (80042c0 <HAL_DMA_Init+0x140>)
 80041ca:	fba2 2303 	umull	r2, r3, r2, r3
 80041ce:	091b      	lsrs	r3, r3, #4
 80041d0:	009a      	lsls	r2, r3, #2
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	645a      	str	r2, [r3, #68]	; 0x44
    hdma->DmaBaseAddress = DMA2;
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	4a3c      	ldr	r2, [pc, #240]	; (80042cc <HAL_DMA_Init+0x14c>)
 80041da:	641a      	str	r2, [r3, #64]	; 0x40
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	2202      	movs	r2, #2
 80041e0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f423 43ff 	bic.w	r3, r3, #32640	; 0x7f80
 80041f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041f6:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 8004200:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	691b      	ldr	r3, [r3, #16]
 8004206:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800420c:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	699b      	ldr	r3, [r3, #24]
 8004212:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004218:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800421a:	687b      	ldr	r3, [r7, #4]
 800421c:	6a1b      	ldr	r3, [r3, #32]
 800421e:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 8004220:	68fa      	ldr	r2, [r7, #12]
 8004222:	4313      	orrs	r3, r2
 8004224:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68fa      	ldr	r2, [r7, #12]
 800422c:	601a      	str	r2, [r3, #0]

  /* Initialize parameters for DMAMUX channel :
     DMAmuxChannel, DMAmuxChannelStatus and DMAmuxChannelStatusMask
  */
  DMA_CalcDMAMUXChannelBaseAndMask(hdma);
 800422e:	6878      	ldr	r0, [r7, #4]
 8004230:	f000 fa76 	bl	8004720 <DMA_CalcDMAMUXChannelBaseAndMask>

  if (hdma->Init.Direction == DMA_MEMORY_TO_MEMORY)
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800423c:	d102      	bne.n	8004244 <HAL_DMA_Init+0xc4>
  {
    /* if memory to memory force the request to 0*/
    hdma->Init.Request = DMA_REQUEST_MEM2MEM;
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	2200      	movs	r2, #0
 8004242:	605a      	str	r2, [r3, #4]
  }

  /* Set peripheral request  to DMAMUX channel */
  hdma->DMAmuxChannel->CCR = (hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID);
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	685a      	ldr	r2, [r3, #4]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800424c:	b2d2      	uxtb	r2, r2
 800424e:	601a      	str	r2, [r3, #0]

  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004254:	687a      	ldr	r2, [r7, #4]
 8004256:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004258:	605a      	str	r2, [r3, #4]

  if (((hdma->Init.Request >  0U) && (hdma->Init.Request <= DMA_REQUEST_GENERATOR3)))
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	685b      	ldr	r3, [r3, #4]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d010      	beq.n	8004284 <HAL_DMA_Init+0x104>
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	685b      	ldr	r3, [r3, #4]
 8004266:	2b04      	cmp	r3, #4
 8004268:	d80c      	bhi.n	8004284 <HAL_DMA_Init+0x104>
  {
    /* Initialize parameters for DMAMUX request generator :
       DMAmuxRequestGen, DMAmuxRequestGenStatus and DMAmuxRequestGenStatusMask
    */
    DMA_CalcDMAMUXRequestGenBaseAndMask(hdma);
 800426a:	6878      	ldr	r0, [r7, #4]
 800426c:	f000 fa96 	bl	800479c <DMA_CalcDMAMUXRequestGenBaseAndMask>

    /* Reset the DMAMUX request generator register*/
    hdma->DMAmuxRequestGen->RGCR = 0U;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004274:	2200      	movs	r2, #0
 8004276:	601a      	str	r2, [r3, #0]

    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800427c:	687a      	ldr	r2, [r7, #4]
 800427e:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004280:	605a      	str	r2, [r3, #4]
 8004282:	e008      	b.n	8004296 <HAL_DMA_Init+0x116>
  }
  else
  {
    hdma->DMAmuxRequestGen = 0U;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2200      	movs	r2, #0
 8004288:	655a      	str	r2, [r3, #84]	; 0x54
    hdma->DMAmuxRequestGenStatus = 0U;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	659a      	str	r2, [r3, #88]	; 0x58
    hdma->DMAmuxRequestGenStatusMask = 0U;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2200      	movs	r2, #0
 8004294:	65da      	str	r2, [r3, #92]	; 0x5c
  }

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	2200      	movs	r2, #0
 800429a:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	2201      	movs	r2, #1
 80042a0:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	2200      	movs	r2, #0
 80042a8:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return HAL_OK;
 80042ac:	2300      	movs	r3, #0
}
 80042ae:	4618      	mov	r0, r3
 80042b0:	3710      	adds	r7, #16
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bd80      	pop	{r7, pc}
 80042b6:	bf00      	nop
 80042b8:	40020407 	.word	0x40020407
 80042bc:	bffdfff8 	.word	0xbffdfff8
 80042c0:	cccccccd 	.word	0xcccccccd
 80042c4:	40020000 	.word	0x40020000
 80042c8:	bffdfbf8 	.word	0xbffdfbf8
 80042cc:	40020400 	.word	0x40020400

080042d0 <HAL_DMA_Start_IT>:
  * @param  DataLength The length of data to be transferred from source to destination (up to 256Kbytes-1)
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress,
                                   uint32_t DataLength)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b086      	sub	sp, #24
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	60f8      	str	r0, [r7, #12]
 80042d8:	60b9      	str	r1, [r7, #8]
 80042da:	607a      	str	r2, [r7, #4]
 80042dc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042de:	2300      	movs	r3, #0
 80042e0:	75fb      	strb	r3, [r7, #23]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 80042e2:	68fb      	ldr	r3, [r7, #12]
 80042e4:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80042e8:	2b01      	cmp	r3, #1
 80042ea:	d101      	bne.n	80042f0 <HAL_DMA_Start_IT+0x20>
 80042ec:	2302      	movs	r3, #2
 80042ee:	e066      	b.n	80043be <HAL_DMA_Start_IT+0xee>
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	2201      	movs	r2, #1
 80042f4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  if (HAL_DMA_STATE_READY == hdma->State)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b01      	cmp	r3, #1
 8004302:	d155      	bne.n	80043b0 <HAL_DMA_Start_IT+0xe0>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004304:	68fb      	ldr	r3, [r7, #12]
 8004306:	2202      	movs	r2, #2
 8004308:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	681a      	ldr	r2, [r3, #0]
 8004318:	68fb      	ldr	r3, [r7, #12]
 800431a:	681b      	ldr	r3, [r3, #0]
 800431c:	f022 0201 	bic.w	r2, r2, #1
 8004320:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	687a      	ldr	r2, [r7, #4]
 8004326:	68b9      	ldr	r1, [r7, #8]
 8004328:	68f8      	ldr	r0, [r7, #12]
 800432a:	f000 f9bb 	bl	80046a4 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if (NULL != hdma->XferHalfCpltCallback)
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004332:	2b00      	cmp	r3, #0
 8004334:	d008      	beq.n	8004348 <HAL_DMA_Start_IT+0x78>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004336:	68fb      	ldr	r3, [r7, #12]
 8004338:	681b      	ldr	r3, [r3, #0]
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	68fb      	ldr	r3, [r7, #12]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	f042 020e 	orr.w	r2, r2, #14
 8004344:	601a      	str	r2, [r3, #0]
 8004346:	e00f      	b.n	8004368 <HAL_DMA_Start_IT+0x98>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	681a      	ldr	r2, [r3, #0]
 800434e:	68fb      	ldr	r3, [r7, #12]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f022 0204 	bic.w	r2, r2, #4
 8004356:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	681a      	ldr	r2, [r3, #0]
 800435e:	68fb      	ldr	r3, [r7, #12]
 8004360:	681b      	ldr	r3, [r3, #0]
 8004362:	f042 020a 	orr.w	r2, r2, #10
 8004366:	601a      	str	r2, [r3, #0]
    }

    /* Check if DMAMUX Synchronization is enabled*/
    if ((hdma->DMAmuxChannel->CCR & DMAMUX_CxCR_SE) != 0U)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004372:	2b00      	cmp	r3, #0
 8004374:	d007      	beq.n	8004386 <HAL_DMA_Start_IT+0xb6>
    {
      /* Enable DMAMUX sync overrun IT*/
      hdma->DMAmuxChannel->CCR |= DMAMUX_CxCR_SOIE;
 8004376:	68fb      	ldr	r3, [r7, #12]
 8004378:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800437a:	681a      	ldr	r2, [r3, #0]
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004380:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004384:	601a      	str	r2, [r3, #0]
    }

    if (hdma->DMAmuxRequestGen != 0U)
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800438a:	2b00      	cmp	r3, #0
 800438c:	d007      	beq.n	800439e <HAL_DMA_Start_IT+0xce>
    {
      /* if using DMAMUX request generator, enable the DMAMUX request generator overrun IT*/
      /* enable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR |= DMAMUX_RGxCR_OIE;
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004398:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800439c:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	681a      	ldr	r2, [r3, #0]
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	f042 0201 	orr.w	r2, r2, #1
 80043ac:	601a      	str	r2, [r3, #0]
 80043ae:	e005      	b.n	80043bc <HAL_DMA_Start_IT+0xec>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	2200      	movs	r2, #0
 80043b4:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Remain BUSY */
    status = HAL_BUSY;
 80043b8:	2302      	movs	r3, #2
 80043ba:	75fb      	strb	r3, [r7, #23]
  }
  return status;
 80043bc:	7dfb      	ldrb	r3, [r7, #23]
}
 80043be:	4618      	mov	r0, r3
 80043c0:	3718      	adds	r7, #24
 80043c2:	46bd      	mov	sp, r7
 80043c4:	bd80      	pop	{r7, pc}

080043c6 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043c6:	b480      	push	{r7}
 80043c8:	b085      	sub	sp, #20
 80043ca:	af00      	add	r7, sp, #0
 80043cc:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80043ce:	2300      	movs	r3, #0
 80043d0:	73fb      	strb	r3, [r7, #15]

  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80043d8:	b2db      	uxtb	r3, r3
 80043da:	2b02      	cmp	r3, #2
 80043dc:	d005      	beq.n	80043ea <HAL_DMA_Abort+0x24>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	2204      	movs	r2, #4
 80043e2:	63da      	str	r2, [r3, #60]	; 0x3c

    status = HAL_ERROR;
 80043e4:	2301      	movs	r3, #1
 80043e6:	73fb      	strb	r3, [r7, #15]
 80043e8:	e037      	b.n	800445a <HAL_DMA_Abort+0x94>
  }
  else
  {
     /* Disable DMA IT */
     __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	681a      	ldr	r2, [r3, #0]
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f022 020e 	bic.w	r2, r2, #14
 80043f8:	601a      	str	r2, [r3, #0]
     
     /* disable the DMAMUX sync overrun IT*/
     hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004404:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004408:	601a      	str	r2, [r3, #0]
     
     /* Disable the channel */
     __HAL_DMA_DISABLE(hdma);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f022 0201 	bic.w	r2, r2, #1
 8004418:	601a      	str	r2, [r3, #0]
     
     /* Clear all flags */
     hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800441e:	f003 021f 	and.w	r2, r3, #31
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004426:	2101      	movs	r1, #1
 8004428:	fa01 f202 	lsl.w	r2, r1, r2
 800442c:	605a      	str	r2, [r3, #4]
     
     /* Clear the DMAMUX synchro overrun flag */
     hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004432:	687a      	ldr	r2, [r7, #4]
 8004434:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8004436:	605a      	str	r2, [r3, #4]
     
     if (hdma->DMAmuxRequestGen != 0U)
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00c      	beq.n	800445a <HAL_DMA_Abort+0x94>
     {
       /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
       /* disable the request gen overrun IT*/
       hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004444:	681a      	ldr	r2, [r3, #0]
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800444a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800444e:	601a      	str	r2, [r3, #0]
     
       /* Clear the DMAMUX request generator overrun flag */
       hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004454:	687a      	ldr	r2, [r7, #4]
 8004456:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 8004458:	605a      	str	r2, [r3, #4]
     }
  }  
  /* Change the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	2201      	movs	r2, #1
 800445e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

  /* Process Unlocked */
  __HAL_UNLOCK(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

  return status;
 800446a:	7bfb      	ldrb	r3, [r7, #15]
}
 800446c:	4618      	mov	r0, r3
 800446e:	3714      	adds	r7, #20
 8004470:	46bd      	mov	sp, r7
 8004472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004476:	4770      	bx	lr

08004478 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004478:	b580      	push	{r7, lr}
 800447a:	b084      	sub	sp, #16
 800447c:	af00      	add	r7, sp, #0
 800447e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004480:	2300      	movs	r3, #0
 8004482:	73fb      	strb	r3, [r7, #15]

  if (HAL_DMA_STATE_BUSY != hdma->State)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b02      	cmp	r3, #2
 800448e:	d00d      	beq.n	80044ac <HAL_DMA_Abort_IT+0x34>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	2204      	movs	r2, #4
 8004494:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	2201      	movs	r2, #1
 800449a:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	2200      	movs	r2, #0
 80044a2:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    status = HAL_ERROR;
 80044a6:	2301      	movs	r3, #1
 80044a8:	73fb      	strb	r3, [r7, #15]
 80044aa:	e047      	b.n	800453c <HAL_DMA_Abort_IT+0xc4>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	681a      	ldr	r2, [r3, #0]
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	f022 020e 	bic.w	r2, r2, #14
 80044ba:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 80044bc:	687b      	ldr	r3, [r7, #4]
 80044be:	681b      	ldr	r3, [r3, #0]
 80044c0:	681a      	ldr	r2, [r3, #0]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f022 0201 	bic.w	r2, r2, #1
 80044ca:	601a      	str	r2, [r3, #0]

    /* disable the DMAMUX sync overrun IT*/
    hdma->DMAmuxChannel->CCR &= ~DMAMUX_CxCR_SOIE;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d0:	681a      	ldr	r2, [r3, #0]
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044d6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80044da:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044e0:	f003 021f 	and.w	r2, r3, #31
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044e8:	2101      	movs	r1, #1
 80044ea:	fa01 f202 	lsl.w	r2, r1, r2
 80044ee:	605a      	str	r2, [r3, #4]

    /* Clear the DMAMUX synchro overrun flag */
    hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80044f4:	687a      	ldr	r2, [r7, #4]
 80044f6:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80044f8:	605a      	str	r2, [r3, #4]

    if (hdma->DMAmuxRequestGen != 0U)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d00c      	beq.n	800451c <HAL_DMA_Abort_IT+0xa4>
    {
      /* if using DMAMUX request generator, disable the DMAMUX request generator overrun IT*/
      /* disable the request gen overrun IT*/
      hdma->DMAmuxRequestGen->RGCR &= ~DMAMUX_RGxCR_OIE;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004506:	681a      	ldr	r2, [r3, #0]
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004510:	601a      	str	r2, [r3, #0]

      /* Clear the DMAMUX request generator overrun flag */
      hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004516:	687a      	ldr	r2, [r7, #4]
 8004518:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 800451a:	605a      	str	r2, [r3, #4]
    }

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	2201      	movs	r2, #1
 8004520:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	2200      	movs	r2, #0
 8004528:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    /* Call User Abort callback */
    if (hdma->XferAbortCallback != NULL)
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004530:	2b00      	cmp	r3, #0
 8004532:	d003      	beq.n	800453c <HAL_DMA_Abort_IT+0xc4>
    {
      hdma->XferAbortCallback(hdma);
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004538:	6878      	ldr	r0, [r7, #4]
 800453a:	4798      	blx	r3
    }
  }
  return status;
 800453c:	7bfb      	ldrb	r3, [r7, #15]
}
 800453e:	4618      	mov	r0, r3
 8004540:	3710      	adds	r7, #16
 8004542:	46bd      	mov	sp, r7
 8004544:	bd80      	pop	{r7, pc}

08004546 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b084      	sub	sp, #16
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	681b      	ldr	r3, [r3, #0]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & ((uint32_t)DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1FU)))) && (0U != (source_it & DMA_IT_HT)))
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004562:	f003 031f 	and.w	r3, r3, #31
 8004566:	2204      	movs	r2, #4
 8004568:	409a      	lsls	r2, r3
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	4013      	ands	r3, r2
 800456e:	2b00      	cmp	r3, #0
 8004570:	d026      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x7a>
 8004572:	68bb      	ldr	r3, [r7, #8]
 8004574:	f003 0304 	and.w	r3, r3, #4
 8004578:	2b00      	cmp	r3, #0
 800457a:	d021      	beq.n	80045c0 <HAL_DMA_IRQHandler+0x7a>
  {
    /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	681b      	ldr	r3, [r3, #0]
 8004580:	681b      	ldr	r3, [r3, #0]
 8004582:	f003 0320 	and.w	r3, r3, #32
 8004586:	2b00      	cmp	r3, #0
 8004588:	d107      	bne.n	800459a <HAL_DMA_IRQHandler+0x54>
    {
      /* Disable the half transfer interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681a      	ldr	r2, [r3, #0]
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f022 0204 	bic.w	r2, r2, #4
 8004598:	601a      	str	r2, [r3, #0]
    }
    /* Clear the half transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1FU));
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800459e:	f003 021f 	and.w	r2, r3, #31
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80045a6:	2104      	movs	r1, #4
 80045a8:	fa01 f202 	lsl.w	r2, r1, r2
 80045ac:	605a      	str	r2, [r3, #4]

    /* DMA peripheral state is not updated in Half Transfer */
    /* but in Transfer Complete case */

    if (hdma->XferHalfCpltCallback != NULL)
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d071      	beq.n	800469a <HAL_DMA_IRQHandler+0x154>
    {
      /* Half transfer callback */
      hdma->XferHalfCpltCallback(hdma);
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	4798      	blx	r3
    if (hdma->XferHalfCpltCallback != NULL)
 80045be:	e06c      	b.n	800469a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1FU))))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80045c4:	f003 031f 	and.w	r3, r3, #31
 80045c8:	2202      	movs	r2, #2
 80045ca:	409a      	lsls	r2, r3
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	4013      	ands	r3, r2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d02e      	beq.n	8004632 <HAL_DMA_IRQHandler+0xec>
           && (0U != (source_it & DMA_IT_TC)))
 80045d4:	68bb      	ldr	r3, [r7, #8]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d029      	beq.n	8004632 <HAL_DMA_IRQHandler+0xec>
  {
    if ((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	f003 0320 	and.w	r3, r3, #32
 80045e8:	2b00      	cmp	r3, #0
 80045ea:	d10b      	bne.n	8004604 <HAL_DMA_IRQHandler+0xbe>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	681b      	ldr	r3, [r3, #0]
 80045f0:	681a      	ldr	r2, [r3, #0]
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	f022 020a 	bic.w	r2, r2, #10
 80045fa:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	2201      	movs	r2, #1
 8004600:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1FU));
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004608:	f003 021f 	and.w	r2, r3, #31
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004610:	2102      	movs	r1, #2
 8004612:	fa01 f202 	lsl.w	r2, r1, r2
 8004616:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	2200      	movs	r2, #0
 800461c:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferCpltCallback != NULL)
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004624:	2b00      	cmp	r3, #0
 8004626:	d038      	beq.n	800469a <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800462c:	6878      	ldr	r0, [r7, #4]
 800462e:	4798      	blx	r3
    if (hdma->XferCpltCallback != NULL)
 8004630:	e033      	b.n	800469a <HAL_DMA_IRQHandler+0x154>
    }
  }
  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & ((uint32_t)DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1FU))))
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004636:	f003 031f 	and.w	r3, r3, #31
 800463a:	2208      	movs	r2, #8
 800463c:	409a      	lsls	r2, r3
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	4013      	ands	r3, r2
 8004642:	2b00      	cmp	r3, #0
 8004644:	d02a      	beq.n	800469c <HAL_DMA_IRQHandler+0x156>
           && (0U != (source_it & DMA_IT_TE)))
 8004646:	68bb      	ldr	r3, [r7, #8]
 8004648:	f003 0308 	and.w	r3, r3, #8
 800464c:	2b00      	cmp	r3, #0
 800464e:	d025      	beq.n	800469c <HAL_DMA_IRQHandler+0x156>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	681b      	ldr	r3, [r3, #0]
 8004654:	681a      	ldr	r2, [r3, #0]
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f022 020e 	bic.w	r2, r2, #14
 800465e:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = ((uint32_t)DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004664:	f003 021f 	and.w	r2, r3, #31
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800466c:	2101      	movs	r1, #1
 800466e:	fa01 f202 	lsl.w	r2, r1, r2
 8004672:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	2201      	movs	r2, #1
 8004678:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800467a:	687b      	ldr	r3, [r7, #4]
 800467c:	2201      	movs	r2, #1
 800467e:	f883 2025 	strb.w	r2, [r3, #37]	; 0x25

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2200      	movs	r2, #0
 8004686:	f883 2024 	strb.w	r2, [r3, #36]	; 0x24

    if (hdma->XferErrorCallback != NULL)
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800468e:	2b00      	cmp	r3, #0
 8004690:	d004      	beq.n	800469c <HAL_DMA_IRQHandler+0x156>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004696:	6878      	ldr	r0, [r7, #4]
 8004698:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800469a:	bf00      	nop
 800469c:	bf00      	nop
}
 800469e:	3710      	adds	r7, #16
 80046a0:	46bd      	mov	sp, r7
 80046a2:	bd80      	pop	{r7, pc}

080046a4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80046a4:	b480      	push	{r7}
 80046a6:	b085      	sub	sp, #20
 80046a8:	af00      	add	r7, sp, #0
 80046aa:	60f8      	str	r0, [r7, #12]
 80046ac:	60b9      	str	r1, [r7, #8]
 80046ae:	607a      	str	r2, [r7, #4]
 80046b0:	603b      	str	r3, [r7, #0]
  /* Clear the DMAMUX synchro overrun flag */
  hdma->DMAmuxChannelStatus->CFR = hdma->DMAmuxChannelStatusMask;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046b6:	68fa      	ldr	r2, [r7, #12]
 80046b8:	6d12      	ldr	r2, [r2, #80]	; 0x50
 80046ba:	605a      	str	r2, [r3, #4]

  if (hdma->DMAmuxRequestGen != 0U)
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d004      	beq.n	80046ce <DMA_SetConfig+0x2a>
  {
    /* Clear the DMAMUX request generator overrun flag */
    hdma->DMAmuxRequestGenStatus->RGCFR = hdma->DMAmuxRequestGenStatusMask;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046c8:	68fa      	ldr	r2, [r7, #12]
 80046ca:	6dd2      	ldr	r2, [r2, #92]	; 0x5c
 80046cc:	605a      	str	r2, [r3, #4]
  }

  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1FU));
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046d2:	f003 021f 	and.w	r2, r3, #31
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80046da:	2101      	movs	r1, #1
 80046dc:	fa01 f202 	lsl.w	r2, r1, r2
 80046e0:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if ((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80046ea:	68fb      	ldr	r3, [r7, #12]
 80046ec:	689b      	ldr	r3, [r3, #8]
 80046ee:	2b10      	cmp	r3, #16
 80046f0:	d108      	bne.n	8004704 <DMA_SetConfig+0x60>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 80046f2:	68fb      	ldr	r3, [r7, #12]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	687a      	ldr	r2, [r7, #4]
 80046f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	681b      	ldr	r3, [r3, #0]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 8004702:	e007      	b.n	8004714 <DMA_SetConfig+0x70>
    hdma->Instance->CPAR = SrcAddress;
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800470c:	68fb      	ldr	r3, [r7, #12]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	687a      	ldr	r2, [r7, #4]
 8004712:	60da      	str	r2, [r3, #12]
}
 8004714:	bf00      	nop
 8004716:	3714      	adds	r7, #20
 8004718:	46bd      	mov	sp, r7
 800471a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800471e:	4770      	bx	lr

08004720 <DMA_CalcDMAMUXChannelBaseAndMask>:
  * @param  hdma        pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream.
  * @retval None
  */
static void DMA_CalcDMAMUXChannelBaseAndMask(DMA_HandleTypeDef *hdma)
{
 8004720:	b480      	push	{r7}
 8004722:	b087      	sub	sp, #28
 8004724:	af00      	add	r7, sp, #0
 8004726:	6078      	str	r0, [r7, #4]
  uint32_t dmamux_base_addr;
  uint32_t channel_number;
  DMAMUX_Channel_TypeDef *DMAMUX1_ChannelBase;

  /* check if instance is not outside the DMA channel range */
  if ((uint32_t)hdma->Instance < (uint32_t)DMA2_Channel1)
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	461a      	mov	r2, r3
 800472e:	4b16      	ldr	r3, [pc, #88]	; (8004788 <DMA_CalcDMAMUXChannelBaseAndMask+0x68>)
 8004730:	429a      	cmp	r2, r3
 8004732:	d802      	bhi.n	800473a <DMA_CalcDMAMUXChannelBaseAndMask+0x1a>
  {
    /* DMA1 */
    DMAMUX1_ChannelBase = DMAMUX1_Channel0;
 8004734:	4b15      	ldr	r3, [pc, #84]	; (800478c <DMA_CalcDMAMUXChannelBaseAndMask+0x6c>)
 8004736:	617b      	str	r3, [r7, #20]
 8004738:	e001      	b.n	800473e <DMA_CalcDMAMUXChannelBaseAndMask+0x1e>
  }
  else
  {
    /* DMA2 */
#if defined (STM32G471xx) || defined (STM32G473xx) || defined (STM32G474xx) || defined (STM32G483xx) || defined (STM32G484xx) || defined (STM32G491xx) || defined (STM32G4A1xx)
    DMAMUX1_ChannelBase = DMAMUX1_Channel8;
 800473a:	4b15      	ldr	r3, [pc, #84]	; (8004790 <DMA_CalcDMAMUXChannelBaseAndMask+0x70>)
 800473c:	617b      	str	r3, [r7, #20]
    DMAMUX1_ChannelBase = DMAMUX1_Channel6;
#else
    DMAMUX1_ChannelBase = DMAMUX1_Channel7;
#endif /* STM32G4x1xx) */
  }
  dmamux_base_addr = (uint32_t)DMAMUX1_ChannelBase;
 800473e:	697b      	ldr	r3, [r7, #20]
 8004740:	613b      	str	r3, [r7, #16]
  channel_number = (((uint32_t)hdma->Instance & 0xFFU) - 8U) / 20U;
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	b2db      	uxtb	r3, r3
 8004748:	3b08      	subs	r3, #8
 800474a:	4a12      	ldr	r2, [pc, #72]	; (8004794 <DMA_CalcDMAMUXChannelBaseAndMask+0x74>)
 800474c:	fba2 2303 	umull	r2, r3, r2, r3
 8004750:	091b      	lsrs	r3, r3, #4
 8004752:	60fb      	str	r3, [r7, #12]
  hdma->DMAmuxChannel = (DMAMUX_Channel_TypeDef *)(uint32_t)(dmamux_base_addr + ((hdma->ChannelIndex >> 2U) * ((uint32_t)DMAMUX1_Channel1 - (uint32_t)DMAMUX1_Channel0)));
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004758:	089b      	lsrs	r3, r3, #2
 800475a:	009a      	lsls	r2, r3, #2
 800475c:	693b      	ldr	r3, [r7, #16]
 800475e:	4413      	add	r3, r2
 8004760:	461a      	mov	r2, r3
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	649a      	str	r2, [r3, #72]	; 0x48
  hdma->DMAmuxChannelStatus = DMAMUX1_ChannelStatus;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	4a0b      	ldr	r2, [pc, #44]	; (8004798 <DMA_CalcDMAMUXChannelBaseAndMask+0x78>)
 800476a:	64da      	str	r2, [r3, #76]	; 0x4c
  hdma->DMAmuxChannelStatusMask = 1UL << (channel_number & 0x1FU);
 800476c:	68fb      	ldr	r3, [r7, #12]
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	2201      	movs	r2, #1
 8004774:	409a      	lsls	r2, r3
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	651a      	str	r2, [r3, #80]	; 0x50
}
 800477a:	bf00      	nop
 800477c:	371c      	adds	r7, #28
 800477e:	46bd      	mov	sp, r7
 8004780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004784:	4770      	bx	lr
 8004786:	bf00      	nop
 8004788:	40020407 	.word	0x40020407
 800478c:	40020800 	.word	0x40020800
 8004790:	40020820 	.word	0x40020820
 8004794:	cccccccd 	.word	0xcccccccd
 8004798:	40020880 	.word	0x40020880

0800479c <DMA_CalcDMAMUXRequestGenBaseAndMask>:
  *                     the configuration information for the specified DMA Channel.
  * @retval None
  */

static void DMA_CalcDMAMUXRequestGenBaseAndMask(DMA_HandleTypeDef *hdma)
{
 800479c:	b480      	push	{r7}
 800479e:	b085      	sub	sp, #20
 80047a0:	af00      	add	r7, sp, #0
 80047a2:	6078      	str	r0, [r7, #4]
  uint32_t request =  hdma->Init.Request & DMAMUX_CxCR_DMAREQ_ID;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	685b      	ldr	r3, [r3, #4]
 80047a8:	b2db      	uxtb	r3, r3
 80047aa:	60fb      	str	r3, [r7, #12]

  /* DMA Channels are connected to DMAMUX1 request generator blocks*/
  hdma->DMAmuxRequestGen = (DMAMUX_RequestGen_TypeDef *)((uint32_t)(((uint32_t)DMAMUX1_RequestGenerator0) + ((request - 1U) * 4U)));
 80047ac:	68fa      	ldr	r2, [r7, #12]
 80047ae:	4b0b      	ldr	r3, [pc, #44]	; (80047dc <DMA_CalcDMAMUXRequestGenBaseAndMask+0x40>)
 80047b0:	4413      	add	r3, r2
 80047b2:	009b      	lsls	r3, r3, #2
 80047b4:	461a      	mov	r2, r3
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	655a      	str	r2, [r3, #84]	; 0x54

  hdma->DMAmuxRequestGenStatus = DMAMUX1_RequestGenStatus;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	4a08      	ldr	r2, [pc, #32]	; (80047e0 <DMA_CalcDMAMUXRequestGenBaseAndMask+0x44>)
 80047be:	659a      	str	r2, [r3, #88]	; 0x58

  hdma->DMAmuxRequestGenStatusMask = 1UL << ((request - 1U) & 0x1FU);
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	3b01      	subs	r3, #1
 80047c4:	f003 031f 	and.w	r3, r3, #31
 80047c8:	2201      	movs	r2, #1
 80047ca:	409a      	lsls	r2, r3
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	65da      	str	r2, [r3, #92]	; 0x5c
}
 80047d0:	bf00      	nop
 80047d2:	3714      	adds	r7, #20
 80047d4:	46bd      	mov	sp, r7
 80047d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047da:	4770      	bx	lr
 80047dc:	1000823f 	.word	0x1000823f
 80047e0:	40020940 	.word	0x40020940

080047e4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80047e4:	b480      	push	{r7}
 80047e6:	b087      	sub	sp, #28
 80047e8:	af00      	add	r7, sp, #0
 80047ea:	6078      	str	r0, [r7, #4]
 80047ec:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 80047ee:	2300      	movs	r3, #0
 80047f0:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0U)
 80047f2:	e15a      	b.n	8004aaa <HAL_GPIO_Init+0x2c6>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681a      	ldr	r2, [r3, #0]
 80047f8:	2101      	movs	r1, #1
 80047fa:	697b      	ldr	r3, [r7, #20]
 80047fc:	fa01 f303 	lsl.w	r3, r1, r3
 8004800:	4013      	ands	r3, r2
 8004802:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	2b00      	cmp	r3, #0
 8004808:	f000 814c 	beq.w	8004aa4 <HAL_GPIO_Init+0x2c0>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	f003 0303 	and.w	r3, r3, #3
 8004814:	2b01      	cmp	r3, #1
 8004816:	d005      	beq.n	8004824 <HAL_GPIO_Init+0x40>
         ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	685b      	ldr	r3, [r3, #4]
 800481c:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8004820:	2b02      	cmp	r3, #2
 8004822:	d130      	bne.n	8004886 <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	689b      	ldr	r3, [r3, #8]
 8004828:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 800482a:	697b      	ldr	r3, [r7, #20]
 800482c:	005b      	lsls	r3, r3, #1
 800482e:	2203      	movs	r2, #3
 8004830:	fa02 f303 	lsl.w	r3, r2, r3
 8004834:	43db      	mvns	r3, r3
 8004836:	693a      	ldr	r2, [r7, #16]
 8004838:	4013      	ands	r3, r2
 800483a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800483c:	683b      	ldr	r3, [r7, #0]
 800483e:	68da      	ldr	r2, [r3, #12]
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	005b      	lsls	r3, r3, #1
 8004844:	fa02 f303 	lsl.w	r3, r2, r3
 8004848:	693a      	ldr	r2, [r7, #16]
 800484a:	4313      	orrs	r3, r2
 800484c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	693a      	ldr	r2, [r7, #16]
 8004852:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	685b      	ldr	r3, [r3, #4]
 8004858:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 800485a:	2201      	movs	r2, #1
 800485c:	697b      	ldr	r3, [r7, #20]
 800485e:	fa02 f303 	lsl.w	r3, r2, r3
 8004862:	43db      	mvns	r3, r3
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4013      	ands	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	685b      	ldr	r3, [r3, #4]
 800486e:	091b      	lsrs	r3, r3, #4
 8004870:	f003 0201 	and.w	r2, r3, #1
 8004874:	697b      	ldr	r3, [r7, #20]
 8004876:	fa02 f303 	lsl.w	r3, r2, r3
 800487a:	693a      	ldr	r2, [r7, #16]
 800487c:	4313      	orrs	r3, r2
 800487e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	693a      	ldr	r2, [r7, #16]
 8004884:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	685b      	ldr	r3, [r3, #4]
 800488a:	f003 0303 	and.w	r3, r3, #3
 800488e:	2b03      	cmp	r3, #3
 8004890:	d017      	beq.n	80048c2 <HAL_GPIO_Init+0xde>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	68db      	ldr	r3, [r3, #12]
 8004896:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8004898:	697b      	ldr	r3, [r7, #20]
 800489a:	005b      	lsls	r3, r3, #1
 800489c:	2203      	movs	r2, #3
 800489e:	fa02 f303 	lsl.w	r3, r2, r3
 80048a2:	43db      	mvns	r3, r3
 80048a4:	693a      	ldr	r2, [r7, #16]
 80048a6:	4013      	ands	r3, r2
 80048a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048aa:	683b      	ldr	r3, [r7, #0]
 80048ac:	689a      	ldr	r2, [r3, #8]
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	005b      	lsls	r3, r3, #1
 80048b2:	fa02 f303 	lsl.w	r3, r2, r3
 80048b6:	693a      	ldr	r2, [r7, #16]
 80048b8:	4313      	orrs	r3, r2
 80048ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	693a      	ldr	r2, [r7, #16]
 80048c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80048c2:	683b      	ldr	r3, [r7, #0]
 80048c4:	685b      	ldr	r3, [r3, #4]
 80048c6:	f003 0303 	and.w	r3, r3, #3
 80048ca:	2b02      	cmp	r3, #2
 80048cc:	d123      	bne.n	8004916 <HAL_GPIO_Init+0x132>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80048ce:	697b      	ldr	r3, [r7, #20]
 80048d0:	08da      	lsrs	r2, r3, #3
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	3208      	adds	r2, #8
 80048d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80048da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 80048dc:	697b      	ldr	r3, [r7, #20]
 80048de:	f003 0307 	and.w	r3, r3, #7
 80048e2:	009b      	lsls	r3, r3, #2
 80048e4:	220f      	movs	r2, #15
 80048e6:	fa02 f303 	lsl.w	r3, r2, r3
 80048ea:	43db      	mvns	r3, r3
 80048ec:	693a      	ldr	r2, [r7, #16]
 80048ee:	4013      	ands	r3, r2
 80048f0:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 80048f2:	683b      	ldr	r3, [r7, #0]
 80048f4:	691a      	ldr	r2, [r3, #16]
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f003 0307 	and.w	r3, r3, #7
 80048fc:	009b      	lsls	r3, r3, #2
 80048fe:	fa02 f303 	lsl.w	r3, r2, r3
 8004902:	693a      	ldr	r2, [r7, #16]
 8004904:	4313      	orrs	r3, r2
 8004906:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 8004908:	697b      	ldr	r3, [r7, #20]
 800490a:	08da      	lsrs	r2, r3, #3
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	3208      	adds	r2, #8
 8004910:	6939      	ldr	r1, [r7, #16]
 8004912:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800491c:	697b      	ldr	r3, [r7, #20]
 800491e:	005b      	lsls	r3, r3, #1
 8004920:	2203      	movs	r2, #3
 8004922:	fa02 f303 	lsl.w	r3, r2, r3
 8004926:	43db      	mvns	r3, r3
 8004928:	693a      	ldr	r2, [r7, #16]
 800492a:	4013      	ands	r3, r2
 800492c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800492e:	683b      	ldr	r3, [r7, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	f003 0203 	and.w	r2, r3, #3
 8004936:	697b      	ldr	r3, [r7, #20]
 8004938:	005b      	lsls	r3, r3, #1
 800493a:	fa02 f303 	lsl.w	r3, r2, r3
 800493e:	693a      	ldr	r2, [r7, #16]
 8004940:	4313      	orrs	r3, r2
 8004942:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	693a      	ldr	r2, [r7, #16]
 8004948:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 800494a:	683b      	ldr	r3, [r7, #0]
 800494c:	685b      	ldr	r3, [r3, #4]
 800494e:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004952:	2b00      	cmp	r3, #0
 8004954:	f000 80a6 	beq.w	8004aa4 <HAL_GPIO_Init+0x2c0>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004958:	4b5b      	ldr	r3, [pc, #364]	; (8004ac8 <HAL_GPIO_Init+0x2e4>)
 800495a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800495c:	4a5a      	ldr	r2, [pc, #360]	; (8004ac8 <HAL_GPIO_Init+0x2e4>)
 800495e:	f043 0301 	orr.w	r3, r3, #1
 8004962:	6613      	str	r3, [r2, #96]	; 0x60
 8004964:	4b58      	ldr	r3, [pc, #352]	; (8004ac8 <HAL_GPIO_Init+0x2e4>)
 8004966:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004968:	f003 0301 	and.w	r3, r3, #1
 800496c:	60bb      	str	r3, [r7, #8]
 800496e:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004970:	4a56      	ldr	r2, [pc, #344]	; (8004acc <HAL_GPIO_Init+0x2e8>)
 8004972:	697b      	ldr	r3, [r7, #20]
 8004974:	089b      	lsrs	r3, r3, #2
 8004976:	3302      	adds	r3, #2
 8004978:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800497c:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f003 0303 	and.w	r3, r3, #3
 8004984:	009b      	lsls	r3, r3, #2
 8004986:	220f      	movs	r2, #15
 8004988:	fa02 f303 	lsl.w	r3, r2, r3
 800498c:	43db      	mvns	r3, r3
 800498e:	693a      	ldr	r2, [r7, #16]
 8004990:	4013      	ands	r3, r2
 8004992:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 800499a:	d01f      	beq.n	80049dc <HAL_GPIO_Init+0x1f8>
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	4a4c      	ldr	r2, [pc, #304]	; (8004ad0 <HAL_GPIO_Init+0x2ec>)
 80049a0:	4293      	cmp	r3, r2
 80049a2:	d019      	beq.n	80049d8 <HAL_GPIO_Init+0x1f4>
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	4a4b      	ldr	r2, [pc, #300]	; (8004ad4 <HAL_GPIO_Init+0x2f0>)
 80049a8:	4293      	cmp	r3, r2
 80049aa:	d013      	beq.n	80049d4 <HAL_GPIO_Init+0x1f0>
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	4a4a      	ldr	r2, [pc, #296]	; (8004ad8 <HAL_GPIO_Init+0x2f4>)
 80049b0:	4293      	cmp	r3, r2
 80049b2:	d00d      	beq.n	80049d0 <HAL_GPIO_Init+0x1ec>
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	4a49      	ldr	r2, [pc, #292]	; (8004adc <HAL_GPIO_Init+0x2f8>)
 80049b8:	4293      	cmp	r3, r2
 80049ba:	d007      	beq.n	80049cc <HAL_GPIO_Init+0x1e8>
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	4a48      	ldr	r2, [pc, #288]	; (8004ae0 <HAL_GPIO_Init+0x2fc>)
 80049c0:	4293      	cmp	r3, r2
 80049c2:	d101      	bne.n	80049c8 <HAL_GPIO_Init+0x1e4>
 80049c4:	2305      	movs	r3, #5
 80049c6:	e00a      	b.n	80049de <HAL_GPIO_Init+0x1fa>
 80049c8:	2306      	movs	r3, #6
 80049ca:	e008      	b.n	80049de <HAL_GPIO_Init+0x1fa>
 80049cc:	2304      	movs	r3, #4
 80049ce:	e006      	b.n	80049de <HAL_GPIO_Init+0x1fa>
 80049d0:	2303      	movs	r3, #3
 80049d2:	e004      	b.n	80049de <HAL_GPIO_Init+0x1fa>
 80049d4:	2302      	movs	r3, #2
 80049d6:	e002      	b.n	80049de <HAL_GPIO_Init+0x1fa>
 80049d8:	2301      	movs	r3, #1
 80049da:	e000      	b.n	80049de <HAL_GPIO_Init+0x1fa>
 80049dc:	2300      	movs	r3, #0
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	f002 0203 	and.w	r2, r2, #3
 80049e4:	0092      	lsls	r2, r2, #2
 80049e6:	4093      	lsls	r3, r2
 80049e8:	693a      	ldr	r2, [r7, #16]
 80049ea:	4313      	orrs	r3, r2
 80049ec:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80049ee:	4937      	ldr	r1, [pc, #220]	; (8004acc <HAL_GPIO_Init+0x2e8>)
 80049f0:	697b      	ldr	r3, [r7, #20]
 80049f2:	089b      	lsrs	r3, r3, #2
 80049f4:	3302      	adds	r3, #2
 80049f6:	693a      	ldr	r2, [r7, #16]
 80049f8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 80049fc:	4b39      	ldr	r3, [pc, #228]	; (8004ae4 <HAL_GPIO_Init+0x300>)
 80049fe:	689b      	ldr	r3, [r3, #8]
 8004a00:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a02:	68fb      	ldr	r3, [r7, #12]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	693a      	ldr	r2, [r7, #16]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_GPIO_Init+0x23c>
        {
          temp |= iocurrent;
 8004a18:	693a      	ldr	r2, [r7, #16]
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8004a20:	4a30      	ldr	r2, [pc, #192]	; (8004ae4 <HAL_GPIO_Init+0x300>)
 8004a22:	693b      	ldr	r3, [r7, #16]
 8004a24:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8004a26:	4b2f      	ldr	r3, [pc, #188]	; (8004ae4 <HAL_GPIO_Init+0x300>)
 8004a28:	68db      	ldr	r3, [r3, #12]
 8004a2a:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	43db      	mvns	r3, r3
 8004a30:	693a      	ldr	r2, [r7, #16]
 8004a32:	4013      	ands	r3, r2
 8004a34:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a36:	683b      	ldr	r3, [r7, #0]
 8004a38:	685b      	ldr	r3, [r3, #4]
 8004a3a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a3e:	2b00      	cmp	r3, #0
 8004a40:	d003      	beq.n	8004a4a <HAL_GPIO_Init+0x266>
        {
          temp |= iocurrent;
 8004a42:	693a      	ldr	r2, [r7, #16]
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	4313      	orrs	r3, r2
 8004a48:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8004a4a:	4a26      	ldr	r2, [pc, #152]	; (8004ae4 <HAL_GPIO_Init+0x300>)
 8004a4c:	693b      	ldr	r3, [r7, #16]
 8004a4e:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR1;
 8004a50:	4b24      	ldr	r3, [pc, #144]	; (8004ae4 <HAL_GPIO_Init+0x300>)
 8004a52:	685b      	ldr	r3, [r3, #4]
 8004a54:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	43db      	mvns	r3, r3
 8004a5a:	693a      	ldr	r2, [r7, #16]
 8004a5c:	4013      	ands	r3, r2
 8004a5e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d003      	beq.n	8004a74 <HAL_GPIO_Init+0x290>
        {
          temp |= iocurrent;
 8004a6c:	693a      	ldr	r2, [r7, #16]
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	4313      	orrs	r3, r2
 8004a72:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8004a74:	4a1b      	ldr	r2, [pc, #108]	; (8004ae4 <HAL_GPIO_Init+0x300>)
 8004a76:	693b      	ldr	r3, [r7, #16]
 8004a78:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR1;
 8004a7a:	4b1a      	ldr	r3, [pc, #104]	; (8004ae4 <HAL_GPIO_Init+0x300>)
 8004a7c:	681b      	ldr	r3, [r3, #0]
 8004a7e:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	43db      	mvns	r3, r3
 8004a84:	693a      	ldr	r2, [r7, #16]
 8004a86:	4013      	ands	r3, r2
 8004a88:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004a8a:	683b      	ldr	r3, [r7, #0]
 8004a8c:	685b      	ldr	r3, [r3, #4]
 8004a8e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d003      	beq.n	8004a9e <HAL_GPIO_Init+0x2ba>
        {
          temp |= iocurrent;
 8004a96:	693a      	ldr	r2, [r7, #16]
 8004a98:	68fb      	ldr	r3, [r7, #12]
 8004a9a:	4313      	orrs	r3, r2
 8004a9c:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8004a9e:	4a11      	ldr	r2, [pc, #68]	; (8004ae4 <HAL_GPIO_Init+0x300>)
 8004aa0:	693b      	ldr	r3, [r7, #16]
 8004aa2:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8004aa4:	697b      	ldr	r3, [r7, #20]
 8004aa6:	3301      	adds	r3, #1
 8004aa8:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0U)
 8004aaa:	683b      	ldr	r3, [r7, #0]
 8004aac:	681a      	ldr	r2, [r3, #0]
 8004aae:	697b      	ldr	r3, [r7, #20]
 8004ab0:	fa22 f303 	lsr.w	r3, r2, r3
 8004ab4:	2b00      	cmp	r3, #0
 8004ab6:	f47f ae9d 	bne.w	80047f4 <HAL_GPIO_Init+0x10>
  }
}
 8004aba:	bf00      	nop
 8004abc:	bf00      	nop
 8004abe:	371c      	adds	r7, #28
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr
 8004ac8:	40021000 	.word	0x40021000
 8004acc:	40010000 	.word	0x40010000
 8004ad0:	48000400 	.word	0x48000400
 8004ad4:	48000800 	.word	0x48000800
 8004ad8:	48000c00 	.word	0x48000c00
 8004adc:	48001000 	.word	0x48001000
 8004ae0:	48001400 	.word	0x48001400
 8004ae4:	40010400 	.word	0x40010400

08004ae8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004ae8:	b480      	push	{r7}
 8004aea:	b083      	sub	sp, #12
 8004aec:	af00      	add	r7, sp, #0
 8004aee:	6078      	str	r0, [r7, #4]
 8004af0:	460b      	mov	r3, r1
 8004af2:	807b      	strh	r3, [r7, #2]
 8004af4:	4613      	mov	r3, r2
 8004af6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8004af8:	787b      	ldrb	r3, [r7, #1]
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	d003      	beq.n	8004b06 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8004afe:	887a      	ldrh	r2, [r7, #2]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8004b04:	e002      	b.n	8004b0c <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8004b06:	887a      	ldrh	r2, [r7, #2]
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	629a      	str	r2, [r3, #40]	; 0x28
}
 8004b0c:	bf00      	nop
 8004b0e:	370c      	adds	r7, #12
 8004b10:	46bd      	mov	sp, r7
 8004b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b16:	4770      	bx	lr

08004b18 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  Handle EXTI interrupt request.
  * @param  GPIO_Pin Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b082      	sub	sp, #8
 8004b1c:	af00      	add	r7, sp, #0
 8004b1e:	4603      	mov	r3, r0
 8004b20:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8004b22:	4b08      	ldr	r3, [pc, #32]	; (8004b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b24:	695a      	ldr	r2, [r3, #20]
 8004b26:	88fb      	ldrh	r3, [r7, #6]
 8004b28:	4013      	ands	r3, r2
 8004b2a:	2b00      	cmp	r3, #0
 8004b2c:	d006      	beq.n	8004b3c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b2e:	4a05      	ldr	r2, [pc, #20]	; (8004b44 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b30:	88fb      	ldrh	r3, [r7, #6]
 8004b32:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b34:	88fb      	ldrh	r3, [r7, #6]
 8004b36:	4618      	mov	r0, r3
 8004b38:	f000 f806 	bl	8004b48 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b3c:	bf00      	nop
 8004b3e:	3708      	adds	r7, #8
 8004b40:	46bd      	mov	sp, r7
 8004b42:	bd80      	pop	{r7, pc}
 8004b44:	40010400 	.word	0x40010400

08004b48 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callback.
  * @param  GPIO_Pin: Specifies the port pin connected to corresponding EXTI line.
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8004b48:	b480      	push	{r7}
 8004b4a:	b083      	sub	sp, #12
 8004b4c:	af00      	add	r7, sp, #0
 8004b4e:	4603      	mov	r3, r0
 8004b50:	80fb      	strh	r3, [r7, #6]
  UNUSED(GPIO_Pin);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8004b52:	bf00      	nop
 8004b54:	370c      	adds	r7, #12
 8004b56:	46bd      	mov	sp, r7
 8004b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b5c:	4770      	bx	lr
	...

08004b60 <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 8004b60:	b480      	push	{r7}
 8004b62:	b085      	sub	sp, #20
 8004b64:	af00      	add	r7, sp, #0
 8004b66:	6078      	str	r0, [r7, #4]
  uint32_t wait_loop_index;

  assert_param(IS_PWR_VOLTAGE_SCALING_RANGE(VoltageScaling));

  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1_BOOST)
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d141      	bne.n	8004bf2 <HAL_PWREx_ControlVoltageScaling+0x92>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004b6e:	4b4b      	ldr	r3, [pc, #300]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004b76:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b7a:	d131      	bne.n	8004be0 <HAL_PWREx_ControlVoltageScaling+0x80>
    {
      /* Make sure Range 1 Boost is enabled */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004b7c:	4b47      	ldr	r3, [pc, #284]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b7e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b82:	4a46      	ldr	r2, [pc, #280]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b84:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b88:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004b8c:	4b43      	ldr	r3, [pc, #268]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004b94:	4a41      	ldr	r2, [pc, #260]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004b96:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004b9a:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004b9c:	4b40      	ldr	r3, [pc, #256]	; (8004ca0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004b9e:	681b      	ldr	r3, [r3, #0]
 8004ba0:	2232      	movs	r2, #50	; 0x32
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	4a3f      	ldr	r2, [pc, #252]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	0c9b      	lsrs	r3, r3, #18
 8004bae:	3301      	adds	r3, #1
 8004bb0:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bb2:	e002      	b.n	8004bba <HAL_PWREx_ControlVoltageScaling+0x5a>
      {
        wait_loop_index--;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	3b01      	subs	r3, #1
 8004bb8:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004bba:	4b38      	ldr	r3, [pc, #224]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bbc:	695b      	ldr	r3, [r3, #20]
 8004bbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bc6:	d102      	bne.n	8004bce <HAL_PWREx_ControlVoltageScaling+0x6e>
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d1f2      	bne.n	8004bb4 <HAL_PWREx_ControlVoltageScaling+0x54>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004bce:	4b33      	ldr	r3, [pc, #204]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bd0:	695b      	ldr	r3, [r3, #20]
 8004bd2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bd6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004bda:	d158      	bne.n	8004c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004bdc:	2303      	movs	r3, #3
 8004bde:	e057      	b.n	8004c90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
    /* If current range is range 1 normal or boost mode */
    else
    {
      /* Enable Range 1 Boost (no issue if bit already reset) */
      CLEAR_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004be0:	4b2e      	ldr	r3, [pc, #184]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004be6:	4a2d      	ldr	r2, [pc, #180]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004be8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004bec:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004bf0:	e04d      	b.n	8004c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004bf8:	d141      	bne.n	8004c7e <HAL_PWREx_ControlVoltageScaling+0x11e>
  {
    /* If current range is range 2 */
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) == PWR_REGULATOR_VOLTAGE_SCALE2)
 8004bfa:	4b28      	ldr	r3, [pc, #160]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8004c02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c06:	d131      	bne.n	8004c6c <HAL_PWREx_ControlVoltageScaling+0x10c>
    {
      /* Make sure Range 1 Boost is disabled */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c08:	4b24      	ldr	r3, [pc, #144]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c0a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c0e:	4a23      	ldr	r2, [pc, #140]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c14:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80

      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 8004c18:	4b20      	ldr	r3, [pc, #128]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c20:	4a1e      	ldr	r2, [pc, #120]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c22:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004c26:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <HAL_PWREx_ControlVoltageScaling+0x140>)
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	2232      	movs	r2, #50	; 0x32
 8004c2e:	fb02 f303 	mul.w	r3, r2, r3
 8004c32:	4a1c      	ldr	r2, [pc, #112]	; (8004ca4 <HAL_PWREx_ControlVoltageScaling+0x144>)
 8004c34:	fba2 2303 	umull	r2, r3, r2, r3
 8004c38:	0c9b      	lsrs	r3, r3, #18
 8004c3a:	3301      	adds	r3, #1
 8004c3c:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c3e:	e002      	b.n	8004c46 <HAL_PWREx_ControlVoltageScaling+0xe6>
      {
        wait_loop_index--;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	3b01      	subs	r3, #1
 8004c44:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 8004c46:	4b15      	ldr	r3, [pc, #84]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c48:	695b      	ldr	r3, [r3, #20]
 8004c4a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c52:	d102      	bne.n	8004c5a <HAL_PWREx_ControlVoltageScaling+0xfa>
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d1f2      	bne.n	8004c40 <HAL_PWREx_ControlVoltageScaling+0xe0>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 8004c5a:	4b10      	ldr	r3, [pc, #64]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c5c:	695b      	ldr	r3, [r3, #20]
 8004c5e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c62:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004c66:	d112      	bne.n	8004c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
      {
        return HAL_TIMEOUT;
 8004c68:	2303      	movs	r3, #3
 8004c6a:	e011      	b.n	8004c90 <HAL_PWREx_ControlVoltageScaling+0x130>
    }
     /* If current range is range 1 normal or boost mode */
    else
    {
      /* Disable Range 1 Boost (no issue if bit already set) */
      SET_BIT(PWR->CR5, PWR_CR5_R1MODE);
 8004c6c:	4b0b      	ldr	r3, [pc, #44]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c6e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c72:	4a0a      	ldr	r2, [pc, #40]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c74:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004c78:	f8c2 3080 	str.w	r3, [r2, #128]	; 0x80
 8004c7c:	e007      	b.n	8004c8e <HAL_PWREx_ControlVoltageScaling+0x12e>
    }
  }
  else
  {
    /* Set Range 2 */
    MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 8004c7e:	4b07      	ldr	r3, [pc, #28]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8004c86:	4a05      	ldr	r2, [pc, #20]	; (8004c9c <HAL_PWREx_ControlVoltageScaling+0x13c>)
 8004c88:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004c8c:	6013      	str	r3, [r2, #0]
    /* No need to wait for VOSF to be cleared for this transition */
    /* PWR_CR5_R1MODE bit setting has no effect in Range 2        */
  }

  return HAL_OK;
 8004c8e:	2300      	movs	r3, #0
}
 8004c90:	4618      	mov	r0, r3
 8004c92:	3714      	adds	r7, #20
 8004c94:	46bd      	mov	sp, r7
 8004c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c9a:	4770      	bx	lr
 8004c9c:	40007000 	.word	0x40007000
 8004ca0:	20000000 	.word	0x20000000
 8004ca4:	431bde83 	.word	0x431bde83

08004ca8 <HAL_PWREx_DisableUCPDDeadBattery>:
  *       or to hand over control to the UCPD (which should therefore be
  *       initialized before doing the disable).
  * @retval None
  */
void HAL_PWREx_DisableUCPDDeadBattery(void)
{
 8004ca8:	b480      	push	{r7}
 8004caa:	af00      	add	r7, sp, #0
  /* Write 1 to disable the USB Type-C dead battery pull-down behavior */
  SET_BIT(PWR->CR3, PWR_CR3_UCPD_DBDIS);
 8004cac:	4b05      	ldr	r3, [pc, #20]	; (8004cc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	4a04      	ldr	r2, [pc, #16]	; (8004cc4 <HAL_PWREx_DisableUCPDDeadBattery+0x1c>)
 8004cb2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004cb6:	6093      	str	r3, [r2, #8]
}
 8004cb8:	bf00      	nop
 8004cba:	46bd      	mov	sp, r7
 8004cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cc0:	4770      	bx	lr
 8004cc2:	bf00      	nop
 8004cc4:	40007000 	.word	0x40007000

08004cc8 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004cc8:	b580      	push	{r7, lr}
 8004cca:	b088      	sub	sp, #32
 8004ccc:	af00      	add	r7, sp, #0
 8004cce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_sysclksrc;
  uint32_t temp_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d101      	bne.n	8004cda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e306      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0301 	and.w	r3, r3, #1
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d075      	beq.n	8004dd2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004ce6:	4b97      	ldr	r3, [pc, #604]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f003 030c 	and.w	r3, r3, #12
 8004cee:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004cf0:	4b94      	ldr	r3, [pc, #592]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004cf2:	68db      	ldr	r3, [r3, #12]
 8004cf4:	f003 0303 	and.w	r3, r3, #3
 8004cf8:	617b      	str	r3, [r7, #20]

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSE)) || (temp_sysclksrc == RCC_CFGR_SWS_HSE))
 8004cfa:	69bb      	ldr	r3, [r7, #24]
 8004cfc:	2b0c      	cmp	r3, #12
 8004cfe:	d102      	bne.n	8004d06 <HAL_RCC_OscConfig+0x3e>
 8004d00:	697b      	ldr	r3, [r7, #20]
 8004d02:	2b03      	cmp	r3, #3
 8004d04:	d002      	beq.n	8004d0c <HAL_RCC_OscConfig+0x44>
 8004d06:	69bb      	ldr	r3, [r7, #24]
 8004d08:	2b08      	cmp	r3, #8
 8004d0a:	d10b      	bne.n	8004d24 <HAL_RCC_OscConfig+0x5c>
    {
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004d0c:	4b8d      	ldr	r3, [pc, #564]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d05b      	beq.n	8004dd0 <HAL_RCC_OscConfig+0x108>
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	685b      	ldr	r3, [r3, #4]
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d157      	bne.n	8004dd0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004d20:	2301      	movs	r3, #1
 8004d22:	e2e1      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	685b      	ldr	r3, [r3, #4]
 8004d28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004d2c:	d106      	bne.n	8004d3c <HAL_RCC_OscConfig+0x74>
 8004d2e:	4b85      	ldr	r3, [pc, #532]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	4a84      	ldr	r2, [pc, #528]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d38:	6013      	str	r3, [r2, #0]
 8004d3a:	e01d      	b.n	8004d78 <HAL_RCC_OscConfig+0xb0>
 8004d3c:	687b      	ldr	r3, [r7, #4]
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004d44:	d10c      	bne.n	8004d60 <HAL_RCC_OscConfig+0x98>
 8004d46:	4b7f      	ldr	r3, [pc, #508]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	4a7e      	ldr	r2, [pc, #504]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004d4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004d50:	6013      	str	r3, [r2, #0]
 8004d52:	4b7c      	ldr	r3, [pc, #496]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	4a7b      	ldr	r2, [pc, #492]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004d58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d5c:	6013      	str	r3, [r2, #0]
 8004d5e:	e00b      	b.n	8004d78 <HAL_RCC_OscConfig+0xb0>
 8004d60:	4b78      	ldr	r3, [pc, #480]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004d62:	681b      	ldr	r3, [r3, #0]
 8004d64:	4a77      	ldr	r2, [pc, #476]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004d66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004d6a:	6013      	str	r3, [r2, #0]
 8004d6c:	4b75      	ldr	r3, [pc, #468]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	4a74      	ldr	r2, [pc, #464]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004d72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004d76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	685b      	ldr	r3, [r3, #4]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	d013      	beq.n	8004da8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d80:	f7fd fcac 	bl	80026dc <HAL_GetTick>
 8004d84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d86:	e008      	b.n	8004d9a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004d88:	f7fd fca8 	bl	80026dc <HAL_GetTick>
 8004d8c:	4602      	mov	r2, r0
 8004d8e:	693b      	ldr	r3, [r7, #16]
 8004d90:	1ad3      	subs	r3, r2, r3
 8004d92:	2b64      	cmp	r3, #100	; 0x64
 8004d94:	d901      	bls.n	8004d9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004d96:	2303      	movs	r3, #3
 8004d98:	e2a6      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8004d9a:	4b6a      	ldr	r3, [pc, #424]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004d9c:	681b      	ldr	r3, [r3, #0]
 8004d9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004da2:	2b00      	cmp	r3, #0
 8004da4:	d0f0      	beq.n	8004d88 <HAL_RCC_OscConfig+0xc0>
 8004da6:	e014      	b.n	8004dd2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004da8:	f7fd fc98 	bl	80026dc <HAL_GetTick>
 8004dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dae:	e008      	b.n	8004dc2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004db0:	f7fd fc94 	bl	80026dc <HAL_GetTick>
 8004db4:	4602      	mov	r2, r0
 8004db6:	693b      	ldr	r3, [r7, #16]
 8004db8:	1ad3      	subs	r3, r2, r3
 8004dba:	2b64      	cmp	r3, #100	; 0x64
 8004dbc:	d901      	bls.n	8004dc2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004dbe:	2303      	movs	r3, #3
 8004dc0:	e292      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8004dc2:	4b60      	ldr	r3, [pc, #384]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004dca:	2b00      	cmp	r3, #0
 8004dcc:	d1f0      	bne.n	8004db0 <HAL_RCC_OscConfig+0xe8>
 8004dce:	e000      	b.n	8004dd2 <HAL_RCC_OscConfig+0x10a>
      if ((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004dd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	681b      	ldr	r3, [r3, #0]
 8004dd6:	f003 0302 	and.w	r3, r3, #2
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d075      	beq.n	8004eca <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004dde:	4b59      	ldr	r3, [pc, #356]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004de0:	689b      	ldr	r3, [r3, #8]
 8004de2:	f003 030c 	and.w	r3, r3, #12
 8004de6:	61bb      	str	r3, [r7, #24]
    temp_pllckcfg = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004de8:	4b56      	ldr	r3, [pc, #344]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004dea:	68db      	ldr	r3, [r3, #12]
 8004dec:	f003 0303 	and.w	r3, r3, #3
 8004df0:	617b      	str	r3, [r7, #20]
    if (((temp_sysclksrc == RCC_CFGR_SWS_PLL) && (temp_pllckcfg == RCC_PLLSOURCE_HSI)) || (temp_sysclksrc == RCC_CFGR_SWS_HSI))
 8004df2:	69bb      	ldr	r3, [r7, #24]
 8004df4:	2b0c      	cmp	r3, #12
 8004df6:	d102      	bne.n	8004dfe <HAL_RCC_OscConfig+0x136>
 8004df8:	697b      	ldr	r3, [r7, #20]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d002      	beq.n	8004e04 <HAL_RCC_OscConfig+0x13c>
 8004dfe:	69bb      	ldr	r3, [r7, #24]
 8004e00:	2b04      	cmp	r3, #4
 8004e02:	d11f      	bne.n	8004e44 <HAL_RCC_OscConfig+0x17c>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004e04:	4b4f      	ldr	r3, [pc, #316]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e0c:	2b00      	cmp	r3, #0
 8004e0e:	d005      	beq.n	8004e1c <HAL_RCC_OscConfig+0x154>
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	68db      	ldr	r3, [r3, #12]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d101      	bne.n	8004e1c <HAL_RCC_OscConfig+0x154>
      {
        return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e265      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e1c:	4b49      	ldr	r3, [pc, #292]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004e1e:	685b      	ldr	r3, [r3, #4]
 8004e20:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	691b      	ldr	r3, [r3, #16]
 8004e28:	061b      	lsls	r3, r3, #24
 8004e2a:	4946      	ldr	r1, [pc, #280]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004e2c:	4313      	orrs	r3, r2
 8004e2e:	604b      	str	r3, [r1, #4]

        /* Adapt Systick interrupt period */
        if (HAL_InitTick(uwTickPrio) != HAL_OK)
 8004e30:	4b45      	ldr	r3, [pc, #276]	; (8004f48 <HAL_RCC_OscConfig+0x280>)
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	4618      	mov	r0, r3
 8004e36:	f7fc fcbf 	bl	80017b8 <HAL_InitTick>
 8004e3a:	4603      	mov	r3, r0
 8004e3c:	2b00      	cmp	r3, #0
 8004e3e:	d043      	beq.n	8004ec8 <HAL_RCC_OscConfig+0x200>
        {
          return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e251      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	68db      	ldr	r3, [r3, #12]
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d023      	beq.n	8004e94 <HAL_RCC_OscConfig+0x1cc>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004e4c:	4b3d      	ldr	r3, [pc, #244]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	4a3c      	ldr	r2, [pc, #240]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004e52:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004e56:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004e58:	f7fd fc40 	bl	80026dc <HAL_GetTick>
 8004e5c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e5e:	e008      	b.n	8004e72 <HAL_RCC_OscConfig+0x1aa>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004e60:	f7fd fc3c 	bl	80026dc <HAL_GetTick>
 8004e64:	4602      	mov	r2, r0
 8004e66:	693b      	ldr	r3, [r7, #16]
 8004e68:	1ad3      	subs	r3, r2, r3
 8004e6a:	2b02      	cmp	r3, #2
 8004e6c:	d901      	bls.n	8004e72 <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 8004e6e:	2303      	movs	r3, #3
 8004e70:	e23a      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8004e72:	4b34      	ldr	r3, [pc, #208]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004e74:	681b      	ldr	r3, [r3, #0]
 8004e76:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	d0f0      	beq.n	8004e60 <HAL_RCC_OscConfig+0x198>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004e7e:	4b31      	ldr	r3, [pc, #196]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004e80:	685b      	ldr	r3, [r3, #4]
 8004e82:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8004e86:	687b      	ldr	r3, [r7, #4]
 8004e88:	691b      	ldr	r3, [r3, #16]
 8004e8a:	061b      	lsls	r3, r3, #24
 8004e8c:	492d      	ldr	r1, [pc, #180]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004e8e:	4313      	orrs	r3, r2
 8004e90:	604b      	str	r3, [r1, #4]
 8004e92:	e01a      	b.n	8004eca <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004e94:	4b2b      	ldr	r3, [pc, #172]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004e96:	681b      	ldr	r3, [r3, #0]
 8004e98:	4a2a      	ldr	r2, [pc, #168]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004e9a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004e9e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004ea0:	f7fd fc1c 	bl	80026dc <HAL_GetTick>
 8004ea4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004ea6:	e008      	b.n	8004eba <HAL_RCC_OscConfig+0x1f2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004ea8:	f7fd fc18 	bl	80026dc <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	2b02      	cmp	r3, #2
 8004eb4:	d901      	bls.n	8004eba <HAL_RCC_OscConfig+0x1f2>
          {
            return HAL_TIMEOUT;
 8004eb6:	2303      	movs	r3, #3
 8004eb8:	e216      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8004eba:	4b22      	ldr	r3, [pc, #136]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d1f0      	bne.n	8004ea8 <HAL_RCC_OscConfig+0x1e0>
 8004ec6:	e000      	b.n	8004eca <HAL_RCC_OscConfig+0x202>
      if ((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8004ec8:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004eca:	687b      	ldr	r3, [r7, #4]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f003 0308 	and.w	r3, r3, #8
 8004ed2:	2b00      	cmp	r3, #0
 8004ed4:	d041      	beq.n	8004f5a <HAL_RCC_OscConfig+0x292>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	695b      	ldr	r3, [r3, #20]
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d01c      	beq.n	8004f18 <HAL_RCC_OscConfig+0x250>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ede:	4b19      	ldr	r3, [pc, #100]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004ee0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004ee4:	4a17      	ldr	r2, [pc, #92]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004ee6:	f043 0301 	orr.w	r3, r3, #1
 8004eea:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004eee:	f7fd fbf5 	bl	80026dc <HAL_GetTick>
 8004ef2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004ef4:	e008      	b.n	8004f08 <HAL_RCC_OscConfig+0x240>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ef6:	f7fd fbf1 	bl	80026dc <HAL_GetTick>
 8004efa:	4602      	mov	r2, r0
 8004efc:	693b      	ldr	r3, [r7, #16]
 8004efe:	1ad3      	subs	r3, r2, r3
 8004f00:	2b02      	cmp	r3, #2
 8004f02:	d901      	bls.n	8004f08 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8004f04:	2303      	movs	r3, #3
 8004f06:	e1ef      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8004f08:	4b0e      	ldr	r3, [pc, #56]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004f0a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f0e:	f003 0302 	and.w	r3, r3, #2
 8004f12:	2b00      	cmp	r3, #0
 8004f14:	d0ef      	beq.n	8004ef6 <HAL_RCC_OscConfig+0x22e>
 8004f16:	e020      	b.n	8004f5a <HAL_RCC_OscConfig+0x292>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004f18:	4b0a      	ldr	r3, [pc, #40]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004f1a:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f1e:	4a09      	ldr	r2, [pc, #36]	; (8004f44 <HAL_RCC_OscConfig+0x27c>)
 8004f20:	f023 0301 	bic.w	r3, r3, #1
 8004f24:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004f28:	f7fd fbd8 	bl	80026dc <HAL_GetTick>
 8004f2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f2e:	e00d      	b.n	8004f4c <HAL_RCC_OscConfig+0x284>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004f30:	f7fd fbd4 	bl	80026dc <HAL_GetTick>
 8004f34:	4602      	mov	r2, r0
 8004f36:	693b      	ldr	r3, [r7, #16]
 8004f38:	1ad3      	subs	r3, r2, r3
 8004f3a:	2b02      	cmp	r3, #2
 8004f3c:	d906      	bls.n	8004f4c <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8004f3e:	2303      	movs	r3, #3
 8004f40:	e1d2      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
 8004f42:	bf00      	nop
 8004f44:	40021000 	.word	0x40021000
 8004f48:	200000c8 	.word	0x200000c8
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8004f4c:	4b8c      	ldr	r3, [pc, #560]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8004f4e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004f52:	f003 0302 	and.w	r3, r3, #2
 8004f56:	2b00      	cmp	r3, #0
 8004f58:	d1ea      	bne.n	8004f30 <HAL_RCC_OscConfig+0x268>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 0304 	and.w	r3, r3, #4
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	f000 80a6 	beq.w	80050b4 <HAL_RCC_OscConfig+0x3ec>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004f68:	2300      	movs	r3, #0
 8004f6a:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain if necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 8004f6c:	4b84      	ldr	r3, [pc, #528]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8004f6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f70:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d101      	bne.n	8004f7c <HAL_RCC_OscConfig+0x2b4>
 8004f78:	2301      	movs	r3, #1
 8004f7a:	e000      	b.n	8004f7e <HAL_RCC_OscConfig+0x2b6>
 8004f7c:	2300      	movs	r3, #0
 8004f7e:	2b00      	cmp	r3, #0
 8004f80:	d00d      	beq.n	8004f9e <HAL_RCC_OscConfig+0x2d6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004f82:	4b7f      	ldr	r3, [pc, #508]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8004f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f86:	4a7e      	ldr	r2, [pc, #504]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8004f88:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004f8c:	6593      	str	r3, [r2, #88]	; 0x58
 8004f8e:	4b7c      	ldr	r3, [pc, #496]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8004f90:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f92:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004f96:	60fb      	str	r3, [r7, #12]
 8004f98:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 8004f9a:	2301      	movs	r3, #1
 8004f9c:	77fb      	strb	r3, [r7, #31]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004f9e:	4b79      	ldr	r3, [pc, #484]	; (8005184 <HAL_RCC_OscConfig+0x4bc>)
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d118      	bne.n	8004fdc <HAL_RCC_OscConfig+0x314>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004faa:	4b76      	ldr	r3, [pc, #472]	; (8005184 <HAL_RCC_OscConfig+0x4bc>)
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	4a75      	ldr	r2, [pc, #468]	; (8005184 <HAL_RCC_OscConfig+0x4bc>)
 8004fb0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004fb4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004fb6:	f7fd fb91 	bl	80026dc <HAL_GetTick>
 8004fba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fbc:	e008      	b.n	8004fd0 <HAL_RCC_OscConfig+0x308>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004fbe:	f7fd fb8d 	bl	80026dc <HAL_GetTick>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	1ad3      	subs	r3, r2, r3
 8004fc8:	2b02      	cmp	r3, #2
 8004fca:	d901      	bls.n	8004fd0 <HAL_RCC_OscConfig+0x308>
        {
          return HAL_TIMEOUT;
 8004fcc:	2303      	movs	r3, #3
 8004fce:	e18b      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8004fd0:	4b6c      	ldr	r3, [pc, #432]	; (8005184 <HAL_RCC_OscConfig+0x4bc>)
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d0f0      	beq.n	8004fbe <HAL_RCC_OscConfig+0x2f6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	689b      	ldr	r3, [r3, #8]
 8004fe0:	2b01      	cmp	r3, #1
 8004fe2:	d108      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x32e>
 8004fe4:	4b66      	ldr	r3, [pc, #408]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8004fe6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004fea:	4a65      	ldr	r2, [pc, #404]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8004fec:	f043 0301 	orr.w	r3, r3, #1
 8004ff0:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8004ff4:	e024      	b.n	8005040 <HAL_RCC_OscConfig+0x378>
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	689b      	ldr	r3, [r3, #8]
 8004ffa:	2b05      	cmp	r3, #5
 8004ffc:	d110      	bne.n	8005020 <HAL_RCC_OscConfig+0x358>
 8004ffe:	4b60      	ldr	r3, [pc, #384]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005000:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005004:	4a5e      	ldr	r2, [pc, #376]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005006:	f043 0304 	orr.w	r3, r3, #4
 800500a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800500e:	4b5c      	ldr	r3, [pc, #368]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005010:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005014:	4a5a      	ldr	r2, [pc, #360]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005016:	f043 0301 	orr.w	r3, r3, #1
 800501a:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 800501e:	e00f      	b.n	8005040 <HAL_RCC_OscConfig+0x378>
 8005020:	4b57      	ldr	r3, [pc, #348]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005022:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005026:	4a56      	ldr	r2, [pc, #344]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005028:	f023 0301 	bic.w	r3, r3, #1
 800502c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8005030:	4b53      	ldr	r3, [pc, #332]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005032:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005036:	4a52      	ldr	r2, [pc, #328]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005038:	f023 0304 	bic.w	r3, r3, #4
 800503c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90

    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	689b      	ldr	r3, [r3, #8]
 8005044:	2b00      	cmp	r3, #0
 8005046:	d016      	beq.n	8005076 <HAL_RCC_OscConfig+0x3ae>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005048:	f7fd fb48 	bl	80026dc <HAL_GetTick>
 800504c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 800504e:	e00a      	b.n	8005066 <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005050:	f7fd fb44 	bl	80026dc <HAL_GetTick>
 8005054:	4602      	mov	r2, r0
 8005056:	693b      	ldr	r3, [r7, #16]
 8005058:	1ad3      	subs	r3, r2, r3
 800505a:	f241 3288 	movw	r2, #5000	; 0x1388
 800505e:	4293      	cmp	r3, r2
 8005060:	d901      	bls.n	8005066 <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 8005062:	2303      	movs	r3, #3
 8005064:	e140      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005066:	4b46      	ldr	r3, [pc, #280]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005068:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800506c:	f003 0302 	and.w	r3, r3, #2
 8005070:	2b00      	cmp	r3, #0
 8005072:	d0ed      	beq.n	8005050 <HAL_RCC_OscConfig+0x388>
 8005074:	e015      	b.n	80050a2 <HAL_RCC_OscConfig+0x3da>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005076:	f7fd fb31 	bl	80026dc <HAL_GetTick>
 800507a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 800507c:	e00a      	b.n	8005094 <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800507e:	f7fd fb2d 	bl	80026dc <HAL_GetTick>
 8005082:	4602      	mov	r2, r0
 8005084:	693b      	ldr	r3, [r7, #16]
 8005086:	1ad3      	subs	r3, r2, r3
 8005088:	f241 3288 	movw	r2, #5000	; 0x1388
 800508c:	4293      	cmp	r3, r2
 800508e:	d901      	bls.n	8005094 <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8005090:	2303      	movs	r3, #3
 8005092:	e129      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
      while (READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8005094:	4b3a      	ldr	r3, [pc, #232]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005096:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800509a:	f003 0302 	and.w	r3, r3, #2
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d1ed      	bne.n	800507e <HAL_RCC_OscConfig+0x3b6>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80050a2:	7ffb      	ldrb	r3, [r7, #31]
 80050a4:	2b01      	cmp	r3, #1
 80050a6:	d105      	bne.n	80050b4 <HAL_RCC_OscConfig+0x3ec>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80050a8:	4b35      	ldr	r3, [pc, #212]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 80050aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80050ac:	4a34      	ldr	r2, [pc, #208]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 80050ae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80050b2:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*------------------------------ HSI48 Configuration -----------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	681b      	ldr	r3, [r3, #0]
 80050b8:	f003 0320 	and.w	r3, r3, #32
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d03c      	beq.n	800513a <HAL_RCC_OscConfig+0x472>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	699b      	ldr	r3, [r3, #24]
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d01c      	beq.n	8005102 <HAL_RCC_OscConfig+0x43a>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 80050c8:	4b2d      	ldr	r3, [pc, #180]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 80050ca:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050ce:	4a2c      	ldr	r2, [pc, #176]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 80050d0:	f043 0301 	orr.w	r3, r3, #1
 80050d4:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050d8:	f7fd fb00 	bl	80026dc <HAL_GetTick>
 80050dc:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is ready */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050de:	e008      	b.n	80050f2 <HAL_RCC_OscConfig+0x42a>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80050e0:	f7fd fafc 	bl	80026dc <HAL_GetTick>
 80050e4:	4602      	mov	r2, r0
 80050e6:	693b      	ldr	r3, [r7, #16]
 80050e8:	1ad3      	subs	r3, r2, r3
 80050ea:	2b02      	cmp	r3, #2
 80050ec:	d901      	bls.n	80050f2 <HAL_RCC_OscConfig+0x42a>
        {
          return HAL_TIMEOUT;
 80050ee:	2303      	movs	r3, #3
 80050f0:	e0fa      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) == 0U)
 80050f2:	4b23      	ldr	r3, [pc, #140]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 80050f4:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d0ef      	beq.n	80050e0 <HAL_RCC_OscConfig+0x418>
 8005100:	e01b      	b.n	800513a <HAL_RCC_OscConfig+0x472>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8005102:	4b1f      	ldr	r3, [pc, #124]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005104:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005108:	4a1d      	ldr	r2, [pc, #116]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 800510a:	f023 0301 	bic.w	r3, r3, #1
 800510e:	f8c2 3098 	str.w	r3, [r2, #152]	; 0x98

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005112:	f7fd fae3 	bl	80026dc <HAL_GetTick>
 8005116:	6138      	str	r0, [r7, #16]

      /* Wait till HSI48 is disabled */
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 8005118:	e008      	b.n	800512c <HAL_RCC_OscConfig+0x464>
      {
        if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800511a:	f7fd fadf 	bl	80026dc <HAL_GetTick>
 800511e:	4602      	mov	r2, r0
 8005120:	693b      	ldr	r3, [r7, #16]
 8005122:	1ad3      	subs	r3, r2, r3
 8005124:	2b02      	cmp	r3, #2
 8005126:	d901      	bls.n	800512c <HAL_RCC_OscConfig+0x464>
        {
          return HAL_TIMEOUT;
 8005128:	2303      	movs	r3, #3
 800512a:	e0dd      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
      while(READ_BIT(RCC->CRRCR, RCC_CRRCR_HSI48RDY) != 0U)
 800512c:	4b14      	ldr	r3, [pc, #80]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 800512e:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8005132:	f003 0302 	and.w	r3, r3, #2
 8005136:	2b00      	cmp	r3, #0
 8005138:	d1ef      	bne.n	800511a <HAL_RCC_OscConfig+0x452>

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if (RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	69db      	ldr	r3, [r3, #28]
 800513e:	2b00      	cmp	r3, #0
 8005140:	f000 80d1 	beq.w	80052e6 <HAL_RCC_OscConfig+0x61e>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005144:	4b0e      	ldr	r3, [pc, #56]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005146:	689b      	ldr	r3, [r3, #8]
 8005148:	f003 030c 	and.w	r3, r3, #12
 800514c:	2b0c      	cmp	r3, #12
 800514e:	f000 808b 	beq.w	8005268 <HAL_RCC_OscConfig+0x5a0>
    {
      if (RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8005152:	687b      	ldr	r3, [r7, #4]
 8005154:	69db      	ldr	r3, [r3, #28]
 8005156:	2b02      	cmp	r3, #2
 8005158:	d15e      	bne.n	8005218 <HAL_RCC_OscConfig+0x550>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800515a:	4b09      	ldr	r3, [pc, #36]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	4a08      	ldr	r2, [pc, #32]	; (8005180 <HAL_RCC_OscConfig+0x4b8>)
 8005160:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005164:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005166:	f7fd fab9 	bl	80026dc <HAL_GetTick>
 800516a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800516c:	e00c      	b.n	8005188 <HAL_RCC_OscConfig+0x4c0>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800516e:	f7fd fab5 	bl	80026dc <HAL_GetTick>
 8005172:	4602      	mov	r2, r0
 8005174:	693b      	ldr	r3, [r7, #16]
 8005176:	1ad3      	subs	r3, r2, r3
 8005178:	2b02      	cmp	r3, #2
 800517a:	d905      	bls.n	8005188 <HAL_RCC_OscConfig+0x4c0>
          {
            return HAL_TIMEOUT;
 800517c:	2303      	movs	r3, #3
 800517e:	e0b3      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
 8005180:	40021000 	.word	0x40021000
 8005184:	40007000 	.word	0x40007000
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005188:	4b59      	ldr	r3, [pc, #356]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005190:	2b00      	cmp	r3, #0
 8005192:	d1ec      	bne.n	800516e <HAL_RCC_OscConfig+0x4a6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8005194:	4b56      	ldr	r3, [pc, #344]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 8005196:	68da      	ldr	r2, [r3, #12]
 8005198:	4b56      	ldr	r3, [pc, #344]	; (80052f4 <HAL_RCC_OscConfig+0x62c>)
 800519a:	4013      	ands	r3, r2
 800519c:	687a      	ldr	r2, [r7, #4]
 800519e:	6a11      	ldr	r1, [r2, #32]
 80051a0:	687a      	ldr	r2, [r7, #4]
 80051a2:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80051a4:	3a01      	subs	r2, #1
 80051a6:	0112      	lsls	r2, r2, #4
 80051a8:	4311      	orrs	r1, r2
 80051aa:	687a      	ldr	r2, [r7, #4]
 80051ac:	6a92      	ldr	r2, [r2, #40]	; 0x28
 80051ae:	0212      	lsls	r2, r2, #8
 80051b0:	4311      	orrs	r1, r2
 80051b2:	687a      	ldr	r2, [r7, #4]
 80051b4:	6b12      	ldr	r2, [r2, #48]	; 0x30
 80051b6:	0852      	lsrs	r2, r2, #1
 80051b8:	3a01      	subs	r2, #1
 80051ba:	0552      	lsls	r2, r2, #21
 80051bc:	4311      	orrs	r1, r2
 80051be:	687a      	ldr	r2, [r7, #4]
 80051c0:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80051c2:	0852      	lsrs	r2, r2, #1
 80051c4:	3a01      	subs	r2, #1
 80051c6:	0652      	lsls	r2, r2, #25
 80051c8:	4311      	orrs	r1, r2
 80051ca:	687a      	ldr	r2, [r7, #4]
 80051cc:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 80051ce:	06d2      	lsls	r2, r2, #27
 80051d0:	430a      	orrs	r2, r1
 80051d2:	4947      	ldr	r1, [pc, #284]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 80051d4:	4313      	orrs	r3, r2
 80051d6:	60cb      	str	r3, [r1, #12]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051d8:	4b45      	ldr	r3, [pc, #276]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	4a44      	ldr	r2, [pc, #272]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 80051de:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051e2:	6013      	str	r3, [r2, #0]

        /* Enable PLL System Clock output. */
         __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 80051e4:	4b42      	ldr	r3, [pc, #264]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	4a41      	ldr	r2, [pc, #260]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 80051ea:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80051ee:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051f0:	f7fd fa74 	bl	80026dc <HAL_GetTick>
 80051f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 80051f6:	e008      	b.n	800520a <HAL_RCC_OscConfig+0x542>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80051f8:	f7fd fa70 	bl	80026dc <HAL_GetTick>
 80051fc:	4602      	mov	r2, r0
 80051fe:	693b      	ldr	r3, [r7, #16]
 8005200:	1ad3      	subs	r3, r2, r3
 8005202:	2b02      	cmp	r3, #2
 8005204:	d901      	bls.n	800520a <HAL_RCC_OscConfig+0x542>
          {
            return HAL_TIMEOUT;
 8005206:	2303      	movs	r3, #3
 8005208:	e06e      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 800520a:	4b39      	ldr	r3, [pc, #228]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005212:	2b00      	cmp	r3, #0
 8005214:	d0f0      	beq.n	80051f8 <HAL_RCC_OscConfig+0x530>
 8005216:	e066      	b.n	80052e6 <HAL_RCC_OscConfig+0x61e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005218:	4b35      	ldr	r3, [pc, #212]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 800521a:	681b      	ldr	r3, [r3, #0]
 800521c:	4a34      	ldr	r2, [pc, #208]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 800521e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005222:	6013      	str	r3, [r2, #0]

        /* Disable all PLL outputs to save power if no PLLs on */
          MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, RCC_PLLSOURCE_NONE);
 8005224:	4b32      	ldr	r3, [pc, #200]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 8005226:	68db      	ldr	r3, [r3, #12]
 8005228:	4a31      	ldr	r2, [pc, #196]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 800522a:	f023 0303 	bic.w	r3, r3, #3
 800522e:	60d3      	str	r3, [r2, #12]
        __HAL_RCC_PLLCLKOUT_DISABLE(RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_ADCCLK);
 8005230:	4b2f      	ldr	r3, [pc, #188]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 8005232:	68db      	ldr	r3, [r3, #12]
 8005234:	4a2e      	ldr	r2, [pc, #184]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 8005236:	f023 7388 	bic.w	r3, r3, #17825792	; 0x1100000
 800523a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800523e:	60d3      	str	r3, [r2, #12]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005240:	f7fd fa4c 	bl	80026dc <HAL_GetTick>
 8005244:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8005246:	e008      	b.n	800525a <HAL_RCC_OscConfig+0x592>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005248:	f7fd fa48 	bl	80026dc <HAL_GetTick>
 800524c:	4602      	mov	r2, r0
 800524e:	693b      	ldr	r3, [r7, #16]
 8005250:	1ad3      	subs	r3, r2, r3
 8005252:	2b02      	cmp	r3, #2
 8005254:	d901      	bls.n	800525a <HAL_RCC_OscConfig+0x592>
          {
            return HAL_TIMEOUT;
 8005256:	2303      	movs	r3, #3
 8005258:	e046      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
        while (READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 800525a:	4b25      	ldr	r3, [pc, #148]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005262:	2b00      	cmp	r3, #0
 8005264:	d1f0      	bne.n	8005248 <HAL_RCC_OscConfig+0x580>
 8005266:	e03e      	b.n	80052e6 <HAL_RCC_OscConfig+0x61e>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	69db      	ldr	r3, [r3, #28]
 800526c:	2b01      	cmp	r3, #1
 800526e:	d101      	bne.n	8005274 <HAL_RCC_OscConfig+0x5ac>
      {
        return HAL_ERROR;
 8005270:	2301      	movs	r3, #1
 8005272:	e039      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
      }
      else
      {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp_pllckcfg = RCC->PLLCFGR;
 8005274:	4b1e      	ldr	r3, [pc, #120]	; (80052f0 <HAL_RCC_OscConfig+0x628>)
 8005276:	68db      	ldr	r3, [r3, #12]
 8005278:	617b      	str	r3, [r7, #20]
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800527a:	697b      	ldr	r3, [r7, #20]
 800527c:	f003 0203 	and.w	r2, r3, #3
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	6a1b      	ldr	r3, [r3, #32]
 8005284:	429a      	cmp	r2, r3
 8005286:	d12c      	bne.n	80052e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8005288:	697b      	ldr	r3, [r7, #20]
 800528a:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005292:	3b01      	subs	r3, #1
 8005294:	011b      	lsls	r3, r3, #4
      if((READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005296:	429a      	cmp	r2, r3
 8005298:	d123      	bne.n	80052e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 800529a:	697b      	ldr	r3, [r7, #20]
 800529c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 80052a0:	687b      	ldr	r3, [r7, #4]
 80052a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80052a4:	021b      	lsls	r3, r3, #8
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLM) != (((RCC_OscInitStruct->PLL.PLLM) - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d11b      	bne.n	80052e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f003 4278 	and.w	r2, r3, #4160749568	; 0xf8000000
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052b4:	06db      	lsls	r3, r3, #27
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLN) != ((RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos)) ||
 80052b6:	429a      	cmp	r2, r3
 80052b8:	d113      	bne.n	80052e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052ba:	697b      	ldr	r3, [r7, #20]
 80052bc:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052c4:	085b      	lsrs	r3, r3, #1
 80052c6:	3b01      	subs	r3, #1
 80052c8:	055b      	lsls	r3, r3, #21
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLPDIV) != ((RCC_OscInitStruct->PLL.PLLP) << RCC_PLLCFGR_PLLPDIV_Pos)) ||
 80052ca:	429a      	cmp	r2, r3
 80052cc:	d109      	bne.n	80052e2 <HAL_RCC_OscConfig+0x61a>
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLR) != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 80052ce:	697b      	ldr	r3, [r7, #20]
 80052d0:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80052d8:	085b      	lsrs	r3, r3, #1
 80052da:	3b01      	subs	r3, #1
 80052dc:	065b      	lsls	r3, r3, #25
         (READ_BIT(temp_pllckcfg, RCC_PLLCFGR_PLLQ) != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 80052de:	429a      	cmp	r2, r3
 80052e0:	d001      	beq.n	80052e6 <HAL_RCC_OscConfig+0x61e>
      {
        return HAL_ERROR;
 80052e2:	2301      	movs	r3, #1
 80052e4:	e000      	b.n	80052e8 <HAL_RCC_OscConfig+0x620>
      }
    }
  }
  }

  return HAL_OK;
 80052e6:	2300      	movs	r3, #0
}
 80052e8:	4618      	mov	r0, r3
 80052ea:	3720      	adds	r7, #32
 80052ec:	46bd      	mov	sp, r7
 80052ee:	bd80      	pop	{r7, pc}
 80052f0:	40021000 	.word	0x40021000
 80052f4:	019f800c 	.word	0x019f800c

080052f8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052f8:	b580      	push	{r7, lr}
 80052fa:	b086      	sub	sp, #24
 80052fc:	af00      	add	r7, sp, #0
 80052fe:	6078      	str	r0, [r7, #4]
 8005300:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  uint32_t pllfreq;
  uint32_t hpre = RCC_SYSCLK_DIV1;
 8005302:	2300      	movs	r3, #0
 8005304:	617b      	str	r3, [r7, #20]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	2b00      	cmp	r3, #0
 800530a:	d101      	bne.n	8005310 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 800530c:	2301      	movs	r3, #1
 800530e:	e11e      	b.n	800554e <HAL_RCC_ClockConfig+0x256>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005310:	4b91      	ldr	r3, [pc, #580]	; (8005558 <HAL_RCC_ClockConfig+0x260>)
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	f003 030f 	and.w	r3, r3, #15
 8005318:	683a      	ldr	r2, [r7, #0]
 800531a:	429a      	cmp	r2, r3
 800531c:	d910      	bls.n	8005340 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800531e:	4b8e      	ldr	r3, [pc, #568]	; (8005558 <HAL_RCC_ClockConfig+0x260>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f023 020f 	bic.w	r2, r3, #15
 8005326:	498c      	ldr	r1, [pc, #560]	; (8005558 <HAL_RCC_ClockConfig+0x260>)
 8005328:	683b      	ldr	r3, [r7, #0]
 800532a:	4313      	orrs	r3, r2
 800532c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800532e:	4b8a      	ldr	r3, [pc, #552]	; (8005558 <HAL_RCC_ClockConfig+0x260>)
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	f003 030f 	and.w	r3, r3, #15
 8005336:	683a      	ldr	r2, [r7, #0]
 8005338:	429a      	cmp	r2, r3
 800533a:	d001      	beq.n	8005340 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 800533c:	2301      	movs	r3, #1
 800533e:	e106      	b.n	800554e <HAL_RCC_ClockConfig+0x256>
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	681b      	ldr	r3, [r3, #0]
 8005344:	f003 0301 	and.w	r3, r3, #1
 8005348:	2b00      	cmp	r3, #0
 800534a:	d073      	beq.n	8005434 <HAL_RCC_ClockConfig+0x13c>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	685b      	ldr	r3, [r3, #4]
 8005350:	2b03      	cmp	r3, #3
 8005352:	d129      	bne.n	80053a8 <HAL_RCC_ClockConfig+0xb0>
    {
      /* Check the PLL ready flag */
      if (READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8005354:	4b81      	ldr	r3, [pc, #516]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800535c:	2b00      	cmp	r3, #0
 800535e:	d101      	bne.n	8005364 <HAL_RCC_ClockConfig+0x6c>
      {
        return HAL_ERROR;
 8005360:	2301      	movs	r3, #1
 8005362:	e0f4      	b.n	800554e <HAL_RCC_ClockConfig+0x256>
      }
      /* Undershoot management when selection PLL as SYSCLK source and frequency above 80Mhz */
      /* Compute target PLL output frequency */
      pllfreq = RCC_GetSysClockFreqFromPLLSource();
 8005364:	f000 f9d0 	bl	8005708 <RCC_GetSysClockFreqFromPLLSource>
 8005368:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go over 80Mhz */
      if(pllfreq > 80000000U)
 800536a:	693b      	ldr	r3, [r7, #16]
 800536c:	4a7c      	ldr	r2, [pc, #496]	; (8005560 <HAL_RCC_ClockConfig+0x268>)
 800536e:	4293      	cmp	r3, r2
 8005370:	d93f      	bls.n	80053f2 <HAL_RCC_ClockConfig+0xfa>
      {
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005372:	4b7a      	ldr	r3, [pc, #488]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 8005374:	689b      	ldr	r3, [r3, #8]
 8005376:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800537a:	2b00      	cmp	r3, #0
 800537c:	d009      	beq.n	8005392 <HAL_RCC_ClockConfig+0x9a>
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	f003 0302 	and.w	r3, r3, #2
        if (((READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)) ||
 8005386:	2b00      	cmp	r3, #0
 8005388:	d033      	beq.n	80053f2 <HAL_RCC_ClockConfig+0xfa>
              (RCC_ClkInitStruct->AHBCLKDivider == RCC_SYSCLK_DIV1))))
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	689b      	ldr	r3, [r3, #8]
            (((((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK) &&
 800538e:	2b00      	cmp	r3, #0
 8005390:	d12f      	bne.n	80053f2 <HAL_RCC_ClockConfig+0xfa>
        {
          MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 8005392:	4b72      	ldr	r3, [pc, #456]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 8005394:	689b      	ldr	r3, [r3, #8]
 8005396:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800539a:	4a70      	ldr	r2, [pc, #448]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 800539c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053a0:	6093      	str	r3, [r2, #8]
          hpre = RCC_SYSCLK_DIV2;
 80053a2:	2380      	movs	r3, #128	; 0x80
 80053a4:	617b      	str	r3, [r7, #20]
 80053a6:	e024      	b.n	80053f2 <HAL_RCC_ClockConfig+0xfa>
      }
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80053a8:	687b      	ldr	r3, [r7, #4]
 80053aa:	685b      	ldr	r3, [r3, #4]
 80053ac:	2b02      	cmp	r3, #2
 80053ae:	d107      	bne.n	80053c0 <HAL_RCC_ClockConfig+0xc8>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 80053b0:	4b6a      	ldr	r3, [pc, #424]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053b8:	2b00      	cmp	r3, #0
 80053ba:	d109      	bne.n	80053d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053bc:	2301      	movs	r3, #1
 80053be:	e0c6      	b.n	800554e <HAL_RCC_ClockConfig+0x256>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 80053c0:	4b66      	ldr	r3, [pc, #408]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 80053c2:	681b      	ldr	r3, [r3, #0]
 80053c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053c8:	2b00      	cmp	r3, #0
 80053ca:	d101      	bne.n	80053d0 <HAL_RCC_ClockConfig+0xd8>
        {
          return HAL_ERROR;
 80053cc:	2301      	movs	r3, #1
 80053ce:	e0be      	b.n	800554e <HAL_RCC_ClockConfig+0x256>
        }
      }
      /* Overshoot management when going down from PLL as SYSCLK source and frequency above 80Mhz */
      pllfreq = HAL_RCC_GetSysClockFreq();
 80053d0:	f000 f8ce 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 80053d4:	6138      	str	r0, [r7, #16]

      /* Intermediate step with HCLK prescaler 2 necessary before to go under 80Mhz */
      if(pllfreq > 80000000U)
 80053d6:	693b      	ldr	r3, [r7, #16]
 80053d8:	4a61      	ldr	r2, [pc, #388]	; (8005560 <HAL_RCC_ClockConfig+0x268>)
 80053da:	4293      	cmp	r3, r2
 80053dc:	d909      	bls.n	80053f2 <HAL_RCC_ClockConfig+0xfa>
      {
        MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV2);
 80053de:	4b5f      	ldr	r3, [pc, #380]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 80053e0:	689b      	ldr	r3, [r3, #8]
 80053e2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80053e6:	4a5d      	ldr	r2, [pc, #372]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 80053e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80053ec:	6093      	str	r3, [r2, #8]
        hpre = RCC_SYSCLK_DIV2;
 80053ee:	2380      	movs	r3, #128	; 0x80
 80053f0:	617b      	str	r3, [r7, #20]
      }

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 80053f2:	4b5a      	ldr	r3, [pc, #360]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f023 0203 	bic.w	r2, r3, #3
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	4957      	ldr	r1, [pc, #348]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 8005400:	4313      	orrs	r3, r2
 8005402:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005404:	f7fd f96a 	bl	80026dc <HAL_GetTick>
 8005408:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800540a:	e00a      	b.n	8005422 <HAL_RCC_ClockConfig+0x12a>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800540c:	f7fd f966 	bl	80026dc <HAL_GetTick>
 8005410:	4602      	mov	r2, r0
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	f241 3288 	movw	r2, #5000	; 0x1388
 800541a:	4293      	cmp	r3, r2
 800541c:	d901      	bls.n	8005422 <HAL_RCC_ClockConfig+0x12a>
      {
        return HAL_TIMEOUT;
 800541e:	2303      	movs	r3, #3
 8005420:	e095      	b.n	800554e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005422:	4b4e      	ldr	r3, [pc, #312]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 8005424:	689b      	ldr	r3, [r3, #8]
 8005426:	f003 020c 	and.w	r2, r3, #12
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	685b      	ldr	r3, [r3, #4]
 800542e:	009b      	lsls	r3, r3, #2
 8005430:	429a      	cmp	r2, r3
 8005432:	d1eb      	bne.n	800540c <HAL_RCC_ClockConfig+0x114>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	681b      	ldr	r3, [r3, #0]
 8005438:	f003 0302 	and.w	r3, r3, #2
 800543c:	2b00      	cmp	r3, #0
 800543e:	d023      	beq.n	8005488 <HAL_RCC_ClockConfig+0x190>
  {
    /* Set the highest APB divider in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005440:	687b      	ldr	r3, [r7, #4]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	f003 0304 	and.w	r3, r3, #4
 8005448:	2b00      	cmp	r3, #0
 800544a:	d005      	beq.n	8005458 <HAL_RCC_ClockConfig+0x160>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800544c:	4b43      	ldr	r3, [pc, #268]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 800544e:	689b      	ldr	r3, [r3, #8]
 8005450:	4a42      	ldr	r2, [pc, #264]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 8005452:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005456:	6093      	str	r3, [r2, #8]
    }
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0308 	and.w	r3, r3, #8
 8005460:	2b00      	cmp	r3, #0
 8005462:	d007      	beq.n	8005474 <HAL_RCC_ClockConfig+0x17c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, RCC_HCLK_DIV16);
 8005464:	4b3d      	ldr	r3, [pc, #244]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 8005466:	689b      	ldr	r3, [r3, #8]
 8005468:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 800546c:	4a3b      	ldr	r2, [pc, #236]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 800546e:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8005472:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005474:	4b39      	ldr	r3, [pc, #228]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 8005476:	689b      	ldr	r3, [r3, #8]
 8005478:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	4936      	ldr	r1, [pc, #216]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 8005482:	4313      	orrs	r3, r2
 8005484:	608b      	str	r3, [r1, #8]
 8005486:	e008      	b.n	800549a <HAL_RCC_ClockConfig+0x1a2>
  }
  else
  {
    /* Is intermediate HCLK prescaler 2 applied internally, complete with HCLK prescaler 1 */
    if(hpre == RCC_SYSCLK_DIV2)
 8005488:	697b      	ldr	r3, [r7, #20]
 800548a:	2b80      	cmp	r3, #128	; 0x80
 800548c:	d105      	bne.n	800549a <HAL_RCC_ClockConfig+0x1a2>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_SYSCLK_DIV1);
 800548e:	4b33      	ldr	r3, [pc, #204]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 8005490:	689b      	ldr	r3, [r3, #8]
 8005492:	4a32      	ldr	r2, [pc, #200]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 8005494:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005498:	6093      	str	r3, [r2, #8]
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800549a:	4b2f      	ldr	r3, [pc, #188]	; (8005558 <HAL_RCC_ClockConfig+0x260>)
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	f003 030f 	and.w	r3, r3, #15
 80054a2:	683a      	ldr	r2, [r7, #0]
 80054a4:	429a      	cmp	r2, r3
 80054a6:	d21d      	bcs.n	80054e4 <HAL_RCC_ClockConfig+0x1ec>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054a8:	4b2b      	ldr	r3, [pc, #172]	; (8005558 <HAL_RCC_ClockConfig+0x260>)
 80054aa:	681b      	ldr	r3, [r3, #0]
 80054ac:	f023 020f 	bic.w	r2, r3, #15
 80054b0:	4929      	ldr	r1, [pc, #164]	; (8005558 <HAL_RCC_ClockConfig+0x260>)
 80054b2:	683b      	ldr	r3, [r7, #0]
 80054b4:	4313      	orrs	r3, r2
 80054b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 80054b8:	f7fd f910 	bl	80026dc <HAL_GetTick>
 80054bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054be:	e00a      	b.n	80054d6 <HAL_RCC_ClockConfig+0x1de>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80054c0:	f7fd f90c 	bl	80026dc <HAL_GetTick>
 80054c4:	4602      	mov	r2, r0
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	1ad3      	subs	r3, r2, r3
 80054ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80054ce:	4293      	cmp	r3, r2
 80054d0:	d901      	bls.n	80054d6 <HAL_RCC_ClockConfig+0x1de>
      {
        return HAL_TIMEOUT;
 80054d2:	2303      	movs	r3, #3
 80054d4:	e03b      	b.n	800554e <HAL_RCC_ClockConfig+0x256>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 80054d6:	4b20      	ldr	r3, [pc, #128]	; (8005558 <HAL_RCC_ClockConfig+0x260>)
 80054d8:	681b      	ldr	r3, [r3, #0]
 80054da:	f003 030f 	and.w	r3, r3, #15
 80054de:	683a      	ldr	r2, [r7, #0]
 80054e0:	429a      	cmp	r2, r3
 80054e2:	d1ed      	bne.n	80054c0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	681b      	ldr	r3, [r3, #0]
 80054e8:	f003 0304 	and.w	r3, r3, #4
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d008      	beq.n	8005502 <HAL_RCC_ClockConfig+0x20a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054f0:	4b1a      	ldr	r3, [pc, #104]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 80054f2:	689b      	ldr	r3, [r3, #8]
 80054f4:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	68db      	ldr	r3, [r3, #12]
 80054fc:	4917      	ldr	r1, [pc, #92]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 80054fe:	4313      	orrs	r3, r2
 8005500:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	681b      	ldr	r3, [r3, #0]
 8005506:	f003 0308 	and.w	r3, r3, #8
 800550a:	2b00      	cmp	r3, #0
 800550c:	d009      	beq.n	8005522 <HAL_RCC_ClockConfig+0x22a>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800550e:	4b13      	ldr	r3, [pc, #76]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 8005510:	689b      	ldr	r3, [r3, #8]
 8005512:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	691b      	ldr	r3, [r3, #16]
 800551a:	00db      	lsls	r3, r3, #3
 800551c:	490f      	ldr	r1, [pc, #60]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 800551e:	4313      	orrs	r3, r2
 8005520:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8005522:	f000 f825 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 8005526:	4602      	mov	r2, r0
 8005528:	4b0c      	ldr	r3, [pc, #48]	; (800555c <HAL_RCC_ClockConfig+0x264>)
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	091b      	lsrs	r3, r3, #4
 800552e:	f003 030f 	and.w	r3, r3, #15
 8005532:	490c      	ldr	r1, [pc, #48]	; (8005564 <HAL_RCC_ClockConfig+0x26c>)
 8005534:	5ccb      	ldrb	r3, [r1, r3]
 8005536:	f003 031f 	and.w	r3, r3, #31
 800553a:	fa22 f303 	lsr.w	r3, r2, r3
 800553e:	4a0a      	ldr	r2, [pc, #40]	; (8005568 <HAL_RCC_ClockConfig+0x270>)
 8005540:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  return HAL_InitTick(uwTickPrio);
 8005542:	4b0a      	ldr	r3, [pc, #40]	; (800556c <HAL_RCC_ClockConfig+0x274>)
 8005544:	681b      	ldr	r3, [r3, #0]
 8005546:	4618      	mov	r0, r3
 8005548:	f7fc f936 	bl	80017b8 <HAL_InitTick>
 800554c:	4603      	mov	r3, r0
}
 800554e:	4618      	mov	r0, r3
 8005550:	3718      	adds	r7, #24
 8005552:	46bd      	mov	sp, r7
 8005554:	bd80      	pop	{r7, pc}
 8005556:	bf00      	nop
 8005558:	40022000 	.word	0x40022000
 800555c:	40021000 	.word	0x40021000
 8005560:	04c4b400 	.word	0x04c4b400
 8005564:	0800c7c0 	.word	0x0800c7c0
 8005568:	20000000 	.word	0x20000000
 800556c:	200000c8 	.word	0x200000c8

08005570 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005570:	b480      	push	{r7}
 8005572:	b087      	sub	sp, #28
 8005574:	af00      	add	r7, sp, #0
  uint32_t pllvco, pllsource, pllr, pllm;
  uint32_t sysclockfreq;

  if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)
 8005576:	4b2c      	ldr	r3, [pc, #176]	; (8005628 <HAL_RCC_GetSysClockFreq+0xb8>)
 8005578:	689b      	ldr	r3, [r3, #8]
 800557a:	f003 030c 	and.w	r3, r3, #12
 800557e:	2b04      	cmp	r3, #4
 8005580:	d102      	bne.n	8005588 <HAL_RCC_GetSysClockFreq+0x18>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 8005582:	4b2a      	ldr	r3, [pc, #168]	; (800562c <HAL_RCC_GetSysClockFreq+0xbc>)
 8005584:	613b      	str	r3, [r7, #16]
 8005586:	e047      	b.n	8005618 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)
 8005588:	4b27      	ldr	r3, [pc, #156]	; (8005628 <HAL_RCC_GetSysClockFreq+0xb8>)
 800558a:	689b      	ldr	r3, [r3, #8]
 800558c:	f003 030c 	and.w	r3, r3, #12
 8005590:	2b08      	cmp	r3, #8
 8005592:	d102      	bne.n	800559a <HAL_RCC_GetSysClockFreq+0x2a>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 8005594:	4b26      	ldr	r3, [pc, #152]	; (8005630 <HAL_RCC_GetSysClockFreq+0xc0>)
 8005596:	613b      	str	r3, [r7, #16]
 8005598:	e03e      	b.n	8005618 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else if (__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL)
 800559a:	4b23      	ldr	r3, [pc, #140]	; (8005628 <HAL_RCC_GetSysClockFreq+0xb8>)
 800559c:	689b      	ldr	r3, [r3, #8]
 800559e:	f003 030c 	and.w	r3, r3, #12
 80055a2:	2b0c      	cmp	r3, #12
 80055a4:	d136      	bne.n	8005614 <HAL_RCC_GetSysClockFreq+0xa4>
    /* PLL used as system clock  source */

    /* PLL_VCO = ((HSE_VALUE or HSI_VALUE)/ PLLM) * PLLN
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80055a6:	4b20      	ldr	r3, [pc, #128]	; (8005628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055a8:	68db      	ldr	r3, [r3, #12]
 80055aa:	f003 0303 	and.w	r3, r3, #3
 80055ae:	60fb      	str	r3, [r7, #12]
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 80055b0:	4b1d      	ldr	r3, [pc, #116]	; (8005628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055b2:	68db      	ldr	r3, [r3, #12]
 80055b4:	091b      	lsrs	r3, r3, #4
 80055b6:	f003 030f 	and.w	r3, r3, #15
 80055ba:	3301      	adds	r3, #1
 80055bc:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	2b03      	cmp	r3, #3
 80055c2:	d10c      	bne.n	80055de <HAL_RCC_GetSysClockFreq+0x6e>
    {
    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055c4:	4a1a      	ldr	r2, [pc, #104]	; (8005630 <HAL_RCC_GetSysClockFreq+0xc0>)
 80055c6:	68bb      	ldr	r3, [r7, #8]
 80055c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80055cc:	4a16      	ldr	r2, [pc, #88]	; (8005628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055ce:	68d2      	ldr	r2, [r2, #12]
 80055d0:	0a12      	lsrs	r2, r2, #8
 80055d2:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055d6:	fb02 f303 	mul.w	r3, r2, r3
 80055da:	617b      	str	r3, [r7, #20]
      break;
 80055dc:	e00c      	b.n	80055f8 <HAL_RCC_GetSysClockFreq+0x88>

    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
    default:
      pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 80055de:	4a13      	ldr	r2, [pc, #76]	; (800562c <HAL_RCC_GetSysClockFreq+0xbc>)
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80055e6:	4a10      	ldr	r2, [pc, #64]	; (8005628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055e8:	68d2      	ldr	r2, [r2, #12]
 80055ea:	0a12      	lsrs	r2, r2, #8
 80055ec:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 80055f0:	fb02 f303 	mul.w	r3, r2, r3
 80055f4:	617b      	str	r3, [r7, #20]
      break;
 80055f6:	bf00      	nop
    }
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 80055f8:	4b0b      	ldr	r3, [pc, #44]	; (8005628 <HAL_RCC_GetSysClockFreq+0xb8>)
 80055fa:	68db      	ldr	r3, [r3, #12]
 80055fc:	0e5b      	lsrs	r3, r3, #25
 80055fe:	f003 0303 	and.w	r3, r3, #3
 8005602:	3301      	adds	r3, #1
 8005604:	005b      	lsls	r3, r3, #1
 8005606:	607b      	str	r3, [r7, #4]
    sysclockfreq = pllvco/pllr;
 8005608:	697a      	ldr	r2, [r7, #20]
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005610:	613b      	str	r3, [r7, #16]
 8005612:	e001      	b.n	8005618 <HAL_RCC_GetSysClockFreq+0xa8>
  }
  else
  {
    sysclockfreq = 0U;
 8005614:	2300      	movs	r3, #0
 8005616:	613b      	str	r3, [r7, #16]
  }

  return sysclockfreq;
 8005618:	693b      	ldr	r3, [r7, #16]
}
 800561a:	4618      	mov	r0, r3
 800561c:	371c      	adds	r7, #28
 800561e:	46bd      	mov	sp, r7
 8005620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005624:	4770      	bx	lr
 8005626:	bf00      	nop
 8005628:	40021000 	.word	0x40021000
 800562c:	00f42400 	.word	0x00f42400
 8005630:	016e3600 	.word	0x016e3600

08005634 <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005634:	b480      	push	{r7}
 8005636:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005638:	4b03      	ldr	r3, [pc, #12]	; (8005648 <HAL_RCC_GetHCLKFreq+0x14>)
 800563a:	681b      	ldr	r3, [r3, #0]
}
 800563c:	4618      	mov	r0, r3
 800563e:	46bd      	mov	sp, r7
 8005640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005644:	4770      	bx	lr
 8005646:	bf00      	nop
 8005648:	20000000 	.word	0x20000000

0800564c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8005650:	f7ff fff0 	bl	8005634 <HAL_RCC_GetHCLKFreq>
 8005654:	4602      	mov	r2, r0
 8005656:	4b06      	ldr	r3, [pc, #24]	; (8005670 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005658:	689b      	ldr	r3, [r3, #8]
 800565a:	0a1b      	lsrs	r3, r3, #8
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	4904      	ldr	r1, [pc, #16]	; (8005674 <HAL_RCC_GetPCLK1Freq+0x28>)
 8005662:	5ccb      	ldrb	r3, [r1, r3]
 8005664:	f003 031f 	and.w	r3, r3, #31
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40021000 	.word	0x40021000
 8005674:	0800c7d0 	.word	0x0800c7d0

08005678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 800567c:	f7ff ffda 	bl	8005634 <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b06      	ldr	r3, [pc, #24]	; (800569c <HAL_RCC_GetPCLK2Freq+0x24>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	0adb      	lsrs	r3, r3, #11
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4904      	ldr	r1, [pc, #16]	; (80056a0 <HAL_RCC_GetPCLK2Freq+0x28>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	f003 031f 	and.w	r3, r3, #31
 8005694:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005698:	4618      	mov	r0, r3
 800569a:	bd80      	pop	{r7, pc}
 800569c:	40021000 	.word	0x40021000
 80056a0:	0800c7d0 	.word	0x0800c7d0

080056a4 <HAL_RCC_GetClockConfig>:
  *         will be configured.
  * @param  pFLatency  Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80056a4:	b480      	push	{r7}
 80056a6:	b083      	sub	sp, #12
 80056a8:	af00      	add	r7, sp, #0
 80056aa:	6078      	str	r0, [r7, #4]
 80056ac:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(RCC_ClkInitStruct != (void  *)NULL);
  assert_param(pFLatency != (void *)NULL);

  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	220f      	movs	r2, #15
 80056b2:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = READ_BIT(RCC->CFGR, RCC_CFGR_SW);
 80056b4:	4b12      	ldr	r3, [pc, #72]	; (8005700 <HAL_RCC_GetClockConfig+0x5c>)
 80056b6:	689b      	ldr	r3, [r3, #8]
 80056b8:	f003 0203 	and.w	r2, r3, #3
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_HPRE);
 80056c0:	4b0f      	ldr	r3, [pc, #60]	; (8005700 <HAL_RCC_GetClockConfig+0x5c>)
 80056c2:	689b      	ldr	r3, [r3, #8]
 80056c4:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1);
 80056cc:	4b0c      	ldr	r3, [pc, #48]	; (8005700 <HAL_RCC_GetClockConfig+0x5c>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> 3U);
 80056d8:	4b09      	ldr	r3, [pc, #36]	; (8005700 <HAL_RCC_GetClockConfig+0x5c>)
 80056da:	689b      	ldr	r3, [r3, #8]
 80056dc:	08db      	lsrs	r3, r3, #3
 80056de:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80056e2:	687b      	ldr	r3, [r7, #4]
 80056e4:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = __HAL_FLASH_GET_LATENCY();
 80056e6:	4b07      	ldr	r3, [pc, #28]	; (8005704 <HAL_RCC_GetClockConfig+0x60>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	f003 020f 	and.w	r2, r3, #15
 80056ee:	683b      	ldr	r3, [r7, #0]
 80056f0:	601a      	str	r2, [r3, #0]
}
 80056f2:	bf00      	nop
 80056f4:	370c      	adds	r7, #12
 80056f6:	46bd      	mov	sp, r7
 80056f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fc:	4770      	bx	lr
 80056fe:	bf00      	nop
 8005700:	40021000 	.word	0x40021000
 8005704:	40022000 	.word	0x40022000

08005708 <RCC_GetSysClockFreqFromPLLSource>:
/**
  * @brief  Compute SYSCLK frequency based on PLL SYSCLK source.
  * @retval SYSCLK frequency
  */
static uint32_t RCC_GetSysClockFreqFromPLLSource(void)
{
 8005708:	b480      	push	{r7}
 800570a:	b087      	sub	sp, #28
 800570c:	af00      	add	r7, sp, #0
  uint32_t sysclockfreq;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE/ PLLM) * PLLN
     SYSCLK = PLL_VCO / PLLR
   */
  pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 800570e:	4b1e      	ldr	r3, [pc, #120]	; (8005788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005710:	68db      	ldr	r3, [r3, #12]
 8005712:	f003 0303 	and.w	r3, r3, #3
 8005716:	613b      	str	r3, [r7, #16]
  pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 8005718:	4b1b      	ldr	r3, [pc, #108]	; (8005788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 800571a:	68db      	ldr	r3, [r3, #12]
 800571c:	091b      	lsrs	r3, r3, #4
 800571e:	f003 030f 	and.w	r3, r3, #15
 8005722:	3301      	adds	r3, #1
 8005724:	60fb      	str	r3, [r7, #12]

  switch (pllsource)
 8005726:	693b      	ldr	r3, [r7, #16]
 8005728:	2b03      	cmp	r3, #3
 800572a:	d10c      	bne.n	8005746 <RCC_GetSysClockFreqFromPLLSource+0x3e>
  {
  case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
    pllvco = (HSE_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 800572c:	4a17      	ldr	r2, [pc, #92]	; (800578c <RCC_GetSysClockFreqFromPLLSource+0x84>)
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	fbb2 f3f3 	udiv	r3, r2, r3
 8005734:	4a14      	ldr	r2, [pc, #80]	; (8005788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005736:	68d2      	ldr	r2, [r2, #12]
 8005738:	0a12      	lsrs	r2, r2, #8
 800573a:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 800573e:	fb02 f303 	mul.w	r3, r2, r3
 8005742:	617b      	str	r3, [r7, #20]
    break;
 8005744:	e00c      	b.n	8005760 <RCC_GetSysClockFreqFromPLLSource+0x58>

  case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
  default:
    pllvco = (HSI_VALUE / pllm) * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos);
 8005746:	4a12      	ldr	r2, [pc, #72]	; (8005790 <RCC_GetSysClockFreqFromPLLSource+0x88>)
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	fbb2 f3f3 	udiv	r3, r2, r3
 800574e:	4a0e      	ldr	r2, [pc, #56]	; (8005788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005750:	68d2      	ldr	r2, [r2, #12]
 8005752:	0a12      	lsrs	r2, r2, #8
 8005754:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8005758:	fb02 f303 	mul.w	r3, r2, r3
 800575c:	617b      	str	r3, [r7, #20]
    break;
 800575e:	bf00      	nop
  }

  pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8005760:	4b09      	ldr	r3, [pc, #36]	; (8005788 <RCC_GetSysClockFreqFromPLLSource+0x80>)
 8005762:	68db      	ldr	r3, [r3, #12]
 8005764:	0e5b      	lsrs	r3, r3, #25
 8005766:	f003 0303 	and.w	r3, r3, #3
 800576a:	3301      	adds	r3, #1
 800576c:	005b      	lsls	r3, r3, #1
 800576e:	60bb      	str	r3, [r7, #8]
  sysclockfreq = pllvco/pllr;
 8005770:	697a      	ldr	r2, [r7, #20]
 8005772:	68bb      	ldr	r3, [r7, #8]
 8005774:	fbb2 f3f3 	udiv	r3, r2, r3
 8005778:	607b      	str	r3, [r7, #4]

  return sysclockfreq;
 800577a:	687b      	ldr	r3, [r7, #4]
}
 800577c:	4618      	mov	r0, r3
 800577e:	371c      	adds	r7, #28
 8005780:	46bd      	mov	sp, r7
 8005782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005786:	4770      	bx	lr
 8005788:	40021000 	.word	0x40021000
 800578c:	016e3600 	.word	0x016e3600
 8005790:	00f42400 	.word	0x00f42400

08005794 <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8005794:	b580      	push	{r7, lr}
 8005796:	b086      	sub	sp, #24
 8005798:	af00      	add	r7, sp, #0
 800579a:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800579c:	2300      	movs	r3, #0
 800579e:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80057a0:	2300      	movs	r3, #0
 80057a2:	74bb      	strb	r3, [r7, #18]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	681b      	ldr	r3, [r3, #0]
 80057a8:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	f000 8098 	beq.w	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80057b2:	2300      	movs	r3, #0
 80057b4:	747b      	strb	r3, [r7, #17]
    
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80057b6:	4b43      	ldr	r3, [pc, #268]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057b8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d10d      	bne.n	80057de <HAL_RCCEx_PeriphCLKConfig+0x4a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80057c2:	4b40      	ldr	r3, [pc, #256]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057c6:	4a3f      	ldr	r2, [pc, #252]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057cc:	6593      	str	r3, [r2, #88]	; 0x58
 80057ce:	4b3d      	ldr	r3, [pc, #244]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80057d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80057d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80057d6:	60bb      	str	r3, [r7, #8]
 80057d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80057da:	2301      	movs	r3, #1
 80057dc:	747b      	strb	r3, [r7, #17]
    }
      
    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80057de:	4b3a      	ldr	r3, [pc, #232]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057e0:	681b      	ldr	r3, [r3, #0]
 80057e2:	4a39      	ldr	r2, [pc, #228]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 80057e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80057e8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80057ea:	f7fc ff77 	bl	80026dc <HAL_GetTick>
 80057ee:	60f8      	str	r0, [r7, #12]

    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80057f0:	e009      	b.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x72>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80057f2:	f7fc ff73 	bl	80026dc <HAL_GetTick>
 80057f6:	4602      	mov	r2, r0
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	1ad3      	subs	r3, r2, r3
 80057fc:	2b02      	cmp	r3, #2
 80057fe:	d902      	bls.n	8005806 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        ret = HAL_TIMEOUT;
 8005800:	2303      	movs	r3, #3
 8005802:	74fb      	strb	r3, [r7, #19]
        break;
 8005804:	e005      	b.n	8005812 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    while((PWR->CR1 & PWR_CR1_DBP) == 0U)
 8005806:	4b30      	ldr	r3, [pc, #192]	; (80058c8 <HAL_RCCEx_PeriphCLKConfig+0x134>)
 8005808:	681b      	ldr	r3, [r3, #0]
 800580a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800580e:	2b00      	cmp	r3, #0
 8005810:	d0ef      	beq.n	80057f2 <HAL_RCCEx_PeriphCLKConfig+0x5e>
      }
    }

    if(ret == HAL_OK)
 8005812:	7cfb      	ldrb	r3, [r7, #19]
 8005814:	2b00      	cmp	r3, #0
 8005816:	d159      	bne.n	80058cc <HAL_RCCEx_PeriphCLKConfig+0x138>
    { 
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 8005818:	4b2a      	ldr	r3, [pc, #168]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 800581a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800581e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005822:	617b      	str	r3, [r7, #20]
      
      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8005824:	697b      	ldr	r3, [r7, #20]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d01e      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800582e:	697a      	ldr	r2, [r7, #20]
 8005830:	429a      	cmp	r2, r3
 8005832:	d019      	beq.n	8005868 <HAL_RCCEx_PeriphCLKConfig+0xd4>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8005834:	4b23      	ldr	r3, [pc, #140]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005836:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800583a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800583e:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8005840:	4b20      	ldr	r3, [pc, #128]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005846:	4a1f      	ldr	r2, [pc, #124]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005848:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800584c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8005850:	4b1c      	ldr	r3, [pc, #112]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005852:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005856:	4a1b      	ldr	r2, [pc, #108]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005858:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800585c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8005860:	4a18      	ldr	r2, [pc, #96]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005862:	697b      	ldr	r3, [r7, #20]
 8005864:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 8005868:	697b      	ldr	r3, [r7, #20]
 800586a:	f003 0301 	and.w	r3, r3, #1
 800586e:	2b00      	cmp	r3, #0
 8005870:	d016      	beq.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005872:	f7fc ff33 	bl	80026dc <HAL_GetTick>
 8005876:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005878:	e00b      	b.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xfe>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800587a:	f7fc ff2f 	bl	80026dc <HAL_GetTick>
 800587e:	4602      	mov	r2, r0
 8005880:	68fb      	ldr	r3, [r7, #12]
 8005882:	1ad3      	subs	r3, r2, r3
 8005884:	f241 3288 	movw	r2, #5000	; 0x1388
 8005888:	4293      	cmp	r3, r2
 800588a:	d902      	bls.n	8005892 <HAL_RCCEx_PeriphCLKConfig+0xfe>
          {
            ret = HAL_TIMEOUT;
 800588c:	2303      	movs	r3, #3
 800588e:	74fb      	strb	r3, [r7, #19]
            break;
 8005890:	e006      	b.n	80058a0 <HAL_RCCEx_PeriphCLKConfig+0x10c>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8005892:	4b0c      	ldr	r3, [pc, #48]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 8005894:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005898:	f003 0302 	and.w	r3, r3, #2
 800589c:	2b00      	cmp	r3, #0
 800589e:	d0ec      	beq.n	800587a <HAL_RCCEx_PeriphCLKConfig+0xe6>
          }
        }
      }
      
      if(ret == HAL_OK)
 80058a0:	7cfb      	ldrb	r3, [r7, #19]
 80058a2:	2b00      	cmp	r3, #0
 80058a4:	d10b      	bne.n	80058be <HAL_RCCEx_PeriphCLKConfig+0x12a>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80058a6:	4b07      	ldr	r3, [pc, #28]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80058ac:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058b4:	4903      	ldr	r1, [pc, #12]	; (80058c4 <HAL_RCCEx_PeriphCLKConfig+0x130>)
 80058b6:	4313      	orrs	r3, r2
 80058b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80058bc:	e008      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80058be:	7cfb      	ldrb	r3, [r7, #19]
 80058c0:	74bb      	strb	r3, [r7, #18]
 80058c2:	e005      	b.n	80058d0 <HAL_RCCEx_PeriphCLKConfig+0x13c>
 80058c4:	40021000 	.word	0x40021000
 80058c8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 80058cc:	7cfb      	ldrb	r3, [r7, #19]
 80058ce:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80058d0:	7c7b      	ldrb	r3, [r7, #17]
 80058d2:	2b01      	cmp	r3, #1
 80058d4:	d105      	bne.n	80058e2 <HAL_RCCEx_PeriphCLKConfig+0x14e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80058d6:	4ba7      	ldr	r3, [pc, #668]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058da:	4aa6      	ldr	r2, [pc, #664]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058dc:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80058e0:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	681b      	ldr	r3, [r3, #0]
 80058e6:	f003 0301 	and.w	r3, r3, #1
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d00a      	beq.n	8005904 <HAL_RCCEx_PeriphCLKConfig+0x170>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80058ee:	4ba1      	ldr	r3, [pc, #644]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058f0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80058f4:	f023 0203 	bic.w	r2, r3, #3
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	685b      	ldr	r3, [r3, #4]
 80058fc:	499d      	ldr	r1, [pc, #628]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80058fe:	4313      	orrs	r3, r2
 8005900:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8005904:	687b      	ldr	r3, [r7, #4]
 8005906:	681b      	ldr	r3, [r3, #0]
 8005908:	f003 0302 	and.w	r3, r3, #2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d00a      	beq.n	8005926 <HAL_RCCEx_PeriphCLKConfig+0x192>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8005910:	4b98      	ldr	r3, [pc, #608]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005912:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005916:	f023 020c 	bic.w	r2, r3, #12
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	4995      	ldr	r1, [pc, #596]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005920:	4313      	orrs	r3, r2
 8005922:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	681b      	ldr	r3, [r3, #0]
 800592a:	f003 0304 	and.w	r3, r3, #4
 800592e:	2b00      	cmp	r3, #0
 8005930:	d00a      	beq.n	8005948 <HAL_RCCEx_PeriphCLKConfig+0x1b4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8005932:	4b90      	ldr	r3, [pc, #576]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005934:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005938:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800593c:	687b      	ldr	r3, [r7, #4]
 800593e:	68db      	ldr	r3, [r3, #12]
 8005940:	498c      	ldr	r1, [pc, #560]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005942:	4313      	orrs	r3, r2
 8005944:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(UART4)
  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	f003 0308 	and.w	r3, r3, #8
 8005950:	2b00      	cmp	r3, #0
 8005952:	d00a      	beq.n	800596a <HAL_RCCEx_PeriphCLKConfig+0x1d6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8005954:	4b87      	ldr	r3, [pc, #540]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005956:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800595a:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	4984      	ldr	r1, [pc, #528]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005964:	4313      	orrs	r3, r2
 8005966:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681b      	ldr	r3, [r3, #0]
 800596e:	f003 0310 	and.w	r3, r3, #16
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00a      	beq.n	800598c <HAL_RCCEx_PeriphCLKConfig+0x1f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8005976:	4b7f      	ldr	r3, [pc, #508]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005978:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800597c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	695b      	ldr	r3, [r3, #20]
 8005984:	497b      	ldr	r1, [pc, #492]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005986:	4313      	orrs	r3, r2
 8005988:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	f003 0320 	and.w	r3, r3, #32
 8005994:	2b00      	cmp	r3, #0
 8005996:	d00a      	beq.n	80059ae <HAL_RCCEx_PeriphCLKConfig+0x21a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8005998:	4b76      	ldr	r3, [pc, #472]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 800599a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800599e:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	699b      	ldr	r3, [r3, #24]
 80059a6:	4973      	ldr	r1, [pc, #460]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059a8:	4313      	orrs	r3, r2
 80059aa:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	681b      	ldr	r3, [r3, #0]
 80059b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d00a      	beq.n	80059d0 <HAL_RCCEx_PeriphCLKConfig+0x23c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80059ba:	4b6e      	ldr	r3, [pc, #440]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059c0:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	69db      	ldr	r3, [r3, #28]
 80059c8:	496a      	ldr	r1, [pc, #424]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ca:	4313      	orrs	r3, r2
 80059cc:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80059d8:	2b00      	cmp	r3, #0
 80059da:	d00a      	beq.n	80059f2 <HAL_RCCEx_PeriphCLKConfig+0x25e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 80059dc:	4b65      	ldr	r3, [pc, #404]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80059e2:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80059e6:	687b      	ldr	r3, [r7, #4]
 80059e8:	6a1b      	ldr	r3, [r3, #32]
 80059ea:	4962      	ldr	r1, [pc, #392]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 80059ec:	4313      	orrs	r3, r2
 80059ee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	681b      	ldr	r3, [r3, #0]
 80059f6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d00a      	beq.n	8005a14 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 80059fe:	4b5d      	ldr	r3, [pc, #372]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a00:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a04:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8005a08:	687b      	ldr	r3, [r7, #4]
 8005a0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0c:	4959      	ldr	r1, [pc, #356]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a0e:	4313      	orrs	r3, r2
 8005a10:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C4)  

  /*-------------------------- I2C4 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	681b      	ldr	r3, [r3, #0]
 8005a18:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d00a      	beq.n	8005a36 <HAL_RCCEx_PeriphCLKConfig+0x2a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005a20:	4b54      	ldr	r3, [pc, #336]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a22:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005a26:	f023 0203 	bic.w	r2, r3, #3
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005a2e:	4951      	ldr	r1, [pc, #324]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a30:	4313      	orrs	r3, r2
 8005a32:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c
  }

#endif /* I2C4 */

  /*-------------------------- LPTIM1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8005a36:	687b      	ldr	r3, [r7, #4]
 8005a38:	681b      	ldr	r3, [r3, #0]
 8005a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005a3e:	2b00      	cmp	r3, #0
 8005a40:	d00a      	beq.n	8005a58 <HAL_RCCEx_PeriphCLKConfig+0x2c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLKSOURCE(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LPTIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8005a42:	4b4c      	ldr	r3, [pc, #304]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a44:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a48:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a50:	4948      	ldr	r1, [pc, #288]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a52:	4313      	orrs	r3, r2
 8005a54:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005a60:	2b00      	cmp	r3, #0
 8005a62:	d015      	beq.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure the SAI1 interface clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8005a64:	4b43      	ldr	r3, [pc, #268]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a66:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005a6a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a72:	4940      	ldr	r1, [pc, #256]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a74:	4313      	orrs	r3, r2
 8005a76:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLL)
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005a82:	d105      	bne.n	8005a90 <HAL_RCCEx_PeriphCLKConfig+0x2fc>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005a84:	4b3b      	ldr	r3, [pc, #236]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a86:	68db      	ldr	r3, [r3, #12]
 8005a88:	4a3a      	ldr	r2, [pc, #232]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a8a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005a8e:	60d3      	str	r3, [r2, #12]
    }
  }

  /*-------------------------- I2S clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S)
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d015      	beq.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x334>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure the I2S interface clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8005a9c:	4b35      	ldr	r3, [pc, #212]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005a9e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005aa2:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aaa:	4932      	ldr	r1, [pc, #200]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005aac:	4313      	orrs	r3, r2
 8005aae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLL)
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005ab6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005aba:	d105      	bne.n	8005ac8 <HAL_RCCEx_PeriphCLKConfig+0x334>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005abc:	4b2d      	ldr	r3, [pc, #180]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005abe:	68db      	ldr	r3, [r3, #12]
 8005ac0:	4a2c      	ldr	r2, [pc, #176]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ac2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005ac6:	60d3      	str	r3, [r2, #12]
    }
  }

#if defined(FDCAN1)
  /*-------------------------- FDCAN clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8005ad0:	2b00      	cmp	r3, #0
 8005ad2:	d015      	beq.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_FDCANCLKSOURCE(PeriphClkInit->FdcanClockSelection));

    /* Configure the FDCAN interface clock source */
    __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 8005ad4:	4b27      	ldr	r3, [pc, #156]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ad6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ada:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8005ade:	687b      	ldr	r3, [r7, #4]
 8005ae0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ae2:	4924      	ldr	r1, [pc, #144]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005ae4:	4313      	orrs	r3, r2
 8005ae6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->FdcanClockSelection == RCC_FDCANCLKSOURCE_PLL)
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005af2:	d105      	bne.n	8005b00 <HAL_RCCEx_PeriphCLKConfig+0x36c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005af4:	4b1f      	ldr	r3, [pc, #124]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005af6:	68db      	ldr	r3, [r3, #12]
 8005af8:	4a1e      	ldr	r2, [pc, #120]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005afa:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005afe:	60d3      	str	r3, [r2, #12]
#endif /* FDCAN1 */

#if defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	681b      	ldr	r3, [r3, #0]
 8005b04:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d015      	beq.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 8005b0c:	4b19      	ldr	r3, [pc, #100]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b0e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b12:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b1a:	4916      	ldr	r1, [pc, #88]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b1c:	4313      	orrs	r3, r2
 8005b1e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b26:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b2a:	d105      	bne.n	8005b38 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b2c:	4b11      	ldr	r3, [pc, #68]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b2e:	68db      	ldr	r3, [r3, #12]
 8005b30:	4a10      	ldr	r2, [pc, #64]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b32:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b36:	60d3      	str	r3, [r2, #12]
  }

#endif /* USB */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d019      	beq.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005b44:	4b0b      	ldr	r3, [pc, #44]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b4a:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b52:	4908      	ldr	r1, [pc, #32]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b54:	4313      	orrs	r3, r2
 8005b56:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b5e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005b62:	d109      	bne.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005b64:	4b03      	ldr	r3, [pc, #12]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b66:	68db      	ldr	r3, [r3, #12]
 8005b68:	4a02      	ldr	r2, [pc, #8]	; (8005b74 <HAL_RCCEx_PeriphCLKConfig+0x3e0>)
 8005b6a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005b6e:	60d3      	str	r3, [r2, #12]
 8005b70:	e002      	b.n	8005b78 <HAL_RCCEx_PeriphCLKConfig+0x3e4>
 8005b72:	bf00      	nop
 8005b74:	40021000 	.word	0x40021000
    }
  }

  /*-------------------------- ADC12 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC12) == RCC_PERIPHCLK_ADC12)
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8005b80:	2b00      	cmp	r3, #0
 8005b82:	d015      	beq.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC12CLKSOURCE(PeriphClkInit->Adc12ClockSelection));

    /* Configure the ADC12 interface clock source */
    __HAL_RCC_ADC12_CONFIG(PeriphClkInit->Adc12ClockSelection);
 8005b84:	4b29      	ldr	r3, [pc, #164]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b86:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005b8a:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b92:	4926      	ldr	r1, [pc, #152]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005b94:	4313      	orrs	r3, r2
 8005b96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc12ClockSelection == RCC_ADC12CLKSOURCE_PLL)
 8005b9a:	687b      	ldr	r3, [r7, #4]
 8005b9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b9e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005ba2:	d105      	bne.n	8005bb0 <HAL_RCCEx_PeriphCLKConfig+0x41c>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005ba4:	4b21      	ldr	r3, [pc, #132]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005ba6:	68db      	ldr	r3, [r3, #12]
 8005ba8:	4a20      	ldr	r2, [pc, #128]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005baa:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bae:	60d3      	str	r3, [r2, #12]
    }
  }
  
#if defined(ADC345_COMMON)
  /*-------------------------- ADC345 clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC345) == RCC_PERIPHCLK_ADC345)
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	681b      	ldr	r3, [r3, #0]
 8005bb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d015      	beq.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x454>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADC345CLKSOURCE(PeriphClkInit->Adc345ClockSelection));

    /* Configure the ADC345 interface clock source */
    __HAL_RCC_ADC345_CONFIG(PeriphClkInit->Adc345ClockSelection);
 8005bbc:	4b1b      	ldr	r3, [pc, #108]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bbe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005bc2:	f023 4240 	bic.w	r2, r3, #3221225472	; 0xc0000000
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bca:	4918      	ldr	r1, [pc, #96]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bcc:	4313      	orrs	r3, r2
 8005bce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    
    if(PeriphClkInit->Adc345ClockSelection == RCC_ADC345CLKSOURCE_PLL)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005bd6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005bda:	d105      	bne.n	8005be8 <HAL_RCCEx_PeriphCLKConfig+0x454>
    {
      /* Enable PLLADCCLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_ADCCLK);
 8005bdc:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bde:	68db      	ldr	r3, [r3, #12]
 8005be0:	4a12      	ldr	r2, [pc, #72]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005be2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be6:	60d3      	str	r3, [r2, #12]
#endif /* ADC345_COMMON */

#if defined(QUADSPI)

  /*-------------------------- QuadSPIx clock source configuration ----------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005bf0:	2b00      	cmp	r3, #0
 8005bf2:	d015      	beq.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_QSPICLKSOURCE(PeriphClkInit->QspiClockSelection));

    /* Configure the QuadSPI clock source */
    __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8005bf4:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005bf6:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005bfa:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c02:	490a      	ldr	r1, [pc, #40]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c04:	4313      	orrs	r3, r2
 8005c06:	f8c1 309c 	str.w	r3, [r1, #156]	; 0x9c

    if(PeriphClkInit->QspiClockSelection == RCC_QSPICLKSOURCE_PLL)
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005c12:	d105      	bne.n	8005c20 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8005c14:	4b05      	ldr	r3, [pc, #20]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c16:	68db      	ldr	r3, [r3, #12]
 8005c18:	4a04      	ldr	r2, [pc, #16]	; (8005c2c <HAL_RCCEx_PeriphCLKConfig+0x498>)
 8005c1a:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005c1e:	60d3      	str	r3, [r2, #12]
    }
  }

#endif /* QUADSPI */

  return status;
 8005c20:	7cbb      	ldrb	r3, [r7, #18]
}
 8005c22:	4618      	mov	r0, r3
 8005c24:	3718      	adds	r7, #24
 8005c26:	46bd      	mov	sp, r7
 8005c28:	bd80      	pop	{r7, pc}
 8005c2a:	bf00      	nop
 8005c2c:	40021000 	.word	0x40021000

08005c30 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005c30:	b580      	push	{r7, lr}
 8005c32:	b082      	sub	sp, #8
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d101      	bne.n	8005c42 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005c3e:	2301      	movs	r3, #1
 8005c40:	e049      	b.n	8005cd6 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c48:	b2db      	uxtb	r3, r3
 8005c4a:	2b00      	cmp	r3, #0
 8005c4c:	d106      	bne.n	8005c5c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	2200      	movs	r2, #0
 8005c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005c56:	6878      	ldr	r0, [r7, #4]
 8005c58:	f000 f841 	bl	8005cde <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2202      	movs	r2, #2
 8005c60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681a      	ldr	r2, [r3, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	3304      	adds	r3, #4
 8005c6c:	4619      	mov	r1, r3
 8005c6e:	4610      	mov	r0, r2
 8005c70:	f000 fd7a 	bl	8006768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	2201      	movs	r2, #1
 8005c78:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2201      	movs	r2, #1
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	2201      	movs	r2, #1
 8005c88:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2201      	movs	r2, #1
 8005c90:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2201      	movs	r2, #1
 8005ca0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	2201      	movs	r2, #1
 8005ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2201      	movs	r2, #1
 8005cb0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005cb4:	687b      	ldr	r3, [r7, #4]
 8005cb6:	2201      	movs	r2, #1
 8005cb8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	2201      	movs	r2, #1
 8005cc0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	2201      	movs	r2, #1
 8005cc8:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005cd4:	2300      	movs	r3, #0
}
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	3708      	adds	r7, #8
 8005cda:	46bd      	mov	sp, r7
 8005cdc:	bd80      	pop	{r7, pc}

08005cde <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8005cde:	b480      	push	{r7}
 8005ce0:	b083      	sub	sp, #12
 8005ce2:	af00      	add	r7, sp, #0
 8005ce4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8005ce6:	bf00      	nop
 8005ce8:	370c      	adds	r7, #12
 8005cea:	46bd      	mov	sp, r7
 8005cec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cf0:	4770      	bx	lr
	...

08005cf4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005cf4:	b480      	push	{r7}
 8005cf6:	b085      	sub	sp, #20
 8005cf8:	af00      	add	r7, sp, #0
 8005cfa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d02:	b2db      	uxtb	r3, r3
 8005d04:	2b01      	cmp	r3, #1
 8005d06:	d001      	beq.n	8005d0c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e054      	b.n	8005db6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	2202      	movs	r2, #2
 8005d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	681b      	ldr	r3, [r3, #0]
 8005d18:	68da      	ldr	r2, [r3, #12]
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	f042 0201 	orr.w	r2, r2, #1
 8005d22:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	4a26      	ldr	r2, [pc, #152]	; (8005dc4 <HAL_TIM_Base_Start_IT+0xd0>)
 8005d2a:	4293      	cmp	r3, r2
 8005d2c:	d022      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d36:	d01d      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	4a22      	ldr	r2, [pc, #136]	; (8005dc8 <HAL_TIM_Base_Start_IT+0xd4>)
 8005d3e:	4293      	cmp	r3, r2
 8005d40:	d018      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	4a21      	ldr	r2, [pc, #132]	; (8005dcc <HAL_TIM_Base_Start_IT+0xd8>)
 8005d48:	4293      	cmp	r3, r2
 8005d4a:	d013      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	4a1f      	ldr	r2, [pc, #124]	; (8005dd0 <HAL_TIM_Base_Start_IT+0xdc>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00e      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	4a1e      	ldr	r2, [pc, #120]	; (8005dd4 <HAL_TIM_Base_Start_IT+0xe0>)
 8005d5c:	4293      	cmp	r3, r2
 8005d5e:	d009      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a1c      	ldr	r2, [pc, #112]	; (8005dd8 <HAL_TIM_Base_Start_IT+0xe4>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d004      	beq.n	8005d74 <HAL_TIM_Base_Start_IT+0x80>
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	4a1b      	ldr	r2, [pc, #108]	; (8005ddc <HAL_TIM_Base_Start_IT+0xe8>)
 8005d70:	4293      	cmp	r3, r2
 8005d72:	d115      	bne.n	8005da0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	689a      	ldr	r2, [r3, #8]
 8005d7a:	4b19      	ldr	r3, [pc, #100]	; (8005de0 <HAL_TIM_Base_Start_IT+0xec>)
 8005d7c:	4013      	ands	r3, r2
 8005d7e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	2b06      	cmp	r3, #6
 8005d84:	d015      	beq.n	8005db2 <HAL_TIM_Base_Start_IT+0xbe>
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d8c:	d011      	beq.n	8005db2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	681b      	ldr	r3, [r3, #0]
 8005d92:	681a      	ldr	r2, [r3, #0]
 8005d94:	687b      	ldr	r3, [r7, #4]
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	f042 0201 	orr.w	r2, r2, #1
 8005d9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d9e:	e008      	b.n	8005db2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f042 0201 	orr.w	r2, r2, #1
 8005dae:	601a      	str	r2, [r3, #0]
 8005db0:	e000      	b.n	8005db4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005db2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8005db4:	2300      	movs	r3, #0
}
 8005db6:	4618      	mov	r0, r3
 8005db8:	3714      	adds	r7, #20
 8005dba:	46bd      	mov	sp, r7
 8005dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dc0:	4770      	bx	lr
 8005dc2:	bf00      	nop
 8005dc4:	40012c00 	.word	0x40012c00
 8005dc8:	40000400 	.word	0x40000400
 8005dcc:	40000800 	.word	0x40000800
 8005dd0:	40000c00 	.word	0x40000c00
 8005dd4:	40013400 	.word	0x40013400
 8005dd8:	40014000 	.word	0x40014000
 8005ddc:	40015000 	.word	0x40015000
 8005de0:	00010007 	.word	0x00010007

08005de4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005de4:	b580      	push	{r7, lr}
 8005de6:	b082      	sub	sp, #8
 8005de8:	af00      	add	r7, sp, #0
 8005dea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dec:	687b      	ldr	r3, [r7, #4]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d101      	bne.n	8005df6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005df2:	2301      	movs	r3, #1
 8005df4:	e049      	b.n	8005e8a <HAL_TIM_PWM_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b00      	cmp	r3, #0
 8005e00:	d106      	bne.n	8005e10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005e0a:	6878      	ldr	r0, [r7, #4]
 8005e0c:	f7fb ff82 	bl	8001d14 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2202      	movs	r2, #2
 8005e14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681a      	ldr	r2, [r3, #0]
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	3304      	adds	r3, #4
 8005e20:	4619      	mov	r1, r3
 8005e22:	4610      	mov	r0, r2
 8005e24:	f000 fca0 	bl	8006768 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	2201      	movs	r2, #1
 8005e64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	2201      	movs	r2, #1
 8005e6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	2201      	movs	r2, #1
 8005e74:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	2201      	movs	r2, #1
 8005e7c:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e80:	687b      	ldr	r3, [r7, #4]
 8005e82:	2201      	movs	r2, #1
 8005e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e88:	2300      	movs	r3, #0
}
 8005e8a:	4618      	mov	r0, r3
 8005e8c:	3708      	adds	r7, #8
 8005e8e:	46bd      	mov	sp, r7
 8005e90:	bd80      	pop	{r7, pc}
	...

08005e94 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e94:	b580      	push	{r7, lr}
 8005e96:	b084      	sub	sp, #16
 8005e98:	af00      	add	r7, sp, #0
 8005e9a:	6078      	str	r0, [r7, #4]
 8005e9c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d109      	bne.n	8005eb8 <HAL_TIM_PWM_Start+0x24>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	2b01      	cmp	r3, #1
 8005eae:	bf14      	ite	ne
 8005eb0:	2301      	movne	r3, #1
 8005eb2:	2300      	moveq	r3, #0
 8005eb4:	b2db      	uxtb	r3, r3
 8005eb6:	e03c      	b.n	8005f32 <HAL_TIM_PWM_Start+0x9e>
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	2b04      	cmp	r3, #4
 8005ebc:	d109      	bne.n	8005ed2 <HAL_TIM_PWM_Start+0x3e>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	2b01      	cmp	r3, #1
 8005ec8:	bf14      	ite	ne
 8005eca:	2301      	movne	r3, #1
 8005ecc:	2300      	moveq	r3, #0
 8005ece:	b2db      	uxtb	r3, r3
 8005ed0:	e02f      	b.n	8005f32 <HAL_TIM_PWM_Start+0x9e>
 8005ed2:	683b      	ldr	r3, [r7, #0]
 8005ed4:	2b08      	cmp	r3, #8
 8005ed6:	d109      	bne.n	8005eec <HAL_TIM_PWM_Start+0x58>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005ede:	b2db      	uxtb	r3, r3
 8005ee0:	2b01      	cmp	r3, #1
 8005ee2:	bf14      	ite	ne
 8005ee4:	2301      	movne	r3, #1
 8005ee6:	2300      	moveq	r3, #0
 8005ee8:	b2db      	uxtb	r3, r3
 8005eea:	e022      	b.n	8005f32 <HAL_TIM_PWM_Start+0x9e>
 8005eec:	683b      	ldr	r3, [r7, #0]
 8005eee:	2b0c      	cmp	r3, #12
 8005ef0:	d109      	bne.n	8005f06 <HAL_TIM_PWM_Start+0x72>
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ef8:	b2db      	uxtb	r3, r3
 8005efa:	2b01      	cmp	r3, #1
 8005efc:	bf14      	ite	ne
 8005efe:	2301      	movne	r3, #1
 8005f00:	2300      	moveq	r3, #0
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	e015      	b.n	8005f32 <HAL_TIM_PWM_Start+0x9e>
 8005f06:	683b      	ldr	r3, [r7, #0]
 8005f08:	2b10      	cmp	r3, #16
 8005f0a:	d109      	bne.n	8005f20 <HAL_TIM_PWM_Start+0x8c>
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005f12:	b2db      	uxtb	r3, r3
 8005f14:	2b01      	cmp	r3, #1
 8005f16:	bf14      	ite	ne
 8005f18:	2301      	movne	r3, #1
 8005f1a:	2300      	moveq	r3, #0
 8005f1c:	b2db      	uxtb	r3, r3
 8005f1e:	e008      	b.n	8005f32 <HAL_TIM_PWM_Start+0x9e>
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005f26:	b2db      	uxtb	r3, r3
 8005f28:	2b01      	cmp	r3, #1
 8005f2a:	bf14      	ite	ne
 8005f2c:	2301      	movne	r3, #1
 8005f2e:	2300      	moveq	r3, #0
 8005f30:	b2db      	uxtb	r3, r3
 8005f32:	2b00      	cmp	r3, #0
 8005f34:	d001      	beq.n	8005f3a <HAL_TIM_PWM_Start+0xa6>
  {
    return HAL_ERROR;
 8005f36:	2301      	movs	r3, #1
 8005f38:	e0a6      	b.n	8006088 <HAL_TIM_PWM_Start+0x1f4>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f3a:	683b      	ldr	r3, [r7, #0]
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d104      	bne.n	8005f4a <HAL_TIM_PWM_Start+0xb6>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	2202      	movs	r2, #2
 8005f44:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f48:	e023      	b.n	8005f92 <HAL_TIM_PWM_Start+0xfe>
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b04      	cmp	r3, #4
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIM_PWM_Start+0xc6>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f58:	e01b      	b.n	8005f92 <HAL_TIM_PWM_Start+0xfe>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b08      	cmp	r3, #8
 8005f5e:	d104      	bne.n	8005f6a <HAL_TIM_PWM_Start+0xd6>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f68:	e013      	b.n	8005f92 <HAL_TIM_PWM_Start+0xfe>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b0c      	cmp	r3, #12
 8005f6e:	d104      	bne.n	8005f7a <HAL_TIM_PWM_Start+0xe6>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8005f78:	e00b      	b.n	8005f92 <HAL_TIM_PWM_Start+0xfe>
 8005f7a:	683b      	ldr	r3, [r7, #0]
 8005f7c:	2b10      	cmp	r3, #16
 8005f7e:	d104      	bne.n	8005f8a <HAL_TIM_PWM_Start+0xf6>
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	2202      	movs	r2, #2
 8005f84:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f88:	e003      	b.n	8005f92 <HAL_TIM_PWM_Start+0xfe>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	2202      	movs	r2, #2
 8005f8e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	681b      	ldr	r3, [r3, #0]
 8005f96:	2201      	movs	r2, #1
 8005f98:	6839      	ldr	r1, [r7, #0]
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f001 f82a 	bl	8006ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a3a      	ldr	r2, [pc, #232]	; (8006090 <HAL_TIM_PWM_Start+0x1fc>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d018      	beq.n	8005fdc <HAL_TIM_PWM_Start+0x148>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	4a39      	ldr	r2, [pc, #228]	; (8006094 <HAL_TIM_PWM_Start+0x200>)
 8005fb0:	4293      	cmp	r3, r2
 8005fb2:	d013      	beq.n	8005fdc <HAL_TIM_PWM_Start+0x148>
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	681b      	ldr	r3, [r3, #0]
 8005fb8:	4a37      	ldr	r2, [pc, #220]	; (8006098 <HAL_TIM_PWM_Start+0x204>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d00e      	beq.n	8005fdc <HAL_TIM_PWM_Start+0x148>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	681b      	ldr	r3, [r3, #0]
 8005fc2:	4a36      	ldr	r2, [pc, #216]	; (800609c <HAL_TIM_PWM_Start+0x208>)
 8005fc4:	4293      	cmp	r3, r2
 8005fc6:	d009      	beq.n	8005fdc <HAL_TIM_PWM_Start+0x148>
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	4a34      	ldr	r2, [pc, #208]	; (80060a0 <HAL_TIM_PWM_Start+0x20c>)
 8005fce:	4293      	cmp	r3, r2
 8005fd0:	d004      	beq.n	8005fdc <HAL_TIM_PWM_Start+0x148>
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	681b      	ldr	r3, [r3, #0]
 8005fd6:	4a33      	ldr	r2, [pc, #204]	; (80060a4 <HAL_TIM_PWM_Start+0x210>)
 8005fd8:	4293      	cmp	r3, r2
 8005fda:	d101      	bne.n	8005fe0 <HAL_TIM_PWM_Start+0x14c>
 8005fdc:	2301      	movs	r3, #1
 8005fde:	e000      	b.n	8005fe2 <HAL_TIM_PWM_Start+0x14e>
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d007      	beq.n	8005ff6 <HAL_TIM_PWM_Start+0x162>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	681b      	ldr	r3, [r3, #0]
 8005fea:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	681b      	ldr	r3, [r3, #0]
 8005ff0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005ff4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	4a25      	ldr	r2, [pc, #148]	; (8006090 <HAL_TIM_PWM_Start+0x1fc>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d022      	beq.n	8006046 <HAL_TIM_PWM_Start+0x1b2>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006008:	d01d      	beq.n	8006046 <HAL_TIM_PWM_Start+0x1b2>
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	681b      	ldr	r3, [r3, #0]
 800600e:	4a26      	ldr	r2, [pc, #152]	; (80060a8 <HAL_TIM_PWM_Start+0x214>)
 8006010:	4293      	cmp	r3, r2
 8006012:	d018      	beq.n	8006046 <HAL_TIM_PWM_Start+0x1b2>
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	4a24      	ldr	r2, [pc, #144]	; (80060ac <HAL_TIM_PWM_Start+0x218>)
 800601a:	4293      	cmp	r3, r2
 800601c:	d013      	beq.n	8006046 <HAL_TIM_PWM_Start+0x1b2>
 800601e:	687b      	ldr	r3, [r7, #4]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	4a23      	ldr	r2, [pc, #140]	; (80060b0 <HAL_TIM_PWM_Start+0x21c>)
 8006024:	4293      	cmp	r3, r2
 8006026:	d00e      	beq.n	8006046 <HAL_TIM_PWM_Start+0x1b2>
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	4a19      	ldr	r2, [pc, #100]	; (8006094 <HAL_TIM_PWM_Start+0x200>)
 800602e:	4293      	cmp	r3, r2
 8006030:	d009      	beq.n	8006046 <HAL_TIM_PWM_Start+0x1b2>
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	681b      	ldr	r3, [r3, #0]
 8006036:	4a18      	ldr	r2, [pc, #96]	; (8006098 <HAL_TIM_PWM_Start+0x204>)
 8006038:	4293      	cmp	r3, r2
 800603a:	d004      	beq.n	8006046 <HAL_TIM_PWM_Start+0x1b2>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	4a18      	ldr	r2, [pc, #96]	; (80060a4 <HAL_TIM_PWM_Start+0x210>)
 8006042:	4293      	cmp	r3, r2
 8006044:	d115      	bne.n	8006072 <HAL_TIM_PWM_Start+0x1de>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	681b      	ldr	r3, [r3, #0]
 800604a:	689a      	ldr	r2, [r3, #8]
 800604c:	4b19      	ldr	r3, [pc, #100]	; (80060b4 <HAL_TIM_PWM_Start+0x220>)
 800604e:	4013      	ands	r3, r2
 8006050:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	2b06      	cmp	r3, #6
 8006056:	d015      	beq.n	8006084 <HAL_TIM_PWM_Start+0x1f0>
 8006058:	68fb      	ldr	r3, [r7, #12]
 800605a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800605e:	d011      	beq.n	8006084 <HAL_TIM_PWM_Start+0x1f0>
    {
      __HAL_TIM_ENABLE(htim);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	681b      	ldr	r3, [r3, #0]
 8006064:	681a      	ldr	r2, [r3, #0]
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	681b      	ldr	r3, [r3, #0]
 800606a:	f042 0201 	orr.w	r2, r2, #1
 800606e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006070:	e008      	b.n	8006084 <HAL_TIM_PWM_Start+0x1f0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	681b      	ldr	r3, [r3, #0]
 8006076:	681a      	ldr	r2, [r3, #0]
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	681b      	ldr	r3, [r3, #0]
 800607c:	f042 0201 	orr.w	r2, r2, #1
 8006080:	601a      	str	r2, [r3, #0]
 8006082:	e000      	b.n	8006086 <HAL_TIM_PWM_Start+0x1f2>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006084:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8006086:	2300      	movs	r3, #0
}
 8006088:	4618      	mov	r0, r3
 800608a:	3710      	adds	r7, #16
 800608c:	46bd      	mov	sp, r7
 800608e:	bd80      	pop	{r7, pc}
 8006090:	40012c00 	.word	0x40012c00
 8006094:	40013400 	.word	0x40013400
 8006098:	40014000 	.word	0x40014000
 800609c:	40014400 	.word	0x40014400
 80060a0:	40014800 	.word	0x40014800
 80060a4:	40015000 	.word	0x40015000
 80060a8:	40000400 	.word	0x40000400
 80060ac:	40000800 	.word	0x40000800
 80060b0:	40000c00 	.word	0x40000c00
 80060b4:	00010007 	.word	0x00010007

080060b8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_5: TIM Channel 5 selected
  *            @arg TIM_CHANNEL_6: TIM Channel 6 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b082      	sub	sp, #8
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
 80060c0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	2200      	movs	r2, #0
 80060c8:	6839      	ldr	r1, [r7, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 ff92 	bl	8006ff4 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a40      	ldr	r2, [pc, #256]	; (80061d8 <HAL_TIM_PWM_Stop+0x120>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d018      	beq.n	800610c <HAL_TIM_PWM_Stop+0x54>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a3f      	ldr	r2, [pc, #252]	; (80061dc <HAL_TIM_PWM_Stop+0x124>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d013      	beq.n	800610c <HAL_TIM_PWM_Stop+0x54>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a3d      	ldr	r2, [pc, #244]	; (80061e0 <HAL_TIM_PWM_Stop+0x128>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d00e      	beq.n	800610c <HAL_TIM_PWM_Stop+0x54>
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	681b      	ldr	r3, [r3, #0]
 80060f2:	4a3c      	ldr	r2, [pc, #240]	; (80061e4 <HAL_TIM_PWM_Stop+0x12c>)
 80060f4:	4293      	cmp	r3, r2
 80060f6:	d009      	beq.n	800610c <HAL_TIM_PWM_Stop+0x54>
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	4a3a      	ldr	r2, [pc, #232]	; (80061e8 <HAL_TIM_PWM_Stop+0x130>)
 80060fe:	4293      	cmp	r3, r2
 8006100:	d004      	beq.n	800610c <HAL_TIM_PWM_Stop+0x54>
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	4a39      	ldr	r2, [pc, #228]	; (80061ec <HAL_TIM_PWM_Stop+0x134>)
 8006108:	4293      	cmp	r3, r2
 800610a:	d101      	bne.n	8006110 <HAL_TIM_PWM_Stop+0x58>
 800610c:	2301      	movs	r3, #1
 800610e:	e000      	b.n	8006112 <HAL_TIM_PWM_Stop+0x5a>
 8006110:	2300      	movs	r3, #0
 8006112:	2b00      	cmp	r3, #0
 8006114:	d017      	beq.n	8006146 <HAL_TIM_PWM_Stop+0x8e>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	6a1a      	ldr	r2, [r3, #32]
 800611c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006120:	4013      	ands	r3, r2
 8006122:	2b00      	cmp	r3, #0
 8006124:	d10f      	bne.n	8006146 <HAL_TIM_PWM_Stop+0x8e>
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	681b      	ldr	r3, [r3, #0]
 800612a:	6a1a      	ldr	r2, [r3, #32]
 800612c:	f244 4344 	movw	r3, #17476	; 0x4444
 8006130:	4013      	ands	r3, r2
 8006132:	2b00      	cmp	r3, #0
 8006134:	d107      	bne.n	8006146 <HAL_TIM_PWM_Stop+0x8e>
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006144:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	6a1a      	ldr	r2, [r3, #32]
 800614c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006150:	4013      	ands	r3, r2
 8006152:	2b00      	cmp	r3, #0
 8006154:	d10f      	bne.n	8006176 <HAL_TIM_PWM_Stop+0xbe>
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	681b      	ldr	r3, [r3, #0]
 800615a:	6a1a      	ldr	r2, [r3, #32]
 800615c:	f244 4344 	movw	r3, #17476	; 0x4444
 8006160:	4013      	ands	r3, r2
 8006162:	2b00      	cmp	r3, #0
 8006164:	d107      	bne.n	8006176 <HAL_TIM_PWM_Stop+0xbe>
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	681a      	ldr	r2, [r3, #0]
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f022 0201 	bic.w	r2, r2, #1
 8006174:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006176:	683b      	ldr	r3, [r7, #0]
 8006178:	2b00      	cmp	r3, #0
 800617a:	d104      	bne.n	8006186 <HAL_TIM_PWM_Stop+0xce>
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	2201      	movs	r2, #1
 8006180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006184:	e023      	b.n	80061ce <HAL_TIM_PWM_Stop+0x116>
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	2b04      	cmp	r3, #4
 800618a:	d104      	bne.n	8006196 <HAL_TIM_PWM_Stop+0xde>
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	2201      	movs	r2, #1
 8006190:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006194:	e01b      	b.n	80061ce <HAL_TIM_PWM_Stop+0x116>
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b08      	cmp	r3, #8
 800619a:	d104      	bne.n	80061a6 <HAL_TIM_PWM_Stop+0xee>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061a4:	e013      	b.n	80061ce <HAL_TIM_PWM_Stop+0x116>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b0c      	cmp	r3, #12
 80061aa:	d104      	bne.n	80061b6 <HAL_TIM_PWM_Stop+0xfe>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 80061b4:	e00b      	b.n	80061ce <HAL_TIM_PWM_Stop+0x116>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b10      	cmp	r3, #16
 80061ba:	d104      	bne.n	80061c6 <HAL_TIM_PWM_Stop+0x10e>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061c4:	e003      	b.n	80061ce <HAL_TIM_PWM_Stop+0x116>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Return function status */
  return HAL_OK;
 80061ce:	2300      	movs	r3, #0
}
 80061d0:	4618      	mov	r0, r3
 80061d2:	3708      	adds	r7, #8
 80061d4:	46bd      	mov	sp, r7
 80061d6:	bd80      	pop	{r7, pc}
 80061d8:	40012c00 	.word	0x40012c00
 80061dc:	40013400 	.word	0x40013400
 80061e0:	40014000 	.word	0x40014000
 80061e4:	40014400 	.word	0x40014400
 80061e8:	40014800 	.word	0x40014800
 80061ec:	40015000 	.word	0x40015000

080061f0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80061f0:	b580      	push	{r7, lr}
 80061f2:	b082      	sub	sp, #8
 80061f4:	af00      	add	r7, sp, #0
 80061f6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80061f8:	687b      	ldr	r3, [r7, #4]
 80061fa:	681b      	ldr	r3, [r3, #0]
 80061fc:	691b      	ldr	r3, [r3, #16]
 80061fe:	f003 0302 	and.w	r3, r3, #2
 8006202:	2b02      	cmp	r3, #2
 8006204:	d122      	bne.n	800624c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	681b      	ldr	r3, [r3, #0]
 800620a:	68db      	ldr	r3, [r3, #12]
 800620c:	f003 0302 	and.w	r3, r3, #2
 8006210:	2b02      	cmp	r3, #2
 8006212:	d11b      	bne.n	800624c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	681b      	ldr	r3, [r3, #0]
 8006218:	f06f 0202 	mvn.w	r2, #2
 800621c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	2201      	movs	r2, #1
 8006222:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	699b      	ldr	r3, [r3, #24]
 800622a:	f003 0303 	and.w	r3, r3, #3
 800622e:	2b00      	cmp	r3, #0
 8006230:	d003      	beq.n	800623a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006232:	6878      	ldr	r0, [r7, #4]
 8006234:	f000 fa7a 	bl	800672c <HAL_TIM_IC_CaptureCallback>
 8006238:	e005      	b.n	8006246 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800623a:	6878      	ldr	r0, [r7, #4]
 800623c:	f000 fa6c 	bl	8006718 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006240:	6878      	ldr	r0, [r7, #4]
 8006242:	f000 fa7d 	bl	8006740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	2200      	movs	r2, #0
 800624a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	691b      	ldr	r3, [r3, #16]
 8006252:	f003 0304 	and.w	r3, r3, #4
 8006256:	2b04      	cmp	r3, #4
 8006258:	d122      	bne.n	80062a0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800625a:	687b      	ldr	r3, [r7, #4]
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	68db      	ldr	r3, [r3, #12]
 8006260:	f003 0304 	and.w	r3, r3, #4
 8006264:	2b04      	cmp	r3, #4
 8006266:	d11b      	bne.n	80062a0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006268:	687b      	ldr	r3, [r7, #4]
 800626a:	681b      	ldr	r3, [r3, #0]
 800626c:	f06f 0204 	mvn.w	r2, #4
 8006270:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	2202      	movs	r2, #2
 8006276:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	699b      	ldr	r3, [r3, #24]
 800627e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006282:	2b00      	cmp	r3, #0
 8006284:	d003      	beq.n	800628e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006286:	6878      	ldr	r0, [r7, #4]
 8006288:	f000 fa50 	bl	800672c <HAL_TIM_IC_CaptureCallback>
 800628c:	e005      	b.n	800629a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800628e:	6878      	ldr	r0, [r7, #4]
 8006290:	f000 fa42 	bl	8006718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006294:	6878      	ldr	r0, [r7, #4]
 8006296:	f000 fa53 	bl	8006740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2200      	movs	r2, #0
 800629e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	691b      	ldr	r3, [r3, #16]
 80062a6:	f003 0308 	and.w	r3, r3, #8
 80062aa:	2b08      	cmp	r3, #8
 80062ac:	d122      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	68db      	ldr	r3, [r3, #12]
 80062b4:	f003 0308 	and.w	r3, r3, #8
 80062b8:	2b08      	cmp	r3, #8
 80062ba:	d11b      	bne.n	80062f4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	f06f 0208 	mvn.w	r2, #8
 80062c4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	2204      	movs	r2, #4
 80062ca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	681b      	ldr	r3, [r3, #0]
 80062d0:	69db      	ldr	r3, [r3, #28]
 80062d2:	f003 0303 	and.w	r3, r3, #3
 80062d6:	2b00      	cmp	r3, #0
 80062d8:	d003      	beq.n	80062e2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062da:	6878      	ldr	r0, [r7, #4]
 80062dc:	f000 fa26 	bl	800672c <HAL_TIM_IC_CaptureCallback>
 80062e0:	e005      	b.n	80062ee <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062e2:	6878      	ldr	r0, [r7, #4]
 80062e4:	f000 fa18 	bl	8006718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062e8:	6878      	ldr	r0, [r7, #4]
 80062ea:	f000 fa29 	bl	8006740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	691b      	ldr	r3, [r3, #16]
 80062fa:	f003 0310 	and.w	r3, r3, #16
 80062fe:	2b10      	cmp	r3, #16
 8006300:	d122      	bne.n	8006348 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68db      	ldr	r3, [r3, #12]
 8006308:	f003 0310 	and.w	r3, r3, #16
 800630c:	2b10      	cmp	r3, #16
 800630e:	d11b      	bne.n	8006348 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006310:	687b      	ldr	r3, [r7, #4]
 8006312:	681b      	ldr	r3, [r3, #0]
 8006314:	f06f 0210 	mvn.w	r2, #16
 8006318:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	2208      	movs	r2, #8
 800631e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006320:	687b      	ldr	r3, [r7, #4]
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	69db      	ldr	r3, [r3, #28]
 8006326:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800632a:	2b00      	cmp	r3, #0
 800632c:	d003      	beq.n	8006336 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800632e:	6878      	ldr	r0, [r7, #4]
 8006330:	f000 f9fc 	bl	800672c <HAL_TIM_IC_CaptureCallback>
 8006334:	e005      	b.n	8006342 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006336:	6878      	ldr	r0, [r7, #4]
 8006338:	f000 f9ee 	bl	8006718 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800633c:	6878      	ldr	r0, [r7, #4]
 800633e:	f000 f9ff 	bl	8006740 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006342:	687b      	ldr	r3, [r7, #4]
 8006344:	2200      	movs	r2, #0
 8006346:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	691b      	ldr	r3, [r3, #16]
 800634e:	f003 0301 	and.w	r3, r3, #1
 8006352:	2b01      	cmp	r3, #1
 8006354:	d10e      	bne.n	8006374 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	68db      	ldr	r3, [r3, #12]
 800635c:	f003 0301 	and.w	r3, r3, #1
 8006360:	2b01      	cmp	r3, #1
 8006362:	d107      	bne.n	8006374 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	681b      	ldr	r3, [r3, #0]
 8006368:	f06f 0201 	mvn.w	r2, #1
 800636c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800636e:	6878      	ldr	r0, [r7, #4]
 8006370:	f7fb f9e6 	bl	8001740 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	691b      	ldr	r3, [r3, #16]
 800637a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800637e:	2b80      	cmp	r3, #128	; 0x80
 8006380:	d10e      	bne.n	80063a0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	68db      	ldr	r3, [r3, #12]
 8006388:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800638c:	2b80      	cmp	r3, #128	; 0x80
 800638e:	d107      	bne.n	80063a0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006398:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800639a:	6878      	ldr	r0, [r7, #4]
 800639c:	f001 f970 	bl	8007680 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	691b      	ldr	r3, [r3, #16]
 80063a6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80063aa:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80063ae:	d10e      	bne.n	80063ce <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	68db      	ldr	r3, [r3, #12]
 80063b6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ba:	2b80      	cmp	r3, #128	; 0x80
 80063bc:	d107      	bne.n	80063ce <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 80063c6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 80063c8:	6878      	ldr	r0, [r7, #4]
 80063ca:	f001 f963 	bl	8007694 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	691b      	ldr	r3, [r3, #16]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	d10e      	bne.n	80063fa <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	68db      	ldr	r3, [r3, #12]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d107      	bne.n	80063fa <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063f2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063f4:	6878      	ldr	r0, [r7, #4]
 80063f6:	f000 f9ad 	bl	8006754 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	691b      	ldr	r3, [r3, #16]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b20      	cmp	r3, #32
 8006406:	d10e      	bne.n	8006426 <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	68db      	ldr	r3, [r3, #12]
 800640e:	f003 0320 	and.w	r3, r3, #32
 8006412:	2b20      	cmp	r3, #32
 8006414:	d107      	bne.n	8006426 <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	681b      	ldr	r3, [r3, #0]
 800641a:	f06f 0220 	mvn.w	r2, #32
 800641e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006420:	6878      	ldr	r0, [r7, #4]
 8006422:	f001 f923 	bl	800766c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Encoder index event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IDX) != RESET)
 8006426:	687b      	ldr	r3, [r7, #4]
 8006428:	681b      	ldr	r3, [r3, #0]
 800642a:	691b      	ldr	r3, [r3, #16]
 800642c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006430:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006434:	d10f      	bne.n	8006456 <HAL_TIM_IRQHandler+0x266>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IDX) != RESET)
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	681b      	ldr	r3, [r3, #0]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006440:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006444:	d107      	bne.n	8006456 <HAL_TIM_IRQHandler+0x266>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IDX);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	f46f 1280 	mvn.w	r2, #1048576	; 0x100000
 800644e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->EncoderIndexCallback(htim);
#else
      HAL_TIMEx_EncoderIndexCallback(htim);
 8006450:	6878      	ldr	r0, [r7, #4]
 8006452:	f001 f929 	bl	80076a8 <HAL_TIMEx_EncoderIndexCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Direction change event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_DIR) != RESET)
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	691b      	ldr	r3, [r3, #16]
 800645c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006460:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006464:	d10f      	bne.n	8006486 <HAL_TIM_IRQHandler+0x296>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_DIR) != RESET)
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	68db      	ldr	r3, [r3, #12]
 800646c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006470:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8006474:	d107      	bne.n	8006486 <HAL_TIM_IRQHandler+0x296>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_DIR);
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	681b      	ldr	r3, [r3, #0]
 800647a:	f46f 1200 	mvn.w	r2, #2097152	; 0x200000
 800647e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->DirectionChangeCallback(htim);
#else
      HAL_TIMEx_DirectionChangeCallback(htim);
 8006480:	6878      	ldr	r0, [r7, #4]
 8006482:	f001 f91b 	bl	80076bc <HAL_TIMEx_DirectionChangeCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Index error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_IERR) != RESET)
 8006486:	687b      	ldr	r3, [r7, #4]
 8006488:	681b      	ldr	r3, [r3, #0]
 800648a:	691b      	ldr	r3, [r3, #16]
 800648c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006490:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006494:	d10f      	bne.n	80064b6 <HAL_TIM_IRQHandler+0x2c6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_IERR) != RESET)
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	68db      	ldr	r3, [r3, #12]
 800649c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80064a0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80064a4:	d107      	bne.n	80064b6 <HAL_TIM_IRQHandler+0x2c6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_IERR);
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	f46f 0280 	mvn.w	r2, #4194304	; 0x400000
 80064ae:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->IndexErrorCallback(htim);
#else
      HAL_TIMEx_IndexErrorCallback(htim);
 80064b0:	6878      	ldr	r0, [r7, #4]
 80064b2:	f001 f90d 	bl	80076d0 <HAL_TIMEx_IndexErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Transition error event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TERR) != RESET)
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064c0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064c4:	d10f      	bne.n	80064e6 <HAL_TIM_IRQHandler+0x2f6>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TERR) != RESET)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	681b      	ldr	r3, [r3, #0]
 80064ca:	68db      	ldr	r3, [r3, #12]
 80064cc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80064d0:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80064d4:	d107      	bne.n	80064e6 <HAL_TIM_IRQHandler+0x2f6>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_TERR);
 80064d6:	687b      	ldr	r3, [r7, #4]
 80064d8:	681b      	ldr	r3, [r3, #0]
 80064da:	f46f 0200 	mvn.w	r2, #8388608	; 0x800000
 80064de:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TransitionErrorCallback(htim);
#else
      HAL_TIMEx_TransitionErrorCallback(htim);
 80064e0:	6878      	ldr	r0, [r7, #4]
 80064e2:	f001 f8ff 	bl	80076e4 <HAL_TIMEx_TransitionErrorCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80064e6:	bf00      	nop
 80064e8:	3708      	adds	r7, #8
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}
	...

080064f0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80064f0:	b580      	push	{r7, lr}
 80064f2:	b086      	sub	sp, #24
 80064f4:	af00      	add	r7, sp, #0
 80064f6:	60f8      	str	r0, [r7, #12]
 80064f8:	60b9      	str	r1, [r7, #8]
 80064fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80064fc:	2300      	movs	r3, #0
 80064fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006500:	68fb      	ldr	r3, [r7, #12]
 8006502:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006506:	2b01      	cmp	r3, #1
 8006508:	d101      	bne.n	800650e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800650a:	2302      	movs	r3, #2
 800650c:	e0ff      	b.n	800670e <HAL_TIM_PWM_ConfigChannel+0x21e>
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	2201      	movs	r2, #1
 8006512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2b14      	cmp	r3, #20
 800651a:	f200 80f0 	bhi.w	80066fe <HAL_TIM_PWM_ConfigChannel+0x20e>
 800651e:	a201      	add	r2, pc, #4	; (adr r2, 8006524 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006520:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006524:	08006579 	.word	0x08006579
 8006528:	080066ff 	.word	0x080066ff
 800652c:	080066ff 	.word	0x080066ff
 8006530:	080066ff 	.word	0x080066ff
 8006534:	080065b9 	.word	0x080065b9
 8006538:	080066ff 	.word	0x080066ff
 800653c:	080066ff 	.word	0x080066ff
 8006540:	080066ff 	.word	0x080066ff
 8006544:	080065fb 	.word	0x080065fb
 8006548:	080066ff 	.word	0x080066ff
 800654c:	080066ff 	.word	0x080066ff
 8006550:	080066ff 	.word	0x080066ff
 8006554:	0800663b 	.word	0x0800663b
 8006558:	080066ff 	.word	0x080066ff
 800655c:	080066ff 	.word	0x080066ff
 8006560:	080066ff 	.word	0x080066ff
 8006564:	0800667d 	.word	0x0800667d
 8006568:	080066ff 	.word	0x080066ff
 800656c:	080066ff 	.word	0x080066ff
 8006570:	080066ff 	.word	0x080066ff
 8006574:	080066bd 	.word	0x080066bd
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	68b9      	ldr	r1, [r7, #8]
 800657e:	4618      	mov	r0, r3
 8006580:	f000 f99a 	bl	80068b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006584:	68fb      	ldr	r3, [r7, #12]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	699a      	ldr	r2, [r3, #24]
 800658a:	68fb      	ldr	r3, [r7, #12]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f042 0208 	orr.w	r2, r2, #8
 8006592:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006594:	68fb      	ldr	r3, [r7, #12]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	699a      	ldr	r2, [r3, #24]
 800659a:	68fb      	ldr	r3, [r7, #12]
 800659c:	681b      	ldr	r3, [r3, #0]
 800659e:	f022 0204 	bic.w	r2, r2, #4
 80065a2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065a4:	68fb      	ldr	r3, [r7, #12]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	6999      	ldr	r1, [r3, #24]
 80065aa:	68bb      	ldr	r3, [r7, #8]
 80065ac:	691a      	ldr	r2, [r3, #16]
 80065ae:	68fb      	ldr	r3, [r7, #12]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	430a      	orrs	r2, r1
 80065b4:	619a      	str	r2, [r3, #24]
      break;
 80065b6:	e0a5      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	68b9      	ldr	r1, [r7, #8]
 80065be:	4618      	mov	r0, r3
 80065c0:	f000 fa14 	bl	80069ec <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	699a      	ldr	r2, [r3, #24]
 80065ca:	68fb      	ldr	r3, [r7, #12]
 80065cc:	681b      	ldr	r3, [r3, #0]
 80065ce:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80065d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	681b      	ldr	r3, [r3, #0]
 80065d8:	699a      	ldr	r2, [r3, #24]
 80065da:	68fb      	ldr	r3, [r7, #12]
 80065dc:	681b      	ldr	r3, [r3, #0]
 80065de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80065e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80065e4:	68fb      	ldr	r3, [r7, #12]
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	6999      	ldr	r1, [r3, #24]
 80065ea:	68bb      	ldr	r3, [r7, #8]
 80065ec:	691b      	ldr	r3, [r3, #16]
 80065ee:	021a      	lsls	r2, r3, #8
 80065f0:	68fb      	ldr	r3, [r7, #12]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	430a      	orrs	r2, r1
 80065f6:	619a      	str	r2, [r3, #24]
      break;
 80065f8:	e084      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80065fa:	68fb      	ldr	r3, [r7, #12]
 80065fc:	681b      	ldr	r3, [r3, #0]
 80065fe:	68b9      	ldr	r1, [r7, #8]
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fa87 	bl	8006b14 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006606:	68fb      	ldr	r3, [r7, #12]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	69da      	ldr	r2, [r3, #28]
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f042 0208 	orr.w	r2, r2, #8
 8006614:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006616:	68fb      	ldr	r3, [r7, #12]
 8006618:	681b      	ldr	r3, [r3, #0]
 800661a:	69da      	ldr	r2, [r3, #28]
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	f022 0204 	bic.w	r2, r2, #4
 8006624:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006626:	68fb      	ldr	r3, [r7, #12]
 8006628:	681b      	ldr	r3, [r3, #0]
 800662a:	69d9      	ldr	r1, [r3, #28]
 800662c:	68bb      	ldr	r3, [r7, #8]
 800662e:	691a      	ldr	r2, [r3, #16]
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	430a      	orrs	r2, r1
 8006636:	61da      	str	r2, [r3, #28]
      break;
 8006638:	e064      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800663a:	68fb      	ldr	r3, [r7, #12]
 800663c:	681b      	ldr	r3, [r3, #0]
 800663e:	68b9      	ldr	r1, [r7, #8]
 8006640:	4618      	mov	r0, r3
 8006642:	f000 faf9 	bl	8006c38 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006646:	68fb      	ldr	r3, [r7, #12]
 8006648:	681b      	ldr	r3, [r3, #0]
 800664a:	69da      	ldr	r2, [r3, #28]
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006654:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	69da      	ldr	r2, [r3, #28]
 800665c:	68fb      	ldr	r3, [r7, #12]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006664:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006666:	68fb      	ldr	r3, [r7, #12]
 8006668:	681b      	ldr	r3, [r3, #0]
 800666a:	69d9      	ldr	r1, [r3, #28]
 800666c:	68bb      	ldr	r3, [r7, #8]
 800666e:	691b      	ldr	r3, [r3, #16]
 8006670:	021a      	lsls	r2, r3, #8
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	430a      	orrs	r2, r1
 8006678:	61da      	str	r2, [r3, #28]
      break;
 800667a:	e043      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC5_INSTANCE(htim->Instance));

      /* Configure the Channel 5 in PWM mode */
      TIM_OC5_SetConfig(htim->Instance, sConfig);
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	681b      	ldr	r3, [r3, #0]
 8006680:	68b9      	ldr	r1, [r7, #8]
 8006682:	4618      	mov	r0, r3
 8006684:	f000 fb6c 	bl	8006d60 <TIM_OC5_SetConfig>

      /* Set the Preload enable bit for channel5*/
      htim->Instance->CCMR3 |= TIM_CCMR3_OC5PE;
 8006688:	68fb      	ldr	r3, [r7, #12]
 800668a:	681b      	ldr	r3, [r3, #0]
 800668c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	f042 0208 	orr.w	r2, r2, #8
 8006696:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC5FE;
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f022 0204 	bic.w	r2, r2, #4
 80066a6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80066ae:	68bb      	ldr	r3, [r7, #8]
 80066b0:	691a      	ldr	r2, [r3, #16]
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	430a      	orrs	r2, r1
 80066b8:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80066ba:	e023      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x214>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC6_INSTANCE(htim->Instance));

      /* Configure the Channel 6 in PWM mode */
      TIM_OC6_SetConfig(htim->Instance, sConfig);
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	681b      	ldr	r3, [r3, #0]
 80066c0:	68b9      	ldr	r1, [r7, #8]
 80066c2:	4618      	mov	r0, r3
 80066c4:	f000 fbb6 	bl	8006e34 <TIM_OC6_SetConfig>

      /* Set the Preload enable bit for channel6 */
      htim->Instance->CCMR3 |= TIM_CCMR3_OC6PE;
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80066d6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Configure the Output Fast mode */
      htim->Instance->CCMR3 &= ~TIM_CCMR3_OC6FE;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	681b      	ldr	r3, [r3, #0]
 80066dc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066e6:	651a      	str	r2, [r3, #80]	; 0x50
      htim->Instance->CCMR3 |= sConfig->OCFastMode << 8U;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	681b      	ldr	r3, [r3, #0]
 80066ec:	6d19      	ldr	r1, [r3, #80]	; 0x50
 80066ee:	68bb      	ldr	r3, [r7, #8]
 80066f0:	691b      	ldr	r3, [r3, #16]
 80066f2:	021a      	lsls	r2, r3, #8
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	681b      	ldr	r3, [r3, #0]
 80066f8:	430a      	orrs	r2, r1
 80066fa:	651a      	str	r2, [r3, #80]	; 0x50
      break;
 80066fc:	e002      	b.n	8006704 <HAL_TIM_PWM_ConfigChannel+0x214>
    }

    default:
      status = HAL_ERROR;
 80066fe:	2301      	movs	r3, #1
 8006700:	75fb      	strb	r3, [r7, #23]
      break;
 8006702:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	2200      	movs	r2, #0
 8006708:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800670c:	7dfb      	ldrb	r3, [r7, #23]
}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop

08006718 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006718:	b480      	push	{r7}
 800671a:	b083      	sub	sp, #12
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006720:	bf00      	nop
 8006722:	370c      	adds	r7, #12
 8006724:	46bd      	mov	sp, r7
 8006726:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672a:	4770      	bx	lr

0800672c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800672c:	b480      	push	{r7}
 800672e:	b083      	sub	sp, #12
 8006730:	af00      	add	r7, sp, #0
 8006732:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006734:	bf00      	nop
 8006736:	370c      	adds	r7, #12
 8006738:	46bd      	mov	sp, r7
 800673a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800673e:	4770      	bx	lr

08006740 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006740:	b480      	push	{r7}
 8006742:	b083      	sub	sp, #12
 8006744:	af00      	add	r7, sp, #0
 8006746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006748:	bf00      	nop
 800674a:	370c      	adds	r7, #12
 800674c:	46bd      	mov	sp, r7
 800674e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006752:	4770      	bx	lr

08006754 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800675c:	bf00      	nop
 800675e:	370c      	adds	r7, #12
 8006760:	46bd      	mov	sp, r7
 8006762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006766:	4770      	bx	lr

08006768 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006768:	b480      	push	{r7}
 800676a:	b085      	sub	sp, #20
 800676c:	af00      	add	r7, sp, #0
 800676e:	6078      	str	r0, [r7, #4]
 8006770:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	681b      	ldr	r3, [r3, #0]
 8006776:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a46      	ldr	r2, [pc, #280]	; (8006894 <TIM_Base_SetConfig+0x12c>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d017      	beq.n	80067b0 <TIM_Base_SetConfig+0x48>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006786:	d013      	beq.n	80067b0 <TIM_Base_SetConfig+0x48>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	4a43      	ldr	r2, [pc, #268]	; (8006898 <TIM_Base_SetConfig+0x130>)
 800678c:	4293      	cmp	r3, r2
 800678e:	d00f      	beq.n	80067b0 <TIM_Base_SetConfig+0x48>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	4a42      	ldr	r2, [pc, #264]	; (800689c <TIM_Base_SetConfig+0x134>)
 8006794:	4293      	cmp	r3, r2
 8006796:	d00b      	beq.n	80067b0 <TIM_Base_SetConfig+0x48>
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	4a41      	ldr	r2, [pc, #260]	; (80068a0 <TIM_Base_SetConfig+0x138>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d007      	beq.n	80067b0 <TIM_Base_SetConfig+0x48>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	4a40      	ldr	r2, [pc, #256]	; (80068a4 <TIM_Base_SetConfig+0x13c>)
 80067a4:	4293      	cmp	r3, r2
 80067a6:	d003      	beq.n	80067b0 <TIM_Base_SetConfig+0x48>
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	4a3f      	ldr	r2, [pc, #252]	; (80068a8 <TIM_Base_SetConfig+0x140>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d108      	bne.n	80067c2 <TIM_Base_SetConfig+0x5a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80067b6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685b      	ldr	r3, [r3, #4]
 80067bc:	68fa      	ldr	r2, [r7, #12]
 80067be:	4313      	orrs	r3, r2
 80067c0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	4a33      	ldr	r2, [pc, #204]	; (8006894 <TIM_Base_SetConfig+0x12c>)
 80067c6:	4293      	cmp	r3, r2
 80067c8:	d023      	beq.n	8006812 <TIM_Base_SetConfig+0xaa>
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80067d0:	d01f      	beq.n	8006812 <TIM_Base_SetConfig+0xaa>
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	4a30      	ldr	r2, [pc, #192]	; (8006898 <TIM_Base_SetConfig+0x130>)
 80067d6:	4293      	cmp	r3, r2
 80067d8:	d01b      	beq.n	8006812 <TIM_Base_SetConfig+0xaa>
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	4a2f      	ldr	r2, [pc, #188]	; (800689c <TIM_Base_SetConfig+0x134>)
 80067de:	4293      	cmp	r3, r2
 80067e0:	d017      	beq.n	8006812 <TIM_Base_SetConfig+0xaa>
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	4a2e      	ldr	r2, [pc, #184]	; (80068a0 <TIM_Base_SetConfig+0x138>)
 80067e6:	4293      	cmp	r3, r2
 80067e8:	d013      	beq.n	8006812 <TIM_Base_SetConfig+0xaa>
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	4a2d      	ldr	r2, [pc, #180]	; (80068a4 <TIM_Base_SetConfig+0x13c>)
 80067ee:	4293      	cmp	r3, r2
 80067f0:	d00f      	beq.n	8006812 <TIM_Base_SetConfig+0xaa>
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	4a2d      	ldr	r2, [pc, #180]	; (80068ac <TIM_Base_SetConfig+0x144>)
 80067f6:	4293      	cmp	r3, r2
 80067f8:	d00b      	beq.n	8006812 <TIM_Base_SetConfig+0xaa>
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	4a2c      	ldr	r2, [pc, #176]	; (80068b0 <TIM_Base_SetConfig+0x148>)
 80067fe:	4293      	cmp	r3, r2
 8006800:	d007      	beq.n	8006812 <TIM_Base_SetConfig+0xaa>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	4a2b      	ldr	r2, [pc, #172]	; (80068b4 <TIM_Base_SetConfig+0x14c>)
 8006806:	4293      	cmp	r3, r2
 8006808:	d003      	beq.n	8006812 <TIM_Base_SetConfig+0xaa>
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	4a26      	ldr	r2, [pc, #152]	; (80068a8 <TIM_Base_SetConfig+0x140>)
 800680e:	4293      	cmp	r3, r2
 8006810:	d108      	bne.n	8006824 <TIM_Base_SetConfig+0xbc>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006818:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	68db      	ldr	r3, [r3, #12]
 800681e:	68fa      	ldr	r2, [r7, #12]
 8006820:	4313      	orrs	r3, r2
 8006822:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800682a:	683b      	ldr	r3, [r7, #0]
 800682c:	695b      	ldr	r3, [r3, #20]
 800682e:	4313      	orrs	r3, r2
 8006830:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	68fa      	ldr	r2, [r7, #12]
 8006836:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006838:	683b      	ldr	r3, [r7, #0]
 800683a:	689a      	ldr	r2, [r3, #8]
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006840:	683b      	ldr	r3, [r7, #0]
 8006842:	681a      	ldr	r2, [r3, #0]
 8006844:	687b      	ldr	r3, [r7, #4]
 8006846:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	4a12      	ldr	r2, [pc, #72]	; (8006894 <TIM_Base_SetConfig+0x12c>)
 800684c:	4293      	cmp	r3, r2
 800684e:	d013      	beq.n	8006878 <TIM_Base_SetConfig+0x110>
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	4a14      	ldr	r2, [pc, #80]	; (80068a4 <TIM_Base_SetConfig+0x13c>)
 8006854:	4293      	cmp	r3, r2
 8006856:	d00f      	beq.n	8006878 <TIM_Base_SetConfig+0x110>
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	4a14      	ldr	r2, [pc, #80]	; (80068ac <TIM_Base_SetConfig+0x144>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d00b      	beq.n	8006878 <TIM_Base_SetConfig+0x110>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	4a13      	ldr	r2, [pc, #76]	; (80068b0 <TIM_Base_SetConfig+0x148>)
 8006864:	4293      	cmp	r3, r2
 8006866:	d007      	beq.n	8006878 <TIM_Base_SetConfig+0x110>
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	4a12      	ldr	r2, [pc, #72]	; (80068b4 <TIM_Base_SetConfig+0x14c>)
 800686c:	4293      	cmp	r3, r2
 800686e:	d003      	beq.n	8006878 <TIM_Base_SetConfig+0x110>
 8006870:	687b      	ldr	r3, [r7, #4]
 8006872:	4a0d      	ldr	r2, [pc, #52]	; (80068a8 <TIM_Base_SetConfig+0x140>)
 8006874:	4293      	cmp	r3, r2
 8006876:	d103      	bne.n	8006880 <TIM_Base_SetConfig+0x118>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006878:	683b      	ldr	r3, [r7, #0]
 800687a:	691a      	ldr	r2, [r3, #16]
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	2201      	movs	r2, #1
 8006884:	615a      	str	r2, [r3, #20]
}
 8006886:	bf00      	nop
 8006888:	3714      	adds	r7, #20
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr
 8006892:	bf00      	nop
 8006894:	40012c00 	.word	0x40012c00
 8006898:	40000400 	.word	0x40000400
 800689c:	40000800 	.word	0x40000800
 80068a0:	40000c00 	.word	0x40000c00
 80068a4:	40013400 	.word	0x40013400
 80068a8:	40015000 	.word	0x40015000
 80068ac:	40014000 	.word	0x40014000
 80068b0:	40014400 	.word	0x40014400
 80068b4:	40014800 	.word	0x40014800

080068b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068b8:	b480      	push	{r7}
 80068ba:	b087      	sub	sp, #28
 80068bc:	af00      	add	r7, sp, #0
 80068be:	6078      	str	r0, [r7, #4]
 80068c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	6a1b      	ldr	r3, [r3, #32]
 80068c6:	f023 0201 	bic.w	r2, r3, #1
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6a1b      	ldr	r3, [r3, #32]
 80068d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	685b      	ldr	r3, [r3, #4]
 80068d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80068da:	687b      	ldr	r3, [r7, #4]
 80068dc:	699b      	ldr	r3, [r3, #24]
 80068de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80068e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80068ec:	68fb      	ldr	r3, [r7, #12]
 80068ee:	f023 0303 	bic.w	r3, r3, #3
 80068f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	681b      	ldr	r3, [r3, #0]
 80068f8:	68fa      	ldr	r2, [r7, #12]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80068fe:	697b      	ldr	r3, [r7, #20]
 8006900:	f023 0302 	bic.w	r3, r3, #2
 8006904:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006906:	683b      	ldr	r3, [r7, #0]
 8006908:	689b      	ldr	r3, [r3, #8]
 800690a:	697a      	ldr	r2, [r7, #20]
 800690c:	4313      	orrs	r3, r2
 800690e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	4a30      	ldr	r2, [pc, #192]	; (80069d4 <TIM_OC1_SetConfig+0x11c>)
 8006914:	4293      	cmp	r3, r2
 8006916:	d013      	beq.n	8006940 <TIM_OC1_SetConfig+0x88>
 8006918:	687b      	ldr	r3, [r7, #4]
 800691a:	4a2f      	ldr	r2, [pc, #188]	; (80069d8 <TIM_OC1_SetConfig+0x120>)
 800691c:	4293      	cmp	r3, r2
 800691e:	d00f      	beq.n	8006940 <TIM_OC1_SetConfig+0x88>
 8006920:	687b      	ldr	r3, [r7, #4]
 8006922:	4a2e      	ldr	r2, [pc, #184]	; (80069dc <TIM_OC1_SetConfig+0x124>)
 8006924:	4293      	cmp	r3, r2
 8006926:	d00b      	beq.n	8006940 <TIM_OC1_SetConfig+0x88>
 8006928:	687b      	ldr	r3, [r7, #4]
 800692a:	4a2d      	ldr	r2, [pc, #180]	; (80069e0 <TIM_OC1_SetConfig+0x128>)
 800692c:	4293      	cmp	r3, r2
 800692e:	d007      	beq.n	8006940 <TIM_OC1_SetConfig+0x88>
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	4a2c      	ldr	r2, [pc, #176]	; (80069e4 <TIM_OC1_SetConfig+0x12c>)
 8006934:	4293      	cmp	r3, r2
 8006936:	d003      	beq.n	8006940 <TIM_OC1_SetConfig+0x88>
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	4a2b      	ldr	r2, [pc, #172]	; (80069e8 <TIM_OC1_SetConfig+0x130>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d10c      	bne.n	800695a <TIM_OC1_SetConfig+0xa2>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006940:	697b      	ldr	r3, [r7, #20]
 8006942:	f023 0308 	bic.w	r3, r3, #8
 8006946:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006948:	683b      	ldr	r3, [r7, #0]
 800694a:	68db      	ldr	r3, [r3, #12]
 800694c:	697a      	ldr	r2, [r7, #20]
 800694e:	4313      	orrs	r3, r2
 8006950:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006952:	697b      	ldr	r3, [r7, #20]
 8006954:	f023 0304 	bic.w	r3, r3, #4
 8006958:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	4a1d      	ldr	r2, [pc, #116]	; (80069d4 <TIM_OC1_SetConfig+0x11c>)
 800695e:	4293      	cmp	r3, r2
 8006960:	d013      	beq.n	800698a <TIM_OC1_SetConfig+0xd2>
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	4a1c      	ldr	r2, [pc, #112]	; (80069d8 <TIM_OC1_SetConfig+0x120>)
 8006966:	4293      	cmp	r3, r2
 8006968:	d00f      	beq.n	800698a <TIM_OC1_SetConfig+0xd2>
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	4a1b      	ldr	r2, [pc, #108]	; (80069dc <TIM_OC1_SetConfig+0x124>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d00b      	beq.n	800698a <TIM_OC1_SetConfig+0xd2>
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	4a1a      	ldr	r2, [pc, #104]	; (80069e0 <TIM_OC1_SetConfig+0x128>)
 8006976:	4293      	cmp	r3, r2
 8006978:	d007      	beq.n	800698a <TIM_OC1_SetConfig+0xd2>
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	4a19      	ldr	r2, [pc, #100]	; (80069e4 <TIM_OC1_SetConfig+0x12c>)
 800697e:	4293      	cmp	r3, r2
 8006980:	d003      	beq.n	800698a <TIM_OC1_SetConfig+0xd2>
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	4a18      	ldr	r2, [pc, #96]	; (80069e8 <TIM_OC1_SetConfig+0x130>)
 8006986:	4293      	cmp	r3, r2
 8006988:	d111      	bne.n	80069ae <TIM_OC1_SetConfig+0xf6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800698a:	693b      	ldr	r3, [r7, #16]
 800698c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800699a:	683b      	ldr	r3, [r7, #0]
 800699c:	695b      	ldr	r3, [r3, #20]
 800699e:	693a      	ldr	r2, [r7, #16]
 80069a0:	4313      	orrs	r3, r2
 80069a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80069a4:	683b      	ldr	r3, [r7, #0]
 80069a6:	699b      	ldr	r3, [r3, #24]
 80069a8:	693a      	ldr	r2, [r7, #16]
 80069aa:	4313      	orrs	r3, r2
 80069ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80069ae:	687b      	ldr	r3, [r7, #4]
 80069b0:	693a      	ldr	r2, [r7, #16]
 80069b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	68fa      	ldr	r2, [r7, #12]
 80069b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80069ba:	683b      	ldr	r3, [r7, #0]
 80069bc:	685a      	ldr	r2, [r3, #4]
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80069c2:	687b      	ldr	r3, [r7, #4]
 80069c4:	697a      	ldr	r2, [r7, #20]
 80069c6:	621a      	str	r2, [r3, #32]
}
 80069c8:	bf00      	nop
 80069ca:	371c      	adds	r7, #28
 80069cc:	46bd      	mov	sp, r7
 80069ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069d2:	4770      	bx	lr
 80069d4:	40012c00 	.word	0x40012c00
 80069d8:	40013400 	.word	0x40013400
 80069dc:	40014000 	.word	0x40014000
 80069e0:	40014400 	.word	0x40014400
 80069e4:	40014800 	.word	0x40014800
 80069e8:	40015000 	.word	0x40015000

080069ec <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069ec:	b480      	push	{r7}
 80069ee:	b087      	sub	sp, #28
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
 80069f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	6a1b      	ldr	r3, [r3, #32]
 80069fa:	f023 0210 	bic.w	r2, r3, #16
 80069fe:	687b      	ldr	r3, [r7, #4]
 8006a00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	6a1b      	ldr	r3, [r3, #32]
 8006a06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	685b      	ldr	r3, [r3, #4]
 8006a0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	699b      	ldr	r3, [r3, #24]
 8006a12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006a14:	68fb      	ldr	r3, [r7, #12]
 8006a16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006a1a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006a1e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a26:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006a28:	683b      	ldr	r3, [r7, #0]
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	021b      	lsls	r3, r3, #8
 8006a2e:	68fa      	ldr	r2, [r7, #12]
 8006a30:	4313      	orrs	r3, r2
 8006a32:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006a34:	697b      	ldr	r3, [r7, #20]
 8006a36:	f023 0320 	bic.w	r3, r3, #32
 8006a3a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006a3c:	683b      	ldr	r3, [r7, #0]
 8006a3e:	689b      	ldr	r3, [r3, #8]
 8006a40:	011b      	lsls	r3, r3, #4
 8006a42:	697a      	ldr	r2, [r7, #20]
 8006a44:	4313      	orrs	r3, r2
 8006a46:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	4a2c      	ldr	r2, [pc, #176]	; (8006afc <TIM_OC2_SetConfig+0x110>)
 8006a4c:	4293      	cmp	r3, r2
 8006a4e:	d007      	beq.n	8006a60 <TIM_OC2_SetConfig+0x74>
 8006a50:	687b      	ldr	r3, [r7, #4]
 8006a52:	4a2b      	ldr	r2, [pc, #172]	; (8006b00 <TIM_OC2_SetConfig+0x114>)
 8006a54:	4293      	cmp	r3, r2
 8006a56:	d003      	beq.n	8006a60 <TIM_OC2_SetConfig+0x74>
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	4a2a      	ldr	r2, [pc, #168]	; (8006b04 <TIM_OC2_SetConfig+0x118>)
 8006a5c:	4293      	cmp	r3, r2
 8006a5e:	d10d      	bne.n	8006a7c <TIM_OC2_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006a66:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006a68:	683b      	ldr	r3, [r7, #0]
 8006a6a:	68db      	ldr	r3, [r3, #12]
 8006a6c:	011b      	lsls	r3, r3, #4
 8006a6e:	697a      	ldr	r2, [r7, #20]
 8006a70:	4313      	orrs	r3, r2
 8006a72:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006a74:	697b      	ldr	r3, [r7, #20]
 8006a76:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a7a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	4a1f      	ldr	r2, [pc, #124]	; (8006afc <TIM_OC2_SetConfig+0x110>)
 8006a80:	4293      	cmp	r3, r2
 8006a82:	d013      	beq.n	8006aac <TIM_OC2_SetConfig+0xc0>
 8006a84:	687b      	ldr	r3, [r7, #4]
 8006a86:	4a1e      	ldr	r2, [pc, #120]	; (8006b00 <TIM_OC2_SetConfig+0x114>)
 8006a88:	4293      	cmp	r3, r2
 8006a8a:	d00f      	beq.n	8006aac <TIM_OC2_SetConfig+0xc0>
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	4a1e      	ldr	r2, [pc, #120]	; (8006b08 <TIM_OC2_SetConfig+0x11c>)
 8006a90:	4293      	cmp	r3, r2
 8006a92:	d00b      	beq.n	8006aac <TIM_OC2_SetConfig+0xc0>
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	4a1d      	ldr	r2, [pc, #116]	; (8006b0c <TIM_OC2_SetConfig+0x120>)
 8006a98:	4293      	cmp	r3, r2
 8006a9a:	d007      	beq.n	8006aac <TIM_OC2_SetConfig+0xc0>
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	4a1c      	ldr	r2, [pc, #112]	; (8006b10 <TIM_OC2_SetConfig+0x124>)
 8006aa0:	4293      	cmp	r3, r2
 8006aa2:	d003      	beq.n	8006aac <TIM_OC2_SetConfig+0xc0>
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	4a17      	ldr	r2, [pc, #92]	; (8006b04 <TIM_OC2_SetConfig+0x118>)
 8006aa8:	4293      	cmp	r3, r2
 8006aaa:	d113      	bne.n	8006ad4 <TIM_OC2_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006aac:	693b      	ldr	r3, [r7, #16]
 8006aae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ab2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006ab4:	693b      	ldr	r3, [r7, #16]
 8006ab6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006aba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006abc:	683b      	ldr	r3, [r7, #0]
 8006abe:	695b      	ldr	r3, [r3, #20]
 8006ac0:	009b      	lsls	r3, r3, #2
 8006ac2:	693a      	ldr	r2, [r7, #16]
 8006ac4:	4313      	orrs	r3, r2
 8006ac6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006ac8:	683b      	ldr	r3, [r7, #0]
 8006aca:	699b      	ldr	r3, [r3, #24]
 8006acc:	009b      	lsls	r3, r3, #2
 8006ace:	693a      	ldr	r2, [r7, #16]
 8006ad0:	4313      	orrs	r3, r2
 8006ad2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ad4:	687b      	ldr	r3, [r7, #4]
 8006ad6:	693a      	ldr	r2, [r7, #16]
 8006ad8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	68fa      	ldr	r2, [r7, #12]
 8006ade:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006ae0:	683b      	ldr	r3, [r7, #0]
 8006ae2:	685a      	ldr	r2, [r3, #4]
 8006ae4:	687b      	ldr	r3, [r7, #4]
 8006ae6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	697a      	ldr	r2, [r7, #20]
 8006aec:	621a      	str	r2, [r3, #32]
}
 8006aee:	bf00      	nop
 8006af0:	371c      	adds	r7, #28
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
 8006afa:	bf00      	nop
 8006afc:	40012c00 	.word	0x40012c00
 8006b00:	40013400 	.word	0x40013400
 8006b04:	40015000 	.word	0x40015000
 8006b08:	40014000 	.word	0x40014000
 8006b0c:	40014400 	.word	0x40014400
 8006b10:	40014800 	.word	0x40014800

08006b14 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b14:	b480      	push	{r7}
 8006b16:	b087      	sub	sp, #28
 8006b18:	af00      	add	r7, sp, #0
 8006b1a:	6078      	str	r0, [r7, #4]
 8006b1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	6a1b      	ldr	r3, [r3, #32]
 8006b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	6a1b      	ldr	r3, [r3, #32]
 8006b2e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	685b      	ldr	r3, [r3, #4]
 8006b34:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	69db      	ldr	r3, [r3, #28]
 8006b3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b3c:	68fb      	ldr	r3, [r7, #12]
 8006b3e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006b42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	f023 0303 	bic.w	r3, r3, #3
 8006b4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b50:	683b      	ldr	r3, [r7, #0]
 8006b52:	681b      	ldr	r3, [r3, #0]
 8006b54:	68fa      	ldr	r2, [r7, #12]
 8006b56:	4313      	orrs	r3, r2
 8006b58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006b5a:	697b      	ldr	r3, [r7, #20]
 8006b5c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006b60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	689b      	ldr	r3, [r3, #8]
 8006b66:	021b      	lsls	r3, r3, #8
 8006b68:	697a      	ldr	r2, [r7, #20]
 8006b6a:	4313      	orrs	r3, r2
 8006b6c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006b6e:	687b      	ldr	r3, [r7, #4]
 8006b70:	4a2b      	ldr	r2, [pc, #172]	; (8006c20 <TIM_OC3_SetConfig+0x10c>)
 8006b72:	4293      	cmp	r3, r2
 8006b74:	d007      	beq.n	8006b86 <TIM_OC3_SetConfig+0x72>
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	4a2a      	ldr	r2, [pc, #168]	; (8006c24 <TIM_OC3_SetConfig+0x110>)
 8006b7a:	4293      	cmp	r3, r2
 8006b7c:	d003      	beq.n	8006b86 <TIM_OC3_SetConfig+0x72>
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	4a29      	ldr	r2, [pc, #164]	; (8006c28 <TIM_OC3_SetConfig+0x114>)
 8006b82:	4293      	cmp	r3, r2
 8006b84:	d10d      	bne.n	8006ba2 <TIM_OC3_SetConfig+0x8e>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006b86:	697b      	ldr	r3, [r7, #20]
 8006b88:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b8c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006b8e:	683b      	ldr	r3, [r7, #0]
 8006b90:	68db      	ldr	r3, [r3, #12]
 8006b92:	021b      	lsls	r3, r3, #8
 8006b94:	697a      	ldr	r2, [r7, #20]
 8006b96:	4313      	orrs	r3, r2
 8006b98:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006b9a:	697b      	ldr	r3, [r7, #20]
 8006b9c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ba0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006ba2:	687b      	ldr	r3, [r7, #4]
 8006ba4:	4a1e      	ldr	r2, [pc, #120]	; (8006c20 <TIM_OC3_SetConfig+0x10c>)
 8006ba6:	4293      	cmp	r3, r2
 8006ba8:	d013      	beq.n	8006bd2 <TIM_OC3_SetConfig+0xbe>
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	4a1d      	ldr	r2, [pc, #116]	; (8006c24 <TIM_OC3_SetConfig+0x110>)
 8006bae:	4293      	cmp	r3, r2
 8006bb0:	d00f      	beq.n	8006bd2 <TIM_OC3_SetConfig+0xbe>
 8006bb2:	687b      	ldr	r3, [r7, #4]
 8006bb4:	4a1d      	ldr	r2, [pc, #116]	; (8006c2c <TIM_OC3_SetConfig+0x118>)
 8006bb6:	4293      	cmp	r3, r2
 8006bb8:	d00b      	beq.n	8006bd2 <TIM_OC3_SetConfig+0xbe>
 8006bba:	687b      	ldr	r3, [r7, #4]
 8006bbc:	4a1c      	ldr	r2, [pc, #112]	; (8006c30 <TIM_OC3_SetConfig+0x11c>)
 8006bbe:	4293      	cmp	r3, r2
 8006bc0:	d007      	beq.n	8006bd2 <TIM_OC3_SetConfig+0xbe>
 8006bc2:	687b      	ldr	r3, [r7, #4]
 8006bc4:	4a1b      	ldr	r2, [pc, #108]	; (8006c34 <TIM_OC3_SetConfig+0x120>)
 8006bc6:	4293      	cmp	r3, r2
 8006bc8:	d003      	beq.n	8006bd2 <TIM_OC3_SetConfig+0xbe>
 8006bca:	687b      	ldr	r3, [r7, #4]
 8006bcc:	4a16      	ldr	r2, [pc, #88]	; (8006c28 <TIM_OC3_SetConfig+0x114>)
 8006bce:	4293      	cmp	r3, r2
 8006bd0:	d113      	bne.n	8006bfa <TIM_OC3_SetConfig+0xe6>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006bd2:	693b      	ldr	r3, [r7, #16]
 8006bd4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bd8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006be0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006be2:	683b      	ldr	r3, [r7, #0]
 8006be4:	695b      	ldr	r3, [r3, #20]
 8006be6:	011b      	lsls	r3, r3, #4
 8006be8:	693a      	ldr	r2, [r7, #16]
 8006bea:	4313      	orrs	r3, r2
 8006bec:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bee:	683b      	ldr	r3, [r7, #0]
 8006bf0:	699b      	ldr	r3, [r3, #24]
 8006bf2:	011b      	lsls	r3, r3, #4
 8006bf4:	693a      	ldr	r2, [r7, #16]
 8006bf6:	4313      	orrs	r3, r2
 8006bf8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	693a      	ldr	r2, [r7, #16]
 8006bfe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	68fa      	ldr	r2, [r7, #12]
 8006c04:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c06:	683b      	ldr	r3, [r7, #0]
 8006c08:	685a      	ldr	r2, [r3, #4]
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	697a      	ldr	r2, [r7, #20]
 8006c12:	621a      	str	r2, [r3, #32]
}
 8006c14:	bf00      	nop
 8006c16:	371c      	adds	r7, #28
 8006c18:	46bd      	mov	sp, r7
 8006c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c1e:	4770      	bx	lr
 8006c20:	40012c00 	.word	0x40012c00
 8006c24:	40013400 	.word	0x40013400
 8006c28:	40015000 	.word	0x40015000
 8006c2c:	40014000 	.word	0x40014000
 8006c30:	40014400 	.word	0x40014400
 8006c34:	40014800 	.word	0x40014800

08006c38 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c38:	b480      	push	{r7}
 8006c3a:	b087      	sub	sp, #28
 8006c3c:	af00      	add	r7, sp, #0
 8006c3e:	6078      	str	r0, [r7, #4]
 8006c40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	6a1b      	ldr	r3, [r3, #32]
 8006c46:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4e:	687b      	ldr	r3, [r7, #4]
 8006c50:	6a1b      	ldr	r3, [r3, #32]
 8006c52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	685b      	ldr	r3, [r3, #4]
 8006c58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	69db      	ldr	r3, [r3, #28]
 8006c5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006c66:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c6a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c6c:	68fb      	ldr	r3, [r7, #12]
 8006c6e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c72:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c74:	683b      	ldr	r3, [r7, #0]
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	021b      	lsls	r3, r3, #8
 8006c7a:	68fa      	ldr	r2, [r7, #12]
 8006c7c:	4313      	orrs	r3, r2
 8006c7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c80:	697b      	ldr	r3, [r7, #20]
 8006c82:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c86:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c88:	683b      	ldr	r3, [r7, #0]
 8006c8a:	689b      	ldr	r3, [r3, #8]
 8006c8c:	031b      	lsls	r3, r3, #12
 8006c8e:	697a      	ldr	r2, [r7, #20]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_4))
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	4a2c      	ldr	r2, [pc, #176]	; (8006d48 <TIM_OC4_SetConfig+0x110>)
 8006c98:	4293      	cmp	r3, r2
 8006c9a:	d007      	beq.n	8006cac <TIM_OC4_SetConfig+0x74>
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	4a2b      	ldr	r2, [pc, #172]	; (8006d4c <TIM_OC4_SetConfig+0x114>)
 8006ca0:	4293      	cmp	r3, r2
 8006ca2:	d003      	beq.n	8006cac <TIM_OC4_SetConfig+0x74>
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	4a2a      	ldr	r2, [pc, #168]	; (8006d50 <TIM_OC4_SetConfig+0x118>)
 8006ca8:	4293      	cmp	r3, r2
 8006caa:	d10d      	bne.n	8006cc8 <TIM_OC4_SetConfig+0x90>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC4NP;
 8006cac:	697b      	ldr	r3, [r7, #20]
 8006cae:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006cb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 12U);
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	68db      	ldr	r3, [r3, #12]
 8006cb8:	031b      	lsls	r3, r3, #12
 8006cba:	697a      	ldr	r2, [r7, #20]
 8006cbc:	4313      	orrs	r3, r2
 8006cbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC4NE;
 8006cc0:	697b      	ldr	r3, [r7, #20]
 8006cc2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cc6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	4a1f      	ldr	r2, [pc, #124]	; (8006d48 <TIM_OC4_SetConfig+0x110>)
 8006ccc:	4293      	cmp	r3, r2
 8006cce:	d013      	beq.n	8006cf8 <TIM_OC4_SetConfig+0xc0>
 8006cd0:	687b      	ldr	r3, [r7, #4]
 8006cd2:	4a1e      	ldr	r2, [pc, #120]	; (8006d4c <TIM_OC4_SetConfig+0x114>)
 8006cd4:	4293      	cmp	r3, r2
 8006cd6:	d00f      	beq.n	8006cf8 <TIM_OC4_SetConfig+0xc0>
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	4a1e      	ldr	r2, [pc, #120]	; (8006d54 <TIM_OC4_SetConfig+0x11c>)
 8006cdc:	4293      	cmp	r3, r2
 8006cde:	d00b      	beq.n	8006cf8 <TIM_OC4_SetConfig+0xc0>
 8006ce0:	687b      	ldr	r3, [r7, #4]
 8006ce2:	4a1d      	ldr	r2, [pc, #116]	; (8006d58 <TIM_OC4_SetConfig+0x120>)
 8006ce4:	4293      	cmp	r3, r2
 8006ce6:	d007      	beq.n	8006cf8 <TIM_OC4_SetConfig+0xc0>
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	4a1c      	ldr	r2, [pc, #112]	; (8006d5c <TIM_OC4_SetConfig+0x124>)
 8006cec:	4293      	cmp	r3, r2
 8006cee:	d003      	beq.n	8006cf8 <TIM_OC4_SetConfig+0xc0>
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	4a17      	ldr	r2, [pc, #92]	; (8006d50 <TIM_OC4_SetConfig+0x118>)
 8006cf4:	4293      	cmp	r3, r2
 8006cf6:	d113      	bne.n	8006d20 <TIM_OC4_SetConfig+0xe8>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006cf8:	693b      	ldr	r3, [r7, #16]
 8006cfa:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006cfe:	613b      	str	r3, [r7, #16]
    /* Reset the Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4N;
 8006d00:	693b      	ldr	r3, [r7, #16]
 8006d02:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8006d06:	613b      	str	r3, [r7, #16]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	695b      	ldr	r3, [r3, #20]
 8006d0c:	019b      	lsls	r3, r3, #6
 8006d0e:	693a      	ldr	r2, [r7, #16]
 8006d10:	4313      	orrs	r3, r2
 8006d12:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 6U);
 8006d14:	683b      	ldr	r3, [r7, #0]
 8006d16:	699b      	ldr	r3, [r3, #24]
 8006d18:	019b      	lsls	r3, r3, #6
 8006d1a:	693a      	ldr	r2, [r7, #16]
 8006d1c:	4313      	orrs	r3, r2
 8006d1e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006d20:	687b      	ldr	r3, [r7, #4]
 8006d22:	693a      	ldr	r2, [r7, #16]
 8006d24:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	68fa      	ldr	r2, [r7, #12]
 8006d2a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006d2c:	683b      	ldr	r3, [r7, #0]
 8006d2e:	685a      	ldr	r2, [r3, #4]
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006d34:	687b      	ldr	r3, [r7, #4]
 8006d36:	697a      	ldr	r2, [r7, #20]
 8006d38:	621a      	str	r2, [r3, #32]
}
 8006d3a:	bf00      	nop
 8006d3c:	371c      	adds	r7, #28
 8006d3e:	46bd      	mov	sp, r7
 8006d40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d44:	4770      	bx	lr
 8006d46:	bf00      	nop
 8006d48:	40012c00 	.word	0x40012c00
 8006d4c:	40013400 	.word	0x40013400
 8006d50:	40015000 	.word	0x40015000
 8006d54:	40014000 	.word	0x40014000
 8006d58:	40014400 	.word	0x40014400
 8006d5c:	40014800 	.word	0x40014800

08006d60 <TIM_OC5_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC5_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006d60:	b480      	push	{r7}
 8006d62:	b087      	sub	sp, #28
 8006d64:	af00      	add	r7, sp, #0
 8006d66:	6078      	str	r0, [r7, #4]
 8006d68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC5E;
 8006d6a:	687b      	ldr	r3, [r7, #4]
 8006d6c:	6a1b      	ldr	r3, [r3, #32]
 8006d6e:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006d76:	687b      	ldr	r3, [r7, #4]
 8006d78:	6a1b      	ldr	r3, [r3, #32]
 8006d7a:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	685b      	ldr	r3, [r3, #4]
 8006d80:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006d86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC5M);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006d8e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006d92:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006d94:	683b      	ldr	r3, [r7, #0]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	68fa      	ldr	r2, [r7, #12]
 8006d9a:	4313      	orrs	r3, r2
 8006d9c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC5P;
 8006d9e:	693b      	ldr	r3, [r7, #16]
 8006da0:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 8006da4:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 16U);
 8006da6:	683b      	ldr	r3, [r7, #0]
 8006da8:	689b      	ldr	r3, [r3, #8]
 8006daa:	041b      	lsls	r3, r3, #16
 8006dac:	693a      	ldr	r2, [r7, #16]
 8006dae:	4313      	orrs	r3, r2
 8006db0:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	4a19      	ldr	r2, [pc, #100]	; (8006e1c <TIM_OC5_SetConfig+0xbc>)
 8006db6:	4293      	cmp	r3, r2
 8006db8:	d013      	beq.n	8006de2 <TIM_OC5_SetConfig+0x82>
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	4a18      	ldr	r2, [pc, #96]	; (8006e20 <TIM_OC5_SetConfig+0xc0>)
 8006dbe:	4293      	cmp	r3, r2
 8006dc0:	d00f      	beq.n	8006de2 <TIM_OC5_SetConfig+0x82>
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	4a17      	ldr	r2, [pc, #92]	; (8006e24 <TIM_OC5_SetConfig+0xc4>)
 8006dc6:	4293      	cmp	r3, r2
 8006dc8:	d00b      	beq.n	8006de2 <TIM_OC5_SetConfig+0x82>
 8006dca:	687b      	ldr	r3, [r7, #4]
 8006dcc:	4a16      	ldr	r2, [pc, #88]	; (8006e28 <TIM_OC5_SetConfig+0xc8>)
 8006dce:	4293      	cmp	r3, r2
 8006dd0:	d007      	beq.n	8006de2 <TIM_OC5_SetConfig+0x82>
 8006dd2:	687b      	ldr	r3, [r7, #4]
 8006dd4:	4a15      	ldr	r2, [pc, #84]	; (8006e2c <TIM_OC5_SetConfig+0xcc>)
 8006dd6:	4293      	cmp	r3, r2
 8006dd8:	d003      	beq.n	8006de2 <TIM_OC5_SetConfig+0x82>
 8006dda:	687b      	ldr	r3, [r7, #4]
 8006ddc:	4a14      	ldr	r2, [pc, #80]	; (8006e30 <TIM_OC5_SetConfig+0xd0>)
 8006dde:	4293      	cmp	r3, r2
 8006de0:	d109      	bne.n	8006df6 <TIM_OC5_SetConfig+0x96>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS5;
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006de8:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 8U);
 8006dea:	683b      	ldr	r3, [r7, #0]
 8006dec:	695b      	ldr	r3, [r3, #20]
 8006dee:	021b      	lsls	r3, r3, #8
 8006df0:	697a      	ldr	r2, [r7, #20]
 8006df2:	4313      	orrs	r3, r2
 8006df4:	617b      	str	r3, [r7, #20]
  }
  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	697a      	ldr	r2, [r7, #20]
 8006dfa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006dfc:	687b      	ldr	r3, [r7, #4]
 8006dfe:	68fa      	ldr	r2, [r7, #12]
 8006e00:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR5 = OC_Config->Pulse;
 8006e02:	683b      	ldr	r3, [r7, #0]
 8006e04:	685a      	ldr	r2, [r3, #4]
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	649a      	str	r2, [r3, #72]	; 0x48

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	693a      	ldr	r2, [r7, #16]
 8006e0e:	621a      	str	r2, [r3, #32]
}
 8006e10:	bf00      	nop
 8006e12:	371c      	adds	r7, #28
 8006e14:	46bd      	mov	sp, r7
 8006e16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1a:	4770      	bx	lr
 8006e1c:	40012c00 	.word	0x40012c00
 8006e20:	40013400 	.word	0x40013400
 8006e24:	40014000 	.word	0x40014000
 8006e28:	40014400 	.word	0x40014400
 8006e2c:	40014800 	.word	0x40014800
 8006e30:	40015000 	.word	0x40015000

08006e34 <TIM_OC6_SetConfig>:
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC6_SetConfig(TIM_TypeDef *TIMx,
                              TIM_OC_InitTypeDef *OC_Config)
{
 8006e34:	b480      	push	{r7}
 8006e36:	b087      	sub	sp, #28
 8006e38:	af00      	add	r7, sp, #0
 8006e3a:	6078      	str	r0, [r7, #4]
 8006e3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the output: Reset the CCxE Bit */
  TIMx->CCER &= ~TIM_CCER_CC6E;
 8006e3e:	687b      	ldr	r3, [r7, #4]
 8006e40:	6a1b      	ldr	r3, [r3, #32]
 8006e42:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	6a1b      	ldr	r3, [r3, #32]
 8006e4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR3;
 8006e56:	687b      	ldr	r3, [r7, #4]
 8006e58:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006e5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~(TIM_CCMR3_OC6M);
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8006e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006e66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006e68:	683b      	ldr	r3, [r7, #0]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	021b      	lsls	r3, r3, #8
 8006e6e:	68fa      	ldr	r2, [r7, #12]
 8006e70:	4313      	orrs	r3, r2
 8006e72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= (uint32_t)~TIM_CCER_CC6P;
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	f423 1300 	bic.w	r3, r3, #2097152	; 0x200000
 8006e7a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 20U);
 8006e7c:	683b      	ldr	r3, [r7, #0]
 8006e7e:	689b      	ldr	r3, [r3, #8]
 8006e80:	051b      	lsls	r3, r3, #20
 8006e82:	693a      	ldr	r2, [r7, #16]
 8006e84:	4313      	orrs	r3, r2
 8006e86:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	4a1a      	ldr	r2, [pc, #104]	; (8006ef4 <TIM_OC6_SetConfig+0xc0>)
 8006e8c:	4293      	cmp	r3, r2
 8006e8e:	d013      	beq.n	8006eb8 <TIM_OC6_SetConfig+0x84>
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	4a19      	ldr	r2, [pc, #100]	; (8006ef8 <TIM_OC6_SetConfig+0xc4>)
 8006e94:	4293      	cmp	r3, r2
 8006e96:	d00f      	beq.n	8006eb8 <TIM_OC6_SetConfig+0x84>
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	4a18      	ldr	r2, [pc, #96]	; (8006efc <TIM_OC6_SetConfig+0xc8>)
 8006e9c:	4293      	cmp	r3, r2
 8006e9e:	d00b      	beq.n	8006eb8 <TIM_OC6_SetConfig+0x84>
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	4a17      	ldr	r2, [pc, #92]	; (8006f00 <TIM_OC6_SetConfig+0xcc>)
 8006ea4:	4293      	cmp	r3, r2
 8006ea6:	d007      	beq.n	8006eb8 <TIM_OC6_SetConfig+0x84>
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	4a16      	ldr	r2, [pc, #88]	; (8006f04 <TIM_OC6_SetConfig+0xd0>)
 8006eac:	4293      	cmp	r3, r2
 8006eae:	d003      	beq.n	8006eb8 <TIM_OC6_SetConfig+0x84>
 8006eb0:	687b      	ldr	r3, [r7, #4]
 8006eb2:	4a15      	ldr	r2, [pc, #84]	; (8006f08 <TIM_OC6_SetConfig+0xd4>)
 8006eb4:	4293      	cmp	r3, r2
 8006eb6:	d109      	bne.n	8006ecc <TIM_OC6_SetConfig+0x98>
  {
    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS6;
 8006eb8:	697b      	ldr	r3, [r7, #20]
 8006eba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8006ebe:	617b      	str	r3, [r7, #20]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 10U);
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	695b      	ldr	r3, [r3, #20]
 8006ec4:	029b      	lsls	r3, r3, #10
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	4313      	orrs	r3, r2
 8006eca:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ecc:	687b      	ldr	r3, [r7, #4]
 8006ece:	697a      	ldr	r2, [r7, #20]
 8006ed0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR3 */
  TIMx->CCMR3 = tmpccmrx;
 8006ed2:	687b      	ldr	r3, [r7, #4]
 8006ed4:	68fa      	ldr	r2, [r7, #12]
 8006ed6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Set the Capture Compare Register value */
  TIMx->CCR6 = OC_Config->Pulse;
 8006ed8:	683b      	ldr	r3, [r7, #0]
 8006eda:	685a      	ldr	r2, [r3, #4]
 8006edc:	687b      	ldr	r3, [r7, #4]
 8006ede:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	693a      	ldr	r2, [r7, #16]
 8006ee4:	621a      	str	r2, [r3, #32]
}
 8006ee6:	bf00      	nop
 8006ee8:	371c      	adds	r7, #28
 8006eea:	46bd      	mov	sp, r7
 8006eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ef0:	4770      	bx	lr
 8006ef2:	bf00      	nop
 8006ef4:	40012c00 	.word	0x40012c00
 8006ef8:	40013400 	.word	0x40013400
 8006efc:	40014000 	.word	0x40014000
 8006f00:	40014400 	.word	0x40014400
 8006f04:	40014800 	.word	0x40014800
 8006f08:	40015000 	.word	0x40015000

08006f0c <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006f0c:	b480      	push	{r7}
 8006f0e:	b087      	sub	sp, #28
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	60f8      	str	r0, [r7, #12]
 8006f14:	60b9      	str	r1, [r7, #8]
 8006f16:	607a      	str	r2, [r7, #4]
 8006f18:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a1b      	ldr	r3, [r3, #32]
 8006f1e:	f023 0201 	bic.w	r2, r3, #1
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	699b      	ldr	r3, [r3, #24]
 8006f2a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	6a1b      	ldr	r3, [r3, #32]
 8006f30:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006f32:	68fb      	ldr	r3, [r7, #12]
 8006f34:	4a28      	ldr	r2, [pc, #160]	; (8006fd8 <TIM_TI1_SetConfig+0xcc>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d01b      	beq.n	8006f72 <TIM_TI1_SetConfig+0x66>
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006f40:	d017      	beq.n	8006f72 <TIM_TI1_SetConfig+0x66>
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	4a25      	ldr	r2, [pc, #148]	; (8006fdc <TIM_TI1_SetConfig+0xd0>)
 8006f46:	4293      	cmp	r3, r2
 8006f48:	d013      	beq.n	8006f72 <TIM_TI1_SetConfig+0x66>
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	4a24      	ldr	r2, [pc, #144]	; (8006fe0 <TIM_TI1_SetConfig+0xd4>)
 8006f4e:	4293      	cmp	r3, r2
 8006f50:	d00f      	beq.n	8006f72 <TIM_TI1_SetConfig+0x66>
 8006f52:	68fb      	ldr	r3, [r7, #12]
 8006f54:	4a23      	ldr	r2, [pc, #140]	; (8006fe4 <TIM_TI1_SetConfig+0xd8>)
 8006f56:	4293      	cmp	r3, r2
 8006f58:	d00b      	beq.n	8006f72 <TIM_TI1_SetConfig+0x66>
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	4a22      	ldr	r2, [pc, #136]	; (8006fe8 <TIM_TI1_SetConfig+0xdc>)
 8006f5e:	4293      	cmp	r3, r2
 8006f60:	d007      	beq.n	8006f72 <TIM_TI1_SetConfig+0x66>
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	4a21      	ldr	r2, [pc, #132]	; (8006fec <TIM_TI1_SetConfig+0xe0>)
 8006f66:	4293      	cmp	r3, r2
 8006f68:	d003      	beq.n	8006f72 <TIM_TI1_SetConfig+0x66>
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	4a20      	ldr	r2, [pc, #128]	; (8006ff0 <TIM_TI1_SetConfig+0xe4>)
 8006f6e:	4293      	cmp	r3, r2
 8006f70:	d101      	bne.n	8006f76 <TIM_TI1_SetConfig+0x6a>
 8006f72:	2301      	movs	r3, #1
 8006f74:	e000      	b.n	8006f78 <TIM_TI1_SetConfig+0x6c>
 8006f76:	2300      	movs	r3, #0
 8006f78:	2b00      	cmp	r3, #0
 8006f7a:	d008      	beq.n	8006f8e <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006f7c:	697b      	ldr	r3, [r7, #20]
 8006f7e:	f023 0303 	bic.w	r3, r3, #3
 8006f82:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006f84:	697a      	ldr	r2, [r7, #20]
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]
 8006f8c:	e003      	b.n	8006f96 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006f8e:	697b      	ldr	r3, [r7, #20]
 8006f90:	f043 0301 	orr.w	r3, r3, #1
 8006f94:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006f96:	697b      	ldr	r3, [r7, #20]
 8006f98:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f9c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006f9e:	683b      	ldr	r3, [r7, #0]
 8006fa0:	011b      	lsls	r3, r3, #4
 8006fa2:	b2db      	uxtb	r3, r3
 8006fa4:	697a      	ldr	r2, [r7, #20]
 8006fa6:	4313      	orrs	r3, r2
 8006fa8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006faa:	693b      	ldr	r3, [r7, #16]
 8006fac:	f023 030a 	bic.w	r3, r3, #10
 8006fb0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006fb2:	68bb      	ldr	r3, [r7, #8]
 8006fb4:	f003 030a 	and.w	r3, r3, #10
 8006fb8:	693a      	ldr	r2, [r7, #16]
 8006fba:	4313      	orrs	r3, r2
 8006fbc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006fbe:	68fb      	ldr	r3, [r7, #12]
 8006fc0:	697a      	ldr	r2, [r7, #20]
 8006fc2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006fc4:	68fb      	ldr	r3, [r7, #12]
 8006fc6:	693a      	ldr	r2, [r7, #16]
 8006fc8:	621a      	str	r2, [r3, #32]
}
 8006fca:	bf00      	nop
 8006fcc:	371c      	adds	r7, #28
 8006fce:	46bd      	mov	sp, r7
 8006fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fd4:	4770      	bx	lr
 8006fd6:	bf00      	nop
 8006fd8:	40012c00 	.word	0x40012c00
 8006fdc:	40000400 	.word	0x40000400
 8006fe0:	40000800 	.word	0x40000800
 8006fe4:	40000c00 	.word	0x40000c00
 8006fe8:	40013400 	.word	0x40013400
 8006fec:	40014000 	.word	0x40014000
 8006ff0:	40015000 	.word	0x40015000

08006ff4 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b087      	sub	sp, #28
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	60f8      	str	r0, [r7, #12]
 8006ffc:	60b9      	str	r1, [r7, #8]
 8006ffe:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007000:	68bb      	ldr	r3, [r7, #8]
 8007002:	f003 031f 	and.w	r3, r3, #31
 8007006:	2201      	movs	r2, #1
 8007008:	fa02 f303 	lsl.w	r3, r2, r3
 800700c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800700e:	68fb      	ldr	r3, [r7, #12]
 8007010:	6a1a      	ldr	r2, [r3, #32]
 8007012:	697b      	ldr	r3, [r7, #20]
 8007014:	43db      	mvns	r3, r3
 8007016:	401a      	ands	r2, r3
 8007018:	68fb      	ldr	r3, [r7, #12]
 800701a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800701c:	68fb      	ldr	r3, [r7, #12]
 800701e:	6a1a      	ldr	r2, [r3, #32]
 8007020:	68bb      	ldr	r3, [r7, #8]
 8007022:	f003 031f 	and.w	r3, r3, #31
 8007026:	6879      	ldr	r1, [r7, #4]
 8007028:	fa01 f303 	lsl.w	r3, r1, r3
 800702c:	431a      	orrs	r2, r3
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	621a      	str	r2, [r3, #32]
}
 8007032:	bf00      	nop
 8007034:	371c      	adds	r7, #28
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr

0800703e <HAL_TIMEx_HallSensor_Init>:
  * @param  htim TIM Hall Sensor Interface handle
  * @param  sConfig TIM Hall Sensor configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_HallSensor_Init(TIM_HandleTypeDef *htim, TIM_HallSensor_InitTypeDef *sConfig)
{
 800703e:	b580      	push	{r7, lr}
 8007040:	b08a      	sub	sp, #40	; 0x28
 8007042:	af00      	add	r7, sp, #0
 8007044:	6078      	str	r0, [r7, #4]
 8007046:	6039      	str	r1, [r7, #0]
  TIM_OC_InitTypeDef OC_Config;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007048:	687b      	ldr	r3, [r7, #4]
 800704a:	2b00      	cmp	r3, #0
 800704c:	d101      	bne.n	8007052 <HAL_TIMEx_HallSensor_Init+0x14>
  {
    return HAL_ERROR;
 800704e:	2301      	movs	r3, #1
 8007050:	e0a0      	b.n	8007194 <HAL_TIMEx_HallSensor_Init+0x156>
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));
  assert_param(IS_TIM_IC_POLARITY(sConfig->IC1Polarity));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007058:	b2db      	uxtb	r3, r3
 800705a:	2b00      	cmp	r3, #0
 800705c:	d106      	bne.n	800706c <HAL_TIMEx_HallSensor_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	2200      	movs	r2, #0
 8007062:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->HallSensor_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIMEx_HallSensor_MspInit(htim);
 8007066:	6878      	ldr	r0, [r7, #4]
 8007068:	f7fa fe7a 	bl	8001d60 <HAL_TIMEx_HallSensor_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2202      	movs	r2, #2
 8007070:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	681a      	ldr	r2, [r3, #0]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	3304      	adds	r3, #4
 800707c:	4619      	mov	r1, r3
 800707e:	4610      	mov	r0, r2
 8007080:	f7ff fb72 	bl	8006768 <TIM_Base_SetConfig>

  /* Configure the Channel 1 as Input Channel to interface with the three Outputs of the  Hall sensor */
  TIM_TI1_SetConfig(htim->Instance, sConfig->IC1Polarity, TIM_ICSELECTION_TRC, sConfig->IC1Filter);
 8007084:	687b      	ldr	r3, [r7, #4]
 8007086:	6818      	ldr	r0, [r3, #0]
 8007088:	683b      	ldr	r3, [r7, #0]
 800708a:	6819      	ldr	r1, [r3, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	689b      	ldr	r3, [r3, #8]
 8007090:	2203      	movs	r2, #3
 8007092:	f7ff ff3b 	bl	8006f0c <TIM_TI1_SetConfig>

  /* Reset the IC1PSC Bits */
  htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	699a      	ldr	r2, [r3, #24]
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	f022 020c 	bic.w	r2, r2, #12
 80070a4:	619a      	str	r2, [r3, #24]
  /* Set the IC1PSC value */
  htim->Instance->CCMR1 |= sConfig->IC1Prescaler;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	6999      	ldr	r1, [r3, #24]
 80070ac:	683b      	ldr	r3, [r7, #0]
 80070ae:	685a      	ldr	r2, [r3, #4]
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	681b      	ldr	r3, [r3, #0]
 80070b4:	430a      	orrs	r2, r1
 80070b6:	619a      	str	r2, [r3, #24]

  /* Enable the Hall sensor interface (XOR function of the three inputs) */
  htim->Instance->CR2 |= TIM_CR2_TI1S;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685a      	ldr	r2, [r3, #4]
 80070be:	687b      	ldr	r3, [r7, #4]
 80070c0:	681b      	ldr	r3, [r3, #0]
 80070c2:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80070c6:	605a      	str	r2, [r3, #4]

  /* Select the TIM_TS_TI1F_ED signal as Input trigger for the TIM */
  htim->Instance->SMCR &= ~TIM_SMCR_TS;
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	689b      	ldr	r3, [r3, #8]
 80070ce:	687a      	ldr	r2, [r7, #4]
 80070d0:	6812      	ldr	r2, [r2, #0]
 80070d2:	f423 1340 	bic.w	r3, r3, #3145728	; 0x300000
 80070d6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070da:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_TS_TI1F_ED;
 80070dc:	687b      	ldr	r3, [r7, #4]
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	689a      	ldr	r2, [r3, #8]
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80070ea:	609a      	str	r2, [r3, #8]

  /* Use the TIM_TS_TI1F_ED signal to reset the TIM counter each edge detection */
  htim->Instance->SMCR &= ~TIM_SMCR_SMS;
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	689b      	ldr	r3, [r3, #8]
 80070f2:	687a      	ldr	r2, [r7, #4]
 80070f4:	6812      	ldr	r2, [r2, #0]
 80070f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80070fa:	f023 0307 	bic.w	r3, r3, #7
 80070fe:	6093      	str	r3, [r2, #8]
  htim->Instance->SMCR |= TIM_SLAVEMODE_RESET;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	689a      	ldr	r2, [r3, #8]
 8007106:	687b      	ldr	r3, [r7, #4]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	f042 0204 	orr.w	r2, r2, #4
 800710e:	609a      	str	r2, [r3, #8]

  /* Program channel 2 in PWM 2 mode with the desired Commutation_Delay*/
  OC_Config.OCFastMode = TIM_OCFAST_DISABLE;
 8007110:	2300      	movs	r3, #0
 8007112:	61fb      	str	r3, [r7, #28]
  OC_Config.OCIdleState = TIM_OCIDLESTATE_RESET;
 8007114:	2300      	movs	r3, #0
 8007116:	623b      	str	r3, [r7, #32]
  OC_Config.OCMode = TIM_OCMODE_PWM2;
 8007118:	2370      	movs	r3, #112	; 0x70
 800711a:	60fb      	str	r3, [r7, #12]
  OC_Config.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 800711c:	2300      	movs	r3, #0
 800711e:	627b      	str	r3, [r7, #36]	; 0x24
  OC_Config.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 8007120:	2300      	movs	r3, #0
 8007122:	61bb      	str	r3, [r7, #24]
  OC_Config.OCPolarity = TIM_OCPOLARITY_HIGH;
 8007124:	2300      	movs	r3, #0
 8007126:	617b      	str	r3, [r7, #20]
  OC_Config.Pulse = sConfig->Commutation_Delay;
 8007128:	683b      	ldr	r3, [r7, #0]
 800712a:	68db      	ldr	r3, [r3, #12]
 800712c:	613b      	str	r3, [r7, #16]

  TIM_OC2_SetConfig(htim->Instance, &OC_Config);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f107 020c 	add.w	r2, r7, #12
 8007136:	4611      	mov	r1, r2
 8007138:	4618      	mov	r0, r3
 800713a:	f7ff fc57 	bl	80069ec <TIM_OC2_SetConfig>

  /* Select OC2REF as trigger output on TRGO: write the MMS bits in the TIMx_CR2
    register to 101 */
  htim->Instance->CR2 &= ~TIM_CR2_MMS;
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	685b      	ldr	r3, [r3, #4]
 8007144:	687a      	ldr	r2, [r7, #4]
 8007146:	6812      	ldr	r2, [r2, #0]
 8007148:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800714c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007150:	6053      	str	r3, [r2, #4]
  htim->Instance->CR2 |= TIM_TRGO_OC2REF;
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	685a      	ldr	r2, [r3, #4]
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	681b      	ldr	r3, [r3, #0]
 800715c:	f042 0250 	orr.w	r2, r2, #80	; 0x50
 8007160:	605a      	str	r2, [r3, #4]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2201      	movs	r2, #1
 8007166:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800716a:	687b      	ldr	r3, [r7, #4]
 800716c:	2201      	movs	r2, #1
 800716e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	2201      	movs	r2, #1
 8007176:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	2201      	movs	r2, #1
 800717e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	2201      	movs	r2, #1
 800718e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007192:	2300      	movs	r3, #0
}
 8007194:	4618      	mov	r0, r3
 8007196:	3728      	adds	r7, #40	; 0x28
 8007198:	46bd      	mov	sp, r7
 800719a:	bd80      	pop	{r7, pc}

0800719c <HAL_TIMEx_PWMN_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800719c:	b580      	push	{r7, lr}
 800719e:	b084      	sub	sp, #16
 80071a0:	af00      	add	r7, sp, #0
 80071a2:	6078      	str	r0, [r7, #4]
 80071a4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Check the TIM complementary channel state */
  if (TIM_CHANNEL_N_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80071a6:	683b      	ldr	r3, [r7, #0]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d109      	bne.n	80071c0 <HAL_TIMEx_PWMN_Start+0x24>
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	2b01      	cmp	r3, #1
 80071b6:	bf14      	ite	ne
 80071b8:	2301      	movne	r3, #1
 80071ba:	2300      	moveq	r3, #0
 80071bc:	b2db      	uxtb	r3, r3
 80071be:	e022      	b.n	8007206 <HAL_TIMEx_PWMN_Start+0x6a>
 80071c0:	683b      	ldr	r3, [r7, #0]
 80071c2:	2b04      	cmp	r3, #4
 80071c4:	d109      	bne.n	80071da <HAL_TIMEx_PWMN_Start+0x3e>
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80071cc:	b2db      	uxtb	r3, r3
 80071ce:	2b01      	cmp	r3, #1
 80071d0:	bf14      	ite	ne
 80071d2:	2301      	movne	r3, #1
 80071d4:	2300      	moveq	r3, #0
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	e015      	b.n	8007206 <HAL_TIMEx_PWMN_Start+0x6a>
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	2b08      	cmp	r3, #8
 80071de:	d109      	bne.n	80071f4 <HAL_TIMEx_PWMN_Start+0x58>
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80071e6:	b2db      	uxtb	r3, r3
 80071e8:	2b01      	cmp	r3, #1
 80071ea:	bf14      	ite	ne
 80071ec:	2301      	movne	r3, #1
 80071ee:	2300      	moveq	r3, #0
 80071f0:	b2db      	uxtb	r3, r3
 80071f2:	e008      	b.n	8007206 <HAL_TIMEx_PWMN_Start+0x6a>
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	f893 3047 	ldrb.w	r3, [r3, #71]	; 0x47
 80071fa:	b2db      	uxtb	r3, r3
 80071fc:	2b01      	cmp	r3, #1
 80071fe:	bf14      	ite	ne
 8007200:	2301      	movne	r3, #1
 8007202:	2300      	moveq	r3, #0
 8007204:	b2db      	uxtb	r3, r3
 8007206:	2b00      	cmp	r3, #0
 8007208:	d001      	beq.n	800720e <HAL_TIMEx_PWMN_Start+0x72>
  {
    return HAL_ERROR;
 800720a:	2301      	movs	r3, #1
 800720c:	e073      	b.n	80072f6 <HAL_TIMEx_PWMN_Start+0x15a>
  }

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800720e:	683b      	ldr	r3, [r7, #0]
 8007210:	2b00      	cmp	r3, #0
 8007212:	d104      	bne.n	800721e <HAL_TIMEx_PWMN_Start+0x82>
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2202      	movs	r2, #2
 8007218:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800721c:	e013      	b.n	8007246 <HAL_TIMEx_PWMN_Start+0xaa>
 800721e:	683b      	ldr	r3, [r7, #0]
 8007220:	2b04      	cmp	r3, #4
 8007222:	d104      	bne.n	800722e <HAL_TIMEx_PWMN_Start+0x92>
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2202      	movs	r2, #2
 8007228:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800722c:	e00b      	b.n	8007246 <HAL_TIMEx_PWMN_Start+0xaa>
 800722e:	683b      	ldr	r3, [r7, #0]
 8007230:	2b08      	cmp	r3, #8
 8007232:	d104      	bne.n	800723e <HAL_TIMEx_PWMN_Start+0xa2>
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2202      	movs	r2, #2
 8007238:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800723c:	e003      	b.n	8007246 <HAL_TIMEx_PWMN_Start+0xaa>
 800723e:	687b      	ldr	r3, [r7, #4]
 8007240:	2202      	movs	r2, #2
 8007242:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Enable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_ENABLE);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	2204      	movs	r2, #4
 800724c:	6839      	ldr	r1, [r7, #0]
 800724e:	4618      	mov	r0, r3
 8007250:	f000 fa52 	bl	80076f8 <TIM_CCxNChannelCmd>

  /* Enable the Main Output */
  __HAL_TIM_MOE_ENABLE(htim);
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007262:	645a      	str	r2, [r3, #68]	; 0x44

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	4a25      	ldr	r2, [pc, #148]	; (8007300 <HAL_TIMEx_PWMN_Start+0x164>)
 800726a:	4293      	cmp	r3, r2
 800726c:	d022      	beq.n	80072b4 <HAL_TIMEx_PWMN_Start+0x118>
 800726e:	687b      	ldr	r3, [r7, #4]
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007276:	d01d      	beq.n	80072b4 <HAL_TIMEx_PWMN_Start+0x118>
 8007278:	687b      	ldr	r3, [r7, #4]
 800727a:	681b      	ldr	r3, [r3, #0]
 800727c:	4a21      	ldr	r2, [pc, #132]	; (8007304 <HAL_TIMEx_PWMN_Start+0x168>)
 800727e:	4293      	cmp	r3, r2
 8007280:	d018      	beq.n	80072b4 <HAL_TIMEx_PWMN_Start+0x118>
 8007282:	687b      	ldr	r3, [r7, #4]
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	4a20      	ldr	r2, [pc, #128]	; (8007308 <HAL_TIMEx_PWMN_Start+0x16c>)
 8007288:	4293      	cmp	r3, r2
 800728a:	d013      	beq.n	80072b4 <HAL_TIMEx_PWMN_Start+0x118>
 800728c:	687b      	ldr	r3, [r7, #4]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	4a1e      	ldr	r2, [pc, #120]	; (800730c <HAL_TIMEx_PWMN_Start+0x170>)
 8007292:	4293      	cmp	r3, r2
 8007294:	d00e      	beq.n	80072b4 <HAL_TIMEx_PWMN_Start+0x118>
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	4a1d      	ldr	r2, [pc, #116]	; (8007310 <HAL_TIMEx_PWMN_Start+0x174>)
 800729c:	4293      	cmp	r3, r2
 800729e:	d009      	beq.n	80072b4 <HAL_TIMEx_PWMN_Start+0x118>
 80072a0:	687b      	ldr	r3, [r7, #4]
 80072a2:	681b      	ldr	r3, [r3, #0]
 80072a4:	4a1b      	ldr	r2, [pc, #108]	; (8007314 <HAL_TIMEx_PWMN_Start+0x178>)
 80072a6:	4293      	cmp	r3, r2
 80072a8:	d004      	beq.n	80072b4 <HAL_TIMEx_PWMN_Start+0x118>
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	681b      	ldr	r3, [r3, #0]
 80072ae:	4a1a      	ldr	r2, [pc, #104]	; (8007318 <HAL_TIMEx_PWMN_Start+0x17c>)
 80072b0:	4293      	cmp	r3, r2
 80072b2:	d115      	bne.n	80072e0 <HAL_TIMEx_PWMN_Start+0x144>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	689a      	ldr	r2, [r3, #8]
 80072ba:	4b18      	ldr	r3, [pc, #96]	; (800731c <HAL_TIMEx_PWMN_Start+0x180>)
 80072bc:	4013      	ands	r3, r2
 80072be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	2b06      	cmp	r3, #6
 80072c4:	d015      	beq.n	80072f2 <HAL_TIMEx_PWMN_Start+0x156>
 80072c6:	68fb      	ldr	r3, [r7, #12]
 80072c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80072cc:	d011      	beq.n	80072f2 <HAL_TIMEx_PWMN_Start+0x156>
    {
      __HAL_TIM_ENABLE(htim);
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	681a      	ldr	r2, [r3, #0]
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	681b      	ldr	r3, [r3, #0]
 80072d8:	f042 0201 	orr.w	r2, r2, #1
 80072dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072de:	e008      	b.n	80072f2 <HAL_TIMEx_PWMN_Start+0x156>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	681b      	ldr	r3, [r3, #0]
 80072e4:	681a      	ldr	r2, [r3, #0]
 80072e6:	687b      	ldr	r3, [r7, #4]
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f042 0201 	orr.w	r2, r2, #1
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	e000      	b.n	80072f4 <HAL_TIMEx_PWMN_Start+0x158>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 80072f4:	2300      	movs	r3, #0
}
 80072f6:	4618      	mov	r0, r3
 80072f8:	3710      	adds	r7, #16
 80072fa:	46bd      	mov	sp, r7
 80072fc:	bd80      	pop	{r7, pc}
 80072fe:	bf00      	nop
 8007300:	40012c00 	.word	0x40012c00
 8007304:	40000400 	.word	0x40000400
 8007308:	40000800 	.word	0x40000800
 800730c:	40000c00 	.word	0x40000c00
 8007310:	40013400 	.word	0x40013400
 8007314:	40014000 	.word	0x40014000
 8007318:	40015000 	.word	0x40015000
 800731c:	00010007 	.word	0x00010007

08007320 <HAL_TIMEx_PWMN_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_PWMN_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007320:	b580      	push	{r7, lr}
 8007322:	b082      	sub	sp, #8
 8007324:	af00      	add	r7, sp, #0
 8007326:	6078      	str	r0, [r7, #4]
 8007328:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCXN_INSTANCE(htim->Instance, Channel));

  /* Disable the complementary PWM output  */
  TIM_CCxNChannelCmd(htim->Instance, Channel, TIM_CCxN_DISABLE);
 800732a:	687b      	ldr	r3, [r7, #4]
 800732c:	681b      	ldr	r3, [r3, #0]
 800732e:	2200      	movs	r2, #0
 8007330:	6839      	ldr	r1, [r7, #0]
 8007332:	4618      	mov	r0, r3
 8007334:	f000 f9e0 	bl	80076f8 <TIM_CCxNChannelCmd>

  /* Disable the Main Output */
  __HAL_TIM_MOE_DISABLE(htim);
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	6a1a      	ldr	r2, [r3, #32]
 800733e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007342:	4013      	ands	r3, r2
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10f      	bne.n	8007368 <HAL_TIMEx_PWMN_Stop+0x48>
 8007348:	687b      	ldr	r3, [r7, #4]
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	6a1a      	ldr	r2, [r3, #32]
 800734e:	f244 4344 	movw	r3, #17476	; 0x4444
 8007352:	4013      	ands	r3, r2
 8007354:	2b00      	cmp	r3, #0
 8007356:	d107      	bne.n	8007368 <HAL_TIMEx_PWMN_Stop+0x48>
 8007358:	687b      	ldr	r3, [r7, #4]
 800735a:	681b      	ldr	r3, [r3, #0]
 800735c:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007366:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	6a1a      	ldr	r2, [r3, #32]
 800736e:	f241 1311 	movw	r3, #4369	; 0x1111
 8007372:	4013      	ands	r3, r2
 8007374:	2b00      	cmp	r3, #0
 8007376:	d10f      	bne.n	8007398 <HAL_TIMEx_PWMN_Stop+0x78>
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	6a1a      	ldr	r2, [r3, #32]
 800737e:	f244 4344 	movw	r3, #17476	; 0x4444
 8007382:	4013      	ands	r3, r2
 8007384:	2b00      	cmp	r3, #0
 8007386:	d107      	bne.n	8007398 <HAL_TIMEx_PWMN_Stop+0x78>
 8007388:	687b      	ldr	r3, [r7, #4]
 800738a:	681b      	ldr	r3, [r3, #0]
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	687b      	ldr	r3, [r7, #4]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	f022 0201 	bic.w	r2, r2, #1
 8007396:	601a      	str	r2, [r3, #0]

  /* Set the TIM complementary channel state */
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8007398:	683b      	ldr	r3, [r7, #0]
 800739a:	2b00      	cmp	r3, #0
 800739c:	d104      	bne.n	80073a8 <HAL_TIMEx_PWMN_Stop+0x88>
 800739e:	687b      	ldr	r3, [r7, #4]
 80073a0:	2201      	movs	r2, #1
 80073a2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80073a6:	e013      	b.n	80073d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	2b04      	cmp	r3, #4
 80073ac:	d104      	bne.n	80073b8 <HAL_TIMEx_PWMN_Stop+0x98>
 80073ae:	687b      	ldr	r3, [r7, #4]
 80073b0:	2201      	movs	r2, #1
 80073b2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80073b6:	e00b      	b.n	80073d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80073b8:	683b      	ldr	r3, [r7, #0]
 80073ba:	2b08      	cmp	r3, #8
 80073bc:	d104      	bne.n	80073c8 <HAL_TIMEx_PWMN_Stop+0xa8>
 80073be:	687b      	ldr	r3, [r7, #4]
 80073c0:	2201      	movs	r2, #1
 80073c2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 80073c6:	e003      	b.n	80073d0 <HAL_TIMEx_PWMN_Stop+0xb0>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2201      	movs	r2, #1
 80073cc:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Return function status */
  return HAL_OK;
 80073d0:	2300      	movs	r3, #0
}
 80073d2:	4618      	mov	r0, r3
 80073d4:	3708      	adds	r7, #8
 80073d6:	46bd      	mov	sp, r7
 80073d8:	bd80      	pop	{r7, pc}
	...

080073dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80073dc:	b480      	push	{r7}
 80073de:	b085      	sub	sp, #20
 80073e0:	af00      	add	r7, sp, #0
 80073e2:	6078      	str	r0, [r7, #4]
 80073e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80073ec:	2b01      	cmp	r3, #1
 80073ee:	d101      	bne.n	80073f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80073f0:	2302      	movs	r3, #2
 80073f2:	e074      	b.n	80074de <HAL_TIMEx_MasterConfigSynchronization+0x102>
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	2201      	movs	r2, #1
 80073f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	2202      	movs	r2, #2
 8007400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	681b      	ldr	r3, [r3, #0]
 8007408:	685b      	ldr	r3, [r3, #4]
 800740a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	681b      	ldr	r3, [r3, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	681b      	ldr	r3, [r3, #0]
 8007418:	4a34      	ldr	r2, [pc, #208]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 800741a:	4293      	cmp	r3, r2
 800741c:	d009      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	681b      	ldr	r3, [r3, #0]
 8007422:	4a33      	ldr	r2, [pc, #204]	; (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8007424:	4293      	cmp	r3, r2
 8007426:	d004      	beq.n	8007432 <HAL_TIMEx_MasterConfigSynchronization+0x56>
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	4a31      	ldr	r2, [pc, #196]	; (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 800742e:	4293      	cmp	r3, r2
 8007430:	d108      	bne.n	8007444 <HAL_TIMEx_MasterConfigSynchronization+0x68>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8007432:	68fb      	ldr	r3, [r7, #12]
 8007434:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8007438:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	68fa      	ldr	r2, [r7, #12]
 8007440:	4313      	orrs	r3, r2
 8007442:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007444:	68fb      	ldr	r3, [r7, #12]
 8007446:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 800744a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800744e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	68fa      	ldr	r2, [r7, #12]
 8007456:	4313      	orrs	r3, r2
 8007458:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800745a:	687b      	ldr	r3, [r7, #4]
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	68fa      	ldr	r2, [r7, #12]
 8007460:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	681b      	ldr	r3, [r3, #0]
 8007466:	4a21      	ldr	r2, [pc, #132]	; (80074ec <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8007468:	4293      	cmp	r3, r2
 800746a:	d022      	beq.n	80074b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007474:	d01d      	beq.n	80074b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	4a1f      	ldr	r2, [pc, #124]	; (80074f8 <HAL_TIMEx_MasterConfigSynchronization+0x11c>)
 800747c:	4293      	cmp	r3, r2
 800747e:	d018      	beq.n	80074b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a1d      	ldr	r2, [pc, #116]	; (80074fc <HAL_TIMEx_MasterConfigSynchronization+0x120>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d013      	beq.n	80074b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	681b      	ldr	r3, [r3, #0]
 800748e:	4a1c      	ldr	r2, [pc, #112]	; (8007500 <HAL_TIMEx_MasterConfigSynchronization+0x124>)
 8007490:	4293      	cmp	r3, r2
 8007492:	d00e      	beq.n	80074b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 8007494:	687b      	ldr	r3, [r7, #4]
 8007496:	681b      	ldr	r3, [r3, #0]
 8007498:	4a15      	ldr	r2, [pc, #84]	; (80074f0 <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 800749a:	4293      	cmp	r3, r2
 800749c:	d009      	beq.n	80074b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	681b      	ldr	r3, [r3, #0]
 80074a2:	4a18      	ldr	r2, [pc, #96]	; (8007504 <HAL_TIMEx_MasterConfigSynchronization+0x128>)
 80074a4:	4293      	cmp	r3, r2
 80074a6:	d004      	beq.n	80074b2 <HAL_TIMEx_MasterConfigSynchronization+0xd6>
 80074a8:	687b      	ldr	r3, [r7, #4]
 80074aa:	681b      	ldr	r3, [r3, #0]
 80074ac:	4a11      	ldr	r2, [pc, #68]	; (80074f4 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80074ae:	4293      	cmp	r3, r2
 80074b0:	d10c      	bne.n	80074cc <HAL_TIMEx_MasterConfigSynchronization+0xf0>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80074b2:	68bb      	ldr	r3, [r7, #8]
 80074b4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80074b8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80074ba:	683b      	ldr	r3, [r7, #0]
 80074bc:	689b      	ldr	r3, [r3, #8]
 80074be:	68ba      	ldr	r2, [r7, #8]
 80074c0:	4313      	orrs	r3, r2
 80074c2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80074c4:	687b      	ldr	r3, [r7, #4]
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	68ba      	ldr	r2, [r7, #8]
 80074ca:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	2201      	movs	r2, #1
 80074d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2200      	movs	r2, #0
 80074d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80074dc:	2300      	movs	r3, #0
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3714      	adds	r7, #20
 80074e2:	46bd      	mov	sp, r7
 80074e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e8:	4770      	bx	lr
 80074ea:	bf00      	nop
 80074ec:	40012c00 	.word	0x40012c00
 80074f0:	40013400 	.word	0x40013400
 80074f4:	40015000 	.word	0x40015000
 80074f8:	40000400 	.word	0x40000400
 80074fc:	40000800 	.word	0x40000800
 8007500:	40000c00 	.word	0x40000c00
 8007504:	40014000 	.word	0x40014000

08007508 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 8007508:	b480      	push	{r7}
 800750a:	b085      	sub	sp, #20
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 8007512:	2300      	movs	r3, #0
 8007514:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->BreakFilter));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800751c:	2b01      	cmp	r3, #1
 800751e:	d101      	bne.n	8007524 <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 8007520:	2302      	movs	r3, #2
 8007522:	e096      	b.n	8007652 <HAL_TIMEx_ConfigBreakDeadTime+0x14a>
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	2201      	movs	r2, #1
 8007528:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 8007532:	683b      	ldr	r3, [r7, #0]
 8007534:	68db      	ldr	r3, [r3, #12]
 8007536:	4313      	orrs	r3, r2
 8007538:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	689b      	ldr	r3, [r3, #8]
 8007544:	4313      	orrs	r3, r2
 8007546:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007548:	68fb      	ldr	r3, [r7, #12]
 800754a:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 800754e:	683b      	ldr	r3, [r7, #0]
 8007550:	685b      	ldr	r3, [r3, #4]
 8007552:	4313      	orrs	r3, r2
 8007554:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4313      	orrs	r3, r2
 8007562:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	691b      	ldr	r3, [r3, #16]
 800756e:	4313      	orrs	r3, r2
 8007570:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	695b      	ldr	r3, [r3, #20]
 800757c:	4313      	orrs	r3, r2
 800757e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800758a:	4313      	orrs	r3, r2
 800758c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKF, (sBreakDeadTimeConfig->BreakFilter << TIM_BDTR_BKF_Pos));
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	f423 2270 	bic.w	r2, r3, #983040	; 0xf0000
 8007594:	683b      	ldr	r3, [r7, #0]
 8007596:	699b      	ldr	r3, [r3, #24]
 8007598:	041b      	lsls	r3, r3, #16
 800759a:	4313      	orrs	r3, r2
 800759c:	60fb      	str	r3, [r7, #12]

  if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 800759e:	687b      	ldr	r3, [r7, #4]
 80075a0:	681b      	ldr	r3, [r3, #0]
 80075a2:	4a2f      	ldr	r2, [pc, #188]	; (8007660 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80075a4:	4293      	cmp	r3, r2
 80075a6:	d009      	beq.n	80075bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	4a2d      	ldr	r2, [pc, #180]	; (8007664 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80075ae:	4293      	cmp	r3, r2
 80075b0:	d004      	beq.n	80075bc <HAL_TIMEx_ConfigBreakDeadTime+0xb4>
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	681b      	ldr	r3, [r3, #0]
 80075b6:	4a2c      	ldr	r2, [pc, #176]	; (8007668 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80075b8:	4293      	cmp	r3, r2
 80075ba:	d106      	bne.n	80075ca <HAL_TIMEx_ConfigBreakDeadTime+0xc2>
  {
    /* Check the parameters */
    assert_param(IS_TIM_BREAK_AFMODE(sBreakDeadTimeConfig->BreakAFMode));

    /* Set BREAK AF mode */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BKBID, sBreakDeadTimeConfig->BreakAFMode);
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 80075c2:	683b      	ldr	r3, [r7, #0]
 80075c4:	69db      	ldr	r3, [r3, #28]
 80075c6:	4313      	orrs	r3, r2
 80075c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_BKIN2_INSTANCE(htim->Instance))
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	681b      	ldr	r3, [r3, #0]
 80075ce:	4a24      	ldr	r2, [pc, #144]	; (8007660 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 80075d0:	4293      	cmp	r3, r2
 80075d2:	d009      	beq.n	80075e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	4a22      	ldr	r2, [pc, #136]	; (8007664 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d004      	beq.n	80075e8 <HAL_TIMEx_ConfigBreakDeadTime+0xe0>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	681b      	ldr	r3, [r3, #0]
 80075e2:	4a21      	ldr	r2, [pc, #132]	; (8007668 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 80075e4:	4293      	cmp	r3, r2
 80075e6:	d12b      	bne.n	8007640 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    assert_param(IS_TIM_BREAK2_STATE(sBreakDeadTimeConfig->Break2State));
    assert_param(IS_TIM_BREAK2_POLARITY(sBreakDeadTimeConfig->Break2Polarity));
    assert_param(IS_TIM_BREAK_FILTER(sBreakDeadTimeConfig->Break2Filter));

    /* Set the BREAK2 input related BDTR bits */
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2F, (sBreakDeadTimeConfig->Break2Filter << TIM_BDTR_BK2F_Pos));
 80075e8:	68fb      	ldr	r3, [r7, #12]
 80075ea:	f423 0270 	bic.w	r2, r3, #15728640	; 0xf00000
 80075ee:	683b      	ldr	r3, [r7, #0]
 80075f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80075f2:	051b      	lsls	r3, r3, #20
 80075f4:	4313      	orrs	r3, r2
 80075f6:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2E, sBreakDeadTimeConfig->Break2State);
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	f023 7280 	bic.w	r2, r3, #16777216	; 0x1000000
 80075fe:	683b      	ldr	r3, [r7, #0]
 8007600:	6a1b      	ldr	r3, [r3, #32]
 8007602:	4313      	orrs	r3, r2
 8007604:	60fb      	str	r3, [r7, #12]
    MODIFY_REG(tmpbdtr, TIM_BDTR_BK2P, sBreakDeadTimeConfig->Break2Polarity);
 8007606:	68fb      	ldr	r3, [r7, #12]
 8007608:	f023 7200 	bic.w	r2, r3, #33554432	; 0x2000000
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007610:	4313      	orrs	r3, r2
 8007612:	60fb      	str	r3, [r7, #12]

    if (IS_TIM_ADVANCED_INSTANCE(htim->Instance))
 8007614:	687b      	ldr	r3, [r7, #4]
 8007616:	681b      	ldr	r3, [r3, #0]
 8007618:	4a11      	ldr	r2, [pc, #68]	; (8007660 <HAL_TIMEx_ConfigBreakDeadTime+0x158>)
 800761a:	4293      	cmp	r3, r2
 800761c:	d009      	beq.n	8007632 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	4a10      	ldr	r2, [pc, #64]	; (8007664 <HAL_TIMEx_ConfigBreakDeadTime+0x15c>)
 8007624:	4293      	cmp	r3, r2
 8007626:	d004      	beq.n	8007632 <HAL_TIMEx_ConfigBreakDeadTime+0x12a>
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	681b      	ldr	r3, [r3, #0]
 800762c:	4a0e      	ldr	r2, [pc, #56]	; (8007668 <HAL_TIMEx_ConfigBreakDeadTime+0x160>)
 800762e:	4293      	cmp	r3, r2
 8007630:	d106      	bne.n	8007640 <HAL_TIMEx_ConfigBreakDeadTime+0x138>
    {
      /* Check the parameters */
      assert_param(IS_TIM_BREAK2_AFMODE(sBreakDeadTimeConfig->Break2AFMode));

      /* Set BREAK2 AF mode */
      MODIFY_REG(tmpbdtr, TIM_BDTR_BK2BID, sBreakDeadTimeConfig->Break2AFMode);
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8007638:	683b      	ldr	r3, [r7, #0]
 800763a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800763c:	4313      	orrs	r3, r2
 800763e:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	68fa      	ldr	r2, [r7, #12]
 8007646:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 8007648:	687b      	ldr	r3, [r7, #4]
 800764a:	2200      	movs	r2, #0
 800764c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007650:	2300      	movs	r3, #0
}
 8007652:	4618      	mov	r0, r3
 8007654:	3714      	adds	r7, #20
 8007656:	46bd      	mov	sp, r7
 8007658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800765c:	4770      	bx	lr
 800765e:	bf00      	nop
 8007660:	40012c00 	.word	0x40012c00
 8007664:	40013400 	.word	0x40013400
 8007668:	40015000 	.word	0x40015000

0800766c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800766c:	b480      	push	{r7}
 800766e:	b083      	sub	sp, #12
 8007670:	af00      	add	r7, sp, #0
 8007672:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007674:	bf00      	nop
 8007676:	370c      	adds	r7, #12
 8007678:	46bd      	mov	sp, r7
 800767a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767e:	4770      	bx	lr

08007680 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007680:	b480      	push	{r7}
 8007682:	b083      	sub	sp, #12
 8007684:	af00      	add	r7, sp, #0
 8007686:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007688:	bf00      	nop
 800768a:	370c      	adds	r7, #12
 800768c:	46bd      	mov	sp, r7
 800768e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007692:	4770      	bx	lr

08007694 <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8007694:	b480      	push	{r7}
 8007696:	b083      	sub	sp, #12
 8007698:	af00      	add	r7, sp, #0
 800769a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800769c:	bf00      	nop
 800769e:	370c      	adds	r7, #12
 80076a0:	46bd      	mov	sp, r7
 80076a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a6:	4770      	bx	lr

080076a8 <HAL_TIMEx_EncoderIndexCallback>:
  * @brief  Encoder index callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_EncoderIndexCallback(TIM_HandleTypeDef *htim)
{
 80076a8:	b480      	push	{r7}
 80076aa:	b083      	sub	sp, #12
 80076ac:	af00      	add	r7, sp, #0
 80076ae:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_EncoderIndexCallback could be implemented in the user file
   */
}
 80076b0:	bf00      	nop
 80076b2:	370c      	adds	r7, #12
 80076b4:	46bd      	mov	sp, r7
 80076b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ba:	4770      	bx	lr

080076bc <HAL_TIMEx_DirectionChangeCallback>:
  * @brief  Direction change callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_DirectionChangeCallback(TIM_HandleTypeDef *htim)
{
 80076bc:	b480      	push	{r7}
 80076be:	b083      	sub	sp, #12
 80076c0:	af00      	add	r7, sp, #0
 80076c2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_DirectionChangeCallback could be implemented in the user file
   */
}
 80076c4:	bf00      	nop
 80076c6:	370c      	adds	r7, #12
 80076c8:	46bd      	mov	sp, r7
 80076ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076ce:	4770      	bx	lr

080076d0 <HAL_TIMEx_IndexErrorCallback>:
  * @brief  Index error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_IndexErrorCallback(TIM_HandleTypeDef *htim)
{
 80076d0:	b480      	push	{r7}
 80076d2:	b083      	sub	sp, #12
 80076d4:	af00      	add	r7, sp, #0
 80076d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_IndexErrorCallback could be implemented in the user file
   */
}
 80076d8:	bf00      	nop
 80076da:	370c      	adds	r7, #12
 80076dc:	46bd      	mov	sp, r7
 80076de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e2:	4770      	bx	lr

080076e4 <HAL_TIMEx_TransitionErrorCallback>:
  * @brief  Transition error callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_TransitionErrorCallback(TIM_HandleTypeDef *htim)
{
 80076e4:	b480      	push	{r7}
 80076e6:	b083      	sub	sp, #12
 80076e8:	af00      	add	r7, sp, #0
 80076ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_TransitionErrorCallback could be implemented in the user file
   */
}
 80076ec:	bf00      	nop
 80076ee:	370c      	adds	r7, #12
 80076f0:	46bd      	mov	sp, r7
 80076f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076f6:	4770      	bx	lr

080076f8 <TIM_CCxNChannelCmd>:
  * @param  ChannelNState specifies the TIM Channel CCxNE bit new state.
  *          This parameter can be: TIM_CCxN_ENABLE or TIM_CCxN_Disable.
  * @retval None
  */
static void TIM_CCxNChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelNState)
{
 80076f8:	b480      	push	{r7}
 80076fa:	b087      	sub	sp, #28
 80076fc:	af00      	add	r7, sp, #0
 80076fe:	60f8      	str	r0, [r7, #12]
 8007700:	60b9      	str	r1, [r7, #8]
 8007702:	607a      	str	r2, [r7, #4]
  uint32_t tmp;

  tmp = TIM_CCER_CC1NE << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007704:	68bb      	ldr	r3, [r7, #8]
 8007706:	f003 031f 	and.w	r3, r3, #31
 800770a:	2204      	movs	r2, #4
 800770c:	fa02 f303 	lsl.w	r3, r2, r3
 8007710:	617b      	str	r3, [r7, #20]

  /* Reset the CCxNE Bit */
  TIMx->CCER &=  ~tmp;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	6a1a      	ldr	r2, [r3, #32]
 8007716:	697b      	ldr	r3, [r7, #20]
 8007718:	43db      	mvns	r3, r3
 800771a:	401a      	ands	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxNE Bit */
  TIMx->CCER |= (uint32_t)(ChannelNState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	6a1a      	ldr	r2, [r3, #32]
 8007724:	68bb      	ldr	r3, [r7, #8]
 8007726:	f003 031f 	and.w	r3, r3, #31
 800772a:	6879      	ldr	r1, [r7, #4]
 800772c:	fa01 f303 	lsl.w	r3, r1, r3
 8007730:	431a      	orrs	r2, r3
 8007732:	68fb      	ldr	r3, [r7, #12]
 8007734:	621a      	str	r2, [r3, #32]
}
 8007736:	bf00      	nop
 8007738:	371c      	adds	r7, #28
 800773a:	46bd      	mov	sp, r7
 800773c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007740:	4770      	bx	lr

08007742 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007742:	b580      	push	{r7, lr}
 8007744:	b082      	sub	sp, #8
 8007746:	af00      	add	r7, sp, #0
 8007748:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d101      	bne.n	8007754 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8007750:	2301      	movs	r3, #1
 8007752:	e042      	b.n	80077da <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800775a:	2b00      	cmp	r3, #0
 800775c:	d106      	bne.n	800776c <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007766:	6878      	ldr	r0, [r7, #4]
 8007768:	f7fa fc5c 	bl	8002024 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	2224      	movs	r2, #36	; 0x24
 8007770:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  __HAL_UART_DISABLE(huart);
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	681a      	ldr	r2, [r3, #0]
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	f022 0201 	bic.w	r2, r2, #1
 8007782:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 fc51 	bl	800802c <UART_SetConfig>
 800778a:	4603      	mov	r3, r0
 800778c:	2b01      	cmp	r3, #1
 800778e:	d101      	bne.n	8007794 <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8007790:	2301      	movs	r3, #1
 8007792:	e022      	b.n	80077da <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007798:	2b00      	cmp	r3, #0
 800779a:	d002      	beq.n	80077a2 <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 800779c:	6878      	ldr	r0, [r7, #4]
 800779e:	f000 ff41 	bl	8008624 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	685a      	ldr	r2, [r3, #4]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80077b0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	681b      	ldr	r3, [r3, #0]
 80077b6:	689a      	ldr	r2, [r3, #8]
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80077c0:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80077c2:	687b      	ldr	r3, [r7, #4]
 80077c4:	681b      	ldr	r3, [r3, #0]
 80077c6:	681a      	ldr	r2, [r3, #0]
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	f042 0201 	orr.w	r2, r2, #1
 80077d0:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80077d2:	6878      	ldr	r0, [r7, #4]
 80077d4:	f000 ffc8 	bl	8008768 <UART_CheckIdleState>
 80077d8:	4603      	mov	r3, r0
}
 80077da:	4618      	mov	r0, r3
 80077dc:	3708      	adds	r7, #8
 80077de:	46bd      	mov	sp, r7
 80077e0:	bd80      	pop	{r7, pc}

080077e2 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80077e2:	b580      	push	{r7, lr}
 80077e4:	b08a      	sub	sp, #40	; 0x28
 80077e6:	af02      	add	r7, sp, #8
 80077e8:	60f8      	str	r0, [r7, #12]
 80077ea:	60b9      	str	r1, [r7, #8]
 80077ec:	603b      	str	r3, [r7, #0]
 80077ee:	4613      	mov	r3, r2
 80077f0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80077f2:	68fb      	ldr	r3, [r7, #12]
 80077f4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80077f8:	2b20      	cmp	r3, #32
 80077fa:	f040 8083 	bne.w	8007904 <HAL_UART_Transmit+0x122>
  {
    if ((pData == NULL) || (Size == 0U))
 80077fe:	68bb      	ldr	r3, [r7, #8]
 8007800:	2b00      	cmp	r3, #0
 8007802:	d002      	beq.n	800780a <HAL_UART_Transmit+0x28>
 8007804:	88fb      	ldrh	r3, [r7, #6]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d101      	bne.n	800780e <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 800780a:	2301      	movs	r3, #1
 800780c:	e07b      	b.n	8007906 <HAL_UART_Transmit+0x124>
    }

    __HAL_LOCK(huart);
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8007814:	2b01      	cmp	r3, #1
 8007816:	d101      	bne.n	800781c <HAL_UART_Transmit+0x3a>
 8007818:	2302      	movs	r3, #2
 800781a:	e074      	b.n	8007906 <HAL_UART_Transmit+0x124>
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	2201      	movs	r2, #1
 8007820:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	2200      	movs	r2, #0
 8007828:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	2221      	movs	r2, #33	; 0x21
 8007830:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007834:	f7fa ff52 	bl	80026dc <HAL_GetTick>
 8007838:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	88fa      	ldrh	r2, [r7, #6]
 800783e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	88fa      	ldrh	r2, [r7, #6]
 8007846:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	689b      	ldr	r3, [r3, #8]
 800784e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007852:	d108      	bne.n	8007866 <HAL_UART_Transmit+0x84>
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	691b      	ldr	r3, [r3, #16]
 8007858:	2b00      	cmp	r3, #0
 800785a:	d104      	bne.n	8007866 <HAL_UART_Transmit+0x84>
    {
      pdata8bits  = NULL;
 800785c:	2300      	movs	r3, #0
 800785e:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	61bb      	str	r3, [r7, #24]
 8007864:	e003      	b.n	800786e <HAL_UART_Transmit+0x8c>
    }
    else
    {
      pdata8bits  = pData;
 8007866:	68bb      	ldr	r3, [r7, #8]
 8007868:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800786a:	2300      	movs	r3, #0
 800786c:	61bb      	str	r3, [r7, #24]
    }

    __HAL_UNLOCK(huart);
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	2200      	movs	r2, #0
 8007872:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    while (huart->TxXferCount > 0U)
 8007876:	e02c      	b.n	80078d2 <HAL_UART_Transmit+0xf0>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	9300      	str	r3, [sp, #0]
 800787c:	697b      	ldr	r3, [r7, #20]
 800787e:	2200      	movs	r2, #0
 8007880:	2180      	movs	r1, #128	; 0x80
 8007882:	68f8      	ldr	r0, [r7, #12]
 8007884:	f000 ffbb 	bl	80087fe <UART_WaitOnFlagUntilTimeout>
 8007888:	4603      	mov	r3, r0
 800788a:	2b00      	cmp	r3, #0
 800788c:	d001      	beq.n	8007892 <HAL_UART_Transmit+0xb0>
      {
        return HAL_TIMEOUT;
 800788e:	2303      	movs	r3, #3
 8007890:	e039      	b.n	8007906 <HAL_UART_Transmit+0x124>
      }
      if (pdata8bits == NULL)
 8007892:	69fb      	ldr	r3, [r7, #28]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10b      	bne.n	80078b0 <HAL_UART_Transmit+0xce>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007898:	69bb      	ldr	r3, [r7, #24]
 800789a:	881b      	ldrh	r3, [r3, #0]
 800789c:	461a      	mov	r2, r3
 800789e:	68fb      	ldr	r3, [r7, #12]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80078a6:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 80078a8:	69bb      	ldr	r3, [r7, #24]
 80078aa:	3302      	adds	r3, #2
 80078ac:	61bb      	str	r3, [r7, #24]
 80078ae:	e007      	b.n	80078c0 <HAL_UART_Transmit+0xde>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 80078b0:	69fb      	ldr	r3, [r7, #28]
 80078b2:	781a      	ldrb	r2, [r3, #0]
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 80078ba:	69fb      	ldr	r3, [r7, #28]
 80078bc:	3301      	adds	r3, #1
 80078be:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80078c0:	68fb      	ldr	r3, [r7, #12]
 80078c2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078c6:	b29b      	uxth	r3, r3
 80078c8:	3b01      	subs	r3, #1
 80078ca:	b29a      	uxth	r2, r3
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 80078d2:	68fb      	ldr	r3, [r7, #12]
 80078d4:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80078d8:	b29b      	uxth	r3, r3
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d1cc      	bne.n	8007878 <HAL_UART_Transmit+0x96>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80078de:	683b      	ldr	r3, [r7, #0]
 80078e0:	9300      	str	r3, [sp, #0]
 80078e2:	697b      	ldr	r3, [r7, #20]
 80078e4:	2200      	movs	r2, #0
 80078e6:	2140      	movs	r1, #64	; 0x40
 80078e8:	68f8      	ldr	r0, [r7, #12]
 80078ea:	f000 ff88 	bl	80087fe <UART_WaitOnFlagUntilTimeout>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <HAL_UART_Transmit+0x116>
    {
      return HAL_TIMEOUT;
 80078f4:	2303      	movs	r3, #3
 80078f6:	e006      	b.n	8007906 <HAL_UART_Transmit+0x124>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	2220      	movs	r2, #32
 80078fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    return HAL_OK;
 8007900:	2300      	movs	r3, #0
 8007902:	e000      	b.n	8007906 <HAL_UART_Transmit+0x124>
  }
  else
  {
    return HAL_BUSY;
 8007904:	2302      	movs	r3, #2
  }
}
 8007906:	4618      	mov	r0, r3
 8007908:	3720      	adds	r7, #32
 800790a:	46bd      	mov	sp, r7
 800790c:	bd80      	pop	{r7, pc}
	...

08007910 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007910:	b580      	push	{r7, lr}
 8007912:	b08a      	sub	sp, #40	; 0x28
 8007914:	af00      	add	r7, sp, #0
 8007916:	60f8      	str	r0, [r7, #12]
 8007918:	60b9      	str	r1, [r7, #8]
 800791a:	4613      	mov	r3, r2
 800791c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007924:	2b20      	cmp	r3, #32
 8007926:	d142      	bne.n	80079ae <HAL_UART_Receive_IT+0x9e>
  {
    if ((pData == NULL) || (Size == 0U))
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	2b00      	cmp	r3, #0
 800792c:	d002      	beq.n	8007934 <HAL_UART_Receive_IT+0x24>
 800792e:	88fb      	ldrh	r3, [r7, #6]
 8007930:	2b00      	cmp	r3, #0
 8007932:	d101      	bne.n	8007938 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 8007934:	2301      	movs	r3, #1
 8007936:	e03b      	b.n	80079b0 <HAL_UART_Receive_IT+0xa0>
    }

    __HAL_LOCK(huart);
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 800793e:	2b01      	cmp	r3, #1
 8007940:	d101      	bne.n	8007946 <HAL_UART_Receive_IT+0x36>
 8007942:	2302      	movs	r3, #2
 8007944:	e034      	b.n	80079b0 <HAL_UART_Receive_IT+0xa0>
 8007946:	68fb      	ldr	r3, [r7, #12]
 8007948:	2201      	movs	r2, #1
 800794a:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	2200      	movs	r2, #0
 8007952:	66da      	str	r2, [r3, #108]	; 0x6c

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 8007954:	68fb      	ldr	r3, [r7, #12]
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	4a17      	ldr	r2, [pc, #92]	; (80079b8 <HAL_UART_Receive_IT+0xa8>)
 800795a:	4293      	cmp	r3, r2
 800795c:	d01f      	beq.n	800799e <HAL_UART_Receive_IT+0x8e>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	685b      	ldr	r3, [r3, #4]
 8007964:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007968:	2b00      	cmp	r3, #0
 800796a:	d018      	beq.n	800799e <HAL_UART_Receive_IT+0x8e>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800796c:	68fb      	ldr	r3, [r7, #12]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007972:	697b      	ldr	r3, [r7, #20]
 8007974:	e853 3f00 	ldrex	r3, [r3]
 8007978:	613b      	str	r3, [r7, #16]
   return(result);
 800797a:	693b      	ldr	r3, [r7, #16]
 800797c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8007980:	627b      	str	r3, [r7, #36]	; 0x24
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	681b      	ldr	r3, [r3, #0]
 8007986:	461a      	mov	r2, r3
 8007988:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800798a:	623b      	str	r3, [r7, #32]
 800798c:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800798e:	69f9      	ldr	r1, [r7, #28]
 8007990:	6a3a      	ldr	r2, [r7, #32]
 8007992:	e841 2300 	strex	r3, r2, [r1]
 8007996:	61bb      	str	r3, [r7, #24]
   return(result);
 8007998:	69bb      	ldr	r3, [r7, #24]
 800799a:	2b00      	cmp	r3, #0
 800799c:	d1e6      	bne.n	800796c <HAL_UART_Receive_IT+0x5c>
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800799e:	88fb      	ldrh	r3, [r7, #6]
 80079a0:	461a      	mov	r2, r3
 80079a2:	68b9      	ldr	r1, [r7, #8]
 80079a4:	68f8      	ldr	r0, [r7, #12]
 80079a6:	f000 fff3 	bl	8008990 <UART_Start_Receive_IT>
 80079aa:	4603      	mov	r3, r0
 80079ac:	e000      	b.n	80079b0 <HAL_UART_Receive_IT+0xa0>
  }
  else
  {
    return HAL_BUSY;
 80079ae:	2302      	movs	r3, #2
  }
}
 80079b0:	4618      	mov	r0, r3
 80079b2:	3728      	adds	r7, #40	; 0x28
 80079b4:	46bd      	mov	sp, r7
 80079b6:	bd80      	pop	{r7, pc}
 80079b8:	40008000 	.word	0x40008000

080079bc <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80079bc:	b580      	push	{r7, lr}
 80079be:	b0ba      	sub	sp, #232	; 0xe8
 80079c0:	af00      	add	r7, sp, #0
 80079c2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	69db      	ldr	r3, [r3, #28]
 80079ca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80079d8:	687b      	ldr	r3, [r7, #4]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	689b      	ldr	r3, [r3, #8]
 80079de:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80079e2:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 80079e6:	f640 030f 	movw	r3, #2063	; 0x80f
 80079ea:	4013      	ands	r3, r2
 80079ec:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 80079f0:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d11b      	bne.n	8007a30 <HAL_UART_IRQHandler+0x74>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 80079f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80079fc:	f003 0320 	and.w	r3, r3, #32
 8007a00:	2b00      	cmp	r3, #0
 8007a02:	d015      	beq.n	8007a30 <HAL_UART_IRQHandler+0x74>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a08:	f003 0320 	and.w	r3, r3, #32
 8007a0c:	2b00      	cmp	r3, #0
 8007a0e:	d105      	bne.n	8007a1c <HAL_UART_IRQHandler+0x60>
            || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007a10:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d009      	beq.n	8007a30 <HAL_UART_IRQHandler+0x74>
    {
      if (huart->RxISR != NULL)
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a20:	2b00      	cmp	r3, #0
 8007a22:	f000 82d6 	beq.w	8007fd2 <HAL_UART_IRQHandler+0x616>
      {
        huart->RxISR(huart);
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a2a:	6878      	ldr	r0, [r7, #4]
 8007a2c:	4798      	blx	r3
      }
      return;
 8007a2e:	e2d0      	b.n	8007fd2 <HAL_UART_IRQHandler+0x616>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8007a30:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007a34:	2b00      	cmp	r3, #0
 8007a36:	f000 811f 	beq.w	8007c78 <HAL_UART_IRQHandler+0x2bc>
      && ((((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)
 8007a3a:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007a3e:	4b8b      	ldr	r3, [pc, #556]	; (8007c6c <HAL_UART_IRQHandler+0x2b0>)
 8007a40:	4013      	ands	r3, r2
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d106      	bne.n	8007a54 <HAL_UART_IRQHandler+0x98>
           || ((cr1its & (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U))))
 8007a46:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 8007a4a:	4b89      	ldr	r3, [pc, #548]	; (8007c70 <HAL_UART_IRQHandler+0x2b4>)
 8007a4c:	4013      	ands	r3, r2
 8007a4e:	2b00      	cmp	r3, #0
 8007a50:	f000 8112 	beq.w	8007c78 <HAL_UART_IRQHandler+0x2bc>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8007a54:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a58:	f003 0301 	and.w	r3, r3, #1
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d011      	beq.n	8007a84 <HAL_UART_IRQHandler+0xc8>
 8007a60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007a64:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d00b      	beq.n	8007a84 <HAL_UART_IRQHandler+0xc8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	681b      	ldr	r3, [r3, #0]
 8007a70:	2201      	movs	r2, #1
 8007a72:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a74:	687b      	ldr	r3, [r7, #4]
 8007a76:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007a7a:	f043 0201 	orr.w	r2, r3, #1
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007a84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007a88:	f003 0302 	and.w	r3, r3, #2
 8007a8c:	2b00      	cmp	r3, #0
 8007a8e:	d011      	beq.n	8007ab4 <HAL_UART_IRQHandler+0xf8>
 8007a90:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007a94:	f003 0301 	and.w	r3, r3, #1
 8007a98:	2b00      	cmp	r3, #0
 8007a9a:	d00b      	beq.n	8007ab4 <HAL_UART_IRQHandler+0xf8>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	2202      	movs	r2, #2
 8007aa2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007aaa:	f043 0204 	orr.w	r2, r3, #4
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8007ab4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ab8:	f003 0304 	and.w	r3, r3, #4
 8007abc:	2b00      	cmp	r3, #0
 8007abe:	d011      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x128>
 8007ac0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ac4:	f003 0301 	and.w	r3, r3, #1
 8007ac8:	2b00      	cmp	r3, #0
 8007aca:	d00b      	beq.n	8007ae4 <HAL_UART_IRQHandler+0x128>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2204      	movs	r2, #4
 8007ad2:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007ada:	f043 0202 	orr.w	r2, r3, #2
 8007ade:	687b      	ldr	r3, [r7, #4]
 8007ae0:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8007ae4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007ae8:	f003 0308 	and.w	r3, r3, #8
 8007aec:	2b00      	cmp	r3, #0
 8007aee:	d017      	beq.n	8007b20 <HAL_UART_IRQHandler+0x164>
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007af0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007af4:	f003 0320 	and.w	r3, r3, #32
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d105      	bne.n	8007b08 <HAL_UART_IRQHandler+0x14c>
            ((cr3its & (USART_CR3_RXFTIE | USART_CR3_EIE)) != 0U)))
 8007afc:	f8d7 20dc 	ldr.w	r2, [r7, #220]	; 0xdc
 8007b00:	4b5a      	ldr	r3, [pc, #360]	; (8007c6c <HAL_UART_IRQHandler+0x2b0>)
 8007b02:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U) ||
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d00b      	beq.n	8007b20 <HAL_UART_IRQHandler+0x164>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	2208      	movs	r2, #8
 8007b0e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b16:	f043 0208 	orr.w	r2, r3, #8
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8007b20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b24:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b28:	2b00      	cmp	r3, #0
 8007b2a:	d012      	beq.n	8007b52 <HAL_UART_IRQHandler+0x196>
 8007b2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b30:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d00c      	beq.n	8007b52 <HAL_UART_IRQHandler+0x196>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b40:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b48:	f043 0220 	orr.w	r2, r3, #32
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007b52:	687b      	ldr	r3, [r7, #4]
 8007b54:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b58:	2b00      	cmp	r3, #0
 8007b5a:	f000 823c 	beq.w	8007fd6 <HAL_UART_IRQHandler+0x61a>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE_RXFNE) != 0U)
 8007b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b62:	f003 0320 	and.w	r3, r3, #32
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d013      	beq.n	8007b92 <HAL_UART_IRQHandler+0x1d6>
          && (((cr1its & USART_CR1_RXNEIE_RXFNEIE) != 0U)
 8007b6a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b6e:	f003 0320 	and.w	r3, r3, #32
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d105      	bne.n	8007b82 <HAL_UART_IRQHandler+0x1c6>
              || ((cr3its & USART_CR3_RXFTIE) != 0U)))
 8007b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d007      	beq.n	8007b92 <HAL_UART_IRQHandler+0x1d6>
      {
        if (huart->RxISR != NULL)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d003      	beq.n	8007b92 <HAL_UART_IRQHandler+0x1d6>
        {
          huart->RxISR(huart);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b8e:	6878      	ldr	r0, [r7, #4]
 8007b90:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8007b98:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	689b      	ldr	r3, [r3, #8]
 8007ba2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ba6:	2b40      	cmp	r3, #64	; 0x40
 8007ba8:	d005      	beq.n	8007bb6 <HAL_UART_IRQHandler+0x1fa>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8007baa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007bae:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d04f      	beq.n	8007c56 <HAL_UART_IRQHandler+0x29a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007bb6:	6878      	ldr	r0, [r7, #4]
 8007bb8:	f001 f814 	bl	8008be4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	689b      	ldr	r3, [r3, #8]
 8007bc2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bc6:	2b40      	cmp	r3, #64	; 0x40
 8007bc8:	d141      	bne.n	8007c4e <HAL_UART_IRQHandler+0x292>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	681b      	ldr	r3, [r3, #0]
 8007bce:	3308      	adds	r3, #8
 8007bd0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bd4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007bd8:	e853 3f00 	ldrex	r3, [r3]
 8007bdc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007be0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007be4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007be8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	3308      	adds	r3, #8
 8007bf2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007bf6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007bfa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfe:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c02:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c06:	e841 2300 	strex	r3, r2, [r1]
 8007c0a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c0e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c12:	2b00      	cmp	r3, #0
 8007c14:	d1d9      	bne.n	8007bca <HAL_UART_IRQHandler+0x20e>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c1a:	2b00      	cmp	r3, #0
 8007c1c:	d013      	beq.n	8007c46 <HAL_UART_IRQHandler+0x28a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c22:	4a14      	ldr	r2, [pc, #80]	; (8007c74 <HAL_UART_IRQHandler+0x2b8>)
 8007c24:	639a      	str	r2, [r3, #56]	; 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	f7fc fc24 	bl	8004478 <HAL_DMA_Abort_IT>
 8007c30:	4603      	mov	r3, r0
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d017      	beq.n	8007c66 <HAL_UART_IRQHandler+0x2aa>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007c36:	687b      	ldr	r3, [r7, #4]
 8007c38:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007c3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c3c:	687a      	ldr	r2, [r7, #4]
 8007c3e:	6fd2      	ldr	r2, [r2, #124]	; 0x7c
 8007c40:	4610      	mov	r0, r2
 8007c42:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c44:	e00f      	b.n	8007c66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007c46:	6878      	ldr	r0, [r7, #4]
 8007c48:	f000 f9da 	bl	8008000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c4c:	e00b      	b.n	8007c66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007c4e:	6878      	ldr	r0, [r7, #4]
 8007c50:	f000 f9d6 	bl	8008000 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c54:	e007      	b.n	8007c66 <HAL_UART_IRQHandler+0x2aa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007c56:	6878      	ldr	r0, [r7, #4]
 8007c58:	f000 f9d2 	bl	8008000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	2200      	movs	r2, #0
 8007c60:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
      }
    }
    return;
 8007c64:	e1b7      	b.n	8007fd6 <HAL_UART_IRQHandler+0x61a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c66:	bf00      	nop
    return;
 8007c68:	e1b5      	b.n	8007fd6 <HAL_UART_IRQHandler+0x61a>
 8007c6a:	bf00      	nop
 8007c6c:	10000001 	.word	0x10000001
 8007c70:	04000120 	.word	0x04000120
 8007c74:	08008cb1 	.word	0x08008cb1

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c7c:	2b01      	cmp	r3, #1
 8007c7e:	f040 814a 	bne.w	8007f16 <HAL_UART_IRQHandler+0x55a>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8007c82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c86:	f003 0310 	and.w	r3, r3, #16
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f000 8143 	beq.w	8007f16 <HAL_UART_IRQHandler+0x55a>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8007c90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c94:	f003 0310 	and.w	r3, r3, #16
 8007c98:	2b00      	cmp	r3, #0
 8007c9a:	f000 813c 	beq.w	8007f16 <HAL_UART_IRQHandler+0x55a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	681b      	ldr	r3, [r3, #0]
 8007ca2:	2210      	movs	r2, #16
 8007ca4:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	689b      	ldr	r3, [r3, #8]
 8007cac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cb0:	2b40      	cmp	r3, #64	; 0x40
 8007cb2:	f040 80b5 	bne.w	8007e20 <HAL_UART_IRQHandler+0x464>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cba:	681b      	ldr	r3, [r3, #0]
 8007cbc:	685b      	ldr	r3, [r3, #4]
 8007cbe:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007cc2:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	f000 8187 	beq.w	8007fda <HAL_UART_IRQHandler+0x61e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007ccc:	687b      	ldr	r3, [r7, #4]
 8007cce:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8007cd2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	f080 817f 	bcs.w	8007fda <HAL_UART_IRQHandler+0x61e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007ce2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0320 	and.w	r3, r3, #32
 8007cf2:	2b00      	cmp	r3, #0
 8007cf4:	f040 8086 	bne.w	8007e04 <HAL_UART_IRQHandler+0x448>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	681b      	ldr	r3, [r3, #0]
 8007cfc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d00:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d04:	e853 3f00 	ldrex	r3, [r3]
 8007d08:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d0c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d10:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d14:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	461a      	mov	r2, r3
 8007d1e:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 8007d22:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8007d26:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d2a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007d2e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007d32:	e841 2300 	strex	r3, r2, [r1]
 8007d36:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007d3a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007d3e:	2b00      	cmp	r3, #0
 8007d40:	d1da      	bne.n	8007cf8 <HAL_UART_IRQHandler+0x33c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	3308      	adds	r3, #8
 8007d48:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d4a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007d4c:	e853 3f00 	ldrex	r3, [r3]
 8007d50:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007d52:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007d54:	f023 0301 	bic.w	r3, r3, #1
 8007d58:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	3308      	adds	r3, #8
 8007d62:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007d66:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007d6a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007d6c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007d6e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007d72:	e841 2300 	strex	r3, r2, [r1]
 8007d76:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007d78:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007d7a:	2b00      	cmp	r3, #0
 8007d7c:	d1e1      	bne.n	8007d42 <HAL_UART_IRQHandler+0x386>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	3308      	adds	r3, #8
 8007d84:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d86:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007d88:	e853 3f00 	ldrex	r3, [r3]
 8007d8c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007d8e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007d90:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d94:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	3308      	adds	r3, #8
 8007d9e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007da2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007da4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007da8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007db0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007db2:	2b00      	cmp	r3, #0
 8007db4:	d1e3      	bne.n	8007d7e <HAL_UART_IRQHandler+0x3c2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	2220      	movs	r2, #32
 8007dba:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	2200      	movs	r2, #0
 8007dc2:	66da      	str	r2, [r3, #108]	; 0x6c

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dca:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007dcc:	e853 3f00 	ldrex	r3, [r3]
 8007dd0:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007dd2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007dd4:	f023 0310 	bic.w	r3, r3, #16
 8007dd8:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	681b      	ldr	r3, [r3, #0]
 8007de0:	461a      	mov	r2, r3
 8007de2:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 8007de6:	65bb      	str	r3, [r7, #88]	; 0x58
 8007de8:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007dea:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007dec:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007dee:	e841 2300 	strex	r3, r2, [r1]
 8007df2:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007df4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007df6:	2b00      	cmp	r3, #0
 8007df8:	d1e4      	bne.n	8007dc4 <HAL_UART_IRQHandler+0x408>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8007dfe:	4618      	mov	r0, r3
 8007e00:	f7fc fae1 	bl	80043c6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e10:	b29b      	uxth	r3, r3
 8007e12:	1ad3      	subs	r3, r2, r3
 8007e14:	b29b      	uxth	r3, r3
 8007e16:	4619      	mov	r1, r3
 8007e18:	6878      	ldr	r0, [r7, #4]
 8007e1a:	f000 f8fb 	bl	8008014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007e1e:	e0dc      	b.n	8007fda <HAL_UART_IRQHandler+0x61e>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	f8b3 205c 	ldrh.w	r2, [r3, #92]	; 0x5c
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e2c:	b29b      	uxth	r3, r3
 8007e2e:	1ad3      	subs	r3, r2, r3
 8007e30:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8007e3a:	b29b      	uxth	r3, r3
 8007e3c:	2b00      	cmp	r3, #0
 8007e3e:	f000 80ce 	beq.w	8007fde <HAL_UART_IRQHandler+0x622>
          && (nb_rx_data > 0U))
 8007e42:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007e46:	2b00      	cmp	r3, #0
 8007e48:	f000 80c9 	beq.w	8007fde <HAL_UART_IRQHandler+0x622>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007e54:	e853 3f00 	ldrex	r3, [r3]
 8007e58:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007e5a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e5c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007e60:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	461a      	mov	r2, r3
 8007e6a:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 8007e6e:	647b      	str	r3, [r7, #68]	; 0x44
 8007e70:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e72:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007e76:	e841 2300 	strex	r3, r2, [r1]
 8007e7a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007e7c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1e4      	bne.n	8007e4c <HAL_UART_IRQHandler+0x490>

        /* Disable the UART Error Interrupt:(Frame error, noise error, overrun error) and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	3308      	adds	r3, #8
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	e853 3f00 	ldrex	r3, [r3]
 8007e90:	623b      	str	r3, [r7, #32]
   return(result);
 8007e92:	6a3b      	ldr	r3, [r7, #32]
 8007e94:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007e98:	f023 0301 	bic.w	r3, r3, #1
 8007e9c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	681b      	ldr	r3, [r3, #0]
 8007ea4:	3308      	adds	r3, #8
 8007ea6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007eaa:	633a      	str	r2, [r7, #48]	; 0x30
 8007eac:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eae:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007eb0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007eb2:	e841 2300 	strex	r3, r2, [r1]
 8007eb6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007eb8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007eba:	2b00      	cmp	r3, #0
 8007ebc:	d1e1      	bne.n	8007e82 <HAL_UART_IRQHandler+0x4c6>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	2220      	movs	r2, #32
 8007ec2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ec6:	687b      	ldr	r3, [r7, #4]
 8007ec8:	2200      	movs	r2, #0
 8007eca:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8007ecc:	687b      	ldr	r3, [r7, #4]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	671a      	str	r2, [r3, #112]	; 0x70

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	681b      	ldr	r3, [r3, #0]
 8007ed6:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ed8:	693b      	ldr	r3, [r7, #16]
 8007eda:	e853 3f00 	ldrex	r3, [r3]
 8007ede:	60fb      	str	r3, [r7, #12]
   return(result);
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	f023 0310 	bic.w	r3, r3, #16
 8007ee6:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	681b      	ldr	r3, [r3, #0]
 8007eee:	461a      	mov	r2, r3
 8007ef0:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 8007ef4:	61fb      	str	r3, [r7, #28]
 8007ef6:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007ef8:	69b9      	ldr	r1, [r7, #24]
 8007efa:	69fa      	ldr	r2, [r7, #28]
 8007efc:	e841 2300 	strex	r3, r2, [r1]
 8007f00:	617b      	str	r3, [r7, #20]
   return(result);
 8007f02:	697b      	ldr	r3, [r7, #20]
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d1e4      	bne.n	8007ed2 <HAL_UART_IRQHandler+0x516>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f08:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f0c:	4619      	mov	r1, r3
 8007f0e:	6878      	ldr	r0, [r7, #4]
 8007f10:	f000 f880 	bl	8008014 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8007f14:	e063      	b.n	8007fde <HAL_UART_IRQHandler+0x622>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8007f16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f1a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007f1e:	2b00      	cmp	r3, #0
 8007f20:	d00e      	beq.n	8007f40 <HAL_UART_IRQHandler+0x584>
 8007f22:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f26:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007f2a:	2b00      	cmp	r3, #0
 8007f2c:	d008      	beq.n	8007f40 <HAL_UART_IRQHandler+0x584>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8007f36:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f001 fb57 	bl	80095ec <HAL_UARTEx_WakeupCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007f3e:	e051      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE_TXFNF) != 0U)
 8007f40:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f48:	2b00      	cmp	r3, #0
 8007f4a:	d014      	beq.n	8007f76 <HAL_UART_IRQHandler+0x5ba>
      && (((cr1its & USART_CR1_TXEIE_TXFNFIE) != 0U)
 8007f4c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f54:	2b00      	cmp	r3, #0
 8007f56:	d105      	bne.n	8007f64 <HAL_UART_IRQHandler+0x5a8>
          || ((cr3its & USART_CR3_TXFTIE) != 0U)))
 8007f58:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007f5c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f60:	2b00      	cmp	r3, #0
 8007f62:	d008      	beq.n	8007f76 <HAL_UART_IRQHandler+0x5ba>
  {
    if (huart->TxISR != NULL)
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f68:	2b00      	cmp	r3, #0
 8007f6a:	d03a      	beq.n	8007fe2 <HAL_UART_IRQHandler+0x626>
    {
      huart->TxISR(huart);
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007f70:	6878      	ldr	r0, [r7, #4]
 8007f72:	4798      	blx	r3
    }
    return;
 8007f74:	e035      	b.n	8007fe2 <HAL_UART_IRQHandler+0x626>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8007f76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f7e:	2b00      	cmp	r3, #0
 8007f80:	d009      	beq.n	8007f96 <HAL_UART_IRQHandler+0x5da>
 8007f82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f8a:	2b00      	cmp	r3, #0
 8007f8c:	d003      	beq.n	8007f96 <HAL_UART_IRQHandler+0x5da>
  {
    UART_EndTransmit_IT(huart);
 8007f8e:	6878      	ldr	r0, [r7, #4]
 8007f90:	f000 fea4 	bl	8008cdc <UART_EndTransmit_IT>
    return;
 8007f94:	e026      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART TX Fifo Empty occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_TXFE) != 0U) && ((cr1its & USART_CR1_TXFEIE) != 0U))
 8007f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f9a:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d009      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x5fa>
 8007fa2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fa6:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8007faa:	2b00      	cmp	r3, #0
 8007fac:	d003      	beq.n	8007fb6 <HAL_UART_IRQHandler+0x5fa>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Tx Fifo Empty Callback */
    huart->TxFifoEmptyCallback(huart);
#else
    /* Call legacy weak Tx Fifo Empty Callback */
    HAL_UARTEx_TxFifoEmptyCallback(huart);
 8007fae:	6878      	ldr	r0, [r7, #4]
 8007fb0:	f001 fb30 	bl	8009614 <HAL_UARTEx_TxFifoEmptyCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fb4:	e016      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
  }

  /* UART RX Fifo Full occurred ----------------------------------------------*/
  if (((isrflags & USART_ISR_RXFF) != 0U) && ((cr1its & USART_CR1_RXFFIE) != 0U))
 8007fb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007fba:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8007fbe:	2b00      	cmp	r3, #0
 8007fc0:	d010      	beq.n	8007fe4 <HAL_UART_IRQHandler+0x628>
 8007fc2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fc6:	2b00      	cmp	r3, #0
 8007fc8:	da0c      	bge.n	8007fe4 <HAL_UART_IRQHandler+0x628>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Rx Fifo Full Callback */
    huart->RxFifoFullCallback(huart);
#else
    /* Call legacy weak Rx Fifo Full Callback */
    HAL_UARTEx_RxFifoFullCallback(huart);
 8007fca:	6878      	ldr	r0, [r7, #4]
 8007fcc:	f001 fb18 	bl	8009600 <HAL_UARTEx_RxFifoFullCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8007fd0:	e008      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
      return;
 8007fd2:	bf00      	nop
 8007fd4:	e006      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
    return;
 8007fd6:	bf00      	nop
 8007fd8:	e004      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
      return;
 8007fda:	bf00      	nop
 8007fdc:	e002      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
      return;
 8007fde:	bf00      	nop
 8007fe0:	e000      	b.n	8007fe4 <HAL_UART_IRQHandler+0x628>
    return;
 8007fe2:	bf00      	nop
  }
}
 8007fe4:	37e8      	adds	r7, #232	; 0xe8
 8007fe6:	46bd      	mov	sp, r7
 8007fe8:	bd80      	pop	{r7, pc}
 8007fea:	bf00      	nop

08007fec <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8008008:	bf00      	nop
 800800a:	370c      	adds	r7, #12
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008014:	b480      	push	{r7}
 8008016:	b083      	sub	sp, #12
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
 800801c:	460b      	mov	r3, r1
 800801e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008020:	bf00      	nop
 8008022:	370c      	adds	r7, #12
 8008024:	46bd      	mov	sp, r7
 8008026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800802a:	4770      	bx	lr

0800802c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800802c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008030:	b08c      	sub	sp, #48	; 0x30
 8008032:	af00      	add	r7, sp, #0
 8008034:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8008036:	2300      	movs	r3, #0
 8008038:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800803c:	697b      	ldr	r3, [r7, #20]
 800803e:	689a      	ldr	r2, [r3, #8]
 8008040:	697b      	ldr	r3, [r7, #20]
 8008042:	691b      	ldr	r3, [r3, #16]
 8008044:	431a      	orrs	r2, r3
 8008046:	697b      	ldr	r3, [r7, #20]
 8008048:	695b      	ldr	r3, [r3, #20]
 800804a:	431a      	orrs	r2, r3
 800804c:	697b      	ldr	r3, [r7, #20]
 800804e:	69db      	ldr	r3, [r3, #28]
 8008050:	4313      	orrs	r3, r2
 8008052:	62fb      	str	r3, [r7, #44]	; 0x2c
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8008054:	697b      	ldr	r3, [r7, #20]
 8008056:	681b      	ldr	r3, [r3, #0]
 8008058:	681a      	ldr	r2, [r3, #0]
 800805a:	4baa      	ldr	r3, [pc, #680]	; (8008304 <UART_SetConfig+0x2d8>)
 800805c:	4013      	ands	r3, r2
 800805e:	697a      	ldr	r2, [r7, #20]
 8008060:	6812      	ldr	r2, [r2, #0]
 8008062:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008064:	430b      	orrs	r3, r1
 8008066:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008068:	697b      	ldr	r3, [r7, #20]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	685b      	ldr	r3, [r3, #4]
 800806e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8008072:	697b      	ldr	r3, [r7, #20]
 8008074:	68da      	ldr	r2, [r3, #12]
 8008076:	697b      	ldr	r3, [r7, #20]
 8008078:	681b      	ldr	r3, [r3, #0]
 800807a:	430a      	orrs	r2, r1
 800807c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800807e:	697b      	ldr	r3, [r7, #20]
 8008080:	699b      	ldr	r3, [r3, #24]
 8008082:	62fb      	str	r3, [r7, #44]	; 0x2c

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	4a9f      	ldr	r2, [pc, #636]	; (8008308 <UART_SetConfig+0x2dc>)
 800808a:	4293      	cmp	r3, r2
 800808c:	d004      	beq.n	8008098 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 800808e:	697b      	ldr	r3, [r7, #20]
 8008090:	6a1b      	ldr	r3, [r3, #32]
 8008092:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008094:	4313      	orrs	r3, r2
 8008096:	62fb      	str	r3, [r7, #44]	; 0x2c
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8008098:	697b      	ldr	r3, [r7, #20]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	689b      	ldr	r3, [r3, #8]
 800809e:	f023 436e 	bic.w	r3, r3, #3992977408	; 0xee000000
 80080a2:	f423 6330 	bic.w	r3, r3, #2816	; 0xb00
 80080a6:	697a      	ldr	r2, [r7, #20]
 80080a8:	6812      	ldr	r2, [r2, #0]
 80080aa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80080ac:	430b      	orrs	r3, r1
 80080ae:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 80080b0:	697b      	ldr	r3, [r7, #20]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080b6:	f023 010f 	bic.w	r1, r3, #15
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80080be:	697b      	ldr	r3, [r7, #20]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	430a      	orrs	r2, r1
 80080c4:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 80080c6:	697b      	ldr	r3, [r7, #20]
 80080c8:	681b      	ldr	r3, [r3, #0]
 80080ca:	4a90      	ldr	r2, [pc, #576]	; (800830c <UART_SetConfig+0x2e0>)
 80080cc:	4293      	cmp	r3, r2
 80080ce:	d125      	bne.n	800811c <UART_SetConfig+0xf0>
 80080d0:	4b8f      	ldr	r3, [pc, #572]	; (8008310 <UART_SetConfig+0x2e4>)
 80080d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80080d6:	f003 0303 	and.w	r3, r3, #3
 80080da:	2b03      	cmp	r3, #3
 80080dc:	d81a      	bhi.n	8008114 <UART_SetConfig+0xe8>
 80080de:	a201      	add	r2, pc, #4	; (adr r2, 80080e4 <UART_SetConfig+0xb8>)
 80080e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080e4:	080080f5 	.word	0x080080f5
 80080e8:	08008105 	.word	0x08008105
 80080ec:	080080fd 	.word	0x080080fd
 80080f0:	0800810d 	.word	0x0800810d
 80080f4:	2301      	movs	r3, #1
 80080f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80080fa:	e116      	b.n	800832a <UART_SetConfig+0x2fe>
 80080fc:	2302      	movs	r3, #2
 80080fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008102:	e112      	b.n	800832a <UART_SetConfig+0x2fe>
 8008104:	2304      	movs	r3, #4
 8008106:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800810a:	e10e      	b.n	800832a <UART_SetConfig+0x2fe>
 800810c:	2308      	movs	r3, #8
 800810e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008112:	e10a      	b.n	800832a <UART_SetConfig+0x2fe>
 8008114:	2310      	movs	r3, #16
 8008116:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800811a:	e106      	b.n	800832a <UART_SetConfig+0x2fe>
 800811c:	697b      	ldr	r3, [r7, #20]
 800811e:	681b      	ldr	r3, [r3, #0]
 8008120:	4a7c      	ldr	r2, [pc, #496]	; (8008314 <UART_SetConfig+0x2e8>)
 8008122:	4293      	cmp	r3, r2
 8008124:	d138      	bne.n	8008198 <UART_SetConfig+0x16c>
 8008126:	4b7a      	ldr	r3, [pc, #488]	; (8008310 <UART_SetConfig+0x2e4>)
 8008128:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800812c:	f003 030c 	and.w	r3, r3, #12
 8008130:	2b0c      	cmp	r3, #12
 8008132:	d82d      	bhi.n	8008190 <UART_SetConfig+0x164>
 8008134:	a201      	add	r2, pc, #4	; (adr r2, 800813c <UART_SetConfig+0x110>)
 8008136:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800813a:	bf00      	nop
 800813c:	08008171 	.word	0x08008171
 8008140:	08008191 	.word	0x08008191
 8008144:	08008191 	.word	0x08008191
 8008148:	08008191 	.word	0x08008191
 800814c:	08008181 	.word	0x08008181
 8008150:	08008191 	.word	0x08008191
 8008154:	08008191 	.word	0x08008191
 8008158:	08008191 	.word	0x08008191
 800815c:	08008179 	.word	0x08008179
 8008160:	08008191 	.word	0x08008191
 8008164:	08008191 	.word	0x08008191
 8008168:	08008191 	.word	0x08008191
 800816c:	08008189 	.word	0x08008189
 8008170:	2300      	movs	r3, #0
 8008172:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008176:	e0d8      	b.n	800832a <UART_SetConfig+0x2fe>
 8008178:	2302      	movs	r3, #2
 800817a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800817e:	e0d4      	b.n	800832a <UART_SetConfig+0x2fe>
 8008180:	2304      	movs	r3, #4
 8008182:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008186:	e0d0      	b.n	800832a <UART_SetConfig+0x2fe>
 8008188:	2308      	movs	r3, #8
 800818a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800818e:	e0cc      	b.n	800832a <UART_SetConfig+0x2fe>
 8008190:	2310      	movs	r3, #16
 8008192:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008196:	e0c8      	b.n	800832a <UART_SetConfig+0x2fe>
 8008198:	697b      	ldr	r3, [r7, #20]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	4a5e      	ldr	r2, [pc, #376]	; (8008318 <UART_SetConfig+0x2ec>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d125      	bne.n	80081ee <UART_SetConfig+0x1c2>
 80081a2:	4b5b      	ldr	r3, [pc, #364]	; (8008310 <UART_SetConfig+0x2e4>)
 80081a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081a8:	f003 0330 	and.w	r3, r3, #48	; 0x30
 80081ac:	2b30      	cmp	r3, #48	; 0x30
 80081ae:	d016      	beq.n	80081de <UART_SetConfig+0x1b2>
 80081b0:	2b30      	cmp	r3, #48	; 0x30
 80081b2:	d818      	bhi.n	80081e6 <UART_SetConfig+0x1ba>
 80081b4:	2b20      	cmp	r3, #32
 80081b6:	d00a      	beq.n	80081ce <UART_SetConfig+0x1a2>
 80081b8:	2b20      	cmp	r3, #32
 80081ba:	d814      	bhi.n	80081e6 <UART_SetConfig+0x1ba>
 80081bc:	2b00      	cmp	r3, #0
 80081be:	d002      	beq.n	80081c6 <UART_SetConfig+0x19a>
 80081c0:	2b10      	cmp	r3, #16
 80081c2:	d008      	beq.n	80081d6 <UART_SetConfig+0x1aa>
 80081c4:	e00f      	b.n	80081e6 <UART_SetConfig+0x1ba>
 80081c6:	2300      	movs	r3, #0
 80081c8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081cc:	e0ad      	b.n	800832a <UART_SetConfig+0x2fe>
 80081ce:	2302      	movs	r3, #2
 80081d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081d4:	e0a9      	b.n	800832a <UART_SetConfig+0x2fe>
 80081d6:	2304      	movs	r3, #4
 80081d8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081dc:	e0a5      	b.n	800832a <UART_SetConfig+0x2fe>
 80081de:	2308      	movs	r3, #8
 80081e0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081e4:	e0a1      	b.n	800832a <UART_SetConfig+0x2fe>
 80081e6:	2310      	movs	r3, #16
 80081e8:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80081ec:	e09d      	b.n	800832a <UART_SetConfig+0x2fe>
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	681b      	ldr	r3, [r3, #0]
 80081f2:	4a4a      	ldr	r2, [pc, #296]	; (800831c <UART_SetConfig+0x2f0>)
 80081f4:	4293      	cmp	r3, r2
 80081f6:	d125      	bne.n	8008244 <UART_SetConfig+0x218>
 80081f8:	4b45      	ldr	r3, [pc, #276]	; (8008310 <UART_SetConfig+0x2e4>)
 80081fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80081fe:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8008202:	2bc0      	cmp	r3, #192	; 0xc0
 8008204:	d016      	beq.n	8008234 <UART_SetConfig+0x208>
 8008206:	2bc0      	cmp	r3, #192	; 0xc0
 8008208:	d818      	bhi.n	800823c <UART_SetConfig+0x210>
 800820a:	2b80      	cmp	r3, #128	; 0x80
 800820c:	d00a      	beq.n	8008224 <UART_SetConfig+0x1f8>
 800820e:	2b80      	cmp	r3, #128	; 0x80
 8008210:	d814      	bhi.n	800823c <UART_SetConfig+0x210>
 8008212:	2b00      	cmp	r3, #0
 8008214:	d002      	beq.n	800821c <UART_SetConfig+0x1f0>
 8008216:	2b40      	cmp	r3, #64	; 0x40
 8008218:	d008      	beq.n	800822c <UART_SetConfig+0x200>
 800821a:	e00f      	b.n	800823c <UART_SetConfig+0x210>
 800821c:	2300      	movs	r3, #0
 800821e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008222:	e082      	b.n	800832a <UART_SetConfig+0x2fe>
 8008224:	2302      	movs	r3, #2
 8008226:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800822a:	e07e      	b.n	800832a <UART_SetConfig+0x2fe>
 800822c:	2304      	movs	r3, #4
 800822e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008232:	e07a      	b.n	800832a <UART_SetConfig+0x2fe>
 8008234:	2308      	movs	r3, #8
 8008236:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800823a:	e076      	b.n	800832a <UART_SetConfig+0x2fe>
 800823c:	2310      	movs	r3, #16
 800823e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008242:	e072      	b.n	800832a <UART_SetConfig+0x2fe>
 8008244:	697b      	ldr	r3, [r7, #20]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	4a35      	ldr	r2, [pc, #212]	; (8008320 <UART_SetConfig+0x2f4>)
 800824a:	4293      	cmp	r3, r2
 800824c:	d12a      	bne.n	80082a4 <UART_SetConfig+0x278>
 800824e:	4b30      	ldr	r3, [pc, #192]	; (8008310 <UART_SetConfig+0x2e4>)
 8008250:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008254:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8008258:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800825c:	d01a      	beq.n	8008294 <UART_SetConfig+0x268>
 800825e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008262:	d81b      	bhi.n	800829c <UART_SetConfig+0x270>
 8008264:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8008268:	d00c      	beq.n	8008284 <UART_SetConfig+0x258>
 800826a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800826e:	d815      	bhi.n	800829c <UART_SetConfig+0x270>
 8008270:	2b00      	cmp	r3, #0
 8008272:	d003      	beq.n	800827c <UART_SetConfig+0x250>
 8008274:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008278:	d008      	beq.n	800828c <UART_SetConfig+0x260>
 800827a:	e00f      	b.n	800829c <UART_SetConfig+0x270>
 800827c:	2300      	movs	r3, #0
 800827e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008282:	e052      	b.n	800832a <UART_SetConfig+0x2fe>
 8008284:	2302      	movs	r3, #2
 8008286:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800828a:	e04e      	b.n	800832a <UART_SetConfig+0x2fe>
 800828c:	2304      	movs	r3, #4
 800828e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008292:	e04a      	b.n	800832a <UART_SetConfig+0x2fe>
 8008294:	2308      	movs	r3, #8
 8008296:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 800829a:	e046      	b.n	800832a <UART_SetConfig+0x2fe>
 800829c:	2310      	movs	r3, #16
 800829e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082a2:	e042      	b.n	800832a <UART_SetConfig+0x2fe>
 80082a4:	697b      	ldr	r3, [r7, #20]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	4a17      	ldr	r2, [pc, #92]	; (8008308 <UART_SetConfig+0x2dc>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d13a      	bne.n	8008324 <UART_SetConfig+0x2f8>
 80082ae:	4b18      	ldr	r3, [pc, #96]	; (8008310 <UART_SetConfig+0x2e4>)
 80082b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80082b4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 80082b8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082bc:	d01a      	beq.n	80082f4 <UART_SetConfig+0x2c8>
 80082be:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 80082c2:	d81b      	bhi.n	80082fc <UART_SetConfig+0x2d0>
 80082c4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082c8:	d00c      	beq.n	80082e4 <UART_SetConfig+0x2b8>
 80082ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80082ce:	d815      	bhi.n	80082fc <UART_SetConfig+0x2d0>
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d003      	beq.n	80082dc <UART_SetConfig+0x2b0>
 80082d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80082d8:	d008      	beq.n	80082ec <UART_SetConfig+0x2c0>
 80082da:	e00f      	b.n	80082fc <UART_SetConfig+0x2d0>
 80082dc:	2300      	movs	r3, #0
 80082de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082e2:	e022      	b.n	800832a <UART_SetConfig+0x2fe>
 80082e4:	2302      	movs	r3, #2
 80082e6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082ea:	e01e      	b.n	800832a <UART_SetConfig+0x2fe>
 80082ec:	2304      	movs	r3, #4
 80082ee:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082f2:	e01a      	b.n	800832a <UART_SetConfig+0x2fe>
 80082f4:	2308      	movs	r3, #8
 80082f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 80082fa:	e016      	b.n	800832a <UART_SetConfig+0x2fe>
 80082fc:	2310      	movs	r3, #16
 80082fe:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8008302:	e012      	b.n	800832a <UART_SetConfig+0x2fe>
 8008304:	cfff69f3 	.word	0xcfff69f3
 8008308:	40008000 	.word	0x40008000
 800830c:	40013800 	.word	0x40013800
 8008310:	40021000 	.word	0x40021000
 8008314:	40004400 	.word	0x40004400
 8008318:	40004800 	.word	0x40004800
 800831c:	40004c00 	.word	0x40004c00
 8008320:	40005000 	.word	0x40005000
 8008324:	2310      	movs	r3, #16
 8008326:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800832a:	697b      	ldr	r3, [r7, #20]
 800832c:	681b      	ldr	r3, [r3, #0]
 800832e:	4aae      	ldr	r2, [pc, #696]	; (80085e8 <UART_SetConfig+0x5bc>)
 8008330:	4293      	cmp	r3, r2
 8008332:	f040 8097 	bne.w	8008464 <UART_SetConfig+0x438>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8008336:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800833a:	2b08      	cmp	r3, #8
 800833c:	d823      	bhi.n	8008386 <UART_SetConfig+0x35a>
 800833e:	a201      	add	r2, pc, #4	; (adr r2, 8008344 <UART_SetConfig+0x318>)
 8008340:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008344:	08008369 	.word	0x08008369
 8008348:	08008387 	.word	0x08008387
 800834c:	08008371 	.word	0x08008371
 8008350:	08008387 	.word	0x08008387
 8008354:	08008377 	.word	0x08008377
 8008358:	08008387 	.word	0x08008387
 800835c:	08008387 	.word	0x08008387
 8008360:	08008387 	.word	0x08008387
 8008364:	0800837f 	.word	0x0800837f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008368:	f7fd f970 	bl	800564c <HAL_RCC_GetPCLK1Freq>
 800836c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800836e:	e010      	b.n	8008392 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008370:	4b9e      	ldr	r3, [pc, #632]	; (80085ec <UART_SetConfig+0x5c0>)
 8008372:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008374:	e00d      	b.n	8008392 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008376:	f7fd f8fb 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 800837a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800837c:	e009      	b.n	8008392 <UART_SetConfig+0x366>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800837e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008382:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008384:	e005      	b.n	8008392 <UART_SetConfig+0x366>
      default:
        pclk = 0U;
 8008386:	2300      	movs	r3, #0
 8008388:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800838a:	2301      	movs	r3, #1
 800838c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 8008390:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8008392:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008394:	2b00      	cmp	r3, #0
 8008396:	f000 8130 	beq.w	80085fa <UART_SetConfig+0x5ce>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 800839a:	697b      	ldr	r3, [r7, #20]
 800839c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800839e:	4a94      	ldr	r2, [pc, #592]	; (80085f0 <UART_SetConfig+0x5c4>)
 80083a0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083a4:	461a      	mov	r2, r3
 80083a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083a8:	fbb3 f3f2 	udiv	r3, r3, r2
 80083ac:	61bb      	str	r3, [r7, #24]

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083ae:	697b      	ldr	r3, [r7, #20]
 80083b0:	685a      	ldr	r2, [r3, #4]
 80083b2:	4613      	mov	r3, r2
 80083b4:	005b      	lsls	r3, r3, #1
 80083b6:	4413      	add	r3, r2
 80083b8:	69ba      	ldr	r2, [r7, #24]
 80083ba:	429a      	cmp	r2, r3
 80083bc:	d305      	bcc.n	80083ca <UART_SetConfig+0x39e>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 80083be:	697b      	ldr	r3, [r7, #20]
 80083c0:	685b      	ldr	r3, [r3, #4]
 80083c2:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 80083c4:	69ba      	ldr	r2, [r7, #24]
 80083c6:	429a      	cmp	r2, r3
 80083c8:	d903      	bls.n	80083d2 <UART_SetConfig+0x3a6>
      {
        ret = HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 80083d0:	e113      	b.n	80085fa <UART_SetConfig+0x5ce>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80083d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083d4:	2200      	movs	r2, #0
 80083d6:	60bb      	str	r3, [r7, #8]
 80083d8:	60fa      	str	r2, [r7, #12]
 80083da:	697b      	ldr	r3, [r7, #20]
 80083dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80083de:	4a84      	ldr	r2, [pc, #528]	; (80085f0 <UART_SetConfig+0x5c4>)
 80083e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	2200      	movs	r2, #0
 80083e8:	603b      	str	r3, [r7, #0]
 80083ea:	607a      	str	r2, [r7, #4]
 80083ec:	e9d7 2300 	ldrd	r2, r3, [r7]
 80083f0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80083f4:	f7f8 fc10 	bl	8000c18 <__aeabi_uldivmod>
 80083f8:	4602      	mov	r2, r0
 80083fa:	460b      	mov	r3, r1
 80083fc:	4610      	mov	r0, r2
 80083fe:	4619      	mov	r1, r3
 8008400:	f04f 0200 	mov.w	r2, #0
 8008404:	f04f 0300 	mov.w	r3, #0
 8008408:	020b      	lsls	r3, r1, #8
 800840a:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 800840e:	0202      	lsls	r2, r0, #8
 8008410:	6979      	ldr	r1, [r7, #20]
 8008412:	6849      	ldr	r1, [r1, #4]
 8008414:	0849      	lsrs	r1, r1, #1
 8008416:	2000      	movs	r0, #0
 8008418:	460c      	mov	r4, r1
 800841a:	4605      	mov	r5, r0
 800841c:	eb12 0804 	adds.w	r8, r2, r4
 8008420:	eb43 0905 	adc.w	r9, r3, r5
 8008424:	697b      	ldr	r3, [r7, #20]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	2200      	movs	r2, #0
 800842a:	469a      	mov	sl, r3
 800842c:	4693      	mov	fp, r2
 800842e:	4652      	mov	r2, sl
 8008430:	465b      	mov	r3, fp
 8008432:	4640      	mov	r0, r8
 8008434:	4649      	mov	r1, r9
 8008436:	f7f8 fbef 	bl	8000c18 <__aeabi_uldivmod>
 800843a:	4602      	mov	r2, r0
 800843c:	460b      	mov	r3, r1
 800843e:	4613      	mov	r3, r2
 8008440:	623b      	str	r3, [r7, #32]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8008442:	6a3b      	ldr	r3, [r7, #32]
 8008444:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8008448:	d308      	bcc.n	800845c <UART_SetConfig+0x430>
 800844a:	6a3b      	ldr	r3, [r7, #32]
 800844c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008450:	d204      	bcs.n	800845c <UART_SetConfig+0x430>
        {
          huart->Instance->BRR = usartdiv;
 8008452:	697b      	ldr	r3, [r7, #20]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	6a3a      	ldr	r2, [r7, #32]
 8008458:	60da      	str	r2, [r3, #12]
 800845a:	e0ce      	b.n	80085fa <UART_SetConfig+0x5ce>
        }
        else
        {
          ret = HAL_ERROR;
 800845c:	2301      	movs	r3, #1
 800845e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 8008462:	e0ca      	b.n	80085fa <UART_SetConfig+0x5ce>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008464:	697b      	ldr	r3, [r7, #20]
 8008466:	69db      	ldr	r3, [r3, #28]
 8008468:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800846c:	d166      	bne.n	800853c <UART_SetConfig+0x510>
  {
    switch (clocksource)
 800846e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008472:	2b08      	cmp	r3, #8
 8008474:	d827      	bhi.n	80084c6 <UART_SetConfig+0x49a>
 8008476:	a201      	add	r2, pc, #4	; (adr r2, 800847c <UART_SetConfig+0x450>)
 8008478:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800847c:	080084a1 	.word	0x080084a1
 8008480:	080084a9 	.word	0x080084a9
 8008484:	080084b1 	.word	0x080084b1
 8008488:	080084c7 	.word	0x080084c7
 800848c:	080084b7 	.word	0x080084b7
 8008490:	080084c7 	.word	0x080084c7
 8008494:	080084c7 	.word	0x080084c7
 8008498:	080084c7 	.word	0x080084c7
 800849c:	080084bf 	.word	0x080084bf
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80084a0:	f7fd f8d4 	bl	800564c <HAL_RCC_GetPCLK1Freq>
 80084a4:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084a6:	e014      	b.n	80084d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80084a8:	f7fd f8e6 	bl	8005678 <HAL_RCC_GetPCLK2Freq>
 80084ac:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084ae:	e010      	b.n	80084d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80084b0:	4b4e      	ldr	r3, [pc, #312]	; (80085ec <UART_SetConfig+0x5c0>)
 80084b2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084b4:	e00d      	b.n	80084d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80084b6:	f7fd f85b 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 80084ba:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 80084bc:	e009      	b.n	80084d2 <UART_SetConfig+0x4a6>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80084be:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80084c2:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 80084c4:	e005      	b.n	80084d2 <UART_SetConfig+0x4a6>
      default:
        pclk = 0U;
 80084c6:	2300      	movs	r3, #0
 80084c8:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 80084ca:	2301      	movs	r3, #1
 80084cc:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80084d0:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80084d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	f000 8090 	beq.w	80085fa <UART_SetConfig+0x5ce>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80084da:	697b      	ldr	r3, [r7, #20]
 80084dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084de:	4a44      	ldr	r2, [pc, #272]	; (80085f0 <UART_SetConfig+0x5c4>)
 80084e0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80084e4:	461a      	mov	r2, r3
 80084e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084e8:	fbb3 f3f2 	udiv	r3, r3, r2
 80084ec:	005a      	lsls	r2, r3, #1
 80084ee:	697b      	ldr	r3, [r7, #20]
 80084f0:	685b      	ldr	r3, [r3, #4]
 80084f2:	085b      	lsrs	r3, r3, #1
 80084f4:	441a      	add	r2, r3
 80084f6:	697b      	ldr	r3, [r7, #20]
 80084f8:	685b      	ldr	r3, [r3, #4]
 80084fa:	fbb2 f3f3 	udiv	r3, r2, r3
 80084fe:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8008500:	6a3b      	ldr	r3, [r7, #32]
 8008502:	2b0f      	cmp	r3, #15
 8008504:	d916      	bls.n	8008534 <UART_SetConfig+0x508>
 8008506:	6a3b      	ldr	r3, [r7, #32]
 8008508:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800850c:	d212      	bcs.n	8008534 <UART_SetConfig+0x508>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800850e:	6a3b      	ldr	r3, [r7, #32]
 8008510:	b29b      	uxth	r3, r3
 8008512:	f023 030f 	bic.w	r3, r3, #15
 8008516:	83fb      	strh	r3, [r7, #30]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8008518:	6a3b      	ldr	r3, [r7, #32]
 800851a:	085b      	lsrs	r3, r3, #1
 800851c:	b29b      	uxth	r3, r3
 800851e:	f003 0307 	and.w	r3, r3, #7
 8008522:	b29a      	uxth	r2, r3
 8008524:	8bfb      	ldrh	r3, [r7, #30]
 8008526:	4313      	orrs	r3, r2
 8008528:	83fb      	strh	r3, [r7, #30]
        huart->Instance->BRR = brrtemp;
 800852a:	697b      	ldr	r3, [r7, #20]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	8bfa      	ldrh	r2, [r7, #30]
 8008530:	60da      	str	r2, [r3, #12]
 8008532:	e062      	b.n	80085fa <UART_SetConfig+0x5ce>
      }
      else
      {
        ret = HAL_ERROR;
 8008534:	2301      	movs	r3, #1
 8008536:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
 800853a:	e05e      	b.n	80085fa <UART_SetConfig+0x5ce>
      }
    }
  }
  else
  {
    switch (clocksource)
 800853c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8008540:	2b08      	cmp	r3, #8
 8008542:	d828      	bhi.n	8008596 <UART_SetConfig+0x56a>
 8008544:	a201      	add	r2, pc, #4	; (adr r2, 800854c <UART_SetConfig+0x520>)
 8008546:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800854a:	bf00      	nop
 800854c:	08008571 	.word	0x08008571
 8008550:	08008579 	.word	0x08008579
 8008554:	08008581 	.word	0x08008581
 8008558:	08008597 	.word	0x08008597
 800855c:	08008587 	.word	0x08008587
 8008560:	08008597 	.word	0x08008597
 8008564:	08008597 	.word	0x08008597
 8008568:	08008597 	.word	0x08008597
 800856c:	0800858f 	.word	0x0800858f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8008570:	f7fd f86c 	bl	800564c <HAL_RCC_GetPCLK1Freq>
 8008574:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 8008576:	e014      	b.n	80085a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8008578:	f7fd f87e 	bl	8005678 <HAL_RCC_GetPCLK2Freq>
 800857c:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800857e:	e010      	b.n	80085a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8008580:	4b1a      	ldr	r3, [pc, #104]	; (80085ec <UART_SetConfig+0x5c0>)
 8008582:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008584:	e00d      	b.n	80085a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8008586:	f7fc fff3 	bl	8005570 <HAL_RCC_GetSysClockFreq>
 800858a:	6278      	str	r0, [r7, #36]	; 0x24
        break;
 800858c:	e009      	b.n	80085a2 <UART_SetConfig+0x576>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800858e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8008592:	627b      	str	r3, [r7, #36]	; 0x24
        break;
 8008594:	e005      	b.n	80085a2 <UART_SetConfig+0x576>
      default:
        pclk = 0U;
 8008596:	2300      	movs	r3, #0
 8008598:	627b      	str	r3, [r7, #36]	; 0x24
        ret = HAL_ERROR;
 800859a:	2301      	movs	r3, #1
 800859c:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
        break;
 80085a0:	bf00      	nop
    }

    if (pclk != 0U)
 80085a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085a4:	2b00      	cmp	r3, #0
 80085a6:	d028      	beq.n	80085fa <UART_SetConfig+0x5ce>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80085a8:	697b      	ldr	r3, [r7, #20]
 80085aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80085ac:	4a10      	ldr	r2, [pc, #64]	; (80085f0 <UART_SetConfig+0x5c4>)
 80085ae:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80085b2:	461a      	mov	r2, r3
 80085b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085b6:	fbb3 f2f2 	udiv	r2, r3, r2
 80085ba:	697b      	ldr	r3, [r7, #20]
 80085bc:	685b      	ldr	r3, [r3, #4]
 80085be:	085b      	lsrs	r3, r3, #1
 80085c0:	441a      	add	r2, r3
 80085c2:	697b      	ldr	r3, [r7, #20]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80085ca:	623b      	str	r3, [r7, #32]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80085cc:	6a3b      	ldr	r3, [r7, #32]
 80085ce:	2b0f      	cmp	r3, #15
 80085d0:	d910      	bls.n	80085f4 <UART_SetConfig+0x5c8>
 80085d2:	6a3b      	ldr	r3, [r7, #32]
 80085d4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085d8:	d20c      	bcs.n	80085f4 <UART_SetConfig+0x5c8>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 80085da:	6a3b      	ldr	r3, [r7, #32]
 80085dc:	b29a      	uxth	r2, r3
 80085de:	697b      	ldr	r3, [r7, #20]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	60da      	str	r2, [r3, #12]
 80085e4:	e009      	b.n	80085fa <UART_SetConfig+0x5ce>
 80085e6:	bf00      	nop
 80085e8:	40008000 	.word	0x40008000
 80085ec:	00f42400 	.word	0x00f42400
 80085f0:	0800c7d8 	.word	0x0800c7d8
      }
      else
      {
        ret = HAL_ERROR;
 80085f4:	2301      	movs	r3, #1
 80085f6:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 80085fa:	697b      	ldr	r3, [r7, #20]
 80085fc:	2201      	movs	r2, #1
 80085fe:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8008602:	697b      	ldr	r3, [r7, #20]
 8008604:	2201      	movs	r2, #1
 8008606:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800860a:	697b      	ldr	r3, [r7, #20]
 800860c:	2200      	movs	r2, #0
 800860e:	671a      	str	r2, [r3, #112]	; 0x70
  huart->TxISR = NULL;
 8008610:	697b      	ldr	r3, [r7, #20]
 8008612:	2200      	movs	r2, #0
 8008614:	675a      	str	r2, [r3, #116]	; 0x74

  return ret;
 8008616:	f897 302a 	ldrb.w	r3, [r7, #42]	; 0x2a
}
 800861a:	4618      	mov	r0, r3
 800861c:	3730      	adds	r7, #48	; 0x30
 800861e:	46bd      	mov	sp, r7
 8008620:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}

08008624 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008630:	f003 0301 	and.w	r3, r3, #1
 8008634:	2b00      	cmp	r3, #0
 8008636:	d00a      	beq.n	800864e <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 8008638:	687b      	ldr	r3, [r7, #4]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	685b      	ldr	r3, [r3, #4]
 800863e:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	681b      	ldr	r3, [r3, #0]
 800864a:	430a      	orrs	r2, r1
 800864c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008652:	f003 0302 	and.w	r3, r3, #2
 8008656:	2b00      	cmp	r3, #0
 8008658:	d00a      	beq.n	8008670 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	681b      	ldr	r3, [r3, #0]
 800865e:	685b      	ldr	r3, [r3, #4]
 8008660:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8008668:	687b      	ldr	r3, [r7, #4]
 800866a:	681b      	ldr	r3, [r3, #0]
 800866c:	430a      	orrs	r2, r1
 800866e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008674:	f003 0304 	and.w	r3, r3, #4
 8008678:	2b00      	cmp	r3, #0
 800867a:	d00a      	beq.n	8008692 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	685b      	ldr	r3, [r3, #4]
 8008682:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	430a      	orrs	r2, r1
 8008690:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008696:	f003 0308 	and.w	r3, r3, #8
 800869a:	2b00      	cmp	r3, #0
 800869c:	d00a      	beq.n	80086b4 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800869e:	687b      	ldr	r3, [r7, #4]
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	685b      	ldr	r3, [r3, #4]
 80086a4:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	681b      	ldr	r3, [r3, #0]
 80086b0:	430a      	orrs	r2, r1
 80086b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086b8:	f003 0310 	and.w	r3, r3, #16
 80086bc:	2b00      	cmp	r3, #0
 80086be:	d00a      	beq.n	80086d6 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	689b      	ldr	r3, [r3, #8]
 80086c6:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80086ce:	687b      	ldr	r3, [r7, #4]
 80086d0:	681b      	ldr	r3, [r3, #0]
 80086d2:	430a      	orrs	r2, r1
 80086d4:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80086d6:	687b      	ldr	r3, [r7, #4]
 80086d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086da:	f003 0320 	and.w	r3, r3, #32
 80086de:	2b00      	cmp	r3, #0
 80086e0:	d00a      	beq.n	80086f8 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	689b      	ldr	r3, [r3, #8]
 80086e8:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	681b      	ldr	r3, [r3, #0]
 80086f4:	430a      	orrs	r2, r1
 80086f6:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80086f8:	687b      	ldr	r3, [r7, #4]
 80086fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80086fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008700:	2b00      	cmp	r3, #0
 8008702:	d01a      	beq.n	800873a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8008704:	687b      	ldr	r3, [r7, #4]
 8008706:	681b      	ldr	r3, [r3, #0]
 8008708:	685b      	ldr	r3, [r3, #4]
 800870a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	430a      	orrs	r2, r1
 8008718:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008722:	d10a      	bne.n	800873a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	685b      	ldr	r3, [r3, #4]
 800872a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	430a      	orrs	r2, r1
 8008738:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800873e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008742:	2b00      	cmp	r3, #0
 8008744:	d00a      	beq.n	800875c <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008754:	687b      	ldr	r3, [r7, #4]
 8008756:	681b      	ldr	r3, [r3, #0]
 8008758:	430a      	orrs	r2, r1
 800875a:	605a      	str	r2, [r3, #4]
  }
}
 800875c:	bf00      	nop
 800875e:	370c      	adds	r7, #12
 8008760:	46bd      	mov	sp, r7
 8008762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008766:	4770      	bx	lr

08008768 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8008768:	b580      	push	{r7, lr}
 800876a:	b086      	sub	sp, #24
 800876c:	af02      	add	r7, sp, #8
 800876e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	2200      	movs	r2, #0
 8008774:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8008778:	f7f9 ffb0 	bl	80026dc <HAL_GetTick>
 800877c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	681b      	ldr	r3, [r3, #0]
 8008782:	681b      	ldr	r3, [r3, #0]
 8008784:	f003 0308 	and.w	r3, r3, #8
 8008788:	2b08      	cmp	r3, #8
 800878a:	d10e      	bne.n	80087aa <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800878c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8008790:	9300      	str	r3, [sp, #0]
 8008792:	68fb      	ldr	r3, [r7, #12]
 8008794:	2200      	movs	r2, #0
 8008796:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800879a:	6878      	ldr	r0, [r7, #4]
 800879c:	f000 f82f 	bl	80087fe <UART_WaitOnFlagUntilTimeout>
 80087a0:	4603      	mov	r3, r0
 80087a2:	2b00      	cmp	r3, #0
 80087a4:	d001      	beq.n	80087aa <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087a6:	2303      	movs	r3, #3
 80087a8:	e025      	b.n	80087f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80087aa:	687b      	ldr	r3, [r7, #4]
 80087ac:	681b      	ldr	r3, [r3, #0]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	f003 0304 	and.w	r3, r3, #4
 80087b4:	2b04      	cmp	r3, #4
 80087b6:	d10e      	bne.n	80087d6 <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80087b8:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80087bc:	9300      	str	r3, [sp, #0]
 80087be:	68fb      	ldr	r3, [r7, #12]
 80087c0:	2200      	movs	r2, #0
 80087c2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80087c6:	6878      	ldr	r0, [r7, #4]
 80087c8:	f000 f819 	bl	80087fe <UART_WaitOnFlagUntilTimeout>
 80087cc:	4603      	mov	r3, r0
 80087ce:	2b00      	cmp	r3, #0
 80087d0:	d001      	beq.n	80087d6 <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80087d2:	2303      	movs	r3, #3
 80087d4:	e00f      	b.n	80087f6 <UART_CheckIdleState+0x8e>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80087d6:	687b      	ldr	r3, [r7, #4]
 80087d8:	2220      	movs	r2, #32
 80087da:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_READY;
 80087de:	687b      	ldr	r3, [r7, #4]
 80087e0:	2220      	movs	r2, #32
 80087e2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087e6:	687b      	ldr	r3, [r7, #4]
 80087e8:	2200      	movs	r2, #0
 80087ea:	66da      	str	r2, [r3, #108]	; 0x6c

  __HAL_UNLOCK(huart);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	2200      	movs	r2, #0
 80087f0:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 80087f4:	2300      	movs	r3, #0
}
 80087f6:	4618      	mov	r0, r3
 80087f8:	3710      	adds	r7, #16
 80087fa:	46bd      	mov	sp, r7
 80087fc:	bd80      	pop	{r7, pc}

080087fe <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 80087fe:	b580      	push	{r7, lr}
 8008800:	b09c      	sub	sp, #112	; 0x70
 8008802:	af00      	add	r7, sp, #0
 8008804:	60f8      	str	r0, [r7, #12]
 8008806:	60b9      	str	r1, [r7, #8]
 8008808:	603b      	str	r3, [r7, #0]
 800880a:	4613      	mov	r3, r2
 800880c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800880e:	e0a9      	b.n	8008964 <UART_WaitOnFlagUntilTimeout+0x166>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008810:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008812:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008816:	f000 80a5 	beq.w	8008964 <UART_WaitOnFlagUntilTimeout+0x166>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800881a:	f7f9 ff5f 	bl	80026dc <HAL_GetTick>
 800881e:	4602      	mov	r2, r0
 8008820:	683b      	ldr	r3, [r7, #0]
 8008822:	1ad3      	subs	r3, r2, r3
 8008824:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8008826:	429a      	cmp	r2, r3
 8008828:	d302      	bcc.n	8008830 <UART_WaitOnFlagUntilTimeout+0x32>
 800882a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800882c:	2b00      	cmp	r3, #0
 800882e:	d140      	bne.n	80088b2 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 8008830:	68fb      	ldr	r3, [r7, #12]
 8008832:	681b      	ldr	r3, [r3, #0]
 8008834:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008836:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008838:	e853 3f00 	ldrex	r3, [r3]
 800883c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800883e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008840:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008844:	667b      	str	r3, [r7, #100]	; 0x64
 8008846:	68fb      	ldr	r3, [r7, #12]
 8008848:	681b      	ldr	r3, [r3, #0]
 800884a:	461a      	mov	r2, r3
 800884c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800884e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008850:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008852:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008854:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008856:	e841 2300 	strex	r3, r2, [r1]
 800885a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800885c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800885e:	2b00      	cmp	r3, #0
 8008860:	d1e6      	bne.n	8008830 <UART_WaitOnFlagUntilTimeout+0x32>
                                                USART_CR1_TXEIE_TXFNFIE));
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	3308      	adds	r3, #8
 8008868:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800886a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800886c:	e853 3f00 	ldrex	r3, [r3]
 8008870:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008872:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008874:	f023 0301 	bic.w	r3, r3, #1
 8008878:	663b      	str	r3, [r7, #96]	; 0x60
 800887a:	68fb      	ldr	r3, [r7, #12]
 800887c:	681b      	ldr	r3, [r3, #0]
 800887e:	3308      	adds	r3, #8
 8008880:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8008882:	64ba      	str	r2, [r7, #72]	; 0x48
 8008884:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008886:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008888:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800888a:	e841 2300 	strex	r3, r2, [r1]
 800888e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008890:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008892:	2b00      	cmp	r3, #0
 8008894:	d1e5      	bne.n	8008862 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	2220      	movs	r2, #32
 800889a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
        huart->RxState = HAL_UART_STATE_READY;
 800889e:	68fb      	ldr	r3, [r7, #12]
 80088a0:	2220      	movs	r2, #32
 80088a2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        __HAL_UNLOCK(huart);
 80088a6:	68fb      	ldr	r3, [r7, #12]
 80088a8:	2200      	movs	r2, #0
 80088aa:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

        return HAL_TIMEOUT;
 80088ae:	2303      	movs	r3, #3
 80088b0:	e069      	b.n	8008986 <UART_WaitOnFlagUntilTimeout+0x188>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80088b2:	68fb      	ldr	r3, [r7, #12]
 80088b4:	681b      	ldr	r3, [r3, #0]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	f003 0304 	and.w	r3, r3, #4
 80088bc:	2b00      	cmp	r3, #0
 80088be:	d051      	beq.n	8008964 <UART_WaitOnFlagUntilTimeout+0x166>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	69db      	ldr	r3, [r3, #28]
 80088c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80088ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80088ce:	d149      	bne.n	8008964 <UART_WaitOnFlagUntilTimeout+0x166>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80088d0:	68fb      	ldr	r3, [r7, #12]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80088d8:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
 80088da:	68fb      	ldr	r3, [r7, #12]
 80088dc:	681b      	ldr	r3, [r3, #0]
 80088de:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80088e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80088e2:	e853 3f00 	ldrex	r3, [r3]
 80088e6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80088e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80088ea:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80088ee:	66fb      	str	r3, [r7, #108]	; 0x6c
 80088f0:	68fb      	ldr	r3, [r7, #12]
 80088f2:	681b      	ldr	r3, [r3, #0]
 80088f4:	461a      	mov	r2, r3
 80088f6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80088f8:	637b      	str	r3, [r7, #52]	; 0x34
 80088fa:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80088fc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80088fe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008900:	e841 2300 	strex	r3, r2, [r1]
 8008904:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008906:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008908:	2b00      	cmp	r3, #0
 800890a:	d1e6      	bne.n	80088da <UART_WaitOnFlagUntilTimeout+0xdc>
                                                  USART_CR1_TXEIE_TXFNFIE));
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800890c:	68fb      	ldr	r3, [r7, #12]
 800890e:	681b      	ldr	r3, [r3, #0]
 8008910:	3308      	adds	r3, #8
 8008912:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008914:	697b      	ldr	r3, [r7, #20]
 8008916:	e853 3f00 	ldrex	r3, [r3]
 800891a:	613b      	str	r3, [r7, #16]
   return(result);
 800891c:	693b      	ldr	r3, [r7, #16]
 800891e:	f023 0301 	bic.w	r3, r3, #1
 8008922:	66bb      	str	r3, [r7, #104]	; 0x68
 8008924:	68fb      	ldr	r3, [r7, #12]
 8008926:	681b      	ldr	r3, [r3, #0]
 8008928:	3308      	adds	r3, #8
 800892a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800892c:	623a      	str	r2, [r7, #32]
 800892e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008930:	69f9      	ldr	r1, [r7, #28]
 8008932:	6a3a      	ldr	r2, [r7, #32]
 8008934:	e841 2300 	strex	r3, r2, [r1]
 8008938:	61bb      	str	r3, [r7, #24]
   return(result);
 800893a:	69bb      	ldr	r3, [r7, #24]
 800893c:	2b00      	cmp	r3, #0
 800893e:	d1e5      	bne.n	800890c <UART_WaitOnFlagUntilTimeout+0x10e>

          huart->gState = HAL_UART_STATE_READY;
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	2220      	movs	r2, #32
 8008944:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
          huart->RxState = HAL_UART_STATE_READY;
 8008948:	68fb      	ldr	r3, [r7, #12]
 800894a:	2220      	movs	r2, #32
 800894c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	2220      	movs	r2, #32
 8008954:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	2200      	movs	r2, #0
 800895c:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

          return HAL_TIMEOUT;
 8008960:	2303      	movs	r3, #3
 8008962:	e010      	b.n	8008986 <UART_WaitOnFlagUntilTimeout+0x188>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008964:	68fb      	ldr	r3, [r7, #12]
 8008966:	681b      	ldr	r3, [r3, #0]
 8008968:	69da      	ldr	r2, [r3, #28]
 800896a:	68bb      	ldr	r3, [r7, #8]
 800896c:	4013      	ands	r3, r2
 800896e:	68ba      	ldr	r2, [r7, #8]
 8008970:	429a      	cmp	r2, r3
 8008972:	bf0c      	ite	eq
 8008974:	2301      	moveq	r3, #1
 8008976:	2300      	movne	r3, #0
 8008978:	b2db      	uxtb	r3, r3
 800897a:	461a      	mov	r2, r3
 800897c:	79fb      	ldrb	r3, [r7, #7]
 800897e:	429a      	cmp	r2, r3
 8008980:	f43f af46 	beq.w	8008810 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8008984:	2300      	movs	r3, #0
}
 8008986:	4618      	mov	r0, r3
 8008988:	3770      	adds	r7, #112	; 0x70
 800898a:	46bd      	mov	sp, r7
 800898c:	bd80      	pop	{r7, pc}
	...

08008990 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008990:	b480      	push	{r7}
 8008992:	b0a3      	sub	sp, #140	; 0x8c
 8008994:	af00      	add	r7, sp, #0
 8008996:	60f8      	str	r0, [r7, #12]
 8008998:	60b9      	str	r1, [r7, #8]
 800899a:	4613      	mov	r3, r2
 800899c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	68ba      	ldr	r2, [r7, #8]
 80089a2:	659a      	str	r2, [r3, #88]	; 0x58
  huart->RxXferSize  = Size;
 80089a4:	68fb      	ldr	r3, [r7, #12]
 80089a6:	88fa      	ldrh	r2, [r7, #6]
 80089a8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
  huart->RxXferCount = Size;
 80089ac:	68fb      	ldr	r3, [r7, #12]
 80089ae:	88fa      	ldrh	r2, [r7, #6]
 80089b0:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->RxISR       = NULL;
 80089b4:	68fb      	ldr	r3, [r7, #12]
 80089b6:	2200      	movs	r2, #0
 80089b8:	671a      	str	r2, [r3, #112]	; 0x70

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 80089ba:	68fb      	ldr	r3, [r7, #12]
 80089bc:	689b      	ldr	r3, [r3, #8]
 80089be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80089c2:	d10e      	bne.n	80089e2 <UART_Start_Receive_IT+0x52>
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	691b      	ldr	r3, [r3, #16]
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	d105      	bne.n	80089d8 <UART_Start_Receive_IT+0x48>
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	f240 12ff 	movw	r2, #511	; 0x1ff
 80089d2:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089d6:	e02d      	b.n	8008a34 <UART_Start_Receive_IT+0xa4>
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	22ff      	movs	r2, #255	; 0xff
 80089dc:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089e0:	e028      	b.n	8008a34 <UART_Start_Receive_IT+0xa4>
 80089e2:	68fb      	ldr	r3, [r7, #12]
 80089e4:	689b      	ldr	r3, [r3, #8]
 80089e6:	2b00      	cmp	r3, #0
 80089e8:	d10d      	bne.n	8008a06 <UART_Start_Receive_IT+0x76>
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	691b      	ldr	r3, [r3, #16]
 80089ee:	2b00      	cmp	r3, #0
 80089f0:	d104      	bne.n	80089fc <UART_Start_Receive_IT+0x6c>
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	22ff      	movs	r2, #255	; 0xff
 80089f6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 80089fa:	e01b      	b.n	8008a34 <UART_Start_Receive_IT+0xa4>
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	227f      	movs	r2, #127	; 0x7f
 8008a00:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a04:	e016      	b.n	8008a34 <UART_Start_Receive_IT+0xa4>
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	689b      	ldr	r3, [r3, #8]
 8008a0a:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8008a0e:	d10d      	bne.n	8008a2c <UART_Start_Receive_IT+0x9c>
 8008a10:	68fb      	ldr	r3, [r7, #12]
 8008a12:	691b      	ldr	r3, [r3, #16]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d104      	bne.n	8008a22 <UART_Start_Receive_IT+0x92>
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	227f      	movs	r2, #127	; 0x7f
 8008a1c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a20:	e008      	b.n	8008a34 <UART_Start_Receive_IT+0xa4>
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	223f      	movs	r2, #63	; 0x3f
 8008a26:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
 8008a2a:	e003      	b.n	8008a34 <UART_Start_Receive_IT+0xa4>
 8008a2c:	68fb      	ldr	r3, [r7, #12]
 8008a2e:	2200      	movs	r2, #0
 8008a30:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a34:	68fb      	ldr	r3, [r7, #12]
 8008a36:	2200      	movs	r2, #0
 8008a38:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	2222      	movs	r2, #34	; 0x22
 8008a40:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	3308      	adds	r3, #8
 8008a4a:	667b      	str	r3, [r7, #100]	; 0x64
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008a4c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008a4e:	e853 3f00 	ldrex	r3, [r3]
 8008a52:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8008a54:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008a56:	f043 0301 	orr.w	r3, r3, #1
 8008a5a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008a5e:	68fb      	ldr	r3, [r7, #12]
 8008a60:	681b      	ldr	r3, [r3, #0]
 8008a62:	3308      	adds	r3, #8
 8008a64:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8008a68:	673a      	str	r2, [r7, #112]	; 0x70
 8008a6a:	66fb      	str	r3, [r7, #108]	; 0x6c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a6c:	6ef9      	ldr	r1, [r7, #108]	; 0x6c
 8008a6e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8008a70:	e841 2300 	strex	r3, r2, [r1]
 8008a74:	66bb      	str	r3, [r7, #104]	; 0x68
   return(result);
 8008a76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8008a78:	2b00      	cmp	r3, #0
 8008a7a:	d1e3      	bne.n	8008a44 <UART_Start_Receive_IT+0xb4>

  /* Configure Rx interrupt processing */
  if ((huart->FifoMode == UART_FIFOMODE_ENABLE) && (Size >= huart->NbRxDataToProcess))
 8008a7c:	68fb      	ldr	r3, [r7, #12]
 8008a7e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8008a80:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8008a84:	d153      	bne.n	8008b2e <UART_Start_Receive_IT+0x19e>
 8008a86:	68fb      	ldr	r3, [r7, #12]
 8008a88:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8008a8c:	88fa      	ldrh	r2, [r7, #6]
 8008a8e:	429a      	cmp	r2, r3
 8008a90:	d34d      	bcc.n	8008b2e <UART_Start_Receive_IT+0x19e>
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008a92:	68fb      	ldr	r3, [r7, #12]
 8008a94:	689b      	ldr	r3, [r3, #8]
 8008a96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008a9a:	d107      	bne.n	8008aac <UART_Start_Receive_IT+0x11c>
 8008a9c:	68fb      	ldr	r3, [r7, #12]
 8008a9e:	691b      	ldr	r3, [r3, #16]
 8008aa0:	2b00      	cmp	r3, #0
 8008aa2:	d103      	bne.n	8008aac <UART_Start_Receive_IT+0x11c>
    {
      huart->RxISR = UART_RxISR_16BIT_FIFOEN;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	4a4b      	ldr	r2, [pc, #300]	; (8008bd4 <UART_Start_Receive_IT+0x244>)
 8008aa8:	671a      	str	r2, [r3, #112]	; 0x70
 8008aaa:	e002      	b.n	8008ab2 <UART_Start_Receive_IT+0x122>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT_FIFOEN;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	4a4a      	ldr	r2, [pc, #296]	; (8008bd8 <UART_Start_Receive_IT+0x248>)
 8008ab0:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008ab2:	68fb      	ldr	r3, [r7, #12]
 8008ab4:	2200      	movs	r2, #0
 8008ab6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and RX FIFO Threshold interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	691b      	ldr	r3, [r3, #16]
 8008abe:	2b00      	cmp	r3, #0
 8008ac0:	d01a      	beq.n	8008af8 <UART_Start_Receive_IT+0x168>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008ac2:	68fb      	ldr	r3, [r7, #12]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ac8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008aca:	e853 3f00 	ldrex	r3, [r3]
 8008ace:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 8008ad0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008ad6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008ada:	68fb      	ldr	r3, [r7, #12]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	461a      	mov	r2, r3
 8008ae0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8008ae4:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008ae6:	65ba      	str	r2, [r7, #88]	; 0x58
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ae8:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8008aea:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8008aec:	e841 2300 	strex	r3, r2, [r1]
 8008af0:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 8008af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d1e4      	bne.n	8008ac2 <UART_Start_Receive_IT+0x132>
    }
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	681b      	ldr	r3, [r3, #0]
 8008afc:	3308      	adds	r3, #8
 8008afe:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b00:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008b02:	e853 3f00 	ldrex	r3, [r3]
 8008b06:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008b08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008b0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008b0e:	67fb      	str	r3, [r7, #124]	; 0x7c
 8008b10:	68fb      	ldr	r3, [r7, #12]
 8008b12:	681b      	ldr	r3, [r3, #0]
 8008b14:	3308      	adds	r3, #8
 8008b16:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8008b18:	64ba      	str	r2, [r7, #72]	; 0x48
 8008b1a:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b1c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8008b1e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008b20:	e841 2300 	strex	r3, r2, [r1]
 8008b24:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 8008b26:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	d1e5      	bne.n	8008af8 <UART_Start_Receive_IT+0x168>
 8008b2c:	e04a      	b.n	8008bc4 <UART_Start_Receive_IT+0x234>
  }
  else
  {
    /* Set the Rx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	689b      	ldr	r3, [r3, #8]
 8008b32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b36:	d107      	bne.n	8008b48 <UART_Start_Receive_IT+0x1b8>
 8008b38:	68fb      	ldr	r3, [r7, #12]
 8008b3a:	691b      	ldr	r3, [r3, #16]
 8008b3c:	2b00      	cmp	r3, #0
 8008b3e:	d103      	bne.n	8008b48 <UART_Start_Receive_IT+0x1b8>
    {
      huart->RxISR = UART_RxISR_16BIT;
 8008b40:	68fb      	ldr	r3, [r7, #12]
 8008b42:	4a26      	ldr	r2, [pc, #152]	; (8008bdc <UART_Start_Receive_IT+0x24c>)
 8008b44:	671a      	str	r2, [r3, #112]	; 0x70
 8008b46:	e002      	b.n	8008b4e <UART_Start_Receive_IT+0x1be>
    }
    else
    {
      huart->RxISR = UART_RxISR_8BIT;
 8008b48:	68fb      	ldr	r3, [r7, #12]
 8008b4a:	4a25      	ldr	r2, [pc, #148]	; (8008be0 <UART_Start_Receive_IT+0x250>)
 8008b4c:	671a      	str	r2, [r3, #112]	; 0x70
    }

    __HAL_UNLOCK(huart);
 8008b4e:	68fb      	ldr	r3, [r7, #12]
 8008b50:	2200      	movs	r2, #0
 8008b52:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

    /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
    if (huart->Init.Parity != UART_PARITY_NONE)
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	691b      	ldr	r3, [r3, #16]
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d019      	beq.n	8008b92 <UART_Start_Receive_IT+0x202>
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE_RXFNEIE);
 8008b5e:	68fb      	ldr	r3, [r7, #12]
 8008b60:	681b      	ldr	r3, [r3, #0]
 8008b62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b64:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b66:	e853 3f00 	ldrex	r3, [r3]
 8008b6a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008b6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008b6e:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 8008b72:	677b      	str	r3, [r7, #116]	; 0x74
 8008b74:	68fb      	ldr	r3, [r7, #12]
 8008b76:	681b      	ldr	r3, [r3, #0]
 8008b78:	461a      	mov	r2, r3
 8008b7a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b7c:	637b      	str	r3, [r7, #52]	; 0x34
 8008b7e:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008b84:	e841 2300 	strex	r3, r2, [r1]
 8008b88:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008b8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008b8c:	2b00      	cmp	r3, #0
 8008b8e:	d1e6      	bne.n	8008b5e <UART_Start_Receive_IT+0x1ce>
 8008b90:	e018      	b.n	8008bc4 <UART_Start_Receive_IT+0x234>
    }
    else
    {
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 8008b92:	68fb      	ldr	r3, [r7, #12]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b98:	697b      	ldr	r3, [r7, #20]
 8008b9a:	e853 3f00 	ldrex	r3, [r3]
 8008b9e:	613b      	str	r3, [r7, #16]
   return(result);
 8008ba0:	693b      	ldr	r3, [r7, #16]
 8008ba2:	f043 0320 	orr.w	r3, r3, #32
 8008ba6:	67bb      	str	r3, [r7, #120]	; 0x78
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	461a      	mov	r2, r3
 8008bae:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008bb0:	623b      	str	r3, [r7, #32]
 8008bb2:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bb4:	69f9      	ldr	r1, [r7, #28]
 8008bb6:	6a3a      	ldr	r2, [r7, #32]
 8008bb8:	e841 2300 	strex	r3, r2, [r1]
 8008bbc:	61bb      	str	r3, [r7, #24]
   return(result);
 8008bbe:	69bb      	ldr	r3, [r7, #24]
 8008bc0:	2b00      	cmp	r3, #0
 8008bc2:	d1e6      	bne.n	8008b92 <UART_Start_Receive_IT+0x202>
    }  
  }
  return HAL_OK;
 8008bc4:	2300      	movs	r3, #0
}
 8008bc6:	4618      	mov	r0, r3
 8008bc8:	378c      	adds	r7, #140	; 0x8c
 8008bca:	46bd      	mov	sp, r7
 8008bcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bd0:	4770      	bx	lr
 8008bd2:	bf00      	nop
 8008bd4:	080092ed 	.word	0x080092ed
 8008bd8:	08008ff5 	.word	0x08008ff5
 8008bdc:	08008e93 	.word	0x08008e93
 8008be0:	08008d33 	.word	0x08008d33

08008be4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008be4:	b480      	push	{r7}
 8008be6:	b095      	sub	sp, #84	; 0x54
 8008be8:	af00      	add	r7, sp, #0
 8008bea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bf2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008bf4:	e853 3f00 	ldrex	r3, [r3]
 8008bf8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008bfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c00:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	461a      	mov	r2, r3
 8008c08:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008c0a:	643b      	str	r3, [r7, #64]	; 0x40
 8008c0c:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c0e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008c10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008c12:	e841 2300 	strex	r3, r2, [r1]
 8008c16:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008c18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d1e6      	bne.n	8008bec <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	3308      	adds	r3, #8
 8008c24:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c26:	6a3b      	ldr	r3, [r7, #32]
 8008c28:	e853 3f00 	ldrex	r3, [r3]
 8008c2c:	61fb      	str	r3, [r7, #28]
   return(result);
 8008c2e:	69fb      	ldr	r3, [r7, #28]
 8008c30:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8008c34:	f023 0301 	bic.w	r3, r3, #1
 8008c38:	64bb      	str	r3, [r7, #72]	; 0x48
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	3308      	adds	r3, #8
 8008c40:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008c42:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c44:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c46:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008c48:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c4a:	e841 2300 	strex	r3, r2, [r1]
 8008c4e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008c52:	2b00      	cmp	r3, #0
 8008c54:	d1e3      	bne.n	8008c1e <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008c56:	687b      	ldr	r3, [r7, #4]
 8008c58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008c5a:	2b01      	cmp	r3, #1
 8008c5c:	d118      	bne.n	8008c90 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c64:	68fb      	ldr	r3, [r7, #12]
 8008c66:	e853 3f00 	ldrex	r3, [r3]
 8008c6a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008c6c:	68bb      	ldr	r3, [r7, #8]
 8008c6e:	f023 0310 	bic.w	r3, r3, #16
 8008c72:	647b      	str	r3, [r7, #68]	; 0x44
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	461a      	mov	r2, r3
 8008c7a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008c7c:	61bb      	str	r3, [r7, #24]
 8008c7e:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c80:	6979      	ldr	r1, [r7, #20]
 8008c82:	69ba      	ldr	r2, [r7, #24]
 8008c84:	e841 2300 	strex	r3, r2, [r1]
 8008c88:	613b      	str	r3, [r7, #16]
   return(result);
 8008c8a:	693b      	ldr	r3, [r7, #16]
 8008c8c:	2b00      	cmp	r3, #0
 8008c8e:	d1e6      	bne.n	8008c5e <UART_EndRxTransfer+0x7a>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2220      	movs	r2, #32
 8008c94:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2200      	movs	r2, #0
 8008c9c:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	2200      	movs	r2, #0
 8008ca2:	671a      	str	r2, [r3, #112]	; 0x70
}
 8008ca4:	bf00      	nop
 8008ca6:	3754      	adds	r7, #84	; 0x54
 8008ca8:	46bd      	mov	sp, r7
 8008caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cae:	4770      	bx	lr

08008cb0 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008cb0:	b580      	push	{r7, lr}
 8008cb2:	b084      	sub	sp, #16
 8008cb4:	af00      	add	r7, sp, #0
 8008cb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cbc:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 8008cbe:	68fb      	ldr	r3, [r7, #12]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
  huart->TxXferCount = 0U;
 8008cc6:	68fb      	ldr	r3, [r7, #12]
 8008cc8:	2200      	movs	r2, #0
 8008cca:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7ff f996 	bl	8008000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008cd4:	bf00      	nop
 8008cd6:	3710      	adds	r7, #16
 8008cd8:	46bd      	mov	sp, r7
 8008cda:	bd80      	pop	{r7, pc}

08008cdc <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008cdc:	b580      	push	{r7, lr}
 8008cde:	b088      	sub	sp, #32
 8008ce0:	af00      	add	r7, sp, #0
 8008ce2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008ce4:	687b      	ldr	r3, [r7, #4]
 8008ce6:	681b      	ldr	r3, [r3, #0]
 8008ce8:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008cea:	68fb      	ldr	r3, [r7, #12]
 8008cec:	e853 3f00 	ldrex	r3, [r3]
 8008cf0:	60bb      	str	r3, [r7, #8]
   return(result);
 8008cf2:	68bb      	ldr	r3, [r7, #8]
 8008cf4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008cf8:	61fb      	str	r3, [r7, #28]
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	681b      	ldr	r3, [r3, #0]
 8008cfe:	461a      	mov	r2, r3
 8008d00:	69fb      	ldr	r3, [r7, #28]
 8008d02:	61bb      	str	r3, [r7, #24]
 8008d04:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d06:	6979      	ldr	r1, [r7, #20]
 8008d08:	69ba      	ldr	r2, [r7, #24]
 8008d0a:	e841 2300 	strex	r3, r2, [r1]
 8008d0e:	613b      	str	r3, [r7, #16]
   return(result);
 8008d10:	693b      	ldr	r3, [r7, #16]
 8008d12:	2b00      	cmp	r3, #0
 8008d14:	d1e6      	bne.n	8008ce4 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2220      	movs	r2, #32
 8008d1a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	2200      	movs	r2, #0
 8008d22:	675a      	str	r2, [r3, #116]	; 0x74
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008d24:	6878      	ldr	r0, [r7, #4]
 8008d26:	f7ff f961 	bl	8007fec <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d2a:	bf00      	nop
 8008d2c:	3720      	adds	r7, #32
 8008d2e:	46bd      	mov	sp, r7
 8008d30:	bd80      	pop	{r7, pc}

08008d32 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 8008d32:	b580      	push	{r7, lr}
 8008d34:	b096      	sub	sp, #88	; 0x58
 8008d36:	af00      	add	r7, sp, #0
 8008d38:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008d40:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008d44:	687b      	ldr	r3, [r7, #4]
 8008d46:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008d4a:	2b22      	cmp	r3, #34	; 0x22
 8008d4c:	f040 8095 	bne.w	8008e7a <UART_RxISR_8BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008d56:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8008d5a:	f8b7 3054 	ldrh.w	r3, [r7, #84]	; 0x54
 8008d5e:	b2d9      	uxtb	r1, r3
 8008d60:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008d64:	b2da      	uxtb	r2, r3
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d6a:	400a      	ands	r2, r1
 8008d6c:	b2d2      	uxtb	r2, r2
 8008d6e:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008d74:	1c5a      	adds	r2, r3, #1
 8008d76:	687b      	ldr	r3, [r7, #4]
 8008d78:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d80:	b29b      	uxth	r3, r3
 8008d82:	3b01      	subs	r3, #1
 8008d84:	b29a      	uxth	r2, r3
 8008d86:	687b      	ldr	r3, [r7, #4]
 8008d88:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008d8c:	687b      	ldr	r3, [r7, #4]
 8008d8e:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008d92:	b29b      	uxth	r3, r3
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d178      	bne.n	8008e8a <UART_RxISR_8BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008da0:	e853 3f00 	ldrex	r3, [r3]
 8008da4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008da6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008da8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008dac:	653b      	str	r3, [r7, #80]	; 0x50
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	461a      	mov	r2, r3
 8008db4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008db6:	647b      	str	r3, [r7, #68]	; 0x44
 8008db8:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dba:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008dbe:	e841 2300 	strex	r3, r2, [r1]
 8008dc2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008dc4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008dc6:	2b00      	cmp	r3, #0
 8008dc8:	d1e6      	bne.n	8008d98 <UART_RxISR_8BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008dca:	687b      	ldr	r3, [r7, #4]
 8008dcc:	681b      	ldr	r3, [r3, #0]
 8008dce:	3308      	adds	r3, #8
 8008dd0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dd2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008dd4:	e853 3f00 	ldrex	r3, [r3]
 8008dd8:	623b      	str	r3, [r7, #32]
   return(result);
 8008dda:	6a3b      	ldr	r3, [r7, #32]
 8008ddc:	f023 0301 	bic.w	r3, r3, #1
 8008de0:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	3308      	adds	r3, #8
 8008de8:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008dea:	633a      	str	r2, [r7, #48]	; 0x30
 8008dec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008df0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008df2:	e841 2300 	strex	r3, r2, [r1]
 8008df6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008df8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d1e5      	bne.n	8008dca <UART_RxISR_8BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008dfe:	687b      	ldr	r3, [r7, #4]
 8008e00:	2220      	movs	r2, #32
 8008e02:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	2200      	movs	r2, #0
 8008e0a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	d12e      	bne.n	8008e72 <UART_RxISR_8BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2200      	movs	r2, #0
 8008e18:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	693b      	ldr	r3, [r7, #16]
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	60fb      	str	r3, [r7, #12]
   return(result);
 8008e28:	68fb      	ldr	r3, [r7, #12]
 8008e2a:	f023 0310 	bic.w	r3, r3, #16
 8008e2e:	64bb      	str	r3, [r7, #72]	; 0x48
 8008e30:	687b      	ldr	r3, [r7, #4]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	461a      	mov	r2, r3
 8008e36:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e38:	61fb      	str	r3, [r7, #28]
 8008e3a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	69b9      	ldr	r1, [r7, #24]
 8008e3e:	69fa      	ldr	r2, [r7, #28]
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	617b      	str	r3, [r7, #20]
   return(result);
 8008e46:	697b      	ldr	r3, [r7, #20]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e6      	bne.n	8008e1a <UART_RxISR_8BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	681b      	ldr	r3, [r3, #0]
 8008e50:	69db      	ldr	r3, [r3, #28]
 8008e52:	f003 0310 	and.w	r3, r3, #16
 8008e56:	2b10      	cmp	r3, #16
 8008e58:	d103      	bne.n	8008e62 <UART_RxISR_8BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	2210      	movs	r2, #16
 8008e60:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008e62:	687b      	ldr	r3, [r7, #4]
 8008e64:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008e68:	4619      	mov	r1, r3
 8008e6a:	6878      	ldr	r0, [r7, #4]
 8008e6c:	f7ff f8d2 	bl	8008014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008e70:	e00b      	b.n	8008e8a <UART_RxISR_8BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008e72:	6878      	ldr	r0, [r7, #4]
 8008e74:	f7f9 fbc8 	bl	8002608 <HAL_UART_RxCpltCallback>
}
 8008e78:	e007      	b.n	8008e8a <UART_RxISR_8BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	699a      	ldr	r2, [r3, #24]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f042 0208 	orr.w	r2, r2, #8
 8008e88:	619a      	str	r2, [r3, #24]
}
 8008e8a:	bf00      	nop
 8008e8c:	3758      	adds	r7, #88	; 0x58
 8008e8e:	46bd      	mov	sp, r7
 8008e90:	bd80      	pop	{r7, pc}

08008e92 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 8008e92:	b580      	push	{r7, lr}
 8008e94:	b096      	sub	sp, #88	; 0x58
 8008e96:	af00      	add	r7, sp, #0
 8008e98:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8008ea0:	f8a7 3056 	strh.w	r3, [r7, #86]	; 0x56
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008ea4:	687b      	ldr	r3, [r7, #4]
 8008ea6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008eaa:	2b22      	cmp	r3, #34	; 0x22
 8008eac:	f040 8095 	bne.w	8008fda <UART_RxISR_16BIT+0x148>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008eb6:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8008eba:	687b      	ldr	r3, [r7, #4]
 8008ebc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ebe:	653b      	str	r3, [r7, #80]	; 0x50
    *tmp = (uint16_t)(uhdata & uhMask);
 8008ec0:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 8008ec4:	f8b7 3056 	ldrh.w	r3, [r7, #86]	; 0x56
 8008ec8:	4013      	ands	r3, r2
 8008eca:	b29a      	uxth	r2, r3
 8008ecc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ece:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8008ed4:	1c9a      	adds	r2, r3, #2
 8008ed6:	687b      	ldr	r3, [r7, #4]
 8008ed8:	659a      	str	r2, [r3, #88]	; 0x58
    huart->RxXferCount--;
 8008eda:	687b      	ldr	r3, [r7, #4]
 8008edc:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ee0:	b29b      	uxth	r3, r3
 8008ee2:	3b01      	subs	r3, #1
 8008ee4:	b29a      	uxth	r2, r3
 8008ee6:	687b      	ldr	r3, [r7, #4]
 8008ee8:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e

    if (huart->RxXferCount == 0U)
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8008ef2:	b29b      	uxth	r3, r3
 8008ef4:	2b00      	cmp	r3, #0
 8008ef6:	d178      	bne.n	8008fea <UART_RxISR_16BIT+0x158>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008efe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f00:	e853 3f00 	ldrex	r3, [r3]
 8008f04:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f08:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f0c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	681b      	ldr	r3, [r3, #0]
 8008f12:	461a      	mov	r2, r3
 8008f14:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008f16:	643b      	str	r3, [r7, #64]	; 0x40
 8008f18:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f1a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f1c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f1e:	e841 2300 	strex	r3, r2, [r1]
 8008f22:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f26:	2b00      	cmp	r3, #0
 8008f28:	d1e6      	bne.n	8008ef8 <UART_RxISR_16BIT+0x66>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f2a:	687b      	ldr	r3, [r7, #4]
 8008f2c:	681b      	ldr	r3, [r3, #0]
 8008f2e:	3308      	adds	r3, #8
 8008f30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f32:	6a3b      	ldr	r3, [r7, #32]
 8008f34:	e853 3f00 	ldrex	r3, [r3]
 8008f38:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f3a:	69fb      	ldr	r3, [r7, #28]
 8008f3c:	f023 0301 	bic.w	r3, r3, #1
 8008f40:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f42:	687b      	ldr	r3, [r7, #4]
 8008f44:	681b      	ldr	r3, [r3, #0]
 8008f46:	3308      	adds	r3, #8
 8008f48:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f4a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f4c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f4e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f50:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f52:	e841 2300 	strex	r3, r2, [r1]
 8008f56:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d1e5      	bne.n	8008f2a <UART_RxISR_16BIT+0x98>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	2220      	movs	r2, #32
 8008f62:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8008f66:	687b      	ldr	r3, [r7, #4]
 8008f68:	2200      	movs	r2, #0
 8008f6a:	671a      	str	r2, [r3, #112]	; 0x70

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f6c:	687b      	ldr	r3, [r7, #4]
 8008f6e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8008f70:	2b01      	cmp	r3, #1
 8008f72:	d12e      	bne.n	8008fd2 <UART_RxISR_16BIT+0x140>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	2200      	movs	r2, #0
 8008f78:	66da      	str	r2, [r3, #108]	; 0x6c

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f7a:	687b      	ldr	r3, [r7, #4]
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	e853 3f00 	ldrex	r3, [r3]
 8008f86:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f88:	68bb      	ldr	r3, [r7, #8]
 8008f8a:	f023 0310 	bic.w	r3, r3, #16
 8008f8e:	647b      	str	r3, [r7, #68]	; 0x44
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	681b      	ldr	r3, [r3, #0]
 8008f94:	461a      	mov	r2, r3
 8008f96:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008f98:	61bb      	str	r3, [r7, #24]
 8008f9a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f9c:	6979      	ldr	r1, [r7, #20]
 8008f9e:	69ba      	ldr	r2, [r7, #24]
 8008fa0:	e841 2300 	strex	r3, r2, [r1]
 8008fa4:	613b      	str	r3, [r7, #16]
   return(result);
 8008fa6:	693b      	ldr	r3, [r7, #16]
 8008fa8:	2b00      	cmp	r3, #0
 8008faa:	d1e6      	bne.n	8008f7a <UART_RxISR_16BIT+0xe8>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8008fac:	687b      	ldr	r3, [r7, #4]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	69db      	ldr	r3, [r3, #28]
 8008fb2:	f003 0310 	and.w	r3, r3, #16
 8008fb6:	2b10      	cmp	r3, #16
 8008fb8:	d103      	bne.n	8008fc2 <UART_RxISR_16BIT+0x130>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8008fba:	687b      	ldr	r3, [r7, #4]
 8008fbc:	681b      	ldr	r3, [r3, #0]
 8008fbe:	2210      	movs	r2, #16
 8008fc0:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008fc2:	687b      	ldr	r3, [r7, #4]
 8008fc4:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 8008fc8:	4619      	mov	r1, r3
 8008fca:	6878      	ldr	r0, [r7, #4]
 8008fcc:	f7ff f822 	bl	8008014 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 8008fd0:	e00b      	b.n	8008fea <UART_RxISR_16BIT+0x158>
        HAL_UART_RxCpltCallback(huart);
 8008fd2:	6878      	ldr	r0, [r7, #4]
 8008fd4:	f7f9 fb18 	bl	8002608 <HAL_UART_RxCpltCallback>
}
 8008fd8:	e007      	b.n	8008fea <UART_RxISR_16BIT+0x158>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	699a      	ldr	r2, [r3, #24]
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	f042 0208 	orr.w	r2, r2, #8
 8008fe8:	619a      	str	r2, [r3, #24]
}
 8008fea:	bf00      	nop
 8008fec:	3758      	adds	r7, #88	; 0x58
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}
	...

08008ff4 <UART_RxISR_8BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 8008ff4:	b580      	push	{r7, lr}
 8008ff6:	b0a6      	sub	sp, #152	; 0x98
 8008ff8:	af00      	add	r7, sp, #0
 8008ffa:	6078      	str	r0, [r7, #4]
  uint16_t  uhMask = huart->Mask;
 8008ffc:	687b      	ldr	r3, [r7, #4]
 8008ffe:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8009002:	f8a7 3092 	strh.w	r3, [r7, #146]	; 0x92
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	69db      	ldr	r3, [r3, #28]
 800900c:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	681b      	ldr	r3, [r3, #0]
 8009014:	681b      	ldr	r3, [r3, #0]
 8009016:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	681b      	ldr	r3, [r3, #0]
 800901e:	689b      	ldr	r3, [r3, #8]
 8009020:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800902a:	2b22      	cmp	r3, #34	; 0x22
 800902c:	f040 814f 	bne.w	80092ce <UART_RxISR_8BIT_FIFOEN+0x2da>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009030:	687b      	ldr	r3, [r7, #4]
 8009032:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009036:	f8a7 3086 	strh.w	r3, [r7, #134]	; 0x86
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800903a:	e0f6      	b.n	800922a <UART_RxISR_8BIT_FIFOEN+0x236>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009042:	f8a7 3084 	strh.w	r3, [r7, #132]	; 0x84
      *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8009046:	f8b7 3084 	ldrh.w	r3, [r7, #132]	; 0x84
 800904a:	b2d9      	uxtb	r1, r3
 800904c:	f8b7 3092 	ldrh.w	r3, [r7, #146]	; 0x92
 8009050:	b2da      	uxtb	r2, r3
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009056:	400a      	ands	r2, r1
 8009058:	b2d2      	uxtb	r2, r2
 800905a:	701a      	strb	r2, [r3, #0]
      huart->pRxBuffPtr++;
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009060:	1c5a      	adds	r2, r3, #1
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800906c:	b29b      	uxth	r3, r3
 800906e:	3b01      	subs	r3, #1
 8009070:	b29a      	uxth	r2, r3
 8009072:	687b      	ldr	r3, [r7, #4]
 8009074:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	69db      	ldr	r3, [r3, #28]
 800907e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 8009082:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009086:	f003 0307 	and.w	r3, r3, #7
 800908a:	2b00      	cmp	r3, #0
 800908c:	d053      	beq.n	8009136 <UART_RxISR_8BIT_FIFOEN+0x142>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800908e:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009092:	f003 0301 	and.w	r3, r3, #1
 8009096:	2b00      	cmp	r3, #0
 8009098:	d011      	beq.n	80090be <UART_RxISR_8BIT_FIFOEN+0xca>
 800909a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800909e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d00b      	beq.n	80090be <UART_RxISR_8BIT_FIFOEN+0xca>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80090a6:	687b      	ldr	r3, [r7, #4]
 80090a8:	681b      	ldr	r3, [r3, #0]
 80090aa:	2201      	movs	r2, #1
 80090ac:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090b4:	f043 0201 	orr.w	r2, r3, #1
 80090b8:	687b      	ldr	r3, [r7, #4]
 80090ba:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090be:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80090c2:	f003 0302 	and.w	r3, r3, #2
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d011      	beq.n	80090ee <UART_RxISR_8BIT_FIFOEN+0xfa>
 80090ca:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00b      	beq.n	80090ee <UART_RxISR_8BIT_FIFOEN+0xfa>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2202      	movs	r2, #2
 80090dc:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80090e4:	f043 0204 	orr.w	r2, r3, #4
 80090e8:	687b      	ldr	r3, [r7, #4]
 80090ea:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80090ee:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d011      	beq.n	800911e <UART_RxISR_8BIT_FIFOEN+0x12a>
 80090fa:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d00b      	beq.n	800911e <UART_RxISR_8BIT_FIFOEN+0x12a>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	2204      	movs	r2, #4
 800910c:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009114:	f043 0202 	orr.w	r2, r3, #2
 8009118:	687b      	ldr	r3, [r7, #4]
 800911a:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009124:	2b00      	cmp	r3, #0
 8009126:	d006      	beq.n	8009136 <UART_RxISR_8BIT_FIFOEN+0x142>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009128:	6878      	ldr	r0, [r7, #4]
 800912a:	f7fe ff69 	bl	8008000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2200      	movs	r2, #0
 8009132:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 800913c:	b29b      	uxth	r3, r3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d173      	bne.n	800922a <UART_RxISR_8BIT_FIFOEN+0x236>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	681b      	ldr	r3, [r3, #0]
 8009146:	65fb      	str	r3, [r7, #92]	; 0x5c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009148:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800914a:	e853 3f00 	ldrex	r3, [r3]
 800914e:	65bb      	str	r3, [r7, #88]	; 0x58
   return(result);
 8009150:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8009152:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009156:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	461a      	mov	r2, r3
 8009160:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8009164:	66bb      	str	r3, [r7, #104]	; 0x68
 8009166:	667a      	str	r2, [r7, #100]	; 0x64
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009168:	6e79      	ldr	r1, [r7, #100]	; 0x64
 800916a:	6eba      	ldr	r2, [r7, #104]	; 0x68
 800916c:	e841 2300 	strex	r3, r2, [r1]
 8009170:	663b      	str	r3, [r7, #96]	; 0x60
   return(result);
 8009172:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009174:	2b00      	cmp	r3, #0
 8009176:	d1e4      	bne.n	8009142 <UART_RxISR_8BIT_FIFOEN+0x14e>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	3308      	adds	r3, #8
 800917e:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009180:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009182:	e853 3f00 	ldrex	r3, [r3]
 8009186:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 8009188:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800918a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800918e:	f023 0301 	bic.w	r3, r3, #1
 8009192:	67fb      	str	r3, [r7, #124]	; 0x7c
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	3308      	adds	r3, #8
 800919a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800919c:	657a      	str	r2, [r7, #84]	; 0x54
 800919e:	653b      	str	r3, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091a0:	6d39      	ldr	r1, [r7, #80]	; 0x50
 80091a2:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80091a4:	e841 2300 	strex	r3, r2, [r1]
 80091a8:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 80091aa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80091ac:	2b00      	cmp	r3, #0
 80091ae:	d1e3      	bne.n	8009178 <UART_RxISR_8BIT_FIFOEN+0x184>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	2220      	movs	r2, #32
 80091b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80091b8:	687b      	ldr	r3, [r7, #4]
 80091ba:	2200      	movs	r2, #0
 80091bc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80091c2:	2b01      	cmp	r3, #1
 80091c4:	d12e      	bne.n	8009224 <UART_RxISR_8BIT_FIFOEN+0x230>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	2200      	movs	r2, #0
 80091ca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80091d4:	e853 3f00 	ldrex	r3, [r3]
 80091d8:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80091da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80091dc:	f023 0310 	bic.w	r3, r3, #16
 80091e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	461a      	mov	r2, r3
 80091e8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80091ea:	643b      	str	r3, [r7, #64]	; 0x40
 80091ec:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091ee:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80091f0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80091f2:	e841 2300 	strex	r3, r2, [r1]
 80091f6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80091f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091fa:	2b00      	cmp	r3, #0
 80091fc:	d1e6      	bne.n	80091cc <UART_RxISR_8BIT_FIFOEN+0x1d8>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	69db      	ldr	r3, [r3, #28]
 8009204:	f003 0310 	and.w	r3, r3, #16
 8009208:	2b10      	cmp	r3, #16
 800920a:	d103      	bne.n	8009214 <UART_RxISR_8BIT_FIFOEN+0x220>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800920c:	687b      	ldr	r3, [r7, #4]
 800920e:	681b      	ldr	r3, [r3, #0]
 8009210:	2210      	movs	r2, #16
 8009212:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800921a:	4619      	mov	r1, r3
 800921c:	6878      	ldr	r0, [r7, #4]
 800921e:	f7fe fef9 	bl	8008014 <HAL_UARTEx_RxEventCallback>
 8009222:	e002      	b.n	800922a <UART_RxISR_8BIT_FIFOEN+0x236>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009224:	6878      	ldr	r0, [r7, #4]
 8009226:	f7f9 f9ef 	bl	8002608 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800922a:	f8b7 3086 	ldrh.w	r3, [r7, #134]	; 0x86
 800922e:	2b00      	cmp	r3, #0
 8009230:	d006      	beq.n	8009240 <UART_RxISR_8BIT_FIFOEN+0x24c>
 8009232:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 8009236:	f003 0320 	and.w	r3, r3, #32
 800923a:	2b00      	cmp	r3, #0
 800923c:	f47f aefe 	bne.w	800903c <UART_RxISR_8BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009246:	f8a7 3076 	strh.w	r3, [r7, #118]	; 0x76
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800924a:	f8b7 3076 	ldrh.w	r3, [r7, #118]	; 0x76
 800924e:	2b00      	cmp	r3, #0
 8009250:	d045      	beq.n	80092de <UART_RxISR_8BIT_FIFOEN+0x2ea>
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009258:	f8b7 2076 	ldrh.w	r2, [r7, #118]	; 0x76
 800925c:	429a      	cmp	r2, r3
 800925e:	d23e      	bcs.n	80092de <UART_RxISR_8BIT_FIFOEN+0x2ea>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	681b      	ldr	r3, [r3, #0]
 8009264:	3308      	adds	r3, #8
 8009266:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009268:	6a3b      	ldr	r3, [r7, #32]
 800926a:	e853 3f00 	ldrex	r3, [r3]
 800926e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009270:	69fb      	ldr	r3, [r7, #28]
 8009272:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009276:	673b      	str	r3, [r7, #112]	; 0x70
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	3308      	adds	r3, #8
 800927e:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 8009280:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009282:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009284:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009286:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009288:	e841 2300 	strex	r3, r2, [r1]
 800928c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800928e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009290:	2b00      	cmp	r3, #0
 8009292:	d1e5      	bne.n	8009260 <UART_RxISR_8BIT_FIFOEN+0x26c>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_8BIT;
 8009294:	687b      	ldr	r3, [r7, #4]
 8009296:	4a14      	ldr	r2, [pc, #80]	; (80092e8 <UART_RxISR_8BIT_FIFOEN+0x2f4>)
 8009298:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800929a:	687b      	ldr	r3, [r7, #4]
 800929c:	681b      	ldr	r3, [r3, #0]
 800929e:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	e853 3f00 	ldrex	r3, [r3]
 80092a6:	60bb      	str	r3, [r7, #8]
   return(result);
 80092a8:	68bb      	ldr	r3, [r7, #8]
 80092aa:	f043 0320 	orr.w	r3, r3, #32
 80092ae:	66fb      	str	r3, [r7, #108]	; 0x6c
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	461a      	mov	r2, r3
 80092b6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80092b8:	61bb      	str	r3, [r7, #24]
 80092ba:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092bc:	6979      	ldr	r1, [r7, #20]
 80092be:	69ba      	ldr	r2, [r7, #24]
 80092c0:	e841 2300 	strex	r3, r2, [r1]
 80092c4:	613b      	str	r3, [r7, #16]
   return(result);
 80092c6:	693b      	ldr	r3, [r7, #16]
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	d1e6      	bne.n	800929a <UART_RxISR_8BIT_FIFOEN+0x2a6>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80092cc:	e007      	b.n	80092de <UART_RxISR_8BIT_FIFOEN+0x2ea>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	681b      	ldr	r3, [r3, #0]
 80092d2:	699a      	ldr	r2, [r3, #24]
 80092d4:	687b      	ldr	r3, [r7, #4]
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	f042 0208 	orr.w	r2, r2, #8
 80092dc:	619a      	str	r2, [r3, #24]
}
 80092de:	bf00      	nop
 80092e0:	3798      	adds	r7, #152	; 0x98
 80092e2:	46bd      	mov	sp, r7
 80092e4:	bd80      	pop	{r7, pc}
 80092e6:	bf00      	nop
 80092e8:	08008d33 	.word	0x08008d33

080092ec <UART_RxISR_16BIT_FIFOEN>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT_FIFOEN(UART_HandleTypeDef *huart)
{
 80092ec:	b580      	push	{r7, lr}
 80092ee:	b0a8      	sub	sp, #160	; 0xa0
 80092f0:	af00      	add	r7, sp, #0
 80092f2:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t  uhMask = huart->Mask;
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80092fa:	f8a7 309a 	strh.w	r3, [r7, #154]	; 0x9a
  uint16_t  uhdata;
  uint16_t  nb_rx_data;
  uint16_t  rxdatacount;
  uint32_t  isrflags = READ_REG(huart->Instance->ISR);
 80092fe:	687b      	ldr	r3, [r7, #4]
 8009300:	681b      	ldr	r3, [r3, #0]
 8009302:	69db      	ldr	r3, [r3, #28]
 8009304:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
  uint32_t  cr1its   = READ_REG(huart->Instance->CR1);
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	681b      	ldr	r3, [r3, #0]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  uint32_t  cr3its   = READ_REG(huart->Instance->CR3);
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	681b      	ldr	r3, [r3, #0]
 8009316:	689b      	ldr	r3, [r3, #8]
 8009318:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800931c:	687b      	ldr	r3, [r7, #4]
 800931e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009322:	2b22      	cmp	r3, #34	; 0x22
 8009324:	f040 8153 	bne.w	80095ce <UART_RxISR_16BIT_FIFOEN+0x2e2>
  {
    nb_rx_data = huart->NbRxDataToProcess;
 8009328:	687b      	ldr	r3, [r7, #4]
 800932a:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 800932e:	f8a7 308e 	strh.w	r3, [r7, #142]	; 0x8e
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 8009332:	e0fa      	b.n	800952a <UART_RxISR_16BIT_FIFOEN+0x23e>
    {
      uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	681b      	ldr	r3, [r3, #0]
 8009338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800933a:	f8a7 308c 	strh.w	r3, [r7, #140]	; 0x8c
      tmp = (uint16_t *) huart->pRxBuffPtr ;
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009342:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      *tmp = (uint16_t)(uhdata & uhMask);
 8009346:	f8b7 208c 	ldrh.w	r2, [r7, #140]	; 0x8c
 800934a:	f8b7 309a 	ldrh.w	r3, [r7, #154]	; 0x9a
 800934e:	4013      	ands	r3, r2
 8009350:	b29a      	uxth	r2, r3
 8009352:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009356:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800935c:	1c9a      	adds	r2, r3, #2
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	659a      	str	r2, [r3, #88]	; 0x58
      huart->RxXferCount--;
 8009362:	687b      	ldr	r3, [r7, #4]
 8009364:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009368:	b29b      	uxth	r3, r3
 800936a:	3b01      	subs	r3, #1
 800936c:	b29a      	uxth	r2, r3
 800936e:	687b      	ldr	r3, [r7, #4]
 8009370:	f8a3 205e 	strh.w	r2, [r3, #94]	; 0x5e
      isrflags = READ_REG(huart->Instance->ISR);
 8009374:	687b      	ldr	r3, [r7, #4]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	69db      	ldr	r3, [r3, #28]
 800937a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

      /* If some non blocking errors occurred */
      if ((isrflags & (USART_ISR_PE | USART_ISR_FE | USART_ISR_NE)) != 0U)
 800937e:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009382:	f003 0307 	and.w	r3, r3, #7
 8009386:	2b00      	cmp	r3, #0
 8009388:	d053      	beq.n	8009432 <UART_RxISR_16BIT_FIFOEN+0x146>
      {
        /* UART parity error interrupt occurred -------------------------------------*/
        if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800938a:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800938e:	f003 0301 	and.w	r3, r3, #1
 8009392:	2b00      	cmp	r3, #0
 8009394:	d011      	beq.n	80093ba <UART_RxISR_16BIT_FIFOEN+0xce>
 8009396:	f8d7 3094 	ldr.w	r3, [r7, #148]	; 0x94
 800939a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800939e:	2b00      	cmp	r3, #0
 80093a0:	d00b      	beq.n	80093ba <UART_RxISR_16BIT_FIFOEN+0xce>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 80093a2:	687b      	ldr	r3, [r7, #4]
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	2201      	movs	r2, #1
 80093a8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_PE;
 80093aa:	687b      	ldr	r3, [r7, #4]
 80093ac:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093b0:	f043 0201 	orr.w	r2, r3, #1
 80093b4:	687b      	ldr	r3, [r7, #4]
 80093b6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART frame error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ba:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093be:	f003 0302 	and.w	r3, r3, #2
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d011      	beq.n	80093ea <UART_RxISR_16BIT_FIFOEN+0xfe>
 80093c6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093ca:	f003 0301 	and.w	r3, r3, #1
 80093ce:	2b00      	cmp	r3, #0
 80093d0:	d00b      	beq.n	80093ea <UART_RxISR_16BIT_FIFOEN+0xfe>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	681b      	ldr	r3, [r3, #0]
 80093d6:	2202      	movs	r2, #2
 80093d8:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_FE;
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80093e0:	f043 0204 	orr.w	r2, r3, #4
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* UART noise error interrupt occurred --------------------------------------*/
        if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 80093ea:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80093ee:	f003 0304 	and.w	r3, r3, #4
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d011      	beq.n	800941a <UART_RxISR_16BIT_FIFOEN+0x12e>
 80093f6:	f8d7 3090 	ldr.w	r3, [r7, #144]	; 0x90
 80093fa:	f003 0301 	and.w	r3, r3, #1
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d00b      	beq.n	800941a <UART_RxISR_16BIT_FIFOEN+0x12e>
        {
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	681b      	ldr	r3, [r3, #0]
 8009406:	2204      	movs	r2, #4
 8009408:	621a      	str	r2, [r3, #32]

          huart->ErrorCode |= HAL_UART_ERROR_NE;
 800940a:	687b      	ldr	r3, [r7, #4]
 800940c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009410:	f043 0202 	orr.w	r2, r3, #2
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }

        /* Call UART Error Call back function if need be ----------------------------*/
        if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009420:	2b00      	cmp	r3, #0
 8009422:	d006      	beq.n	8009432 <UART_RxISR_16BIT_FIFOEN+0x146>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009424:	6878      	ldr	r0, [r7, #4]
 8009426:	f7fe fdeb 	bl	8008000 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
          huart->ErrorCode = HAL_UART_ERROR_NONE;
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	2200      	movs	r2, #0
 800942e:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
        }
      }

      if (huart->RxXferCount == 0U)
 8009432:	687b      	ldr	r3, [r7, #4]
 8009434:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009438:	b29b      	uxth	r3, r3
 800943a:	2b00      	cmp	r3, #0
 800943c:	d175      	bne.n	800952a <UART_RxISR_16BIT_FIFOEN+0x23e>
      {
        /* Disable the UART Parity Error Interrupt and RXFT interrupt*/
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800943e:	687b      	ldr	r3, [r7, #4]
 8009440:	681b      	ldr	r3, [r3, #0]
 8009442:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800944c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800944e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009452:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	461a      	mov	r2, r3
 800945c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009460:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009462:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8009466:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8009468:	e841 2300 	strex	r3, r2, [r1]
 800946c:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800946e:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e4      	bne.n	800943e <UART_RxISR_16BIT_FIFOEN+0x152>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error)
           and RX FIFO Threshold interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	681b      	ldr	r3, [r3, #0]
 8009478:	3308      	adds	r3, #8
 800947a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800947c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800947e:	e853 3f00 	ldrex	r3, [r3]
 8009482:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009484:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009486:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800948a:	f023 0301 	bic.w	r3, r3, #1
 800948e:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	3308      	adds	r3, #8
 8009498:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800949c:	65ba      	str	r2, [r7, #88]	; 0x58
 800949e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80094a2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80094a4:	e841 2300 	strex	r3, r2, [r1]
 80094a8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80094aa:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80094ac:	2b00      	cmp	r3, #0
 80094ae:	d1e1      	bne.n	8009474 <UART_RxISR_16BIT_FIFOEN+0x188>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	2220      	movs	r2, #32
 80094b4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 80094b8:	687b      	ldr	r3, [r7, #4]
 80094ba:	2200      	movs	r2, #0
 80094bc:	671a      	str	r2, [r3, #112]	; 0x70

        /* Check current reception Mode :
           If Reception till IDLE event has been selected : */
        if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80094c2:	2b01      	cmp	r3, #1
 80094c4:	d12e      	bne.n	8009524 <UART_RxISR_16BIT_FIFOEN+0x238>
        {
          /* Set reception type to Standard */
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094c6:	687b      	ldr	r3, [r7, #4]
 80094c8:	2200      	movs	r2, #0
 80094ca:	66da      	str	r2, [r3, #108]	; 0x6c

          /* Disable IDLE interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094d4:	e853 3f00 	ldrex	r3, [r3]
 80094d8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80094da:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80094dc:	f023 0310 	bic.w	r3, r3, #16
 80094e0:	67fb      	str	r3, [r7, #124]	; 0x7c
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	681b      	ldr	r3, [r3, #0]
 80094e6:	461a      	mov	r2, r3
 80094e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80094ea:	647b      	str	r3, [r7, #68]	; 0x44
 80094ec:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ee:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80094f0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80094f2:	e841 2300 	strex	r3, r2, [r1]
 80094f6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80094f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80094fa:	2b00      	cmp	r3, #0
 80094fc:	d1e6      	bne.n	80094cc <UART_RxISR_16BIT_FIFOEN+0x1e0>

          if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 80094fe:	687b      	ldr	r3, [r7, #4]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	69db      	ldr	r3, [r3, #28]
 8009504:	f003 0310 	and.w	r3, r3, #16
 8009508:	2b10      	cmp	r3, #16
 800950a:	d103      	bne.n	8009514 <UART_RxISR_16BIT_FIFOEN+0x228>
          {
            /* Clear IDLE Flag */
            __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800950c:	687b      	ldr	r3, [r7, #4]
 800950e:	681b      	ldr	r3, [r3, #0]
 8009510:	2210      	movs	r2, #16
 8009512:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx Event callback*/
          huart->RxEventCallback(huart, huart->RxXferSize);
#else
          /*Call legacy weak Rx Event callback*/
          HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800951a:	4619      	mov	r1, r3
 800951c:	6878      	ldr	r0, [r7, #4]
 800951e:	f7fe fd79 	bl	8008014 <HAL_UARTEx_RxEventCallback>
 8009522:	e002      	b.n	800952a <UART_RxISR_16BIT_FIFOEN+0x23e>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered Rx complete callback*/
          huart->RxCpltCallback(huart);
#else
          /*Call legacy weak Rx complete callback*/
          HAL_UART_RxCpltCallback(huart);
 8009524:	6878      	ldr	r0, [r7, #4]
 8009526:	f7f9 f86f 	bl	8002608 <HAL_UART_RxCpltCallback>
    while ((nb_rx_data > 0U) && ((isrflags & USART_ISR_RXNE_RXFNE) != 0U))
 800952a:	f8b7 308e 	ldrh.w	r3, [r7, #142]	; 0x8e
 800952e:	2b00      	cmp	r3, #0
 8009530:	d006      	beq.n	8009540 <UART_RxISR_16BIT_FIFOEN+0x254>
 8009532:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009536:	f003 0320 	and.w	r3, r3, #32
 800953a:	2b00      	cmp	r3, #0
 800953c:	f47f aefa 	bne.w	8009334 <UART_RxISR_16BIT_FIFOEN+0x48>

    /* When remaining number of bytes to receive is less than the RX FIFO
    threshold, next incoming frames are processed as if FIFO mode was
    disabled (i.e. one interrupt per received frame).
    */
    rxdatacount = huart->RxXferCount;
 8009540:	687b      	ldr	r3, [r7, #4]
 8009542:	f8b3 305e 	ldrh.w	r3, [r3, #94]	; 0x5e
 8009546:	f8a7 307a 	strh.w	r3, [r7, #122]	; 0x7a
    if ((rxdatacount != 0U) && (rxdatacount < huart->NbRxDataToProcess))
 800954a:	f8b7 307a 	ldrh.w	r3, [r7, #122]	; 0x7a
 800954e:	2b00      	cmp	r3, #0
 8009550:	d045      	beq.n	80095de <UART_RxISR_16BIT_FIFOEN+0x2f2>
 8009552:	687b      	ldr	r3, [r7, #4]
 8009554:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8009558:	f8b7 207a 	ldrh.w	r2, [r7, #122]	; 0x7a
 800955c:	429a      	cmp	r2, r3
 800955e:	d23e      	bcs.n	80095de <UART_RxISR_16BIT_FIFOEN+0x2f2>
    {
      /* Disable the UART RXFT interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_RXFTIE);
 8009560:	687b      	ldr	r3, [r7, #4]
 8009562:	681b      	ldr	r3, [r3, #0]
 8009564:	3308      	adds	r3, #8
 8009566:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009568:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800956a:	e853 3f00 	ldrex	r3, [r3]
 800956e:	623b      	str	r3, [r7, #32]
   return(result);
 8009570:	6a3b      	ldr	r3, [r7, #32]
 8009572:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009576:	677b      	str	r3, [r7, #116]	; 0x74
 8009578:	687b      	ldr	r3, [r7, #4]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3308      	adds	r3, #8
 800957e:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 8009580:	633a      	str	r2, [r7, #48]	; 0x30
 8009582:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009584:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009586:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009588:	e841 2300 	strex	r3, r2, [r1]
 800958c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800958e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009590:	2b00      	cmp	r3, #0
 8009592:	d1e5      	bne.n	8009560 <UART_RxISR_16BIT_FIFOEN+0x274>

      /* Update the RxISR function pointer */
      huart->RxISR = UART_RxISR_16BIT;
 8009594:	687b      	ldr	r3, [r7, #4]
 8009596:	4a14      	ldr	r2, [pc, #80]	; (80095e8 <UART_RxISR_16BIT_FIFOEN+0x2fc>)
 8009598:	671a      	str	r2, [r3, #112]	; 0x70

      /* Enable the UART Data Register Not Empty interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE_RXFNEIE);
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	681b      	ldr	r3, [r3, #0]
 800959e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095a0:	693b      	ldr	r3, [r7, #16]
 80095a2:	e853 3f00 	ldrex	r3, [r3]
 80095a6:	60fb      	str	r3, [r7, #12]
   return(result);
 80095a8:	68fb      	ldr	r3, [r7, #12]
 80095aa:	f043 0320 	orr.w	r3, r3, #32
 80095ae:	673b      	str	r3, [r7, #112]	; 0x70
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	681b      	ldr	r3, [r3, #0]
 80095b4:	461a      	mov	r2, r3
 80095b6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80095b8:	61fb      	str	r3, [r7, #28]
 80095ba:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095bc:	69b9      	ldr	r1, [r7, #24]
 80095be:	69fa      	ldr	r2, [r7, #28]
 80095c0:	e841 2300 	strex	r3, r2, [r1]
 80095c4:	617b      	str	r3, [r7, #20]
   return(result);
 80095c6:	697b      	ldr	r3, [r7, #20]
 80095c8:	2b00      	cmp	r3, #0
 80095ca:	d1e6      	bne.n	800959a <UART_RxISR_16BIT_FIFOEN+0x2ae>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80095cc:	e007      	b.n	80095de <UART_RxISR_16BIT_FIFOEN+0x2f2>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80095ce:	687b      	ldr	r3, [r7, #4]
 80095d0:	681b      	ldr	r3, [r3, #0]
 80095d2:	699a      	ldr	r2, [r3, #24]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	681b      	ldr	r3, [r3, #0]
 80095d8:	f042 0208 	orr.w	r2, r2, #8
 80095dc:	619a      	str	r2, [r3, #24]
}
 80095de:	bf00      	nop
 80095e0:	37a0      	adds	r7, #160	; 0xa0
 80095e2:	46bd      	mov	sp, r7
 80095e4:	bd80      	pop	{r7, pc}
 80095e6:	bf00      	nop
 80095e8:	08008e93 	.word	0x08008e93

080095ec <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80095ec:	b480      	push	{r7}
 80095ee:	b083      	sub	sp, #12
 80095f0:	af00      	add	r7, sp, #0
 80095f2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80095f4:	bf00      	nop
 80095f6:	370c      	adds	r7, #12
 80095f8:	46bd      	mov	sp, r7
 80095fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095fe:	4770      	bx	lr

08009600 <HAL_UARTEx_RxFifoFullCallback>:
  * @brief  UART RX Fifo full callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_RxFifoFullCallback(UART_HandleTypeDef *huart)
{
 8009600:	b480      	push	{r7}
 8009602:	b083      	sub	sp, #12
 8009604:	af00      	add	r7, sp, #0
 8009606:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxFifoFullCallback can be implemented in the user file.
   */
}
 8009608:	bf00      	nop
 800960a:	370c      	adds	r7, #12
 800960c:	46bd      	mov	sp, r7
 800960e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009612:	4770      	bx	lr

08009614 <HAL_UARTEx_TxFifoEmptyCallback>:
  * @brief  UART TX Fifo empty callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_TxFifoEmptyCallback(UART_HandleTypeDef *huart)
{
 8009614:	b480      	push	{r7}
 8009616:	b083      	sub	sp, #12
 8009618:	af00      	add	r7, sp, #0
 800961a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_TxFifoEmptyCallback can be implemented in the user file.
   */
}
 800961c:	bf00      	nop
 800961e:	370c      	adds	r7, #12
 8009620:	46bd      	mov	sp, r7
 8009622:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009626:	4770      	bx	lr

08009628 <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8009628:	b480      	push	{r7}
 800962a:	b085      	sub	sp, #20
 800962c:	af00      	add	r7, sp, #0
 800962e:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009636:	2b01      	cmp	r3, #1
 8009638:	d101      	bne.n	800963e <HAL_UARTEx_DisableFifoMode+0x16>
 800963a:	2302      	movs	r3, #2
 800963c:	e027      	b.n	800968e <HAL_UARTEx_DisableFifoMode+0x66>
 800963e:	687b      	ldr	r3, [r7, #4]
 8009640:	2201      	movs	r2, #1
 8009642:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	2224      	movs	r2, #36	; 0x24
 800964a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800964e:	687b      	ldr	r3, [r7, #4]
 8009650:	681b      	ldr	r3, [r3, #0]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	681b      	ldr	r3, [r3, #0]
 800965a:	681a      	ldr	r2, [r3, #0]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	681b      	ldr	r3, [r3, #0]
 8009660:	f022 0201 	bic.w	r2, r2, #1
 8009664:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8009666:	68fb      	ldr	r3, [r7, #12]
 8009668:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 800966c:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 800966e:	687b      	ldr	r3, [r7, #4]
 8009670:	2200      	movs	r2, #0
 8009672:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009674:	687b      	ldr	r3, [r7, #4]
 8009676:	681b      	ldr	r3, [r3, #0]
 8009678:	68fa      	ldr	r2, [r7, #12]
 800967a:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	2220      	movs	r2, #32
 8009680:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	2200      	movs	r2, #0
 8009688:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800968c:	2300      	movs	r3, #0
}
 800968e:	4618      	mov	r0, r3
 8009690:	3714      	adds	r7, #20
 8009692:	46bd      	mov	sp, r7
 8009694:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009698:	4770      	bx	lr

0800969a <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 800969a:	b580      	push	{r7, lr}
 800969c:	b084      	sub	sp, #16
 800969e:	af00      	add	r7, sp, #0
 80096a0:	6078      	str	r0, [r7, #4]
 80096a2:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 80096aa:	2b01      	cmp	r3, #1
 80096ac:	d101      	bne.n	80096b2 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 80096ae:	2302      	movs	r3, #2
 80096b0:	e02d      	b.n	800970e <HAL_UARTEx_SetTxFifoThreshold+0x74>
 80096b2:	687b      	ldr	r3, [r7, #4]
 80096b4:	2201      	movs	r2, #1
 80096b6:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 80096ba:	687b      	ldr	r3, [r7, #4]
 80096bc:	2224      	movs	r2, #36	; 0x24
 80096be:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 80096c2:	687b      	ldr	r3, [r7, #4]
 80096c4:	681b      	ldr	r3, [r3, #0]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 80096ca:	687b      	ldr	r3, [r7, #4]
 80096cc:	681b      	ldr	r3, [r3, #0]
 80096ce:	681a      	ldr	r2, [r3, #0]
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	681b      	ldr	r3, [r3, #0]
 80096d4:	f022 0201 	bic.w	r2, r2, #1
 80096d8:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 80096da:	687b      	ldr	r3, [r7, #4]
 80096dc:	681b      	ldr	r3, [r3, #0]
 80096de:	689b      	ldr	r3, [r3, #8]
 80096e0:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	681b      	ldr	r3, [r3, #0]
 80096e8:	683a      	ldr	r2, [r7, #0]
 80096ea:	430a      	orrs	r2, r1
 80096ec:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 80096ee:	6878      	ldr	r0, [r7, #4]
 80096f0:	f000 f850 	bl	8009794 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	68fa      	ldr	r2, [r7, #12]
 80096fa:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 80096fc:	687b      	ldr	r3, [r7, #4]
 80096fe:	2220      	movs	r2, #32
 8009700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009704:	687b      	ldr	r3, [r7, #4]
 8009706:	2200      	movs	r2, #0
 8009708:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 800970c:	2300      	movs	r3, #0
}
 800970e:	4618      	mov	r0, r3
 8009710:	3710      	adds	r7, #16
 8009712:	46bd      	mov	sp, r7
 8009714:	bd80      	pop	{r7, pc}

08009716 <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8009716:	b580      	push	{r7, lr}
 8009718:	b084      	sub	sp, #16
 800971a:	af00      	add	r7, sp, #0
 800971c:	6078      	str	r0, [r7, #4]
 800971e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8009720:	687b      	ldr	r3, [r7, #4]
 8009722:	f893 3080 	ldrb.w	r3, [r3, #128]	; 0x80
 8009726:	2b01      	cmp	r3, #1
 8009728:	d101      	bne.n	800972e <HAL_UARTEx_SetRxFifoThreshold+0x18>
 800972a:	2302      	movs	r3, #2
 800972c:	e02d      	b.n	800978a <HAL_UARTEx_SetRxFifoThreshold+0x74>
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2201      	movs	r2, #1
 8009732:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  huart->gState = HAL_UART_STATE_BUSY;
 8009736:	687b      	ldr	r3, [r7, #4]
 8009738:	2224      	movs	r2, #36	; 0x24
 800973a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 800973e:	687b      	ldr	r3, [r7, #4]
 8009740:	681b      	ldr	r3, [r3, #0]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8009746:	687b      	ldr	r3, [r7, #4]
 8009748:	681b      	ldr	r3, [r3, #0]
 800974a:	681a      	ldr	r2, [r3, #0]
 800974c:	687b      	ldr	r3, [r7, #4]
 800974e:	681b      	ldr	r3, [r3, #0]
 8009750:	f022 0201 	bic.w	r2, r2, #1
 8009754:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8009756:	687b      	ldr	r3, [r7, #4]
 8009758:	681b      	ldr	r3, [r3, #0]
 800975a:	689b      	ldr	r3, [r3, #8]
 800975c:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8009760:	687b      	ldr	r3, [r7, #4]
 8009762:	681b      	ldr	r3, [r3, #0]
 8009764:	683a      	ldr	r2, [r7, #0]
 8009766:	430a      	orrs	r2, r1
 8009768:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 800976a:	6878      	ldr	r0, [r7, #4]
 800976c:	f000 f812 	bl	8009794 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	681b      	ldr	r3, [r3, #0]
 8009774:	68fa      	ldr	r2, [r7, #12]
 8009776:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	2220      	movs	r2, #32
 800977c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8009780:	687b      	ldr	r3, [r7, #4]
 8009782:	2200      	movs	r2, #0
 8009784:	f883 2080 	strb.w	r2, [r3, #128]	; 0x80

  return HAL_OK;
 8009788:	2300      	movs	r3, #0
}
 800978a:	4618      	mov	r0, r3
 800978c:	3710      	adds	r7, #16
 800978e:	46bd      	mov	sp, r7
 8009790:	bd80      	pop	{r7, pc}
	...

08009794 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8009794:	b480      	push	{r7}
 8009796:	b085      	sub	sp, #20
 8009798:	af00      	add	r7, sp, #0
 800979a:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 800979c:	687b      	ldr	r3, [r7, #4]
 800979e:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80097a0:	2b00      	cmp	r3, #0
 80097a2:	d108      	bne.n	80097b6 <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 80097a4:	687b      	ldr	r3, [r7, #4]
 80097a6:	2201      	movs	r2, #1
 80097a8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	2201      	movs	r2, #1
 80097b0:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 80097b4:	e031      	b.n	800981a <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 80097b6:	2308      	movs	r3, #8
 80097b8:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 80097ba:	2308      	movs	r3, #8
 80097bc:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	681b      	ldr	r3, [r3, #0]
 80097c2:	689b      	ldr	r3, [r3, #8]
 80097c4:	0e5b      	lsrs	r3, r3, #25
 80097c6:	b2db      	uxtb	r3, r3
 80097c8:	f003 0307 	and.w	r3, r3, #7
 80097cc:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 80097ce:	687b      	ldr	r3, [r7, #4]
 80097d0:	681b      	ldr	r3, [r3, #0]
 80097d2:	689b      	ldr	r3, [r3, #8]
 80097d4:	0f5b      	lsrs	r3, r3, #29
 80097d6:	b2db      	uxtb	r3, r3
 80097d8:	f003 0307 	and.w	r3, r3, #7
 80097dc:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097de:	7bbb      	ldrb	r3, [r7, #14]
 80097e0:	7b3a      	ldrb	r2, [r7, #12]
 80097e2:	4911      	ldr	r1, [pc, #68]	; (8009828 <UARTEx_SetNbDataToProcess+0x94>)
 80097e4:	5c8a      	ldrb	r2, [r1, r2]
 80097e6:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 80097ea:	7b3a      	ldrb	r2, [r7, #12]
 80097ec:	490f      	ldr	r1, [pc, #60]	; (800982c <UARTEx_SetNbDataToProcess+0x98>)
 80097ee:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 80097f0:	fb93 f3f2 	sdiv	r3, r3, r2
 80097f4:	b29a      	uxth	r2, r3
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 80097fc:	7bfb      	ldrb	r3, [r7, #15]
 80097fe:	7b7a      	ldrb	r2, [r7, #13]
 8009800:	4909      	ldr	r1, [pc, #36]	; (8009828 <UARTEx_SetNbDataToProcess+0x94>)
 8009802:	5c8a      	ldrb	r2, [r1, r2]
 8009804:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8009808:	7b7a      	ldrb	r2, [r7, #13]
 800980a:	4908      	ldr	r1, [pc, #32]	; (800982c <UARTEx_SetNbDataToProcess+0x98>)
 800980c:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 800980e:	fb93 f3f2 	sdiv	r3, r3, r2
 8009812:	b29a      	uxth	r2, r3
 8009814:	687b      	ldr	r3, [r7, #4]
 8009816:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 800981a:	bf00      	nop
 800981c:	3714      	adds	r7, #20
 800981e:	46bd      	mov	sp, r7
 8009820:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009824:	4770      	bx	lr
 8009826:	bf00      	nop
 8009828:	0800c7f0 	.word	0x0800c7f0
 800982c:	0800c7f8 	.word	0x0800c7f8

08009830 <atoi>:
 8009830:	220a      	movs	r2, #10
 8009832:	2100      	movs	r1, #0
 8009834:	f000 b882 	b.w	800993c <strtol>

08009838 <_strtol_l.constprop.0>:
 8009838:	2b01      	cmp	r3, #1
 800983a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800983e:	d001      	beq.n	8009844 <_strtol_l.constprop.0+0xc>
 8009840:	2b24      	cmp	r3, #36	; 0x24
 8009842:	d906      	bls.n	8009852 <_strtol_l.constprop.0+0x1a>
 8009844:	f000 fec0 	bl	800a5c8 <__errno>
 8009848:	2316      	movs	r3, #22
 800984a:	6003      	str	r3, [r0, #0]
 800984c:	2000      	movs	r0, #0
 800984e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009852:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009938 <_strtol_l.constprop.0+0x100>
 8009856:	460d      	mov	r5, r1
 8009858:	462e      	mov	r6, r5
 800985a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800985e:	f81c 7004 	ldrb.w	r7, [ip, r4]
 8009862:	f017 0708 	ands.w	r7, r7, #8
 8009866:	d1f7      	bne.n	8009858 <_strtol_l.constprop.0+0x20>
 8009868:	2c2d      	cmp	r4, #45	; 0x2d
 800986a:	d132      	bne.n	80098d2 <_strtol_l.constprop.0+0x9a>
 800986c:	782c      	ldrb	r4, [r5, #0]
 800986e:	2701      	movs	r7, #1
 8009870:	1cb5      	adds	r5, r6, #2
 8009872:	2b00      	cmp	r3, #0
 8009874:	d05b      	beq.n	800992e <_strtol_l.constprop.0+0xf6>
 8009876:	2b10      	cmp	r3, #16
 8009878:	d109      	bne.n	800988e <_strtol_l.constprop.0+0x56>
 800987a:	2c30      	cmp	r4, #48	; 0x30
 800987c:	d107      	bne.n	800988e <_strtol_l.constprop.0+0x56>
 800987e:	782c      	ldrb	r4, [r5, #0]
 8009880:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009884:	2c58      	cmp	r4, #88	; 0x58
 8009886:	d14d      	bne.n	8009924 <_strtol_l.constprop.0+0xec>
 8009888:	786c      	ldrb	r4, [r5, #1]
 800988a:	2310      	movs	r3, #16
 800988c:	3502      	adds	r5, #2
 800988e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009892:	f108 38ff 	add.w	r8, r8, #4294967295
 8009896:	f04f 0e00 	mov.w	lr, #0
 800989a:	fbb8 f9f3 	udiv	r9, r8, r3
 800989e:	4676      	mov	r6, lr
 80098a0:	fb03 8a19 	mls	sl, r3, r9, r8
 80098a4:	f1a4 0c30 	sub.w	ip, r4, #48	; 0x30
 80098a8:	f1bc 0f09 	cmp.w	ip, #9
 80098ac:	d816      	bhi.n	80098dc <_strtol_l.constprop.0+0xa4>
 80098ae:	4664      	mov	r4, ip
 80098b0:	42a3      	cmp	r3, r4
 80098b2:	dd24      	ble.n	80098fe <_strtol_l.constprop.0+0xc6>
 80098b4:	f1be 3fff 	cmp.w	lr, #4294967295
 80098b8:	d008      	beq.n	80098cc <_strtol_l.constprop.0+0x94>
 80098ba:	45b1      	cmp	r9, r6
 80098bc:	d31c      	bcc.n	80098f8 <_strtol_l.constprop.0+0xc0>
 80098be:	d101      	bne.n	80098c4 <_strtol_l.constprop.0+0x8c>
 80098c0:	45a2      	cmp	sl, r4
 80098c2:	db19      	blt.n	80098f8 <_strtol_l.constprop.0+0xc0>
 80098c4:	fb06 4603 	mla	r6, r6, r3, r4
 80098c8:	f04f 0e01 	mov.w	lr, #1
 80098cc:	f815 4b01 	ldrb.w	r4, [r5], #1
 80098d0:	e7e8      	b.n	80098a4 <_strtol_l.constprop.0+0x6c>
 80098d2:	2c2b      	cmp	r4, #43	; 0x2b
 80098d4:	bf04      	itt	eq
 80098d6:	782c      	ldrbeq	r4, [r5, #0]
 80098d8:	1cb5      	addeq	r5, r6, #2
 80098da:	e7ca      	b.n	8009872 <_strtol_l.constprop.0+0x3a>
 80098dc:	f1a4 0c41 	sub.w	ip, r4, #65	; 0x41
 80098e0:	f1bc 0f19 	cmp.w	ip, #25
 80098e4:	d801      	bhi.n	80098ea <_strtol_l.constprop.0+0xb2>
 80098e6:	3c37      	subs	r4, #55	; 0x37
 80098e8:	e7e2      	b.n	80098b0 <_strtol_l.constprop.0+0x78>
 80098ea:	f1a4 0c61 	sub.w	ip, r4, #97	; 0x61
 80098ee:	f1bc 0f19 	cmp.w	ip, #25
 80098f2:	d804      	bhi.n	80098fe <_strtol_l.constprop.0+0xc6>
 80098f4:	3c57      	subs	r4, #87	; 0x57
 80098f6:	e7db      	b.n	80098b0 <_strtol_l.constprop.0+0x78>
 80098f8:	f04f 3eff 	mov.w	lr, #4294967295
 80098fc:	e7e6      	b.n	80098cc <_strtol_l.constprop.0+0x94>
 80098fe:	f1be 3fff 	cmp.w	lr, #4294967295
 8009902:	d105      	bne.n	8009910 <_strtol_l.constprop.0+0xd8>
 8009904:	2322      	movs	r3, #34	; 0x22
 8009906:	6003      	str	r3, [r0, #0]
 8009908:	4646      	mov	r6, r8
 800990a:	b942      	cbnz	r2, 800991e <_strtol_l.constprop.0+0xe6>
 800990c:	4630      	mov	r0, r6
 800990e:	e79e      	b.n	800984e <_strtol_l.constprop.0+0x16>
 8009910:	b107      	cbz	r7, 8009914 <_strtol_l.constprop.0+0xdc>
 8009912:	4276      	negs	r6, r6
 8009914:	2a00      	cmp	r2, #0
 8009916:	d0f9      	beq.n	800990c <_strtol_l.constprop.0+0xd4>
 8009918:	f1be 0f00 	cmp.w	lr, #0
 800991c:	d000      	beq.n	8009920 <_strtol_l.constprop.0+0xe8>
 800991e:	1e69      	subs	r1, r5, #1
 8009920:	6011      	str	r1, [r2, #0]
 8009922:	e7f3      	b.n	800990c <_strtol_l.constprop.0+0xd4>
 8009924:	2430      	movs	r4, #48	; 0x30
 8009926:	2b00      	cmp	r3, #0
 8009928:	d1b1      	bne.n	800988e <_strtol_l.constprop.0+0x56>
 800992a:	2308      	movs	r3, #8
 800992c:	e7af      	b.n	800988e <_strtol_l.constprop.0+0x56>
 800992e:	2c30      	cmp	r4, #48	; 0x30
 8009930:	d0a5      	beq.n	800987e <_strtol_l.constprop.0+0x46>
 8009932:	230a      	movs	r3, #10
 8009934:	e7ab      	b.n	800988e <_strtol_l.constprop.0+0x56>
 8009936:	bf00      	nop
 8009938:	0800c801 	.word	0x0800c801

0800993c <strtol>:
 800993c:	4613      	mov	r3, r2
 800993e:	460a      	mov	r2, r1
 8009940:	4601      	mov	r1, r0
 8009942:	4802      	ldr	r0, [pc, #8]	; (800994c <strtol+0x10>)
 8009944:	6800      	ldr	r0, [r0, #0]
 8009946:	f7ff bf77 	b.w	8009838 <_strtol_l.constprop.0>
 800994a:	bf00      	nop
 800994c:	20000128 	.word	0x20000128

08009950 <__cvt>:
 8009950:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009954:	ec55 4b10 	vmov	r4, r5, d0
 8009958:	2d00      	cmp	r5, #0
 800995a:	460e      	mov	r6, r1
 800995c:	4619      	mov	r1, r3
 800995e:	462b      	mov	r3, r5
 8009960:	bfbb      	ittet	lt
 8009962:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009966:	461d      	movlt	r5, r3
 8009968:	2300      	movge	r3, #0
 800996a:	232d      	movlt	r3, #45	; 0x2d
 800996c:	700b      	strb	r3, [r1, #0]
 800996e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009970:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009974:	4691      	mov	r9, r2
 8009976:	f023 0820 	bic.w	r8, r3, #32
 800997a:	bfbc      	itt	lt
 800997c:	4622      	movlt	r2, r4
 800997e:	4614      	movlt	r4, r2
 8009980:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009984:	d005      	beq.n	8009992 <__cvt+0x42>
 8009986:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800998a:	d100      	bne.n	800998e <__cvt+0x3e>
 800998c:	3601      	adds	r6, #1
 800998e:	2102      	movs	r1, #2
 8009990:	e000      	b.n	8009994 <__cvt+0x44>
 8009992:	2103      	movs	r1, #3
 8009994:	ab03      	add	r3, sp, #12
 8009996:	9301      	str	r3, [sp, #4]
 8009998:	ab02      	add	r3, sp, #8
 800999a:	9300      	str	r3, [sp, #0]
 800999c:	ec45 4b10 	vmov	d0, r4, r5
 80099a0:	4653      	mov	r3, sl
 80099a2:	4632      	mov	r2, r6
 80099a4:	f000 fee4 	bl	800a770 <_dtoa_r>
 80099a8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80099ac:	4607      	mov	r7, r0
 80099ae:	d102      	bne.n	80099b6 <__cvt+0x66>
 80099b0:	f019 0f01 	tst.w	r9, #1
 80099b4:	d022      	beq.n	80099fc <__cvt+0xac>
 80099b6:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80099ba:	eb07 0906 	add.w	r9, r7, r6
 80099be:	d110      	bne.n	80099e2 <__cvt+0x92>
 80099c0:	783b      	ldrb	r3, [r7, #0]
 80099c2:	2b30      	cmp	r3, #48	; 0x30
 80099c4:	d10a      	bne.n	80099dc <__cvt+0x8c>
 80099c6:	2200      	movs	r2, #0
 80099c8:	2300      	movs	r3, #0
 80099ca:	4620      	mov	r0, r4
 80099cc:	4629      	mov	r1, r5
 80099ce:	f7f7 f8b3 	bl	8000b38 <__aeabi_dcmpeq>
 80099d2:	b918      	cbnz	r0, 80099dc <__cvt+0x8c>
 80099d4:	f1c6 0601 	rsb	r6, r6, #1
 80099d8:	f8ca 6000 	str.w	r6, [sl]
 80099dc:	f8da 3000 	ldr.w	r3, [sl]
 80099e0:	4499      	add	r9, r3
 80099e2:	2200      	movs	r2, #0
 80099e4:	2300      	movs	r3, #0
 80099e6:	4620      	mov	r0, r4
 80099e8:	4629      	mov	r1, r5
 80099ea:	f7f7 f8a5 	bl	8000b38 <__aeabi_dcmpeq>
 80099ee:	b108      	cbz	r0, 80099f4 <__cvt+0xa4>
 80099f0:	f8cd 900c 	str.w	r9, [sp, #12]
 80099f4:	2230      	movs	r2, #48	; 0x30
 80099f6:	9b03      	ldr	r3, [sp, #12]
 80099f8:	454b      	cmp	r3, r9
 80099fa:	d307      	bcc.n	8009a0c <__cvt+0xbc>
 80099fc:	9b03      	ldr	r3, [sp, #12]
 80099fe:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a00:	1bdb      	subs	r3, r3, r7
 8009a02:	4638      	mov	r0, r7
 8009a04:	6013      	str	r3, [r2, #0]
 8009a06:	b004      	add	sp, #16
 8009a08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009a0c:	1c59      	adds	r1, r3, #1
 8009a0e:	9103      	str	r1, [sp, #12]
 8009a10:	701a      	strb	r2, [r3, #0]
 8009a12:	e7f0      	b.n	80099f6 <__cvt+0xa6>

08009a14 <__exponent>:
 8009a14:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009a16:	4603      	mov	r3, r0
 8009a18:	2900      	cmp	r1, #0
 8009a1a:	bfb8      	it	lt
 8009a1c:	4249      	neglt	r1, r1
 8009a1e:	f803 2b02 	strb.w	r2, [r3], #2
 8009a22:	bfb4      	ite	lt
 8009a24:	222d      	movlt	r2, #45	; 0x2d
 8009a26:	222b      	movge	r2, #43	; 0x2b
 8009a28:	2909      	cmp	r1, #9
 8009a2a:	7042      	strb	r2, [r0, #1]
 8009a2c:	dd2a      	ble.n	8009a84 <__exponent+0x70>
 8009a2e:	f10d 0207 	add.w	r2, sp, #7
 8009a32:	4617      	mov	r7, r2
 8009a34:	260a      	movs	r6, #10
 8009a36:	4694      	mov	ip, r2
 8009a38:	fb91 f5f6 	sdiv	r5, r1, r6
 8009a3c:	fb06 1415 	mls	r4, r6, r5, r1
 8009a40:	3430      	adds	r4, #48	; 0x30
 8009a42:	f80c 4c01 	strb.w	r4, [ip, #-1]
 8009a46:	460c      	mov	r4, r1
 8009a48:	2c63      	cmp	r4, #99	; 0x63
 8009a4a:	f102 32ff 	add.w	r2, r2, #4294967295
 8009a4e:	4629      	mov	r1, r5
 8009a50:	dcf1      	bgt.n	8009a36 <__exponent+0x22>
 8009a52:	3130      	adds	r1, #48	; 0x30
 8009a54:	f1ac 0402 	sub.w	r4, ip, #2
 8009a58:	f802 1c01 	strb.w	r1, [r2, #-1]
 8009a5c:	1c41      	adds	r1, r0, #1
 8009a5e:	4622      	mov	r2, r4
 8009a60:	42ba      	cmp	r2, r7
 8009a62:	d30a      	bcc.n	8009a7a <__exponent+0x66>
 8009a64:	f10d 0209 	add.w	r2, sp, #9
 8009a68:	eba2 020c 	sub.w	r2, r2, ip
 8009a6c:	42bc      	cmp	r4, r7
 8009a6e:	bf88      	it	hi
 8009a70:	2200      	movhi	r2, #0
 8009a72:	4413      	add	r3, r2
 8009a74:	1a18      	subs	r0, r3, r0
 8009a76:	b003      	add	sp, #12
 8009a78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009a7a:	f812 5b01 	ldrb.w	r5, [r2], #1
 8009a7e:	f801 5f01 	strb.w	r5, [r1, #1]!
 8009a82:	e7ed      	b.n	8009a60 <__exponent+0x4c>
 8009a84:	2330      	movs	r3, #48	; 0x30
 8009a86:	3130      	adds	r1, #48	; 0x30
 8009a88:	7083      	strb	r3, [r0, #2]
 8009a8a:	70c1      	strb	r1, [r0, #3]
 8009a8c:	1d03      	adds	r3, r0, #4
 8009a8e:	e7f1      	b.n	8009a74 <__exponent+0x60>

08009a90 <_printf_float>:
 8009a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009a94:	ed2d 8b02 	vpush	{d8}
 8009a98:	b08d      	sub	sp, #52	; 0x34
 8009a9a:	460c      	mov	r4, r1
 8009a9c:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8009aa0:	4616      	mov	r6, r2
 8009aa2:	461f      	mov	r7, r3
 8009aa4:	4605      	mov	r5, r0
 8009aa6:	f000 fd45 	bl	800a534 <_localeconv_r>
 8009aaa:	f8d0 a000 	ldr.w	sl, [r0]
 8009aae:	4650      	mov	r0, sl
 8009ab0:	f7f6 fc16 	bl	80002e0 <strlen>
 8009ab4:	2300      	movs	r3, #0
 8009ab6:	930a      	str	r3, [sp, #40]	; 0x28
 8009ab8:	6823      	ldr	r3, [r4, #0]
 8009aba:	9305      	str	r3, [sp, #20]
 8009abc:	f8d8 3000 	ldr.w	r3, [r8]
 8009ac0:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009ac4:	3307      	adds	r3, #7
 8009ac6:	f023 0307 	bic.w	r3, r3, #7
 8009aca:	f103 0208 	add.w	r2, r3, #8
 8009ace:	f8c8 2000 	str.w	r2, [r8]
 8009ad2:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009ad6:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8009ada:	9307      	str	r3, [sp, #28]
 8009adc:	f8cd 8018 	str.w	r8, [sp, #24]
 8009ae0:	ee08 0a10 	vmov	s16, r0
 8009ae4:	e9c4 8912 	strd	r8, r9, [r4, #72]	; 0x48
 8009ae8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009aec:	4b9e      	ldr	r3, [pc, #632]	; (8009d68 <_printf_float+0x2d8>)
 8009aee:	f04f 32ff 	mov.w	r2, #4294967295
 8009af2:	f7f7 f853 	bl	8000b9c <__aeabi_dcmpun>
 8009af6:	bb88      	cbnz	r0, 8009b5c <_printf_float+0xcc>
 8009af8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009afc:	4b9a      	ldr	r3, [pc, #616]	; (8009d68 <_printf_float+0x2d8>)
 8009afe:	f04f 32ff 	mov.w	r2, #4294967295
 8009b02:	f7f7 f82d 	bl	8000b60 <__aeabi_dcmple>
 8009b06:	bb48      	cbnz	r0, 8009b5c <_printf_float+0xcc>
 8009b08:	2200      	movs	r2, #0
 8009b0a:	2300      	movs	r3, #0
 8009b0c:	4640      	mov	r0, r8
 8009b0e:	4649      	mov	r1, r9
 8009b10:	f7f7 f81c 	bl	8000b4c <__aeabi_dcmplt>
 8009b14:	b110      	cbz	r0, 8009b1c <_printf_float+0x8c>
 8009b16:	232d      	movs	r3, #45	; 0x2d
 8009b18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b1c:	4a93      	ldr	r2, [pc, #588]	; (8009d6c <_printf_float+0x2dc>)
 8009b1e:	4b94      	ldr	r3, [pc, #592]	; (8009d70 <_printf_float+0x2e0>)
 8009b20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009b24:	bf94      	ite	ls
 8009b26:	4690      	movls	r8, r2
 8009b28:	4698      	movhi	r8, r3
 8009b2a:	2303      	movs	r3, #3
 8009b2c:	6123      	str	r3, [r4, #16]
 8009b2e:	9b05      	ldr	r3, [sp, #20]
 8009b30:	f023 0304 	bic.w	r3, r3, #4
 8009b34:	6023      	str	r3, [r4, #0]
 8009b36:	f04f 0900 	mov.w	r9, #0
 8009b3a:	9700      	str	r7, [sp, #0]
 8009b3c:	4633      	mov	r3, r6
 8009b3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009b40:	4621      	mov	r1, r4
 8009b42:	4628      	mov	r0, r5
 8009b44:	f000 f9da 	bl	8009efc <_printf_common>
 8009b48:	3001      	adds	r0, #1
 8009b4a:	f040 8090 	bne.w	8009c6e <_printf_float+0x1de>
 8009b4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009b52:	b00d      	add	sp, #52	; 0x34
 8009b54:	ecbd 8b02 	vpop	{d8}
 8009b58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009b5c:	4642      	mov	r2, r8
 8009b5e:	464b      	mov	r3, r9
 8009b60:	4640      	mov	r0, r8
 8009b62:	4649      	mov	r1, r9
 8009b64:	f7f7 f81a 	bl	8000b9c <__aeabi_dcmpun>
 8009b68:	b140      	cbz	r0, 8009b7c <_printf_float+0xec>
 8009b6a:	464b      	mov	r3, r9
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	bfbc      	itt	lt
 8009b70:	232d      	movlt	r3, #45	; 0x2d
 8009b72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009b76:	4a7f      	ldr	r2, [pc, #508]	; (8009d74 <_printf_float+0x2e4>)
 8009b78:	4b7f      	ldr	r3, [pc, #508]	; (8009d78 <_printf_float+0x2e8>)
 8009b7a:	e7d1      	b.n	8009b20 <_printf_float+0x90>
 8009b7c:	6863      	ldr	r3, [r4, #4]
 8009b7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009b82:	9206      	str	r2, [sp, #24]
 8009b84:	1c5a      	adds	r2, r3, #1
 8009b86:	d13f      	bne.n	8009c08 <_printf_float+0x178>
 8009b88:	2306      	movs	r3, #6
 8009b8a:	6063      	str	r3, [r4, #4]
 8009b8c:	9b05      	ldr	r3, [sp, #20]
 8009b8e:	6861      	ldr	r1, [r4, #4]
 8009b90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009b94:	2300      	movs	r3, #0
 8009b96:	9303      	str	r3, [sp, #12]
 8009b98:	ab0a      	add	r3, sp, #40	; 0x28
 8009b9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009b9e:	ab09      	add	r3, sp, #36	; 0x24
 8009ba0:	ec49 8b10 	vmov	d0, r8, r9
 8009ba4:	9300      	str	r3, [sp, #0]
 8009ba6:	6022      	str	r2, [r4, #0]
 8009ba8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009bac:	4628      	mov	r0, r5
 8009bae:	f7ff fecf 	bl	8009950 <__cvt>
 8009bb2:	9b06      	ldr	r3, [sp, #24]
 8009bb4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bb6:	2b47      	cmp	r3, #71	; 0x47
 8009bb8:	4680      	mov	r8, r0
 8009bba:	d108      	bne.n	8009bce <_printf_float+0x13e>
 8009bbc:	1cc8      	adds	r0, r1, #3
 8009bbe:	db02      	blt.n	8009bc6 <_printf_float+0x136>
 8009bc0:	6863      	ldr	r3, [r4, #4]
 8009bc2:	4299      	cmp	r1, r3
 8009bc4:	dd41      	ble.n	8009c4a <_printf_float+0x1ba>
 8009bc6:	f1ab 0302 	sub.w	r3, fp, #2
 8009bca:	fa5f fb83 	uxtb.w	fp, r3
 8009bce:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009bd2:	d820      	bhi.n	8009c16 <_printf_float+0x186>
 8009bd4:	3901      	subs	r1, #1
 8009bd6:	465a      	mov	r2, fp
 8009bd8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009bdc:	9109      	str	r1, [sp, #36]	; 0x24
 8009bde:	f7ff ff19 	bl	8009a14 <__exponent>
 8009be2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009be4:	1813      	adds	r3, r2, r0
 8009be6:	2a01      	cmp	r2, #1
 8009be8:	4681      	mov	r9, r0
 8009bea:	6123      	str	r3, [r4, #16]
 8009bec:	dc02      	bgt.n	8009bf4 <_printf_float+0x164>
 8009bee:	6822      	ldr	r2, [r4, #0]
 8009bf0:	07d2      	lsls	r2, r2, #31
 8009bf2:	d501      	bpl.n	8009bf8 <_printf_float+0x168>
 8009bf4:	3301      	adds	r3, #1
 8009bf6:	6123      	str	r3, [r4, #16]
 8009bf8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009bfc:	2b00      	cmp	r3, #0
 8009bfe:	d09c      	beq.n	8009b3a <_printf_float+0xaa>
 8009c00:	232d      	movs	r3, #45	; 0x2d
 8009c02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009c06:	e798      	b.n	8009b3a <_printf_float+0xaa>
 8009c08:	9a06      	ldr	r2, [sp, #24]
 8009c0a:	2a47      	cmp	r2, #71	; 0x47
 8009c0c:	d1be      	bne.n	8009b8c <_printf_float+0xfc>
 8009c0e:	2b00      	cmp	r3, #0
 8009c10:	d1bc      	bne.n	8009b8c <_printf_float+0xfc>
 8009c12:	2301      	movs	r3, #1
 8009c14:	e7b9      	b.n	8009b8a <_printf_float+0xfa>
 8009c16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009c1a:	d118      	bne.n	8009c4e <_printf_float+0x1be>
 8009c1c:	2900      	cmp	r1, #0
 8009c1e:	6863      	ldr	r3, [r4, #4]
 8009c20:	dd0b      	ble.n	8009c3a <_printf_float+0x1aa>
 8009c22:	6121      	str	r1, [r4, #16]
 8009c24:	b913      	cbnz	r3, 8009c2c <_printf_float+0x19c>
 8009c26:	6822      	ldr	r2, [r4, #0]
 8009c28:	07d0      	lsls	r0, r2, #31
 8009c2a:	d502      	bpl.n	8009c32 <_printf_float+0x1a2>
 8009c2c:	3301      	adds	r3, #1
 8009c2e:	440b      	add	r3, r1
 8009c30:	6123      	str	r3, [r4, #16]
 8009c32:	65a1      	str	r1, [r4, #88]	; 0x58
 8009c34:	f04f 0900 	mov.w	r9, #0
 8009c38:	e7de      	b.n	8009bf8 <_printf_float+0x168>
 8009c3a:	b913      	cbnz	r3, 8009c42 <_printf_float+0x1b2>
 8009c3c:	6822      	ldr	r2, [r4, #0]
 8009c3e:	07d2      	lsls	r2, r2, #31
 8009c40:	d501      	bpl.n	8009c46 <_printf_float+0x1b6>
 8009c42:	3302      	adds	r3, #2
 8009c44:	e7f4      	b.n	8009c30 <_printf_float+0x1a0>
 8009c46:	2301      	movs	r3, #1
 8009c48:	e7f2      	b.n	8009c30 <_printf_float+0x1a0>
 8009c4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009c4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c50:	4299      	cmp	r1, r3
 8009c52:	db05      	blt.n	8009c60 <_printf_float+0x1d0>
 8009c54:	6823      	ldr	r3, [r4, #0]
 8009c56:	6121      	str	r1, [r4, #16]
 8009c58:	07d8      	lsls	r0, r3, #31
 8009c5a:	d5ea      	bpl.n	8009c32 <_printf_float+0x1a2>
 8009c5c:	1c4b      	adds	r3, r1, #1
 8009c5e:	e7e7      	b.n	8009c30 <_printf_float+0x1a0>
 8009c60:	2900      	cmp	r1, #0
 8009c62:	bfd4      	ite	le
 8009c64:	f1c1 0202 	rsble	r2, r1, #2
 8009c68:	2201      	movgt	r2, #1
 8009c6a:	4413      	add	r3, r2
 8009c6c:	e7e0      	b.n	8009c30 <_printf_float+0x1a0>
 8009c6e:	6823      	ldr	r3, [r4, #0]
 8009c70:	055a      	lsls	r2, r3, #21
 8009c72:	d407      	bmi.n	8009c84 <_printf_float+0x1f4>
 8009c74:	6923      	ldr	r3, [r4, #16]
 8009c76:	4642      	mov	r2, r8
 8009c78:	4631      	mov	r1, r6
 8009c7a:	4628      	mov	r0, r5
 8009c7c:	47b8      	blx	r7
 8009c7e:	3001      	adds	r0, #1
 8009c80:	d12c      	bne.n	8009cdc <_printf_float+0x24c>
 8009c82:	e764      	b.n	8009b4e <_printf_float+0xbe>
 8009c84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009c88:	f240 80e0 	bls.w	8009e4c <_printf_float+0x3bc>
 8009c8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009c90:	2200      	movs	r2, #0
 8009c92:	2300      	movs	r3, #0
 8009c94:	f7f6 ff50 	bl	8000b38 <__aeabi_dcmpeq>
 8009c98:	2800      	cmp	r0, #0
 8009c9a:	d034      	beq.n	8009d06 <_printf_float+0x276>
 8009c9c:	4a37      	ldr	r2, [pc, #220]	; (8009d7c <_printf_float+0x2ec>)
 8009c9e:	2301      	movs	r3, #1
 8009ca0:	4631      	mov	r1, r6
 8009ca2:	4628      	mov	r0, r5
 8009ca4:	47b8      	blx	r7
 8009ca6:	3001      	adds	r0, #1
 8009ca8:	f43f af51 	beq.w	8009b4e <_printf_float+0xbe>
 8009cac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cb0:	429a      	cmp	r2, r3
 8009cb2:	db02      	blt.n	8009cba <_printf_float+0x22a>
 8009cb4:	6823      	ldr	r3, [r4, #0]
 8009cb6:	07d8      	lsls	r0, r3, #31
 8009cb8:	d510      	bpl.n	8009cdc <_printf_float+0x24c>
 8009cba:	ee18 3a10 	vmov	r3, s16
 8009cbe:	4652      	mov	r2, sl
 8009cc0:	4631      	mov	r1, r6
 8009cc2:	4628      	mov	r0, r5
 8009cc4:	47b8      	blx	r7
 8009cc6:	3001      	adds	r0, #1
 8009cc8:	f43f af41 	beq.w	8009b4e <_printf_float+0xbe>
 8009ccc:	f04f 0800 	mov.w	r8, #0
 8009cd0:	f104 091a 	add.w	r9, r4, #26
 8009cd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cd6:	3b01      	subs	r3, #1
 8009cd8:	4543      	cmp	r3, r8
 8009cda:	dc09      	bgt.n	8009cf0 <_printf_float+0x260>
 8009cdc:	6823      	ldr	r3, [r4, #0]
 8009cde:	079b      	lsls	r3, r3, #30
 8009ce0:	f100 8107 	bmi.w	8009ef2 <_printf_float+0x462>
 8009ce4:	68e0      	ldr	r0, [r4, #12]
 8009ce6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009ce8:	4298      	cmp	r0, r3
 8009cea:	bfb8      	it	lt
 8009cec:	4618      	movlt	r0, r3
 8009cee:	e730      	b.n	8009b52 <_printf_float+0xc2>
 8009cf0:	2301      	movs	r3, #1
 8009cf2:	464a      	mov	r2, r9
 8009cf4:	4631      	mov	r1, r6
 8009cf6:	4628      	mov	r0, r5
 8009cf8:	47b8      	blx	r7
 8009cfa:	3001      	adds	r0, #1
 8009cfc:	f43f af27 	beq.w	8009b4e <_printf_float+0xbe>
 8009d00:	f108 0801 	add.w	r8, r8, #1
 8009d04:	e7e6      	b.n	8009cd4 <_printf_float+0x244>
 8009d06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	dc39      	bgt.n	8009d80 <_printf_float+0x2f0>
 8009d0c:	4a1b      	ldr	r2, [pc, #108]	; (8009d7c <_printf_float+0x2ec>)
 8009d0e:	2301      	movs	r3, #1
 8009d10:	4631      	mov	r1, r6
 8009d12:	4628      	mov	r0, r5
 8009d14:	47b8      	blx	r7
 8009d16:	3001      	adds	r0, #1
 8009d18:	f43f af19 	beq.w	8009b4e <_printf_float+0xbe>
 8009d1c:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009d20:	4313      	orrs	r3, r2
 8009d22:	d102      	bne.n	8009d2a <_printf_float+0x29a>
 8009d24:	6823      	ldr	r3, [r4, #0]
 8009d26:	07d9      	lsls	r1, r3, #31
 8009d28:	d5d8      	bpl.n	8009cdc <_printf_float+0x24c>
 8009d2a:	ee18 3a10 	vmov	r3, s16
 8009d2e:	4652      	mov	r2, sl
 8009d30:	4631      	mov	r1, r6
 8009d32:	4628      	mov	r0, r5
 8009d34:	47b8      	blx	r7
 8009d36:	3001      	adds	r0, #1
 8009d38:	f43f af09 	beq.w	8009b4e <_printf_float+0xbe>
 8009d3c:	f04f 0900 	mov.w	r9, #0
 8009d40:	f104 0a1a 	add.w	sl, r4, #26
 8009d44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009d46:	425b      	negs	r3, r3
 8009d48:	454b      	cmp	r3, r9
 8009d4a:	dc01      	bgt.n	8009d50 <_printf_float+0x2c0>
 8009d4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d4e:	e792      	b.n	8009c76 <_printf_float+0x1e6>
 8009d50:	2301      	movs	r3, #1
 8009d52:	4652      	mov	r2, sl
 8009d54:	4631      	mov	r1, r6
 8009d56:	4628      	mov	r0, r5
 8009d58:	47b8      	blx	r7
 8009d5a:	3001      	adds	r0, #1
 8009d5c:	f43f aef7 	beq.w	8009b4e <_printf_float+0xbe>
 8009d60:	f109 0901 	add.w	r9, r9, #1
 8009d64:	e7ee      	b.n	8009d44 <_printf_float+0x2b4>
 8009d66:	bf00      	nop
 8009d68:	7fefffff 	.word	0x7fefffff
 8009d6c:	0800c901 	.word	0x0800c901
 8009d70:	0800c905 	.word	0x0800c905
 8009d74:	0800c909 	.word	0x0800c909
 8009d78:	0800c90d 	.word	0x0800c90d
 8009d7c:	0800c911 	.word	0x0800c911
 8009d80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d84:	429a      	cmp	r2, r3
 8009d86:	bfa8      	it	ge
 8009d88:	461a      	movge	r2, r3
 8009d8a:	2a00      	cmp	r2, #0
 8009d8c:	4691      	mov	r9, r2
 8009d8e:	dc37      	bgt.n	8009e00 <_printf_float+0x370>
 8009d90:	f04f 0b00 	mov.w	fp, #0
 8009d94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009d98:	f104 021a 	add.w	r2, r4, #26
 8009d9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009d9e:	9305      	str	r3, [sp, #20]
 8009da0:	eba3 0309 	sub.w	r3, r3, r9
 8009da4:	455b      	cmp	r3, fp
 8009da6:	dc33      	bgt.n	8009e10 <_printf_float+0x380>
 8009da8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dac:	429a      	cmp	r2, r3
 8009dae:	db3b      	blt.n	8009e28 <_printf_float+0x398>
 8009db0:	6823      	ldr	r3, [r4, #0]
 8009db2:	07da      	lsls	r2, r3, #31
 8009db4:	d438      	bmi.n	8009e28 <_printf_float+0x398>
 8009db6:	e9dd 3209 	ldrd	r3, r2, [sp, #36]	; 0x24
 8009dba:	eba2 0903 	sub.w	r9, r2, r3
 8009dbe:	9b05      	ldr	r3, [sp, #20]
 8009dc0:	1ad2      	subs	r2, r2, r3
 8009dc2:	4591      	cmp	r9, r2
 8009dc4:	bfa8      	it	ge
 8009dc6:	4691      	movge	r9, r2
 8009dc8:	f1b9 0f00 	cmp.w	r9, #0
 8009dcc:	dc35      	bgt.n	8009e3a <_printf_float+0x3aa>
 8009dce:	f04f 0800 	mov.w	r8, #0
 8009dd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009dd6:	f104 0a1a 	add.w	sl, r4, #26
 8009dda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009dde:	1a9b      	subs	r3, r3, r2
 8009de0:	eba3 0309 	sub.w	r3, r3, r9
 8009de4:	4543      	cmp	r3, r8
 8009de6:	f77f af79 	ble.w	8009cdc <_printf_float+0x24c>
 8009dea:	2301      	movs	r3, #1
 8009dec:	4652      	mov	r2, sl
 8009dee:	4631      	mov	r1, r6
 8009df0:	4628      	mov	r0, r5
 8009df2:	47b8      	blx	r7
 8009df4:	3001      	adds	r0, #1
 8009df6:	f43f aeaa 	beq.w	8009b4e <_printf_float+0xbe>
 8009dfa:	f108 0801 	add.w	r8, r8, #1
 8009dfe:	e7ec      	b.n	8009dda <_printf_float+0x34a>
 8009e00:	4613      	mov	r3, r2
 8009e02:	4631      	mov	r1, r6
 8009e04:	4642      	mov	r2, r8
 8009e06:	4628      	mov	r0, r5
 8009e08:	47b8      	blx	r7
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	d1c0      	bne.n	8009d90 <_printf_float+0x300>
 8009e0e:	e69e      	b.n	8009b4e <_printf_float+0xbe>
 8009e10:	2301      	movs	r3, #1
 8009e12:	4631      	mov	r1, r6
 8009e14:	4628      	mov	r0, r5
 8009e16:	9205      	str	r2, [sp, #20]
 8009e18:	47b8      	blx	r7
 8009e1a:	3001      	adds	r0, #1
 8009e1c:	f43f ae97 	beq.w	8009b4e <_printf_float+0xbe>
 8009e20:	9a05      	ldr	r2, [sp, #20]
 8009e22:	f10b 0b01 	add.w	fp, fp, #1
 8009e26:	e7b9      	b.n	8009d9c <_printf_float+0x30c>
 8009e28:	ee18 3a10 	vmov	r3, s16
 8009e2c:	4652      	mov	r2, sl
 8009e2e:	4631      	mov	r1, r6
 8009e30:	4628      	mov	r0, r5
 8009e32:	47b8      	blx	r7
 8009e34:	3001      	adds	r0, #1
 8009e36:	d1be      	bne.n	8009db6 <_printf_float+0x326>
 8009e38:	e689      	b.n	8009b4e <_printf_float+0xbe>
 8009e3a:	9a05      	ldr	r2, [sp, #20]
 8009e3c:	464b      	mov	r3, r9
 8009e3e:	4442      	add	r2, r8
 8009e40:	4631      	mov	r1, r6
 8009e42:	4628      	mov	r0, r5
 8009e44:	47b8      	blx	r7
 8009e46:	3001      	adds	r0, #1
 8009e48:	d1c1      	bne.n	8009dce <_printf_float+0x33e>
 8009e4a:	e680      	b.n	8009b4e <_printf_float+0xbe>
 8009e4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009e4e:	2a01      	cmp	r2, #1
 8009e50:	dc01      	bgt.n	8009e56 <_printf_float+0x3c6>
 8009e52:	07db      	lsls	r3, r3, #31
 8009e54:	d53a      	bpl.n	8009ecc <_printf_float+0x43c>
 8009e56:	2301      	movs	r3, #1
 8009e58:	4642      	mov	r2, r8
 8009e5a:	4631      	mov	r1, r6
 8009e5c:	4628      	mov	r0, r5
 8009e5e:	47b8      	blx	r7
 8009e60:	3001      	adds	r0, #1
 8009e62:	f43f ae74 	beq.w	8009b4e <_printf_float+0xbe>
 8009e66:	ee18 3a10 	vmov	r3, s16
 8009e6a:	4652      	mov	r2, sl
 8009e6c:	4631      	mov	r1, r6
 8009e6e:	4628      	mov	r0, r5
 8009e70:	47b8      	blx	r7
 8009e72:	3001      	adds	r0, #1
 8009e74:	f43f ae6b 	beq.w	8009b4e <_printf_float+0xbe>
 8009e78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009e7c:	2200      	movs	r2, #0
 8009e7e:	2300      	movs	r3, #0
 8009e80:	f8dd a028 	ldr.w	sl, [sp, #40]	; 0x28
 8009e84:	f7f6 fe58 	bl	8000b38 <__aeabi_dcmpeq>
 8009e88:	b9d8      	cbnz	r0, 8009ec2 <_printf_float+0x432>
 8009e8a:	f10a 33ff 	add.w	r3, sl, #4294967295
 8009e8e:	f108 0201 	add.w	r2, r8, #1
 8009e92:	4631      	mov	r1, r6
 8009e94:	4628      	mov	r0, r5
 8009e96:	47b8      	blx	r7
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d10e      	bne.n	8009eba <_printf_float+0x42a>
 8009e9c:	e657      	b.n	8009b4e <_printf_float+0xbe>
 8009e9e:	2301      	movs	r3, #1
 8009ea0:	4652      	mov	r2, sl
 8009ea2:	4631      	mov	r1, r6
 8009ea4:	4628      	mov	r0, r5
 8009ea6:	47b8      	blx	r7
 8009ea8:	3001      	adds	r0, #1
 8009eaa:	f43f ae50 	beq.w	8009b4e <_printf_float+0xbe>
 8009eae:	f108 0801 	add.w	r8, r8, #1
 8009eb2:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009eb4:	3b01      	subs	r3, #1
 8009eb6:	4543      	cmp	r3, r8
 8009eb8:	dcf1      	bgt.n	8009e9e <_printf_float+0x40e>
 8009eba:	464b      	mov	r3, r9
 8009ebc:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009ec0:	e6da      	b.n	8009c78 <_printf_float+0x1e8>
 8009ec2:	f04f 0800 	mov.w	r8, #0
 8009ec6:	f104 0a1a 	add.w	sl, r4, #26
 8009eca:	e7f2      	b.n	8009eb2 <_printf_float+0x422>
 8009ecc:	2301      	movs	r3, #1
 8009ece:	4642      	mov	r2, r8
 8009ed0:	e7df      	b.n	8009e92 <_printf_float+0x402>
 8009ed2:	2301      	movs	r3, #1
 8009ed4:	464a      	mov	r2, r9
 8009ed6:	4631      	mov	r1, r6
 8009ed8:	4628      	mov	r0, r5
 8009eda:	47b8      	blx	r7
 8009edc:	3001      	adds	r0, #1
 8009ede:	f43f ae36 	beq.w	8009b4e <_printf_float+0xbe>
 8009ee2:	f108 0801 	add.w	r8, r8, #1
 8009ee6:	68e3      	ldr	r3, [r4, #12]
 8009ee8:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009eea:	1a5b      	subs	r3, r3, r1
 8009eec:	4543      	cmp	r3, r8
 8009eee:	dcf0      	bgt.n	8009ed2 <_printf_float+0x442>
 8009ef0:	e6f8      	b.n	8009ce4 <_printf_float+0x254>
 8009ef2:	f04f 0800 	mov.w	r8, #0
 8009ef6:	f104 0919 	add.w	r9, r4, #25
 8009efa:	e7f4      	b.n	8009ee6 <_printf_float+0x456>

08009efc <_printf_common>:
 8009efc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009f00:	4616      	mov	r6, r2
 8009f02:	4699      	mov	r9, r3
 8009f04:	688a      	ldr	r2, [r1, #8]
 8009f06:	690b      	ldr	r3, [r1, #16]
 8009f08:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009f0c:	4293      	cmp	r3, r2
 8009f0e:	bfb8      	it	lt
 8009f10:	4613      	movlt	r3, r2
 8009f12:	6033      	str	r3, [r6, #0]
 8009f14:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009f18:	4607      	mov	r7, r0
 8009f1a:	460c      	mov	r4, r1
 8009f1c:	b10a      	cbz	r2, 8009f22 <_printf_common+0x26>
 8009f1e:	3301      	adds	r3, #1
 8009f20:	6033      	str	r3, [r6, #0]
 8009f22:	6823      	ldr	r3, [r4, #0]
 8009f24:	0699      	lsls	r1, r3, #26
 8009f26:	bf42      	ittt	mi
 8009f28:	6833      	ldrmi	r3, [r6, #0]
 8009f2a:	3302      	addmi	r3, #2
 8009f2c:	6033      	strmi	r3, [r6, #0]
 8009f2e:	6825      	ldr	r5, [r4, #0]
 8009f30:	f015 0506 	ands.w	r5, r5, #6
 8009f34:	d106      	bne.n	8009f44 <_printf_common+0x48>
 8009f36:	f104 0a19 	add.w	sl, r4, #25
 8009f3a:	68e3      	ldr	r3, [r4, #12]
 8009f3c:	6832      	ldr	r2, [r6, #0]
 8009f3e:	1a9b      	subs	r3, r3, r2
 8009f40:	42ab      	cmp	r3, r5
 8009f42:	dc26      	bgt.n	8009f92 <_printf_common+0x96>
 8009f44:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009f48:	1e13      	subs	r3, r2, #0
 8009f4a:	6822      	ldr	r2, [r4, #0]
 8009f4c:	bf18      	it	ne
 8009f4e:	2301      	movne	r3, #1
 8009f50:	0692      	lsls	r2, r2, #26
 8009f52:	d42b      	bmi.n	8009fac <_printf_common+0xb0>
 8009f54:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009f58:	4649      	mov	r1, r9
 8009f5a:	4638      	mov	r0, r7
 8009f5c:	47c0      	blx	r8
 8009f5e:	3001      	adds	r0, #1
 8009f60:	d01e      	beq.n	8009fa0 <_printf_common+0xa4>
 8009f62:	6823      	ldr	r3, [r4, #0]
 8009f64:	6922      	ldr	r2, [r4, #16]
 8009f66:	f003 0306 	and.w	r3, r3, #6
 8009f6a:	2b04      	cmp	r3, #4
 8009f6c:	bf02      	ittt	eq
 8009f6e:	68e5      	ldreq	r5, [r4, #12]
 8009f70:	6833      	ldreq	r3, [r6, #0]
 8009f72:	1aed      	subeq	r5, r5, r3
 8009f74:	68a3      	ldr	r3, [r4, #8]
 8009f76:	bf0c      	ite	eq
 8009f78:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009f7c:	2500      	movne	r5, #0
 8009f7e:	4293      	cmp	r3, r2
 8009f80:	bfc4      	itt	gt
 8009f82:	1a9b      	subgt	r3, r3, r2
 8009f84:	18ed      	addgt	r5, r5, r3
 8009f86:	2600      	movs	r6, #0
 8009f88:	341a      	adds	r4, #26
 8009f8a:	42b5      	cmp	r5, r6
 8009f8c:	d11a      	bne.n	8009fc4 <_printf_common+0xc8>
 8009f8e:	2000      	movs	r0, #0
 8009f90:	e008      	b.n	8009fa4 <_printf_common+0xa8>
 8009f92:	2301      	movs	r3, #1
 8009f94:	4652      	mov	r2, sl
 8009f96:	4649      	mov	r1, r9
 8009f98:	4638      	mov	r0, r7
 8009f9a:	47c0      	blx	r8
 8009f9c:	3001      	adds	r0, #1
 8009f9e:	d103      	bne.n	8009fa8 <_printf_common+0xac>
 8009fa0:	f04f 30ff 	mov.w	r0, #4294967295
 8009fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa8:	3501      	adds	r5, #1
 8009faa:	e7c6      	b.n	8009f3a <_printf_common+0x3e>
 8009fac:	18e1      	adds	r1, r4, r3
 8009fae:	1c5a      	adds	r2, r3, #1
 8009fb0:	2030      	movs	r0, #48	; 0x30
 8009fb2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009fb6:	4422      	add	r2, r4
 8009fb8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009fbc:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009fc0:	3302      	adds	r3, #2
 8009fc2:	e7c7      	b.n	8009f54 <_printf_common+0x58>
 8009fc4:	2301      	movs	r3, #1
 8009fc6:	4622      	mov	r2, r4
 8009fc8:	4649      	mov	r1, r9
 8009fca:	4638      	mov	r0, r7
 8009fcc:	47c0      	blx	r8
 8009fce:	3001      	adds	r0, #1
 8009fd0:	d0e6      	beq.n	8009fa0 <_printf_common+0xa4>
 8009fd2:	3601      	adds	r6, #1
 8009fd4:	e7d9      	b.n	8009f8a <_printf_common+0x8e>
	...

08009fd8 <_printf_i>:
 8009fd8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009fdc:	7e0f      	ldrb	r7, [r1, #24]
 8009fde:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009fe0:	2f78      	cmp	r7, #120	; 0x78
 8009fe2:	4691      	mov	r9, r2
 8009fe4:	4680      	mov	r8, r0
 8009fe6:	460c      	mov	r4, r1
 8009fe8:	469a      	mov	sl, r3
 8009fea:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009fee:	d807      	bhi.n	800a000 <_printf_i+0x28>
 8009ff0:	2f62      	cmp	r7, #98	; 0x62
 8009ff2:	d80a      	bhi.n	800a00a <_printf_i+0x32>
 8009ff4:	2f00      	cmp	r7, #0
 8009ff6:	f000 80d4 	beq.w	800a1a2 <_printf_i+0x1ca>
 8009ffa:	2f58      	cmp	r7, #88	; 0x58
 8009ffc:	f000 80c0 	beq.w	800a180 <_printf_i+0x1a8>
 800a000:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a004:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a008:	e03a      	b.n	800a080 <_printf_i+0xa8>
 800a00a:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a00e:	2b15      	cmp	r3, #21
 800a010:	d8f6      	bhi.n	800a000 <_printf_i+0x28>
 800a012:	a101      	add	r1, pc, #4	; (adr r1, 800a018 <_printf_i+0x40>)
 800a014:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a018:	0800a071 	.word	0x0800a071
 800a01c:	0800a085 	.word	0x0800a085
 800a020:	0800a001 	.word	0x0800a001
 800a024:	0800a001 	.word	0x0800a001
 800a028:	0800a001 	.word	0x0800a001
 800a02c:	0800a001 	.word	0x0800a001
 800a030:	0800a085 	.word	0x0800a085
 800a034:	0800a001 	.word	0x0800a001
 800a038:	0800a001 	.word	0x0800a001
 800a03c:	0800a001 	.word	0x0800a001
 800a040:	0800a001 	.word	0x0800a001
 800a044:	0800a189 	.word	0x0800a189
 800a048:	0800a0b1 	.word	0x0800a0b1
 800a04c:	0800a143 	.word	0x0800a143
 800a050:	0800a001 	.word	0x0800a001
 800a054:	0800a001 	.word	0x0800a001
 800a058:	0800a1ab 	.word	0x0800a1ab
 800a05c:	0800a001 	.word	0x0800a001
 800a060:	0800a0b1 	.word	0x0800a0b1
 800a064:	0800a001 	.word	0x0800a001
 800a068:	0800a001 	.word	0x0800a001
 800a06c:	0800a14b 	.word	0x0800a14b
 800a070:	682b      	ldr	r3, [r5, #0]
 800a072:	1d1a      	adds	r2, r3, #4
 800a074:	681b      	ldr	r3, [r3, #0]
 800a076:	602a      	str	r2, [r5, #0]
 800a078:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a07c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a080:	2301      	movs	r3, #1
 800a082:	e09f      	b.n	800a1c4 <_printf_i+0x1ec>
 800a084:	6820      	ldr	r0, [r4, #0]
 800a086:	682b      	ldr	r3, [r5, #0]
 800a088:	0607      	lsls	r7, r0, #24
 800a08a:	f103 0104 	add.w	r1, r3, #4
 800a08e:	6029      	str	r1, [r5, #0]
 800a090:	d501      	bpl.n	800a096 <_printf_i+0xbe>
 800a092:	681e      	ldr	r6, [r3, #0]
 800a094:	e003      	b.n	800a09e <_printf_i+0xc6>
 800a096:	0646      	lsls	r6, r0, #25
 800a098:	d5fb      	bpl.n	800a092 <_printf_i+0xba>
 800a09a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800a09e:	2e00      	cmp	r6, #0
 800a0a0:	da03      	bge.n	800a0aa <_printf_i+0xd2>
 800a0a2:	232d      	movs	r3, #45	; 0x2d
 800a0a4:	4276      	negs	r6, r6
 800a0a6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0aa:	485a      	ldr	r0, [pc, #360]	; (800a214 <_printf_i+0x23c>)
 800a0ac:	230a      	movs	r3, #10
 800a0ae:	e012      	b.n	800a0d6 <_printf_i+0xfe>
 800a0b0:	682b      	ldr	r3, [r5, #0]
 800a0b2:	6820      	ldr	r0, [r4, #0]
 800a0b4:	1d19      	adds	r1, r3, #4
 800a0b6:	6029      	str	r1, [r5, #0]
 800a0b8:	0605      	lsls	r5, r0, #24
 800a0ba:	d501      	bpl.n	800a0c0 <_printf_i+0xe8>
 800a0bc:	681e      	ldr	r6, [r3, #0]
 800a0be:	e002      	b.n	800a0c6 <_printf_i+0xee>
 800a0c0:	0641      	lsls	r1, r0, #25
 800a0c2:	d5fb      	bpl.n	800a0bc <_printf_i+0xe4>
 800a0c4:	881e      	ldrh	r6, [r3, #0]
 800a0c6:	4853      	ldr	r0, [pc, #332]	; (800a214 <_printf_i+0x23c>)
 800a0c8:	2f6f      	cmp	r7, #111	; 0x6f
 800a0ca:	bf0c      	ite	eq
 800a0cc:	2308      	moveq	r3, #8
 800a0ce:	230a      	movne	r3, #10
 800a0d0:	2100      	movs	r1, #0
 800a0d2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a0d6:	6865      	ldr	r5, [r4, #4]
 800a0d8:	60a5      	str	r5, [r4, #8]
 800a0da:	2d00      	cmp	r5, #0
 800a0dc:	bfa2      	ittt	ge
 800a0de:	6821      	ldrge	r1, [r4, #0]
 800a0e0:	f021 0104 	bicge.w	r1, r1, #4
 800a0e4:	6021      	strge	r1, [r4, #0]
 800a0e6:	b90e      	cbnz	r6, 800a0ec <_printf_i+0x114>
 800a0e8:	2d00      	cmp	r5, #0
 800a0ea:	d04b      	beq.n	800a184 <_printf_i+0x1ac>
 800a0ec:	4615      	mov	r5, r2
 800a0ee:	fbb6 f1f3 	udiv	r1, r6, r3
 800a0f2:	fb03 6711 	mls	r7, r3, r1, r6
 800a0f6:	5dc7      	ldrb	r7, [r0, r7]
 800a0f8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a0fc:	4637      	mov	r7, r6
 800a0fe:	42bb      	cmp	r3, r7
 800a100:	460e      	mov	r6, r1
 800a102:	d9f4      	bls.n	800a0ee <_printf_i+0x116>
 800a104:	2b08      	cmp	r3, #8
 800a106:	d10b      	bne.n	800a120 <_printf_i+0x148>
 800a108:	6823      	ldr	r3, [r4, #0]
 800a10a:	07de      	lsls	r6, r3, #31
 800a10c:	d508      	bpl.n	800a120 <_printf_i+0x148>
 800a10e:	6923      	ldr	r3, [r4, #16]
 800a110:	6861      	ldr	r1, [r4, #4]
 800a112:	4299      	cmp	r1, r3
 800a114:	bfde      	ittt	le
 800a116:	2330      	movle	r3, #48	; 0x30
 800a118:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a11c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a120:	1b52      	subs	r2, r2, r5
 800a122:	6122      	str	r2, [r4, #16]
 800a124:	f8cd a000 	str.w	sl, [sp]
 800a128:	464b      	mov	r3, r9
 800a12a:	aa03      	add	r2, sp, #12
 800a12c:	4621      	mov	r1, r4
 800a12e:	4640      	mov	r0, r8
 800a130:	f7ff fee4 	bl	8009efc <_printf_common>
 800a134:	3001      	adds	r0, #1
 800a136:	d14a      	bne.n	800a1ce <_printf_i+0x1f6>
 800a138:	f04f 30ff 	mov.w	r0, #4294967295
 800a13c:	b004      	add	sp, #16
 800a13e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a142:	6823      	ldr	r3, [r4, #0]
 800a144:	f043 0320 	orr.w	r3, r3, #32
 800a148:	6023      	str	r3, [r4, #0]
 800a14a:	4833      	ldr	r0, [pc, #204]	; (800a218 <_printf_i+0x240>)
 800a14c:	2778      	movs	r7, #120	; 0x78
 800a14e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 800a152:	6823      	ldr	r3, [r4, #0]
 800a154:	6829      	ldr	r1, [r5, #0]
 800a156:	061f      	lsls	r7, r3, #24
 800a158:	f851 6b04 	ldr.w	r6, [r1], #4
 800a15c:	d402      	bmi.n	800a164 <_printf_i+0x18c>
 800a15e:	065f      	lsls	r7, r3, #25
 800a160:	bf48      	it	mi
 800a162:	b2b6      	uxthmi	r6, r6
 800a164:	07df      	lsls	r7, r3, #31
 800a166:	bf48      	it	mi
 800a168:	f043 0320 	orrmi.w	r3, r3, #32
 800a16c:	6029      	str	r1, [r5, #0]
 800a16e:	bf48      	it	mi
 800a170:	6023      	strmi	r3, [r4, #0]
 800a172:	b91e      	cbnz	r6, 800a17c <_printf_i+0x1a4>
 800a174:	6823      	ldr	r3, [r4, #0]
 800a176:	f023 0320 	bic.w	r3, r3, #32
 800a17a:	6023      	str	r3, [r4, #0]
 800a17c:	2310      	movs	r3, #16
 800a17e:	e7a7      	b.n	800a0d0 <_printf_i+0xf8>
 800a180:	4824      	ldr	r0, [pc, #144]	; (800a214 <_printf_i+0x23c>)
 800a182:	e7e4      	b.n	800a14e <_printf_i+0x176>
 800a184:	4615      	mov	r5, r2
 800a186:	e7bd      	b.n	800a104 <_printf_i+0x12c>
 800a188:	682b      	ldr	r3, [r5, #0]
 800a18a:	6826      	ldr	r6, [r4, #0]
 800a18c:	6961      	ldr	r1, [r4, #20]
 800a18e:	1d18      	adds	r0, r3, #4
 800a190:	6028      	str	r0, [r5, #0]
 800a192:	0635      	lsls	r5, r6, #24
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	d501      	bpl.n	800a19c <_printf_i+0x1c4>
 800a198:	6019      	str	r1, [r3, #0]
 800a19a:	e002      	b.n	800a1a2 <_printf_i+0x1ca>
 800a19c:	0670      	lsls	r0, r6, #25
 800a19e:	d5fb      	bpl.n	800a198 <_printf_i+0x1c0>
 800a1a0:	8019      	strh	r1, [r3, #0]
 800a1a2:	2300      	movs	r3, #0
 800a1a4:	6123      	str	r3, [r4, #16]
 800a1a6:	4615      	mov	r5, r2
 800a1a8:	e7bc      	b.n	800a124 <_printf_i+0x14c>
 800a1aa:	682b      	ldr	r3, [r5, #0]
 800a1ac:	1d1a      	adds	r2, r3, #4
 800a1ae:	602a      	str	r2, [r5, #0]
 800a1b0:	681d      	ldr	r5, [r3, #0]
 800a1b2:	6862      	ldr	r2, [r4, #4]
 800a1b4:	2100      	movs	r1, #0
 800a1b6:	4628      	mov	r0, r5
 800a1b8:	f7f6 f842 	bl	8000240 <memchr>
 800a1bc:	b108      	cbz	r0, 800a1c2 <_printf_i+0x1ea>
 800a1be:	1b40      	subs	r0, r0, r5
 800a1c0:	6060      	str	r0, [r4, #4]
 800a1c2:	6863      	ldr	r3, [r4, #4]
 800a1c4:	6123      	str	r3, [r4, #16]
 800a1c6:	2300      	movs	r3, #0
 800a1c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1cc:	e7aa      	b.n	800a124 <_printf_i+0x14c>
 800a1ce:	6923      	ldr	r3, [r4, #16]
 800a1d0:	462a      	mov	r2, r5
 800a1d2:	4649      	mov	r1, r9
 800a1d4:	4640      	mov	r0, r8
 800a1d6:	47d0      	blx	sl
 800a1d8:	3001      	adds	r0, #1
 800a1da:	d0ad      	beq.n	800a138 <_printf_i+0x160>
 800a1dc:	6823      	ldr	r3, [r4, #0]
 800a1de:	079b      	lsls	r3, r3, #30
 800a1e0:	d413      	bmi.n	800a20a <_printf_i+0x232>
 800a1e2:	68e0      	ldr	r0, [r4, #12]
 800a1e4:	9b03      	ldr	r3, [sp, #12]
 800a1e6:	4298      	cmp	r0, r3
 800a1e8:	bfb8      	it	lt
 800a1ea:	4618      	movlt	r0, r3
 800a1ec:	e7a6      	b.n	800a13c <_printf_i+0x164>
 800a1ee:	2301      	movs	r3, #1
 800a1f0:	4632      	mov	r2, r6
 800a1f2:	4649      	mov	r1, r9
 800a1f4:	4640      	mov	r0, r8
 800a1f6:	47d0      	blx	sl
 800a1f8:	3001      	adds	r0, #1
 800a1fa:	d09d      	beq.n	800a138 <_printf_i+0x160>
 800a1fc:	3501      	adds	r5, #1
 800a1fe:	68e3      	ldr	r3, [r4, #12]
 800a200:	9903      	ldr	r1, [sp, #12]
 800a202:	1a5b      	subs	r3, r3, r1
 800a204:	42ab      	cmp	r3, r5
 800a206:	dcf2      	bgt.n	800a1ee <_printf_i+0x216>
 800a208:	e7eb      	b.n	800a1e2 <_printf_i+0x20a>
 800a20a:	2500      	movs	r5, #0
 800a20c:	f104 0619 	add.w	r6, r4, #25
 800a210:	e7f5      	b.n	800a1fe <_printf_i+0x226>
 800a212:	bf00      	nop
 800a214:	0800c913 	.word	0x0800c913
 800a218:	0800c924 	.word	0x0800c924

0800a21c <std>:
 800a21c:	2300      	movs	r3, #0
 800a21e:	b510      	push	{r4, lr}
 800a220:	4604      	mov	r4, r0
 800a222:	e9c0 3300 	strd	r3, r3, [r0]
 800a226:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800a22a:	6083      	str	r3, [r0, #8]
 800a22c:	8181      	strh	r1, [r0, #12]
 800a22e:	6643      	str	r3, [r0, #100]	; 0x64
 800a230:	81c2      	strh	r2, [r0, #14]
 800a232:	6183      	str	r3, [r0, #24]
 800a234:	4619      	mov	r1, r3
 800a236:	2208      	movs	r2, #8
 800a238:	305c      	adds	r0, #92	; 0x5c
 800a23a:	f000 f916 	bl	800a46a <memset>
 800a23e:	4b05      	ldr	r3, [pc, #20]	; (800a254 <std+0x38>)
 800a240:	6263      	str	r3, [r4, #36]	; 0x24
 800a242:	4b05      	ldr	r3, [pc, #20]	; (800a258 <std+0x3c>)
 800a244:	62a3      	str	r3, [r4, #40]	; 0x28
 800a246:	4b05      	ldr	r3, [pc, #20]	; (800a25c <std+0x40>)
 800a248:	62e3      	str	r3, [r4, #44]	; 0x2c
 800a24a:	4b05      	ldr	r3, [pc, #20]	; (800a260 <std+0x44>)
 800a24c:	6224      	str	r4, [r4, #32]
 800a24e:	6323      	str	r3, [r4, #48]	; 0x30
 800a250:	bd10      	pop	{r4, pc}
 800a252:	bf00      	nop
 800a254:	0800a3e5 	.word	0x0800a3e5
 800a258:	0800a407 	.word	0x0800a407
 800a25c:	0800a43f 	.word	0x0800a43f
 800a260:	0800a463 	.word	0x0800a463

0800a264 <stdio_exit_handler>:
 800a264:	4a02      	ldr	r2, [pc, #8]	; (800a270 <stdio_exit_handler+0xc>)
 800a266:	4903      	ldr	r1, [pc, #12]	; (800a274 <stdio_exit_handler+0x10>)
 800a268:	4803      	ldr	r0, [pc, #12]	; (800a278 <stdio_exit_handler+0x14>)
 800a26a:	f000 b869 	b.w	800a340 <_fwalk_sglue>
 800a26e:	bf00      	nop
 800a270:	200000d0 	.word	0x200000d0
 800a274:	0800c009 	.word	0x0800c009
 800a278:	200000dc 	.word	0x200000dc

0800a27c <cleanup_stdio>:
 800a27c:	6841      	ldr	r1, [r0, #4]
 800a27e:	4b0c      	ldr	r3, [pc, #48]	; (800a2b0 <cleanup_stdio+0x34>)
 800a280:	4299      	cmp	r1, r3
 800a282:	b510      	push	{r4, lr}
 800a284:	4604      	mov	r4, r0
 800a286:	d001      	beq.n	800a28c <cleanup_stdio+0x10>
 800a288:	f001 febe 	bl	800c008 <_fflush_r>
 800a28c:	68a1      	ldr	r1, [r4, #8]
 800a28e:	4b09      	ldr	r3, [pc, #36]	; (800a2b4 <cleanup_stdio+0x38>)
 800a290:	4299      	cmp	r1, r3
 800a292:	d002      	beq.n	800a29a <cleanup_stdio+0x1e>
 800a294:	4620      	mov	r0, r4
 800a296:	f001 feb7 	bl	800c008 <_fflush_r>
 800a29a:	68e1      	ldr	r1, [r4, #12]
 800a29c:	4b06      	ldr	r3, [pc, #24]	; (800a2b8 <cleanup_stdio+0x3c>)
 800a29e:	4299      	cmp	r1, r3
 800a2a0:	d004      	beq.n	800a2ac <cleanup_stdio+0x30>
 800a2a2:	4620      	mov	r0, r4
 800a2a4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2a8:	f001 beae 	b.w	800c008 <_fflush_r>
 800a2ac:	bd10      	pop	{r4, pc}
 800a2ae:	bf00      	nop
 800a2b0:	20000734 	.word	0x20000734
 800a2b4:	2000079c 	.word	0x2000079c
 800a2b8:	20000804 	.word	0x20000804

0800a2bc <global_stdio_init.part.0>:
 800a2bc:	b510      	push	{r4, lr}
 800a2be:	4b0b      	ldr	r3, [pc, #44]	; (800a2ec <global_stdio_init.part.0+0x30>)
 800a2c0:	4c0b      	ldr	r4, [pc, #44]	; (800a2f0 <global_stdio_init.part.0+0x34>)
 800a2c2:	4a0c      	ldr	r2, [pc, #48]	; (800a2f4 <global_stdio_init.part.0+0x38>)
 800a2c4:	601a      	str	r2, [r3, #0]
 800a2c6:	4620      	mov	r0, r4
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	2104      	movs	r1, #4
 800a2cc:	f7ff ffa6 	bl	800a21c <std>
 800a2d0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 800a2d4:	2201      	movs	r2, #1
 800a2d6:	2109      	movs	r1, #9
 800a2d8:	f7ff ffa0 	bl	800a21c <std>
 800a2dc:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 800a2e0:	2202      	movs	r2, #2
 800a2e2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a2e6:	2112      	movs	r1, #18
 800a2e8:	f7ff bf98 	b.w	800a21c <std>
 800a2ec:	2000086c 	.word	0x2000086c
 800a2f0:	20000734 	.word	0x20000734
 800a2f4:	0800a265 	.word	0x0800a265

0800a2f8 <__sfp_lock_acquire>:
 800a2f8:	4801      	ldr	r0, [pc, #4]	; (800a300 <__sfp_lock_acquire+0x8>)
 800a2fa:	f000 b98f 	b.w	800a61c <__retarget_lock_acquire_recursive>
 800a2fe:	bf00      	nop
 800a300:	20000875 	.word	0x20000875

0800a304 <__sfp_lock_release>:
 800a304:	4801      	ldr	r0, [pc, #4]	; (800a30c <__sfp_lock_release+0x8>)
 800a306:	f000 b98a 	b.w	800a61e <__retarget_lock_release_recursive>
 800a30a:	bf00      	nop
 800a30c:	20000875 	.word	0x20000875

0800a310 <__sinit>:
 800a310:	b510      	push	{r4, lr}
 800a312:	4604      	mov	r4, r0
 800a314:	f7ff fff0 	bl	800a2f8 <__sfp_lock_acquire>
 800a318:	6a23      	ldr	r3, [r4, #32]
 800a31a:	b11b      	cbz	r3, 800a324 <__sinit+0x14>
 800a31c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800a320:	f7ff bff0 	b.w	800a304 <__sfp_lock_release>
 800a324:	4b04      	ldr	r3, [pc, #16]	; (800a338 <__sinit+0x28>)
 800a326:	6223      	str	r3, [r4, #32]
 800a328:	4b04      	ldr	r3, [pc, #16]	; (800a33c <__sinit+0x2c>)
 800a32a:	681b      	ldr	r3, [r3, #0]
 800a32c:	2b00      	cmp	r3, #0
 800a32e:	d1f5      	bne.n	800a31c <__sinit+0xc>
 800a330:	f7ff ffc4 	bl	800a2bc <global_stdio_init.part.0>
 800a334:	e7f2      	b.n	800a31c <__sinit+0xc>
 800a336:	bf00      	nop
 800a338:	0800a27d 	.word	0x0800a27d
 800a33c:	2000086c 	.word	0x2000086c

0800a340 <_fwalk_sglue>:
 800a340:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a344:	4607      	mov	r7, r0
 800a346:	4688      	mov	r8, r1
 800a348:	4614      	mov	r4, r2
 800a34a:	2600      	movs	r6, #0
 800a34c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800a350:	f1b9 0901 	subs.w	r9, r9, #1
 800a354:	d505      	bpl.n	800a362 <_fwalk_sglue+0x22>
 800a356:	6824      	ldr	r4, [r4, #0]
 800a358:	2c00      	cmp	r4, #0
 800a35a:	d1f7      	bne.n	800a34c <_fwalk_sglue+0xc>
 800a35c:	4630      	mov	r0, r6
 800a35e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a362:	89ab      	ldrh	r3, [r5, #12]
 800a364:	2b01      	cmp	r3, #1
 800a366:	d907      	bls.n	800a378 <_fwalk_sglue+0x38>
 800a368:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800a36c:	3301      	adds	r3, #1
 800a36e:	d003      	beq.n	800a378 <_fwalk_sglue+0x38>
 800a370:	4629      	mov	r1, r5
 800a372:	4638      	mov	r0, r7
 800a374:	47c0      	blx	r8
 800a376:	4306      	orrs	r6, r0
 800a378:	3568      	adds	r5, #104	; 0x68
 800a37a:	e7e9      	b.n	800a350 <_fwalk_sglue+0x10>

0800a37c <sniprintf>:
 800a37c:	b40c      	push	{r2, r3}
 800a37e:	b530      	push	{r4, r5, lr}
 800a380:	4b17      	ldr	r3, [pc, #92]	; (800a3e0 <sniprintf+0x64>)
 800a382:	1e0c      	subs	r4, r1, #0
 800a384:	681d      	ldr	r5, [r3, #0]
 800a386:	b09d      	sub	sp, #116	; 0x74
 800a388:	da08      	bge.n	800a39c <sniprintf+0x20>
 800a38a:	238b      	movs	r3, #139	; 0x8b
 800a38c:	602b      	str	r3, [r5, #0]
 800a38e:	f04f 30ff 	mov.w	r0, #4294967295
 800a392:	b01d      	add	sp, #116	; 0x74
 800a394:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800a398:	b002      	add	sp, #8
 800a39a:	4770      	bx	lr
 800a39c:	f44f 7302 	mov.w	r3, #520	; 0x208
 800a3a0:	f8ad 3014 	strh.w	r3, [sp, #20]
 800a3a4:	bf14      	ite	ne
 800a3a6:	f104 33ff 	addne.w	r3, r4, #4294967295
 800a3aa:	4623      	moveq	r3, r4
 800a3ac:	9304      	str	r3, [sp, #16]
 800a3ae:	9307      	str	r3, [sp, #28]
 800a3b0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800a3b4:	9002      	str	r0, [sp, #8]
 800a3b6:	9006      	str	r0, [sp, #24]
 800a3b8:	f8ad 3016 	strh.w	r3, [sp, #22]
 800a3bc:	9a20      	ldr	r2, [sp, #128]	; 0x80
 800a3be:	ab21      	add	r3, sp, #132	; 0x84
 800a3c0:	a902      	add	r1, sp, #8
 800a3c2:	4628      	mov	r0, r5
 800a3c4:	9301      	str	r3, [sp, #4]
 800a3c6:	f001 fc9b 	bl	800bd00 <_svfiprintf_r>
 800a3ca:	1c43      	adds	r3, r0, #1
 800a3cc:	bfbc      	itt	lt
 800a3ce:	238b      	movlt	r3, #139	; 0x8b
 800a3d0:	602b      	strlt	r3, [r5, #0]
 800a3d2:	2c00      	cmp	r4, #0
 800a3d4:	d0dd      	beq.n	800a392 <sniprintf+0x16>
 800a3d6:	9b02      	ldr	r3, [sp, #8]
 800a3d8:	2200      	movs	r2, #0
 800a3da:	701a      	strb	r2, [r3, #0]
 800a3dc:	e7d9      	b.n	800a392 <sniprintf+0x16>
 800a3de:	bf00      	nop
 800a3e0:	20000128 	.word	0x20000128

0800a3e4 <__sread>:
 800a3e4:	b510      	push	{r4, lr}
 800a3e6:	460c      	mov	r4, r1
 800a3e8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a3ec:	f000 f8c8 	bl	800a580 <_read_r>
 800a3f0:	2800      	cmp	r0, #0
 800a3f2:	bfab      	itete	ge
 800a3f4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800a3f6:	89a3      	ldrhlt	r3, [r4, #12]
 800a3f8:	181b      	addge	r3, r3, r0
 800a3fa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800a3fe:	bfac      	ite	ge
 800a400:	6563      	strge	r3, [r4, #84]	; 0x54
 800a402:	81a3      	strhlt	r3, [r4, #12]
 800a404:	bd10      	pop	{r4, pc}

0800a406 <__swrite>:
 800a406:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a40a:	461f      	mov	r7, r3
 800a40c:	898b      	ldrh	r3, [r1, #12]
 800a40e:	05db      	lsls	r3, r3, #23
 800a410:	4605      	mov	r5, r0
 800a412:	460c      	mov	r4, r1
 800a414:	4616      	mov	r6, r2
 800a416:	d505      	bpl.n	800a424 <__swrite+0x1e>
 800a418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a41c:	2302      	movs	r3, #2
 800a41e:	2200      	movs	r2, #0
 800a420:	f000 f89c 	bl	800a55c <_lseek_r>
 800a424:	89a3      	ldrh	r3, [r4, #12]
 800a426:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a42a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a42e:	81a3      	strh	r3, [r4, #12]
 800a430:	4632      	mov	r2, r6
 800a432:	463b      	mov	r3, r7
 800a434:	4628      	mov	r0, r5
 800a436:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800a43a:	f000 b8b3 	b.w	800a5a4 <_write_r>

0800a43e <__sseek>:
 800a43e:	b510      	push	{r4, lr}
 800a440:	460c      	mov	r4, r1
 800a442:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a446:	f000 f889 	bl	800a55c <_lseek_r>
 800a44a:	1c43      	adds	r3, r0, #1
 800a44c:	89a3      	ldrh	r3, [r4, #12]
 800a44e:	bf15      	itete	ne
 800a450:	6560      	strne	r0, [r4, #84]	; 0x54
 800a452:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800a456:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800a45a:	81a3      	strheq	r3, [r4, #12]
 800a45c:	bf18      	it	ne
 800a45e:	81a3      	strhne	r3, [r4, #12]
 800a460:	bd10      	pop	{r4, pc}

0800a462 <__sclose>:
 800a462:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a466:	f000 b869 	b.w	800a53c <_close_r>

0800a46a <memset>:
 800a46a:	4402      	add	r2, r0
 800a46c:	4603      	mov	r3, r0
 800a46e:	4293      	cmp	r3, r2
 800a470:	d100      	bne.n	800a474 <memset+0xa>
 800a472:	4770      	bx	lr
 800a474:	f803 1b01 	strb.w	r1, [r3], #1
 800a478:	e7f9      	b.n	800a46e <memset+0x4>
	...

0800a47c <strtok>:
 800a47c:	4b16      	ldr	r3, [pc, #88]	; (800a4d8 <strtok+0x5c>)
 800a47e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800a480:	681e      	ldr	r6, [r3, #0]
 800a482:	6c74      	ldr	r4, [r6, #68]	; 0x44
 800a484:	4605      	mov	r5, r0
 800a486:	b9fc      	cbnz	r4, 800a4c8 <strtok+0x4c>
 800a488:	2050      	movs	r0, #80	; 0x50
 800a48a:	9101      	str	r1, [sp, #4]
 800a48c:	f000 ffae 	bl	800b3ec <malloc>
 800a490:	9901      	ldr	r1, [sp, #4]
 800a492:	6470      	str	r0, [r6, #68]	; 0x44
 800a494:	4602      	mov	r2, r0
 800a496:	b920      	cbnz	r0, 800a4a2 <strtok+0x26>
 800a498:	4b10      	ldr	r3, [pc, #64]	; (800a4dc <strtok+0x60>)
 800a49a:	4811      	ldr	r0, [pc, #68]	; (800a4e0 <strtok+0x64>)
 800a49c:	215b      	movs	r1, #91	; 0x5b
 800a49e:	f000 f8bf 	bl	800a620 <__assert_func>
 800a4a2:	e9c0 4400 	strd	r4, r4, [r0]
 800a4a6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800a4aa:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800a4ae:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800a4b2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800a4b6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800a4ba:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800a4be:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800a4c2:	6184      	str	r4, [r0, #24]
 800a4c4:	7704      	strb	r4, [r0, #28]
 800a4c6:	6244      	str	r4, [r0, #36]	; 0x24
 800a4c8:	6c72      	ldr	r2, [r6, #68]	; 0x44
 800a4ca:	2301      	movs	r3, #1
 800a4cc:	4628      	mov	r0, r5
 800a4ce:	b002      	add	sp, #8
 800a4d0:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800a4d4:	f000 b806 	b.w	800a4e4 <__strtok_r>
 800a4d8:	20000128 	.word	0x20000128
 800a4dc:	0800c935 	.word	0x0800c935
 800a4e0:	0800c94c 	.word	0x0800c94c

0800a4e4 <__strtok_r>:
 800a4e4:	b5f0      	push	{r4, r5, r6, r7, lr}
 800a4e6:	b908      	cbnz	r0, 800a4ec <__strtok_r+0x8>
 800a4e8:	6810      	ldr	r0, [r2, #0]
 800a4ea:	b188      	cbz	r0, 800a510 <__strtok_r+0x2c>
 800a4ec:	4604      	mov	r4, r0
 800a4ee:	4620      	mov	r0, r4
 800a4f0:	f814 5b01 	ldrb.w	r5, [r4], #1
 800a4f4:	460f      	mov	r7, r1
 800a4f6:	f817 6b01 	ldrb.w	r6, [r7], #1
 800a4fa:	b91e      	cbnz	r6, 800a504 <__strtok_r+0x20>
 800a4fc:	b965      	cbnz	r5, 800a518 <__strtok_r+0x34>
 800a4fe:	6015      	str	r5, [r2, #0]
 800a500:	4628      	mov	r0, r5
 800a502:	e005      	b.n	800a510 <__strtok_r+0x2c>
 800a504:	42b5      	cmp	r5, r6
 800a506:	d1f6      	bne.n	800a4f6 <__strtok_r+0x12>
 800a508:	2b00      	cmp	r3, #0
 800a50a:	d1f0      	bne.n	800a4ee <__strtok_r+0xa>
 800a50c:	6014      	str	r4, [r2, #0]
 800a50e:	7003      	strb	r3, [r0, #0]
 800a510:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a512:	461c      	mov	r4, r3
 800a514:	e00c      	b.n	800a530 <__strtok_r+0x4c>
 800a516:	b915      	cbnz	r5, 800a51e <__strtok_r+0x3a>
 800a518:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a51c:	460e      	mov	r6, r1
 800a51e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800a522:	42ab      	cmp	r3, r5
 800a524:	d1f7      	bne.n	800a516 <__strtok_r+0x32>
 800a526:	2b00      	cmp	r3, #0
 800a528:	d0f3      	beq.n	800a512 <__strtok_r+0x2e>
 800a52a:	2300      	movs	r3, #0
 800a52c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800a530:	6014      	str	r4, [r2, #0]
 800a532:	e7ed      	b.n	800a510 <__strtok_r+0x2c>

0800a534 <_localeconv_r>:
 800a534:	4800      	ldr	r0, [pc, #0]	; (800a538 <_localeconv_r+0x4>)
 800a536:	4770      	bx	lr
 800a538:	2000021c 	.word	0x2000021c

0800a53c <_close_r>:
 800a53c:	b538      	push	{r3, r4, r5, lr}
 800a53e:	4d06      	ldr	r5, [pc, #24]	; (800a558 <_close_r+0x1c>)
 800a540:	2300      	movs	r3, #0
 800a542:	4604      	mov	r4, r0
 800a544:	4608      	mov	r0, r1
 800a546:	602b      	str	r3, [r5, #0]
 800a548:	f7f7 fa6d 	bl	8001a26 <_close>
 800a54c:	1c43      	adds	r3, r0, #1
 800a54e:	d102      	bne.n	800a556 <_close_r+0x1a>
 800a550:	682b      	ldr	r3, [r5, #0]
 800a552:	b103      	cbz	r3, 800a556 <_close_r+0x1a>
 800a554:	6023      	str	r3, [r4, #0]
 800a556:	bd38      	pop	{r3, r4, r5, pc}
 800a558:	20000870 	.word	0x20000870

0800a55c <_lseek_r>:
 800a55c:	b538      	push	{r3, r4, r5, lr}
 800a55e:	4d07      	ldr	r5, [pc, #28]	; (800a57c <_lseek_r+0x20>)
 800a560:	4604      	mov	r4, r0
 800a562:	4608      	mov	r0, r1
 800a564:	4611      	mov	r1, r2
 800a566:	2200      	movs	r2, #0
 800a568:	602a      	str	r2, [r5, #0]
 800a56a:	461a      	mov	r2, r3
 800a56c:	f7f7 fa82 	bl	8001a74 <_lseek>
 800a570:	1c43      	adds	r3, r0, #1
 800a572:	d102      	bne.n	800a57a <_lseek_r+0x1e>
 800a574:	682b      	ldr	r3, [r5, #0]
 800a576:	b103      	cbz	r3, 800a57a <_lseek_r+0x1e>
 800a578:	6023      	str	r3, [r4, #0]
 800a57a:	bd38      	pop	{r3, r4, r5, pc}
 800a57c:	20000870 	.word	0x20000870

0800a580 <_read_r>:
 800a580:	b538      	push	{r3, r4, r5, lr}
 800a582:	4d07      	ldr	r5, [pc, #28]	; (800a5a0 <_read_r+0x20>)
 800a584:	4604      	mov	r4, r0
 800a586:	4608      	mov	r0, r1
 800a588:	4611      	mov	r1, r2
 800a58a:	2200      	movs	r2, #0
 800a58c:	602a      	str	r2, [r5, #0]
 800a58e:	461a      	mov	r2, r3
 800a590:	f7f7 fa10 	bl	80019b4 <_read>
 800a594:	1c43      	adds	r3, r0, #1
 800a596:	d102      	bne.n	800a59e <_read_r+0x1e>
 800a598:	682b      	ldr	r3, [r5, #0]
 800a59a:	b103      	cbz	r3, 800a59e <_read_r+0x1e>
 800a59c:	6023      	str	r3, [r4, #0]
 800a59e:	bd38      	pop	{r3, r4, r5, pc}
 800a5a0:	20000870 	.word	0x20000870

0800a5a4 <_write_r>:
 800a5a4:	b538      	push	{r3, r4, r5, lr}
 800a5a6:	4d07      	ldr	r5, [pc, #28]	; (800a5c4 <_write_r+0x20>)
 800a5a8:	4604      	mov	r4, r0
 800a5aa:	4608      	mov	r0, r1
 800a5ac:	4611      	mov	r1, r2
 800a5ae:	2200      	movs	r2, #0
 800a5b0:	602a      	str	r2, [r5, #0]
 800a5b2:	461a      	mov	r2, r3
 800a5b4:	f7f7 fa1b 	bl	80019ee <_write>
 800a5b8:	1c43      	adds	r3, r0, #1
 800a5ba:	d102      	bne.n	800a5c2 <_write_r+0x1e>
 800a5bc:	682b      	ldr	r3, [r5, #0]
 800a5be:	b103      	cbz	r3, 800a5c2 <_write_r+0x1e>
 800a5c0:	6023      	str	r3, [r4, #0]
 800a5c2:	bd38      	pop	{r3, r4, r5, pc}
 800a5c4:	20000870 	.word	0x20000870

0800a5c8 <__errno>:
 800a5c8:	4b01      	ldr	r3, [pc, #4]	; (800a5d0 <__errno+0x8>)
 800a5ca:	6818      	ldr	r0, [r3, #0]
 800a5cc:	4770      	bx	lr
 800a5ce:	bf00      	nop
 800a5d0:	20000128 	.word	0x20000128

0800a5d4 <__libc_init_array>:
 800a5d4:	b570      	push	{r4, r5, r6, lr}
 800a5d6:	4d0d      	ldr	r5, [pc, #52]	; (800a60c <__libc_init_array+0x38>)
 800a5d8:	4c0d      	ldr	r4, [pc, #52]	; (800a610 <__libc_init_array+0x3c>)
 800a5da:	1b64      	subs	r4, r4, r5
 800a5dc:	10a4      	asrs	r4, r4, #2
 800a5de:	2600      	movs	r6, #0
 800a5e0:	42a6      	cmp	r6, r4
 800a5e2:	d109      	bne.n	800a5f8 <__libc_init_array+0x24>
 800a5e4:	4d0b      	ldr	r5, [pc, #44]	; (800a614 <__libc_init_array+0x40>)
 800a5e6:	4c0c      	ldr	r4, [pc, #48]	; (800a618 <__libc_init_array+0x44>)
 800a5e8:	f002 f894 	bl	800c714 <_init>
 800a5ec:	1b64      	subs	r4, r4, r5
 800a5ee:	10a4      	asrs	r4, r4, #2
 800a5f0:	2600      	movs	r6, #0
 800a5f2:	42a6      	cmp	r6, r4
 800a5f4:	d105      	bne.n	800a602 <__libc_init_array+0x2e>
 800a5f6:	bd70      	pop	{r4, r5, r6, pc}
 800a5f8:	f855 3b04 	ldr.w	r3, [r5], #4
 800a5fc:	4798      	blx	r3
 800a5fe:	3601      	adds	r6, #1
 800a600:	e7ee      	b.n	800a5e0 <__libc_init_array+0xc>
 800a602:	f855 3b04 	ldr.w	r3, [r5], #4
 800a606:	4798      	blx	r3
 800a608:	3601      	adds	r6, #1
 800a60a:	e7f2      	b.n	800a5f2 <__libc_init_array+0x1e>
 800a60c:	0800cbd8 	.word	0x0800cbd8
 800a610:	0800cbd8 	.word	0x0800cbd8
 800a614:	0800cbd8 	.word	0x0800cbd8
 800a618:	0800cbdc 	.word	0x0800cbdc

0800a61c <__retarget_lock_acquire_recursive>:
 800a61c:	4770      	bx	lr

0800a61e <__retarget_lock_release_recursive>:
 800a61e:	4770      	bx	lr

0800a620 <__assert_func>:
 800a620:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a622:	4614      	mov	r4, r2
 800a624:	461a      	mov	r2, r3
 800a626:	4b09      	ldr	r3, [pc, #36]	; (800a64c <__assert_func+0x2c>)
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	4605      	mov	r5, r0
 800a62c:	68d8      	ldr	r0, [r3, #12]
 800a62e:	b14c      	cbz	r4, 800a644 <__assert_func+0x24>
 800a630:	4b07      	ldr	r3, [pc, #28]	; (800a650 <__assert_func+0x30>)
 800a632:	9100      	str	r1, [sp, #0]
 800a634:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a638:	4906      	ldr	r1, [pc, #24]	; (800a654 <__assert_func+0x34>)
 800a63a:	462b      	mov	r3, r5
 800a63c:	f001 fd0c 	bl	800c058 <fiprintf>
 800a640:	f001 fd54 	bl	800c0ec <abort>
 800a644:	4b04      	ldr	r3, [pc, #16]	; (800a658 <__assert_func+0x38>)
 800a646:	461c      	mov	r4, r3
 800a648:	e7f3      	b.n	800a632 <__assert_func+0x12>
 800a64a:	bf00      	nop
 800a64c:	20000128 	.word	0x20000128
 800a650:	0800c9a6 	.word	0x0800c9a6
 800a654:	0800c9b3 	.word	0x0800c9b3
 800a658:	0800c9e1 	.word	0x0800c9e1

0800a65c <quorem>:
 800a65c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a660:	6903      	ldr	r3, [r0, #16]
 800a662:	690c      	ldr	r4, [r1, #16]
 800a664:	42a3      	cmp	r3, r4
 800a666:	4607      	mov	r7, r0
 800a668:	db7e      	blt.n	800a768 <quorem+0x10c>
 800a66a:	3c01      	subs	r4, #1
 800a66c:	f101 0814 	add.w	r8, r1, #20
 800a670:	f100 0514 	add.w	r5, r0, #20
 800a674:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a678:	9301      	str	r3, [sp, #4]
 800a67a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800a67e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a682:	3301      	adds	r3, #1
 800a684:	429a      	cmp	r2, r3
 800a686:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800a68a:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800a68e:	fbb2 f6f3 	udiv	r6, r2, r3
 800a692:	d331      	bcc.n	800a6f8 <quorem+0x9c>
 800a694:	f04f 0e00 	mov.w	lr, #0
 800a698:	4640      	mov	r0, r8
 800a69a:	46ac      	mov	ip, r5
 800a69c:	46f2      	mov	sl, lr
 800a69e:	f850 2b04 	ldr.w	r2, [r0], #4
 800a6a2:	b293      	uxth	r3, r2
 800a6a4:	fb06 e303 	mla	r3, r6, r3, lr
 800a6a8:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6ac:	0c1a      	lsrs	r2, r3, #16
 800a6ae:	b29b      	uxth	r3, r3
 800a6b0:	ebaa 0303 	sub.w	r3, sl, r3
 800a6b4:	f8dc a000 	ldr.w	sl, [ip]
 800a6b8:	fa13 f38a 	uxtah	r3, r3, sl
 800a6bc:	fb06 220e 	mla	r2, r6, lr, r2
 800a6c0:	9300      	str	r3, [sp, #0]
 800a6c2:	9b00      	ldr	r3, [sp, #0]
 800a6c4:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800a6c8:	b292      	uxth	r2, r2
 800a6ca:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800a6ce:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a6d2:	f8bd 3000 	ldrh.w	r3, [sp]
 800a6d6:	4581      	cmp	r9, r0
 800a6d8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a6dc:	f84c 3b04 	str.w	r3, [ip], #4
 800a6e0:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800a6e4:	d2db      	bcs.n	800a69e <quorem+0x42>
 800a6e6:	f855 300b 	ldr.w	r3, [r5, fp]
 800a6ea:	b92b      	cbnz	r3, 800a6f8 <quorem+0x9c>
 800a6ec:	9b01      	ldr	r3, [sp, #4]
 800a6ee:	3b04      	subs	r3, #4
 800a6f0:	429d      	cmp	r5, r3
 800a6f2:	461a      	mov	r2, r3
 800a6f4:	d32c      	bcc.n	800a750 <quorem+0xf4>
 800a6f6:	613c      	str	r4, [r7, #16]
 800a6f8:	4638      	mov	r0, r7
 800a6fa:	f001 f9a7 	bl	800ba4c <__mcmp>
 800a6fe:	2800      	cmp	r0, #0
 800a700:	db22      	blt.n	800a748 <quorem+0xec>
 800a702:	3601      	adds	r6, #1
 800a704:	4629      	mov	r1, r5
 800a706:	2000      	movs	r0, #0
 800a708:	f858 2b04 	ldr.w	r2, [r8], #4
 800a70c:	f8d1 c000 	ldr.w	ip, [r1]
 800a710:	b293      	uxth	r3, r2
 800a712:	1ac3      	subs	r3, r0, r3
 800a714:	0c12      	lsrs	r2, r2, #16
 800a716:	fa13 f38c 	uxtah	r3, r3, ip
 800a71a:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 800a71e:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800a722:	b29b      	uxth	r3, r3
 800a724:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800a728:	45c1      	cmp	r9, r8
 800a72a:	f841 3b04 	str.w	r3, [r1], #4
 800a72e:	ea4f 4022 	mov.w	r0, r2, asr #16
 800a732:	d2e9      	bcs.n	800a708 <quorem+0xac>
 800a734:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800a738:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800a73c:	b922      	cbnz	r2, 800a748 <quorem+0xec>
 800a73e:	3b04      	subs	r3, #4
 800a740:	429d      	cmp	r5, r3
 800a742:	461a      	mov	r2, r3
 800a744:	d30a      	bcc.n	800a75c <quorem+0x100>
 800a746:	613c      	str	r4, [r7, #16]
 800a748:	4630      	mov	r0, r6
 800a74a:	b003      	add	sp, #12
 800a74c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a750:	6812      	ldr	r2, [r2, #0]
 800a752:	3b04      	subs	r3, #4
 800a754:	2a00      	cmp	r2, #0
 800a756:	d1ce      	bne.n	800a6f6 <quorem+0x9a>
 800a758:	3c01      	subs	r4, #1
 800a75a:	e7c9      	b.n	800a6f0 <quorem+0x94>
 800a75c:	6812      	ldr	r2, [r2, #0]
 800a75e:	3b04      	subs	r3, #4
 800a760:	2a00      	cmp	r2, #0
 800a762:	d1f0      	bne.n	800a746 <quorem+0xea>
 800a764:	3c01      	subs	r4, #1
 800a766:	e7eb      	b.n	800a740 <quorem+0xe4>
 800a768:	2000      	movs	r0, #0
 800a76a:	e7ee      	b.n	800a74a <quorem+0xee>
 800a76c:	0000      	movs	r0, r0
	...

0800a770 <_dtoa_r>:
 800a770:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a774:	ed2d 8b04 	vpush	{d8-d9}
 800a778:	69c5      	ldr	r5, [r0, #28]
 800a77a:	b093      	sub	sp, #76	; 0x4c
 800a77c:	ed8d 0b02 	vstr	d0, [sp, #8]
 800a780:	ec57 6b10 	vmov	r6, r7, d0
 800a784:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800a788:	9107      	str	r1, [sp, #28]
 800a78a:	4604      	mov	r4, r0
 800a78c:	920a      	str	r2, [sp, #40]	; 0x28
 800a78e:	930d      	str	r3, [sp, #52]	; 0x34
 800a790:	b975      	cbnz	r5, 800a7b0 <_dtoa_r+0x40>
 800a792:	2010      	movs	r0, #16
 800a794:	f000 fe2a 	bl	800b3ec <malloc>
 800a798:	4602      	mov	r2, r0
 800a79a:	61e0      	str	r0, [r4, #28]
 800a79c:	b920      	cbnz	r0, 800a7a8 <_dtoa_r+0x38>
 800a79e:	4bae      	ldr	r3, [pc, #696]	; (800aa58 <_dtoa_r+0x2e8>)
 800a7a0:	21ef      	movs	r1, #239	; 0xef
 800a7a2:	48ae      	ldr	r0, [pc, #696]	; (800aa5c <_dtoa_r+0x2ec>)
 800a7a4:	f7ff ff3c 	bl	800a620 <__assert_func>
 800a7a8:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800a7ac:	6005      	str	r5, [r0, #0]
 800a7ae:	60c5      	str	r5, [r0, #12]
 800a7b0:	69e3      	ldr	r3, [r4, #28]
 800a7b2:	6819      	ldr	r1, [r3, #0]
 800a7b4:	b151      	cbz	r1, 800a7cc <_dtoa_r+0x5c>
 800a7b6:	685a      	ldr	r2, [r3, #4]
 800a7b8:	604a      	str	r2, [r1, #4]
 800a7ba:	2301      	movs	r3, #1
 800a7bc:	4093      	lsls	r3, r2
 800a7be:	608b      	str	r3, [r1, #8]
 800a7c0:	4620      	mov	r0, r4
 800a7c2:	f000 ff07 	bl	800b5d4 <_Bfree>
 800a7c6:	69e3      	ldr	r3, [r4, #28]
 800a7c8:	2200      	movs	r2, #0
 800a7ca:	601a      	str	r2, [r3, #0]
 800a7cc:	1e3b      	subs	r3, r7, #0
 800a7ce:	bfbb      	ittet	lt
 800a7d0:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800a7d4:	9303      	strlt	r3, [sp, #12]
 800a7d6:	2300      	movge	r3, #0
 800a7d8:	2201      	movlt	r2, #1
 800a7da:	bfac      	ite	ge
 800a7dc:	f8c8 3000 	strge.w	r3, [r8]
 800a7e0:	f8c8 2000 	strlt.w	r2, [r8]
 800a7e4:	4b9e      	ldr	r3, [pc, #632]	; (800aa60 <_dtoa_r+0x2f0>)
 800a7e6:	f8dd 800c 	ldr.w	r8, [sp, #12]
 800a7ea:	ea33 0308 	bics.w	r3, r3, r8
 800a7ee:	d11b      	bne.n	800a828 <_dtoa_r+0xb8>
 800a7f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a7f2:	f242 730f 	movw	r3, #9999	; 0x270f
 800a7f6:	6013      	str	r3, [r2, #0]
 800a7f8:	f3c8 0313 	ubfx	r3, r8, #0, #20
 800a7fc:	4333      	orrs	r3, r6
 800a7fe:	f000 8593 	beq.w	800b328 <_dtoa_r+0xbb8>
 800a802:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a804:	b963      	cbnz	r3, 800a820 <_dtoa_r+0xb0>
 800a806:	4b97      	ldr	r3, [pc, #604]	; (800aa64 <_dtoa_r+0x2f4>)
 800a808:	e027      	b.n	800a85a <_dtoa_r+0xea>
 800a80a:	4b97      	ldr	r3, [pc, #604]	; (800aa68 <_dtoa_r+0x2f8>)
 800a80c:	9300      	str	r3, [sp, #0]
 800a80e:	3308      	adds	r3, #8
 800a810:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a812:	6013      	str	r3, [r2, #0]
 800a814:	9800      	ldr	r0, [sp, #0]
 800a816:	b013      	add	sp, #76	; 0x4c
 800a818:	ecbd 8b04 	vpop	{d8-d9}
 800a81c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a820:	4b90      	ldr	r3, [pc, #576]	; (800aa64 <_dtoa_r+0x2f4>)
 800a822:	9300      	str	r3, [sp, #0]
 800a824:	3303      	adds	r3, #3
 800a826:	e7f3      	b.n	800a810 <_dtoa_r+0xa0>
 800a828:	ed9d 7b02 	vldr	d7, [sp, #8]
 800a82c:	2200      	movs	r2, #0
 800a82e:	ec51 0b17 	vmov	r0, r1, d7
 800a832:	eeb0 8a47 	vmov.f32	s16, s14
 800a836:	eef0 8a67 	vmov.f32	s17, s15
 800a83a:	2300      	movs	r3, #0
 800a83c:	f7f6 f97c 	bl	8000b38 <__aeabi_dcmpeq>
 800a840:	4681      	mov	r9, r0
 800a842:	b160      	cbz	r0, 800a85e <_dtoa_r+0xee>
 800a844:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800a846:	2301      	movs	r3, #1
 800a848:	6013      	str	r3, [r2, #0]
 800a84a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	f000 8568 	beq.w	800b322 <_dtoa_r+0xbb2>
 800a852:	4b86      	ldr	r3, [pc, #536]	; (800aa6c <_dtoa_r+0x2fc>)
 800a854:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800a856:	6013      	str	r3, [r2, #0]
 800a858:	3b01      	subs	r3, #1
 800a85a:	9300      	str	r3, [sp, #0]
 800a85c:	e7da      	b.n	800a814 <_dtoa_r+0xa4>
 800a85e:	aa10      	add	r2, sp, #64	; 0x40
 800a860:	a911      	add	r1, sp, #68	; 0x44
 800a862:	4620      	mov	r0, r4
 800a864:	eeb0 0a48 	vmov.f32	s0, s16
 800a868:	eef0 0a68 	vmov.f32	s1, s17
 800a86c:	f001 f994 	bl	800bb98 <__d2b>
 800a870:	f3c8 550a 	ubfx	r5, r8, #20, #11
 800a874:	4682      	mov	sl, r0
 800a876:	2d00      	cmp	r5, #0
 800a878:	d07f      	beq.n	800a97a <_dtoa_r+0x20a>
 800a87a:	ee18 3a90 	vmov	r3, s17
 800a87e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a882:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800a886:	ec51 0b18 	vmov	r0, r1, d8
 800a88a:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800a88e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800a892:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 800a896:	4619      	mov	r1, r3
 800a898:	2200      	movs	r2, #0
 800a89a:	4b75      	ldr	r3, [pc, #468]	; (800aa70 <_dtoa_r+0x300>)
 800a89c:	f7f5 fd2c 	bl	80002f8 <__aeabi_dsub>
 800a8a0:	a367      	add	r3, pc, #412	; (adr r3, 800aa40 <_dtoa_r+0x2d0>)
 800a8a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8a6:	f7f5 fedf 	bl	8000668 <__aeabi_dmul>
 800a8aa:	a367      	add	r3, pc, #412	; (adr r3, 800aa48 <_dtoa_r+0x2d8>)
 800a8ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8b0:	f7f5 fd24 	bl	80002fc <__adddf3>
 800a8b4:	4606      	mov	r6, r0
 800a8b6:	4628      	mov	r0, r5
 800a8b8:	460f      	mov	r7, r1
 800a8ba:	f7f5 fe6b 	bl	8000594 <__aeabi_i2d>
 800a8be:	a364      	add	r3, pc, #400	; (adr r3, 800aa50 <_dtoa_r+0x2e0>)
 800a8c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a8c4:	f7f5 fed0 	bl	8000668 <__aeabi_dmul>
 800a8c8:	4602      	mov	r2, r0
 800a8ca:	460b      	mov	r3, r1
 800a8cc:	4630      	mov	r0, r6
 800a8ce:	4639      	mov	r1, r7
 800a8d0:	f7f5 fd14 	bl	80002fc <__adddf3>
 800a8d4:	4606      	mov	r6, r0
 800a8d6:	460f      	mov	r7, r1
 800a8d8:	f7f6 f976 	bl	8000bc8 <__aeabi_d2iz>
 800a8dc:	2200      	movs	r2, #0
 800a8de:	4683      	mov	fp, r0
 800a8e0:	2300      	movs	r3, #0
 800a8e2:	4630      	mov	r0, r6
 800a8e4:	4639      	mov	r1, r7
 800a8e6:	f7f6 f931 	bl	8000b4c <__aeabi_dcmplt>
 800a8ea:	b148      	cbz	r0, 800a900 <_dtoa_r+0x190>
 800a8ec:	4658      	mov	r0, fp
 800a8ee:	f7f5 fe51 	bl	8000594 <__aeabi_i2d>
 800a8f2:	4632      	mov	r2, r6
 800a8f4:	463b      	mov	r3, r7
 800a8f6:	f7f6 f91f 	bl	8000b38 <__aeabi_dcmpeq>
 800a8fa:	b908      	cbnz	r0, 800a900 <_dtoa_r+0x190>
 800a8fc:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a900:	f1bb 0f16 	cmp.w	fp, #22
 800a904:	d857      	bhi.n	800a9b6 <_dtoa_r+0x246>
 800a906:	4b5b      	ldr	r3, [pc, #364]	; (800aa74 <_dtoa_r+0x304>)
 800a908:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800a90c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a910:	ec51 0b18 	vmov	r0, r1, d8
 800a914:	f7f6 f91a 	bl	8000b4c <__aeabi_dcmplt>
 800a918:	2800      	cmp	r0, #0
 800a91a:	d04e      	beq.n	800a9ba <_dtoa_r+0x24a>
 800a91c:	f10b 3bff 	add.w	fp, fp, #4294967295
 800a920:	2300      	movs	r3, #0
 800a922:	930c      	str	r3, [sp, #48]	; 0x30
 800a924:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800a926:	1b5b      	subs	r3, r3, r5
 800a928:	1e5a      	subs	r2, r3, #1
 800a92a:	bf45      	ittet	mi
 800a92c:	f1c3 0301 	rsbmi	r3, r3, #1
 800a930:	9305      	strmi	r3, [sp, #20]
 800a932:	2300      	movpl	r3, #0
 800a934:	2300      	movmi	r3, #0
 800a936:	9206      	str	r2, [sp, #24]
 800a938:	bf54      	ite	pl
 800a93a:	9305      	strpl	r3, [sp, #20]
 800a93c:	9306      	strmi	r3, [sp, #24]
 800a93e:	f1bb 0f00 	cmp.w	fp, #0
 800a942:	db3c      	blt.n	800a9be <_dtoa_r+0x24e>
 800a944:	9b06      	ldr	r3, [sp, #24]
 800a946:	f8cd b02c 	str.w	fp, [sp, #44]	; 0x2c
 800a94a:	445b      	add	r3, fp
 800a94c:	9306      	str	r3, [sp, #24]
 800a94e:	2300      	movs	r3, #0
 800a950:	9308      	str	r3, [sp, #32]
 800a952:	9b07      	ldr	r3, [sp, #28]
 800a954:	2b09      	cmp	r3, #9
 800a956:	d868      	bhi.n	800aa2a <_dtoa_r+0x2ba>
 800a958:	2b05      	cmp	r3, #5
 800a95a:	bfc4      	itt	gt
 800a95c:	3b04      	subgt	r3, #4
 800a95e:	9307      	strgt	r3, [sp, #28]
 800a960:	9b07      	ldr	r3, [sp, #28]
 800a962:	f1a3 0302 	sub.w	r3, r3, #2
 800a966:	bfcc      	ite	gt
 800a968:	2500      	movgt	r5, #0
 800a96a:	2501      	movle	r5, #1
 800a96c:	2b03      	cmp	r3, #3
 800a96e:	f200 8085 	bhi.w	800aa7c <_dtoa_r+0x30c>
 800a972:	e8df f003 	tbb	[pc, r3]
 800a976:	3b2e      	.short	0x3b2e
 800a978:	5839      	.short	0x5839
 800a97a:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800a97e:	441d      	add	r5, r3
 800a980:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800a984:	2b20      	cmp	r3, #32
 800a986:	bfc1      	itttt	gt
 800a988:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800a98c:	fa08 f803 	lslgt.w	r8, r8, r3
 800a990:	f205 4312 	addwgt	r3, r5, #1042	; 0x412
 800a994:	fa26 f303 	lsrgt.w	r3, r6, r3
 800a998:	bfd6      	itet	le
 800a99a:	f1c3 0320 	rsble	r3, r3, #32
 800a99e:	ea48 0003 	orrgt.w	r0, r8, r3
 800a9a2:	fa06 f003 	lslle.w	r0, r6, r3
 800a9a6:	f7f5 fde5 	bl	8000574 <__aeabi_ui2d>
 800a9aa:	2201      	movs	r2, #1
 800a9ac:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800a9b0:	3d01      	subs	r5, #1
 800a9b2:	920e      	str	r2, [sp, #56]	; 0x38
 800a9b4:	e76f      	b.n	800a896 <_dtoa_r+0x126>
 800a9b6:	2301      	movs	r3, #1
 800a9b8:	e7b3      	b.n	800a922 <_dtoa_r+0x1b2>
 800a9ba:	900c      	str	r0, [sp, #48]	; 0x30
 800a9bc:	e7b2      	b.n	800a924 <_dtoa_r+0x1b4>
 800a9be:	9b05      	ldr	r3, [sp, #20]
 800a9c0:	eba3 030b 	sub.w	r3, r3, fp
 800a9c4:	9305      	str	r3, [sp, #20]
 800a9c6:	f1cb 0300 	rsb	r3, fp, #0
 800a9ca:	9308      	str	r3, [sp, #32]
 800a9cc:	2300      	movs	r3, #0
 800a9ce:	930b      	str	r3, [sp, #44]	; 0x2c
 800a9d0:	e7bf      	b.n	800a952 <_dtoa_r+0x1e2>
 800a9d2:	2300      	movs	r3, #0
 800a9d4:	9309      	str	r3, [sp, #36]	; 0x24
 800a9d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	dc52      	bgt.n	800aa82 <_dtoa_r+0x312>
 800a9dc:	2301      	movs	r3, #1
 800a9de:	9301      	str	r3, [sp, #4]
 800a9e0:	9304      	str	r3, [sp, #16]
 800a9e2:	461a      	mov	r2, r3
 800a9e4:	920a      	str	r2, [sp, #40]	; 0x28
 800a9e6:	e00b      	b.n	800aa00 <_dtoa_r+0x290>
 800a9e8:	2301      	movs	r3, #1
 800a9ea:	e7f3      	b.n	800a9d4 <_dtoa_r+0x264>
 800a9ec:	2300      	movs	r3, #0
 800a9ee:	9309      	str	r3, [sp, #36]	; 0x24
 800a9f0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a9f2:	445b      	add	r3, fp
 800a9f4:	9301      	str	r3, [sp, #4]
 800a9f6:	3301      	adds	r3, #1
 800a9f8:	2b01      	cmp	r3, #1
 800a9fa:	9304      	str	r3, [sp, #16]
 800a9fc:	bfb8      	it	lt
 800a9fe:	2301      	movlt	r3, #1
 800aa00:	69e0      	ldr	r0, [r4, #28]
 800aa02:	2100      	movs	r1, #0
 800aa04:	2204      	movs	r2, #4
 800aa06:	f102 0614 	add.w	r6, r2, #20
 800aa0a:	429e      	cmp	r6, r3
 800aa0c:	d93d      	bls.n	800aa8a <_dtoa_r+0x31a>
 800aa0e:	6041      	str	r1, [r0, #4]
 800aa10:	4620      	mov	r0, r4
 800aa12:	f000 fd9f 	bl	800b554 <_Balloc>
 800aa16:	9000      	str	r0, [sp, #0]
 800aa18:	2800      	cmp	r0, #0
 800aa1a:	d139      	bne.n	800aa90 <_dtoa_r+0x320>
 800aa1c:	4b16      	ldr	r3, [pc, #88]	; (800aa78 <_dtoa_r+0x308>)
 800aa1e:	4602      	mov	r2, r0
 800aa20:	f240 11af 	movw	r1, #431	; 0x1af
 800aa24:	e6bd      	b.n	800a7a2 <_dtoa_r+0x32>
 800aa26:	2301      	movs	r3, #1
 800aa28:	e7e1      	b.n	800a9ee <_dtoa_r+0x27e>
 800aa2a:	2501      	movs	r5, #1
 800aa2c:	2300      	movs	r3, #0
 800aa2e:	9307      	str	r3, [sp, #28]
 800aa30:	9509      	str	r5, [sp, #36]	; 0x24
 800aa32:	f04f 33ff 	mov.w	r3, #4294967295
 800aa36:	9301      	str	r3, [sp, #4]
 800aa38:	9304      	str	r3, [sp, #16]
 800aa3a:	2200      	movs	r2, #0
 800aa3c:	2312      	movs	r3, #18
 800aa3e:	e7d1      	b.n	800a9e4 <_dtoa_r+0x274>
 800aa40:	636f4361 	.word	0x636f4361
 800aa44:	3fd287a7 	.word	0x3fd287a7
 800aa48:	8b60c8b3 	.word	0x8b60c8b3
 800aa4c:	3fc68a28 	.word	0x3fc68a28
 800aa50:	509f79fb 	.word	0x509f79fb
 800aa54:	3fd34413 	.word	0x3fd34413
 800aa58:	0800c935 	.word	0x0800c935
 800aa5c:	0800c9ef 	.word	0x0800c9ef
 800aa60:	7ff00000 	.word	0x7ff00000
 800aa64:	0800c9eb 	.word	0x0800c9eb
 800aa68:	0800c9e2 	.word	0x0800c9e2
 800aa6c:	0800c912 	.word	0x0800c912
 800aa70:	3ff80000 	.word	0x3ff80000
 800aa74:	0800cae0 	.word	0x0800cae0
 800aa78:	0800ca47 	.word	0x0800ca47
 800aa7c:	2301      	movs	r3, #1
 800aa7e:	9309      	str	r3, [sp, #36]	; 0x24
 800aa80:	e7d7      	b.n	800aa32 <_dtoa_r+0x2c2>
 800aa82:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aa84:	9301      	str	r3, [sp, #4]
 800aa86:	9304      	str	r3, [sp, #16]
 800aa88:	e7ba      	b.n	800aa00 <_dtoa_r+0x290>
 800aa8a:	3101      	adds	r1, #1
 800aa8c:	0052      	lsls	r2, r2, #1
 800aa8e:	e7ba      	b.n	800aa06 <_dtoa_r+0x296>
 800aa90:	69e3      	ldr	r3, [r4, #28]
 800aa92:	9a00      	ldr	r2, [sp, #0]
 800aa94:	601a      	str	r2, [r3, #0]
 800aa96:	9b04      	ldr	r3, [sp, #16]
 800aa98:	2b0e      	cmp	r3, #14
 800aa9a:	f200 80a8 	bhi.w	800abee <_dtoa_r+0x47e>
 800aa9e:	2d00      	cmp	r5, #0
 800aaa0:	f000 80a5 	beq.w	800abee <_dtoa_r+0x47e>
 800aaa4:	f1bb 0f00 	cmp.w	fp, #0
 800aaa8:	dd38      	ble.n	800ab1c <_dtoa_r+0x3ac>
 800aaaa:	4bc0      	ldr	r3, [pc, #768]	; (800adac <_dtoa_r+0x63c>)
 800aaac:	f00b 020f 	and.w	r2, fp, #15
 800aab0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800aab4:	f41b 7f80 	tst.w	fp, #256	; 0x100
 800aab8:	e9d3 6700 	ldrd	r6, r7, [r3]
 800aabc:	ea4f 182b 	mov.w	r8, fp, asr #4
 800aac0:	d019      	beq.n	800aaf6 <_dtoa_r+0x386>
 800aac2:	4bbb      	ldr	r3, [pc, #748]	; (800adb0 <_dtoa_r+0x640>)
 800aac4:	ec51 0b18 	vmov	r0, r1, d8
 800aac8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800aacc:	f7f5 fef6 	bl	80008bc <__aeabi_ddiv>
 800aad0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aad4:	f008 080f 	and.w	r8, r8, #15
 800aad8:	2503      	movs	r5, #3
 800aada:	f8df 92d4 	ldr.w	r9, [pc, #724]	; 800adb0 <_dtoa_r+0x640>
 800aade:	f1b8 0f00 	cmp.w	r8, #0
 800aae2:	d10a      	bne.n	800aafa <_dtoa_r+0x38a>
 800aae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800aae8:	4632      	mov	r2, r6
 800aaea:	463b      	mov	r3, r7
 800aaec:	f7f5 fee6 	bl	80008bc <__aeabi_ddiv>
 800aaf0:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800aaf4:	e02b      	b.n	800ab4e <_dtoa_r+0x3de>
 800aaf6:	2502      	movs	r5, #2
 800aaf8:	e7ef      	b.n	800aada <_dtoa_r+0x36a>
 800aafa:	f018 0f01 	tst.w	r8, #1
 800aafe:	d008      	beq.n	800ab12 <_dtoa_r+0x3a2>
 800ab00:	4630      	mov	r0, r6
 800ab02:	4639      	mov	r1, r7
 800ab04:	e9d9 2300 	ldrd	r2, r3, [r9]
 800ab08:	f7f5 fdae 	bl	8000668 <__aeabi_dmul>
 800ab0c:	3501      	adds	r5, #1
 800ab0e:	4606      	mov	r6, r0
 800ab10:	460f      	mov	r7, r1
 800ab12:	ea4f 0868 	mov.w	r8, r8, asr #1
 800ab16:	f109 0908 	add.w	r9, r9, #8
 800ab1a:	e7e0      	b.n	800aade <_dtoa_r+0x36e>
 800ab1c:	f000 809f 	beq.w	800ac5e <_dtoa_r+0x4ee>
 800ab20:	f1cb 0600 	rsb	r6, fp, #0
 800ab24:	4ba1      	ldr	r3, [pc, #644]	; (800adac <_dtoa_r+0x63c>)
 800ab26:	4fa2      	ldr	r7, [pc, #648]	; (800adb0 <_dtoa_r+0x640>)
 800ab28:	f006 020f 	and.w	r2, r6, #15
 800ab2c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ab30:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ab34:	ec51 0b18 	vmov	r0, r1, d8
 800ab38:	f7f5 fd96 	bl	8000668 <__aeabi_dmul>
 800ab3c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab40:	1136      	asrs	r6, r6, #4
 800ab42:	2300      	movs	r3, #0
 800ab44:	2502      	movs	r5, #2
 800ab46:	2e00      	cmp	r6, #0
 800ab48:	d17e      	bne.n	800ac48 <_dtoa_r+0x4d8>
 800ab4a:	2b00      	cmp	r3, #0
 800ab4c:	d1d0      	bne.n	800aaf0 <_dtoa_r+0x380>
 800ab4e:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ab50:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab54:	2b00      	cmp	r3, #0
 800ab56:	f000 8084 	beq.w	800ac62 <_dtoa_r+0x4f2>
 800ab5a:	4b96      	ldr	r3, [pc, #600]	; (800adb4 <_dtoa_r+0x644>)
 800ab5c:	2200      	movs	r2, #0
 800ab5e:	4640      	mov	r0, r8
 800ab60:	4649      	mov	r1, r9
 800ab62:	f7f5 fff3 	bl	8000b4c <__aeabi_dcmplt>
 800ab66:	2800      	cmp	r0, #0
 800ab68:	d07b      	beq.n	800ac62 <_dtoa_r+0x4f2>
 800ab6a:	9b04      	ldr	r3, [sp, #16]
 800ab6c:	2b00      	cmp	r3, #0
 800ab6e:	d078      	beq.n	800ac62 <_dtoa_r+0x4f2>
 800ab70:	9b01      	ldr	r3, [sp, #4]
 800ab72:	2b00      	cmp	r3, #0
 800ab74:	dd39      	ble.n	800abea <_dtoa_r+0x47a>
 800ab76:	4b90      	ldr	r3, [pc, #576]	; (800adb8 <_dtoa_r+0x648>)
 800ab78:	2200      	movs	r2, #0
 800ab7a:	4640      	mov	r0, r8
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	f7f5 fd73 	bl	8000668 <__aeabi_dmul>
 800ab82:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ab86:	9e01      	ldr	r6, [sp, #4]
 800ab88:	f10b 37ff 	add.w	r7, fp, #4294967295
 800ab8c:	3501      	adds	r5, #1
 800ab8e:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ab92:	4628      	mov	r0, r5
 800ab94:	f7f5 fcfe 	bl	8000594 <__aeabi_i2d>
 800ab98:	4642      	mov	r2, r8
 800ab9a:	464b      	mov	r3, r9
 800ab9c:	f7f5 fd64 	bl	8000668 <__aeabi_dmul>
 800aba0:	4b86      	ldr	r3, [pc, #536]	; (800adbc <_dtoa_r+0x64c>)
 800aba2:	2200      	movs	r2, #0
 800aba4:	f7f5 fbaa 	bl	80002fc <__adddf3>
 800aba8:	f1a1 7350 	sub.w	r3, r1, #54525952	; 0x3400000
 800abac:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800abb0:	9303      	str	r3, [sp, #12]
 800abb2:	2e00      	cmp	r6, #0
 800abb4:	d158      	bne.n	800ac68 <_dtoa_r+0x4f8>
 800abb6:	4b82      	ldr	r3, [pc, #520]	; (800adc0 <_dtoa_r+0x650>)
 800abb8:	2200      	movs	r2, #0
 800abba:	4640      	mov	r0, r8
 800abbc:	4649      	mov	r1, r9
 800abbe:	f7f5 fb9b 	bl	80002f8 <__aeabi_dsub>
 800abc2:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800abc6:	4680      	mov	r8, r0
 800abc8:	4689      	mov	r9, r1
 800abca:	f7f5 ffdd 	bl	8000b88 <__aeabi_dcmpgt>
 800abce:	2800      	cmp	r0, #0
 800abd0:	f040 8296 	bne.w	800b100 <_dtoa_r+0x990>
 800abd4:	e9dd 2102 	ldrd	r2, r1, [sp, #8]
 800abd8:	4640      	mov	r0, r8
 800abda:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800abde:	4649      	mov	r1, r9
 800abe0:	f7f5 ffb4 	bl	8000b4c <__aeabi_dcmplt>
 800abe4:	2800      	cmp	r0, #0
 800abe6:	f040 8289 	bne.w	800b0fc <_dtoa_r+0x98c>
 800abea:	ed8d 8b02 	vstr	d8, [sp, #8]
 800abee:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	f2c0 814e 	blt.w	800ae92 <_dtoa_r+0x722>
 800abf6:	f1bb 0f0e 	cmp.w	fp, #14
 800abfa:	f300 814a 	bgt.w	800ae92 <_dtoa_r+0x722>
 800abfe:	4b6b      	ldr	r3, [pc, #428]	; (800adac <_dtoa_r+0x63c>)
 800ac00:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800ac04:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ac08:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	f280 80dc 	bge.w	800adc8 <_dtoa_r+0x658>
 800ac10:	9b04      	ldr	r3, [sp, #16]
 800ac12:	2b00      	cmp	r3, #0
 800ac14:	f300 80d8 	bgt.w	800adc8 <_dtoa_r+0x658>
 800ac18:	f040 826f 	bne.w	800b0fa <_dtoa_r+0x98a>
 800ac1c:	4b68      	ldr	r3, [pc, #416]	; (800adc0 <_dtoa_r+0x650>)
 800ac1e:	2200      	movs	r2, #0
 800ac20:	4640      	mov	r0, r8
 800ac22:	4649      	mov	r1, r9
 800ac24:	f7f5 fd20 	bl	8000668 <__aeabi_dmul>
 800ac28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800ac2c:	f7f5 ffa2 	bl	8000b74 <__aeabi_dcmpge>
 800ac30:	9e04      	ldr	r6, [sp, #16]
 800ac32:	4637      	mov	r7, r6
 800ac34:	2800      	cmp	r0, #0
 800ac36:	f040 8245 	bne.w	800b0c4 <_dtoa_r+0x954>
 800ac3a:	9d00      	ldr	r5, [sp, #0]
 800ac3c:	2331      	movs	r3, #49	; 0x31
 800ac3e:	f805 3b01 	strb.w	r3, [r5], #1
 800ac42:	f10b 0b01 	add.w	fp, fp, #1
 800ac46:	e241      	b.n	800b0cc <_dtoa_r+0x95c>
 800ac48:	07f2      	lsls	r2, r6, #31
 800ac4a:	d505      	bpl.n	800ac58 <_dtoa_r+0x4e8>
 800ac4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ac50:	f7f5 fd0a 	bl	8000668 <__aeabi_dmul>
 800ac54:	3501      	adds	r5, #1
 800ac56:	2301      	movs	r3, #1
 800ac58:	1076      	asrs	r6, r6, #1
 800ac5a:	3708      	adds	r7, #8
 800ac5c:	e773      	b.n	800ab46 <_dtoa_r+0x3d6>
 800ac5e:	2502      	movs	r5, #2
 800ac60:	e775      	b.n	800ab4e <_dtoa_r+0x3de>
 800ac62:	9e04      	ldr	r6, [sp, #16]
 800ac64:	465f      	mov	r7, fp
 800ac66:	e792      	b.n	800ab8e <_dtoa_r+0x41e>
 800ac68:	9900      	ldr	r1, [sp, #0]
 800ac6a:	4b50      	ldr	r3, [pc, #320]	; (800adac <_dtoa_r+0x63c>)
 800ac6c:	ed9d 7b02 	vldr	d7, [sp, #8]
 800ac70:	4431      	add	r1, r6
 800ac72:	9102      	str	r1, [sp, #8]
 800ac74:	9909      	ldr	r1, [sp, #36]	; 0x24
 800ac76:	eeb0 9a47 	vmov.f32	s18, s14
 800ac7a:	eef0 9a67 	vmov.f32	s19, s15
 800ac7e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ac82:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ac86:	2900      	cmp	r1, #0
 800ac88:	d044      	beq.n	800ad14 <_dtoa_r+0x5a4>
 800ac8a:	494e      	ldr	r1, [pc, #312]	; (800adc4 <_dtoa_r+0x654>)
 800ac8c:	2000      	movs	r0, #0
 800ac8e:	f7f5 fe15 	bl	80008bc <__aeabi_ddiv>
 800ac92:	ec53 2b19 	vmov	r2, r3, d9
 800ac96:	f7f5 fb2f 	bl	80002f8 <__aeabi_dsub>
 800ac9a:	9d00      	ldr	r5, [sp, #0]
 800ac9c:	ec41 0b19 	vmov	d9, r0, r1
 800aca0:	4649      	mov	r1, r9
 800aca2:	4640      	mov	r0, r8
 800aca4:	f7f5 ff90 	bl	8000bc8 <__aeabi_d2iz>
 800aca8:	4606      	mov	r6, r0
 800acaa:	f7f5 fc73 	bl	8000594 <__aeabi_i2d>
 800acae:	4602      	mov	r2, r0
 800acb0:	460b      	mov	r3, r1
 800acb2:	4640      	mov	r0, r8
 800acb4:	4649      	mov	r1, r9
 800acb6:	f7f5 fb1f 	bl	80002f8 <__aeabi_dsub>
 800acba:	3630      	adds	r6, #48	; 0x30
 800acbc:	f805 6b01 	strb.w	r6, [r5], #1
 800acc0:	ec53 2b19 	vmov	r2, r3, d9
 800acc4:	4680      	mov	r8, r0
 800acc6:	4689      	mov	r9, r1
 800acc8:	f7f5 ff40 	bl	8000b4c <__aeabi_dcmplt>
 800accc:	2800      	cmp	r0, #0
 800acce:	d164      	bne.n	800ad9a <_dtoa_r+0x62a>
 800acd0:	4642      	mov	r2, r8
 800acd2:	464b      	mov	r3, r9
 800acd4:	4937      	ldr	r1, [pc, #220]	; (800adb4 <_dtoa_r+0x644>)
 800acd6:	2000      	movs	r0, #0
 800acd8:	f7f5 fb0e 	bl	80002f8 <__aeabi_dsub>
 800acdc:	ec53 2b19 	vmov	r2, r3, d9
 800ace0:	f7f5 ff34 	bl	8000b4c <__aeabi_dcmplt>
 800ace4:	2800      	cmp	r0, #0
 800ace6:	f040 80b6 	bne.w	800ae56 <_dtoa_r+0x6e6>
 800acea:	9b02      	ldr	r3, [sp, #8]
 800acec:	429d      	cmp	r5, r3
 800acee:	f43f af7c 	beq.w	800abea <_dtoa_r+0x47a>
 800acf2:	4b31      	ldr	r3, [pc, #196]	; (800adb8 <_dtoa_r+0x648>)
 800acf4:	ec51 0b19 	vmov	r0, r1, d9
 800acf8:	2200      	movs	r2, #0
 800acfa:	f7f5 fcb5 	bl	8000668 <__aeabi_dmul>
 800acfe:	4b2e      	ldr	r3, [pc, #184]	; (800adb8 <_dtoa_r+0x648>)
 800ad00:	ec41 0b19 	vmov	d9, r0, r1
 800ad04:	2200      	movs	r2, #0
 800ad06:	4640      	mov	r0, r8
 800ad08:	4649      	mov	r1, r9
 800ad0a:	f7f5 fcad 	bl	8000668 <__aeabi_dmul>
 800ad0e:	4680      	mov	r8, r0
 800ad10:	4689      	mov	r9, r1
 800ad12:	e7c5      	b.n	800aca0 <_dtoa_r+0x530>
 800ad14:	ec51 0b17 	vmov	r0, r1, d7
 800ad18:	f7f5 fca6 	bl	8000668 <__aeabi_dmul>
 800ad1c:	9b02      	ldr	r3, [sp, #8]
 800ad1e:	9d00      	ldr	r5, [sp, #0]
 800ad20:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad22:	ec41 0b19 	vmov	d9, r0, r1
 800ad26:	4649      	mov	r1, r9
 800ad28:	4640      	mov	r0, r8
 800ad2a:	f7f5 ff4d 	bl	8000bc8 <__aeabi_d2iz>
 800ad2e:	4606      	mov	r6, r0
 800ad30:	f7f5 fc30 	bl	8000594 <__aeabi_i2d>
 800ad34:	3630      	adds	r6, #48	; 0x30
 800ad36:	4602      	mov	r2, r0
 800ad38:	460b      	mov	r3, r1
 800ad3a:	4640      	mov	r0, r8
 800ad3c:	4649      	mov	r1, r9
 800ad3e:	f7f5 fadb 	bl	80002f8 <__aeabi_dsub>
 800ad42:	f805 6b01 	strb.w	r6, [r5], #1
 800ad46:	9b02      	ldr	r3, [sp, #8]
 800ad48:	429d      	cmp	r5, r3
 800ad4a:	4680      	mov	r8, r0
 800ad4c:	4689      	mov	r9, r1
 800ad4e:	f04f 0200 	mov.w	r2, #0
 800ad52:	d124      	bne.n	800ad9e <_dtoa_r+0x62e>
 800ad54:	4b1b      	ldr	r3, [pc, #108]	; (800adc4 <_dtoa_r+0x654>)
 800ad56:	ec51 0b19 	vmov	r0, r1, d9
 800ad5a:	f7f5 facf 	bl	80002fc <__adddf3>
 800ad5e:	4602      	mov	r2, r0
 800ad60:	460b      	mov	r3, r1
 800ad62:	4640      	mov	r0, r8
 800ad64:	4649      	mov	r1, r9
 800ad66:	f7f5 ff0f 	bl	8000b88 <__aeabi_dcmpgt>
 800ad6a:	2800      	cmp	r0, #0
 800ad6c:	d173      	bne.n	800ae56 <_dtoa_r+0x6e6>
 800ad6e:	ec53 2b19 	vmov	r2, r3, d9
 800ad72:	4914      	ldr	r1, [pc, #80]	; (800adc4 <_dtoa_r+0x654>)
 800ad74:	2000      	movs	r0, #0
 800ad76:	f7f5 fabf 	bl	80002f8 <__aeabi_dsub>
 800ad7a:	4602      	mov	r2, r0
 800ad7c:	460b      	mov	r3, r1
 800ad7e:	4640      	mov	r0, r8
 800ad80:	4649      	mov	r1, r9
 800ad82:	f7f5 fee3 	bl	8000b4c <__aeabi_dcmplt>
 800ad86:	2800      	cmp	r0, #0
 800ad88:	f43f af2f 	beq.w	800abea <_dtoa_r+0x47a>
 800ad8c:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800ad8e:	1e6b      	subs	r3, r5, #1
 800ad90:	930f      	str	r3, [sp, #60]	; 0x3c
 800ad92:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800ad96:	2b30      	cmp	r3, #48	; 0x30
 800ad98:	d0f8      	beq.n	800ad8c <_dtoa_r+0x61c>
 800ad9a:	46bb      	mov	fp, r7
 800ad9c:	e04a      	b.n	800ae34 <_dtoa_r+0x6c4>
 800ad9e:	4b06      	ldr	r3, [pc, #24]	; (800adb8 <_dtoa_r+0x648>)
 800ada0:	f7f5 fc62 	bl	8000668 <__aeabi_dmul>
 800ada4:	4680      	mov	r8, r0
 800ada6:	4689      	mov	r9, r1
 800ada8:	e7bd      	b.n	800ad26 <_dtoa_r+0x5b6>
 800adaa:	bf00      	nop
 800adac:	0800cae0 	.word	0x0800cae0
 800adb0:	0800cab8 	.word	0x0800cab8
 800adb4:	3ff00000 	.word	0x3ff00000
 800adb8:	40240000 	.word	0x40240000
 800adbc:	401c0000 	.word	0x401c0000
 800adc0:	40140000 	.word	0x40140000
 800adc4:	3fe00000 	.word	0x3fe00000
 800adc8:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 800adcc:	9d00      	ldr	r5, [sp, #0]
 800adce:	4642      	mov	r2, r8
 800add0:	464b      	mov	r3, r9
 800add2:	4630      	mov	r0, r6
 800add4:	4639      	mov	r1, r7
 800add6:	f7f5 fd71 	bl	80008bc <__aeabi_ddiv>
 800adda:	f7f5 fef5 	bl	8000bc8 <__aeabi_d2iz>
 800adde:	9001      	str	r0, [sp, #4]
 800ade0:	f7f5 fbd8 	bl	8000594 <__aeabi_i2d>
 800ade4:	4642      	mov	r2, r8
 800ade6:	464b      	mov	r3, r9
 800ade8:	f7f5 fc3e 	bl	8000668 <__aeabi_dmul>
 800adec:	4602      	mov	r2, r0
 800adee:	460b      	mov	r3, r1
 800adf0:	4630      	mov	r0, r6
 800adf2:	4639      	mov	r1, r7
 800adf4:	f7f5 fa80 	bl	80002f8 <__aeabi_dsub>
 800adf8:	9e01      	ldr	r6, [sp, #4]
 800adfa:	9f04      	ldr	r7, [sp, #16]
 800adfc:	3630      	adds	r6, #48	; 0x30
 800adfe:	f805 6b01 	strb.w	r6, [r5], #1
 800ae02:	9e00      	ldr	r6, [sp, #0]
 800ae04:	1bae      	subs	r6, r5, r6
 800ae06:	42b7      	cmp	r7, r6
 800ae08:	4602      	mov	r2, r0
 800ae0a:	460b      	mov	r3, r1
 800ae0c:	d134      	bne.n	800ae78 <_dtoa_r+0x708>
 800ae0e:	f7f5 fa75 	bl	80002fc <__adddf3>
 800ae12:	4642      	mov	r2, r8
 800ae14:	464b      	mov	r3, r9
 800ae16:	4606      	mov	r6, r0
 800ae18:	460f      	mov	r7, r1
 800ae1a:	f7f5 feb5 	bl	8000b88 <__aeabi_dcmpgt>
 800ae1e:	b9c8      	cbnz	r0, 800ae54 <_dtoa_r+0x6e4>
 800ae20:	4642      	mov	r2, r8
 800ae22:	464b      	mov	r3, r9
 800ae24:	4630      	mov	r0, r6
 800ae26:	4639      	mov	r1, r7
 800ae28:	f7f5 fe86 	bl	8000b38 <__aeabi_dcmpeq>
 800ae2c:	b110      	cbz	r0, 800ae34 <_dtoa_r+0x6c4>
 800ae2e:	9b01      	ldr	r3, [sp, #4]
 800ae30:	07db      	lsls	r3, r3, #31
 800ae32:	d40f      	bmi.n	800ae54 <_dtoa_r+0x6e4>
 800ae34:	4651      	mov	r1, sl
 800ae36:	4620      	mov	r0, r4
 800ae38:	f000 fbcc 	bl	800b5d4 <_Bfree>
 800ae3c:	2300      	movs	r3, #0
 800ae3e:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ae40:	702b      	strb	r3, [r5, #0]
 800ae42:	f10b 0301 	add.w	r3, fp, #1
 800ae46:	6013      	str	r3, [r2, #0]
 800ae48:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ae4a:	2b00      	cmp	r3, #0
 800ae4c:	f43f ace2 	beq.w	800a814 <_dtoa_r+0xa4>
 800ae50:	601d      	str	r5, [r3, #0]
 800ae52:	e4df      	b.n	800a814 <_dtoa_r+0xa4>
 800ae54:	465f      	mov	r7, fp
 800ae56:	462b      	mov	r3, r5
 800ae58:	461d      	mov	r5, r3
 800ae5a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ae5e:	2a39      	cmp	r2, #57	; 0x39
 800ae60:	d106      	bne.n	800ae70 <_dtoa_r+0x700>
 800ae62:	9a00      	ldr	r2, [sp, #0]
 800ae64:	429a      	cmp	r2, r3
 800ae66:	d1f7      	bne.n	800ae58 <_dtoa_r+0x6e8>
 800ae68:	9900      	ldr	r1, [sp, #0]
 800ae6a:	2230      	movs	r2, #48	; 0x30
 800ae6c:	3701      	adds	r7, #1
 800ae6e:	700a      	strb	r2, [r1, #0]
 800ae70:	781a      	ldrb	r2, [r3, #0]
 800ae72:	3201      	adds	r2, #1
 800ae74:	701a      	strb	r2, [r3, #0]
 800ae76:	e790      	b.n	800ad9a <_dtoa_r+0x62a>
 800ae78:	4ba3      	ldr	r3, [pc, #652]	; (800b108 <_dtoa_r+0x998>)
 800ae7a:	2200      	movs	r2, #0
 800ae7c:	f7f5 fbf4 	bl	8000668 <__aeabi_dmul>
 800ae80:	2200      	movs	r2, #0
 800ae82:	2300      	movs	r3, #0
 800ae84:	4606      	mov	r6, r0
 800ae86:	460f      	mov	r7, r1
 800ae88:	f7f5 fe56 	bl	8000b38 <__aeabi_dcmpeq>
 800ae8c:	2800      	cmp	r0, #0
 800ae8e:	d09e      	beq.n	800adce <_dtoa_r+0x65e>
 800ae90:	e7d0      	b.n	800ae34 <_dtoa_r+0x6c4>
 800ae92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ae94:	2a00      	cmp	r2, #0
 800ae96:	f000 80ca 	beq.w	800b02e <_dtoa_r+0x8be>
 800ae9a:	9a07      	ldr	r2, [sp, #28]
 800ae9c:	2a01      	cmp	r2, #1
 800ae9e:	f300 80ad 	bgt.w	800affc <_dtoa_r+0x88c>
 800aea2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800aea4:	2a00      	cmp	r2, #0
 800aea6:	f000 80a5 	beq.w	800aff4 <_dtoa_r+0x884>
 800aeaa:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800aeae:	9e08      	ldr	r6, [sp, #32]
 800aeb0:	9d05      	ldr	r5, [sp, #20]
 800aeb2:	9a05      	ldr	r2, [sp, #20]
 800aeb4:	441a      	add	r2, r3
 800aeb6:	9205      	str	r2, [sp, #20]
 800aeb8:	9a06      	ldr	r2, [sp, #24]
 800aeba:	2101      	movs	r1, #1
 800aebc:	441a      	add	r2, r3
 800aebe:	4620      	mov	r0, r4
 800aec0:	9206      	str	r2, [sp, #24]
 800aec2:	f000 fc3d 	bl	800b740 <__i2b>
 800aec6:	4607      	mov	r7, r0
 800aec8:	b165      	cbz	r5, 800aee4 <_dtoa_r+0x774>
 800aeca:	9b06      	ldr	r3, [sp, #24]
 800aecc:	2b00      	cmp	r3, #0
 800aece:	dd09      	ble.n	800aee4 <_dtoa_r+0x774>
 800aed0:	42ab      	cmp	r3, r5
 800aed2:	9a05      	ldr	r2, [sp, #20]
 800aed4:	bfa8      	it	ge
 800aed6:	462b      	movge	r3, r5
 800aed8:	1ad2      	subs	r2, r2, r3
 800aeda:	9205      	str	r2, [sp, #20]
 800aedc:	9a06      	ldr	r2, [sp, #24]
 800aede:	1aed      	subs	r5, r5, r3
 800aee0:	1ad3      	subs	r3, r2, r3
 800aee2:	9306      	str	r3, [sp, #24]
 800aee4:	9b08      	ldr	r3, [sp, #32]
 800aee6:	b1f3      	cbz	r3, 800af26 <_dtoa_r+0x7b6>
 800aee8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800aeea:	2b00      	cmp	r3, #0
 800aeec:	f000 80a3 	beq.w	800b036 <_dtoa_r+0x8c6>
 800aef0:	2e00      	cmp	r6, #0
 800aef2:	dd10      	ble.n	800af16 <_dtoa_r+0x7a6>
 800aef4:	4639      	mov	r1, r7
 800aef6:	4632      	mov	r2, r6
 800aef8:	4620      	mov	r0, r4
 800aefa:	f000 fce1 	bl	800b8c0 <__pow5mult>
 800aefe:	4652      	mov	r2, sl
 800af00:	4601      	mov	r1, r0
 800af02:	4607      	mov	r7, r0
 800af04:	4620      	mov	r0, r4
 800af06:	f000 fc31 	bl	800b76c <__multiply>
 800af0a:	4651      	mov	r1, sl
 800af0c:	4680      	mov	r8, r0
 800af0e:	4620      	mov	r0, r4
 800af10:	f000 fb60 	bl	800b5d4 <_Bfree>
 800af14:	46c2      	mov	sl, r8
 800af16:	9b08      	ldr	r3, [sp, #32]
 800af18:	1b9a      	subs	r2, r3, r6
 800af1a:	d004      	beq.n	800af26 <_dtoa_r+0x7b6>
 800af1c:	4651      	mov	r1, sl
 800af1e:	4620      	mov	r0, r4
 800af20:	f000 fcce 	bl	800b8c0 <__pow5mult>
 800af24:	4682      	mov	sl, r0
 800af26:	2101      	movs	r1, #1
 800af28:	4620      	mov	r0, r4
 800af2a:	f000 fc09 	bl	800b740 <__i2b>
 800af2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800af30:	2b00      	cmp	r3, #0
 800af32:	4606      	mov	r6, r0
 800af34:	f340 8081 	ble.w	800b03a <_dtoa_r+0x8ca>
 800af38:	461a      	mov	r2, r3
 800af3a:	4601      	mov	r1, r0
 800af3c:	4620      	mov	r0, r4
 800af3e:	f000 fcbf 	bl	800b8c0 <__pow5mult>
 800af42:	9b07      	ldr	r3, [sp, #28]
 800af44:	2b01      	cmp	r3, #1
 800af46:	4606      	mov	r6, r0
 800af48:	dd7a      	ble.n	800b040 <_dtoa_r+0x8d0>
 800af4a:	f04f 0800 	mov.w	r8, #0
 800af4e:	6933      	ldr	r3, [r6, #16]
 800af50:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800af54:	6918      	ldr	r0, [r3, #16]
 800af56:	f000 fba5 	bl	800b6a4 <__hi0bits>
 800af5a:	f1c0 0020 	rsb	r0, r0, #32
 800af5e:	9b06      	ldr	r3, [sp, #24]
 800af60:	4418      	add	r0, r3
 800af62:	f010 001f 	ands.w	r0, r0, #31
 800af66:	f000 8094 	beq.w	800b092 <_dtoa_r+0x922>
 800af6a:	f1c0 0320 	rsb	r3, r0, #32
 800af6e:	2b04      	cmp	r3, #4
 800af70:	f340 8085 	ble.w	800b07e <_dtoa_r+0x90e>
 800af74:	9b05      	ldr	r3, [sp, #20]
 800af76:	f1c0 001c 	rsb	r0, r0, #28
 800af7a:	4403      	add	r3, r0
 800af7c:	9305      	str	r3, [sp, #20]
 800af7e:	9b06      	ldr	r3, [sp, #24]
 800af80:	4403      	add	r3, r0
 800af82:	4405      	add	r5, r0
 800af84:	9306      	str	r3, [sp, #24]
 800af86:	9b05      	ldr	r3, [sp, #20]
 800af88:	2b00      	cmp	r3, #0
 800af8a:	dd05      	ble.n	800af98 <_dtoa_r+0x828>
 800af8c:	4651      	mov	r1, sl
 800af8e:	461a      	mov	r2, r3
 800af90:	4620      	mov	r0, r4
 800af92:	f000 fcef 	bl	800b974 <__lshift>
 800af96:	4682      	mov	sl, r0
 800af98:	9b06      	ldr	r3, [sp, #24]
 800af9a:	2b00      	cmp	r3, #0
 800af9c:	dd05      	ble.n	800afaa <_dtoa_r+0x83a>
 800af9e:	4631      	mov	r1, r6
 800afa0:	461a      	mov	r2, r3
 800afa2:	4620      	mov	r0, r4
 800afa4:	f000 fce6 	bl	800b974 <__lshift>
 800afa8:	4606      	mov	r6, r0
 800afaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800afac:	2b00      	cmp	r3, #0
 800afae:	d072      	beq.n	800b096 <_dtoa_r+0x926>
 800afb0:	4631      	mov	r1, r6
 800afb2:	4650      	mov	r0, sl
 800afb4:	f000 fd4a 	bl	800ba4c <__mcmp>
 800afb8:	2800      	cmp	r0, #0
 800afba:	da6c      	bge.n	800b096 <_dtoa_r+0x926>
 800afbc:	2300      	movs	r3, #0
 800afbe:	4651      	mov	r1, sl
 800afc0:	220a      	movs	r2, #10
 800afc2:	4620      	mov	r0, r4
 800afc4:	f000 fb28 	bl	800b618 <__multadd>
 800afc8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800afca:	f10b 3bff 	add.w	fp, fp, #4294967295
 800afce:	4682      	mov	sl, r0
 800afd0:	2b00      	cmp	r3, #0
 800afd2:	f000 81b0 	beq.w	800b336 <_dtoa_r+0xbc6>
 800afd6:	2300      	movs	r3, #0
 800afd8:	4639      	mov	r1, r7
 800afda:	220a      	movs	r2, #10
 800afdc:	4620      	mov	r0, r4
 800afde:	f000 fb1b 	bl	800b618 <__multadd>
 800afe2:	9b01      	ldr	r3, [sp, #4]
 800afe4:	2b00      	cmp	r3, #0
 800afe6:	4607      	mov	r7, r0
 800afe8:	f300 8096 	bgt.w	800b118 <_dtoa_r+0x9a8>
 800afec:	9b07      	ldr	r3, [sp, #28]
 800afee:	2b02      	cmp	r3, #2
 800aff0:	dc59      	bgt.n	800b0a6 <_dtoa_r+0x936>
 800aff2:	e091      	b.n	800b118 <_dtoa_r+0x9a8>
 800aff4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800aff6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800affa:	e758      	b.n	800aeae <_dtoa_r+0x73e>
 800affc:	9b04      	ldr	r3, [sp, #16]
 800affe:	1e5e      	subs	r6, r3, #1
 800b000:	9b08      	ldr	r3, [sp, #32]
 800b002:	42b3      	cmp	r3, r6
 800b004:	bfbf      	itttt	lt
 800b006:	9b08      	ldrlt	r3, [sp, #32]
 800b008:	9a0b      	ldrlt	r2, [sp, #44]	; 0x2c
 800b00a:	9608      	strlt	r6, [sp, #32]
 800b00c:	1af3      	sublt	r3, r6, r3
 800b00e:	bfb4      	ite	lt
 800b010:	18d2      	addlt	r2, r2, r3
 800b012:	1b9e      	subge	r6, r3, r6
 800b014:	9b04      	ldr	r3, [sp, #16]
 800b016:	bfbc      	itt	lt
 800b018:	920b      	strlt	r2, [sp, #44]	; 0x2c
 800b01a:	2600      	movlt	r6, #0
 800b01c:	2b00      	cmp	r3, #0
 800b01e:	bfb7      	itett	lt
 800b020:	e9dd 2304 	ldrdlt	r2, r3, [sp, #16]
 800b024:	e9dd 3504 	ldrdge	r3, r5, [sp, #16]
 800b028:	1a9d      	sublt	r5, r3, r2
 800b02a:	2300      	movlt	r3, #0
 800b02c:	e741      	b.n	800aeb2 <_dtoa_r+0x742>
 800b02e:	9e08      	ldr	r6, [sp, #32]
 800b030:	9d05      	ldr	r5, [sp, #20]
 800b032:	9f09      	ldr	r7, [sp, #36]	; 0x24
 800b034:	e748      	b.n	800aec8 <_dtoa_r+0x758>
 800b036:	9a08      	ldr	r2, [sp, #32]
 800b038:	e770      	b.n	800af1c <_dtoa_r+0x7ac>
 800b03a:	9b07      	ldr	r3, [sp, #28]
 800b03c:	2b01      	cmp	r3, #1
 800b03e:	dc19      	bgt.n	800b074 <_dtoa_r+0x904>
 800b040:	9b02      	ldr	r3, [sp, #8]
 800b042:	b9bb      	cbnz	r3, 800b074 <_dtoa_r+0x904>
 800b044:	9b03      	ldr	r3, [sp, #12]
 800b046:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b04a:	b99b      	cbnz	r3, 800b074 <_dtoa_r+0x904>
 800b04c:	9b03      	ldr	r3, [sp, #12]
 800b04e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800b052:	0d1b      	lsrs	r3, r3, #20
 800b054:	051b      	lsls	r3, r3, #20
 800b056:	b183      	cbz	r3, 800b07a <_dtoa_r+0x90a>
 800b058:	9b05      	ldr	r3, [sp, #20]
 800b05a:	3301      	adds	r3, #1
 800b05c:	9305      	str	r3, [sp, #20]
 800b05e:	9b06      	ldr	r3, [sp, #24]
 800b060:	3301      	adds	r3, #1
 800b062:	9306      	str	r3, [sp, #24]
 800b064:	f04f 0801 	mov.w	r8, #1
 800b068:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b06a:	2b00      	cmp	r3, #0
 800b06c:	f47f af6f 	bne.w	800af4e <_dtoa_r+0x7de>
 800b070:	2001      	movs	r0, #1
 800b072:	e774      	b.n	800af5e <_dtoa_r+0x7ee>
 800b074:	f04f 0800 	mov.w	r8, #0
 800b078:	e7f6      	b.n	800b068 <_dtoa_r+0x8f8>
 800b07a:	4698      	mov	r8, r3
 800b07c:	e7f4      	b.n	800b068 <_dtoa_r+0x8f8>
 800b07e:	d082      	beq.n	800af86 <_dtoa_r+0x816>
 800b080:	9a05      	ldr	r2, [sp, #20]
 800b082:	331c      	adds	r3, #28
 800b084:	441a      	add	r2, r3
 800b086:	9205      	str	r2, [sp, #20]
 800b088:	9a06      	ldr	r2, [sp, #24]
 800b08a:	441a      	add	r2, r3
 800b08c:	441d      	add	r5, r3
 800b08e:	9206      	str	r2, [sp, #24]
 800b090:	e779      	b.n	800af86 <_dtoa_r+0x816>
 800b092:	4603      	mov	r3, r0
 800b094:	e7f4      	b.n	800b080 <_dtoa_r+0x910>
 800b096:	9b04      	ldr	r3, [sp, #16]
 800b098:	2b00      	cmp	r3, #0
 800b09a:	dc37      	bgt.n	800b10c <_dtoa_r+0x99c>
 800b09c:	9b07      	ldr	r3, [sp, #28]
 800b09e:	2b02      	cmp	r3, #2
 800b0a0:	dd34      	ble.n	800b10c <_dtoa_r+0x99c>
 800b0a2:	9b04      	ldr	r3, [sp, #16]
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	9b01      	ldr	r3, [sp, #4]
 800b0a8:	b963      	cbnz	r3, 800b0c4 <_dtoa_r+0x954>
 800b0aa:	4631      	mov	r1, r6
 800b0ac:	2205      	movs	r2, #5
 800b0ae:	4620      	mov	r0, r4
 800b0b0:	f000 fab2 	bl	800b618 <__multadd>
 800b0b4:	4601      	mov	r1, r0
 800b0b6:	4606      	mov	r6, r0
 800b0b8:	4650      	mov	r0, sl
 800b0ba:	f000 fcc7 	bl	800ba4c <__mcmp>
 800b0be:	2800      	cmp	r0, #0
 800b0c0:	f73f adbb 	bgt.w	800ac3a <_dtoa_r+0x4ca>
 800b0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0c6:	9d00      	ldr	r5, [sp, #0]
 800b0c8:	ea6f 0b03 	mvn.w	fp, r3
 800b0cc:	f04f 0800 	mov.w	r8, #0
 800b0d0:	4631      	mov	r1, r6
 800b0d2:	4620      	mov	r0, r4
 800b0d4:	f000 fa7e 	bl	800b5d4 <_Bfree>
 800b0d8:	2f00      	cmp	r7, #0
 800b0da:	f43f aeab 	beq.w	800ae34 <_dtoa_r+0x6c4>
 800b0de:	f1b8 0f00 	cmp.w	r8, #0
 800b0e2:	d005      	beq.n	800b0f0 <_dtoa_r+0x980>
 800b0e4:	45b8      	cmp	r8, r7
 800b0e6:	d003      	beq.n	800b0f0 <_dtoa_r+0x980>
 800b0e8:	4641      	mov	r1, r8
 800b0ea:	4620      	mov	r0, r4
 800b0ec:	f000 fa72 	bl	800b5d4 <_Bfree>
 800b0f0:	4639      	mov	r1, r7
 800b0f2:	4620      	mov	r0, r4
 800b0f4:	f000 fa6e 	bl	800b5d4 <_Bfree>
 800b0f8:	e69c      	b.n	800ae34 <_dtoa_r+0x6c4>
 800b0fa:	2600      	movs	r6, #0
 800b0fc:	4637      	mov	r7, r6
 800b0fe:	e7e1      	b.n	800b0c4 <_dtoa_r+0x954>
 800b100:	46bb      	mov	fp, r7
 800b102:	4637      	mov	r7, r6
 800b104:	e599      	b.n	800ac3a <_dtoa_r+0x4ca>
 800b106:	bf00      	nop
 800b108:	40240000 	.word	0x40240000
 800b10c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b10e:	2b00      	cmp	r3, #0
 800b110:	f000 80c8 	beq.w	800b2a4 <_dtoa_r+0xb34>
 800b114:	9b04      	ldr	r3, [sp, #16]
 800b116:	9301      	str	r3, [sp, #4]
 800b118:	2d00      	cmp	r5, #0
 800b11a:	dd05      	ble.n	800b128 <_dtoa_r+0x9b8>
 800b11c:	4639      	mov	r1, r7
 800b11e:	462a      	mov	r2, r5
 800b120:	4620      	mov	r0, r4
 800b122:	f000 fc27 	bl	800b974 <__lshift>
 800b126:	4607      	mov	r7, r0
 800b128:	f1b8 0f00 	cmp.w	r8, #0
 800b12c:	d05b      	beq.n	800b1e6 <_dtoa_r+0xa76>
 800b12e:	6879      	ldr	r1, [r7, #4]
 800b130:	4620      	mov	r0, r4
 800b132:	f000 fa0f 	bl	800b554 <_Balloc>
 800b136:	4605      	mov	r5, r0
 800b138:	b928      	cbnz	r0, 800b146 <_dtoa_r+0x9d6>
 800b13a:	4b83      	ldr	r3, [pc, #524]	; (800b348 <_dtoa_r+0xbd8>)
 800b13c:	4602      	mov	r2, r0
 800b13e:	f240 21ef 	movw	r1, #751	; 0x2ef
 800b142:	f7ff bb2e 	b.w	800a7a2 <_dtoa_r+0x32>
 800b146:	693a      	ldr	r2, [r7, #16]
 800b148:	3202      	adds	r2, #2
 800b14a:	0092      	lsls	r2, r2, #2
 800b14c:	f107 010c 	add.w	r1, r7, #12
 800b150:	300c      	adds	r0, #12
 800b152:	f000 ffbd 	bl	800c0d0 <memcpy>
 800b156:	2201      	movs	r2, #1
 800b158:	4629      	mov	r1, r5
 800b15a:	4620      	mov	r0, r4
 800b15c:	f000 fc0a 	bl	800b974 <__lshift>
 800b160:	9b00      	ldr	r3, [sp, #0]
 800b162:	3301      	adds	r3, #1
 800b164:	9304      	str	r3, [sp, #16]
 800b166:	e9dd 2300 	ldrd	r2, r3, [sp]
 800b16a:	4413      	add	r3, r2
 800b16c:	9308      	str	r3, [sp, #32]
 800b16e:	9b02      	ldr	r3, [sp, #8]
 800b170:	f003 0301 	and.w	r3, r3, #1
 800b174:	46b8      	mov	r8, r7
 800b176:	9306      	str	r3, [sp, #24]
 800b178:	4607      	mov	r7, r0
 800b17a:	9b04      	ldr	r3, [sp, #16]
 800b17c:	4631      	mov	r1, r6
 800b17e:	3b01      	subs	r3, #1
 800b180:	4650      	mov	r0, sl
 800b182:	9301      	str	r3, [sp, #4]
 800b184:	f7ff fa6a 	bl	800a65c <quorem>
 800b188:	4641      	mov	r1, r8
 800b18a:	9002      	str	r0, [sp, #8]
 800b18c:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b190:	4650      	mov	r0, sl
 800b192:	f000 fc5b 	bl	800ba4c <__mcmp>
 800b196:	463a      	mov	r2, r7
 800b198:	9005      	str	r0, [sp, #20]
 800b19a:	4631      	mov	r1, r6
 800b19c:	4620      	mov	r0, r4
 800b19e:	f000 fc71 	bl	800ba84 <__mdiff>
 800b1a2:	68c2      	ldr	r2, [r0, #12]
 800b1a4:	4605      	mov	r5, r0
 800b1a6:	bb02      	cbnz	r2, 800b1ea <_dtoa_r+0xa7a>
 800b1a8:	4601      	mov	r1, r0
 800b1aa:	4650      	mov	r0, sl
 800b1ac:	f000 fc4e 	bl	800ba4c <__mcmp>
 800b1b0:	4602      	mov	r2, r0
 800b1b2:	4629      	mov	r1, r5
 800b1b4:	4620      	mov	r0, r4
 800b1b6:	9209      	str	r2, [sp, #36]	; 0x24
 800b1b8:	f000 fa0c 	bl	800b5d4 <_Bfree>
 800b1bc:	9b07      	ldr	r3, [sp, #28]
 800b1be:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b1c0:	9d04      	ldr	r5, [sp, #16]
 800b1c2:	ea43 0102 	orr.w	r1, r3, r2
 800b1c6:	9b06      	ldr	r3, [sp, #24]
 800b1c8:	4319      	orrs	r1, r3
 800b1ca:	d110      	bne.n	800b1ee <_dtoa_r+0xa7e>
 800b1cc:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b1d0:	d029      	beq.n	800b226 <_dtoa_r+0xab6>
 800b1d2:	9b05      	ldr	r3, [sp, #20]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	dd02      	ble.n	800b1de <_dtoa_r+0xa6e>
 800b1d8:	9b02      	ldr	r3, [sp, #8]
 800b1da:	f103 0931 	add.w	r9, r3, #49	; 0x31
 800b1de:	9b01      	ldr	r3, [sp, #4]
 800b1e0:	f883 9000 	strb.w	r9, [r3]
 800b1e4:	e774      	b.n	800b0d0 <_dtoa_r+0x960>
 800b1e6:	4638      	mov	r0, r7
 800b1e8:	e7ba      	b.n	800b160 <_dtoa_r+0x9f0>
 800b1ea:	2201      	movs	r2, #1
 800b1ec:	e7e1      	b.n	800b1b2 <_dtoa_r+0xa42>
 800b1ee:	9b05      	ldr	r3, [sp, #20]
 800b1f0:	2b00      	cmp	r3, #0
 800b1f2:	db04      	blt.n	800b1fe <_dtoa_r+0xa8e>
 800b1f4:	9907      	ldr	r1, [sp, #28]
 800b1f6:	430b      	orrs	r3, r1
 800b1f8:	9906      	ldr	r1, [sp, #24]
 800b1fa:	430b      	orrs	r3, r1
 800b1fc:	d120      	bne.n	800b240 <_dtoa_r+0xad0>
 800b1fe:	2a00      	cmp	r2, #0
 800b200:	dded      	ble.n	800b1de <_dtoa_r+0xa6e>
 800b202:	4651      	mov	r1, sl
 800b204:	2201      	movs	r2, #1
 800b206:	4620      	mov	r0, r4
 800b208:	f000 fbb4 	bl	800b974 <__lshift>
 800b20c:	4631      	mov	r1, r6
 800b20e:	4682      	mov	sl, r0
 800b210:	f000 fc1c 	bl	800ba4c <__mcmp>
 800b214:	2800      	cmp	r0, #0
 800b216:	dc03      	bgt.n	800b220 <_dtoa_r+0xab0>
 800b218:	d1e1      	bne.n	800b1de <_dtoa_r+0xa6e>
 800b21a:	f019 0f01 	tst.w	r9, #1
 800b21e:	d0de      	beq.n	800b1de <_dtoa_r+0xa6e>
 800b220:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b224:	d1d8      	bne.n	800b1d8 <_dtoa_r+0xa68>
 800b226:	9a01      	ldr	r2, [sp, #4]
 800b228:	2339      	movs	r3, #57	; 0x39
 800b22a:	7013      	strb	r3, [r2, #0]
 800b22c:	462b      	mov	r3, r5
 800b22e:	461d      	mov	r5, r3
 800b230:	3b01      	subs	r3, #1
 800b232:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b236:	2a39      	cmp	r2, #57	; 0x39
 800b238:	d06c      	beq.n	800b314 <_dtoa_r+0xba4>
 800b23a:	3201      	adds	r2, #1
 800b23c:	701a      	strb	r2, [r3, #0]
 800b23e:	e747      	b.n	800b0d0 <_dtoa_r+0x960>
 800b240:	2a00      	cmp	r2, #0
 800b242:	dd07      	ble.n	800b254 <_dtoa_r+0xae4>
 800b244:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 800b248:	d0ed      	beq.n	800b226 <_dtoa_r+0xab6>
 800b24a:	9a01      	ldr	r2, [sp, #4]
 800b24c:	f109 0301 	add.w	r3, r9, #1
 800b250:	7013      	strb	r3, [r2, #0]
 800b252:	e73d      	b.n	800b0d0 <_dtoa_r+0x960>
 800b254:	9b04      	ldr	r3, [sp, #16]
 800b256:	9a08      	ldr	r2, [sp, #32]
 800b258:	f803 9c01 	strb.w	r9, [r3, #-1]
 800b25c:	4293      	cmp	r3, r2
 800b25e:	d043      	beq.n	800b2e8 <_dtoa_r+0xb78>
 800b260:	4651      	mov	r1, sl
 800b262:	2300      	movs	r3, #0
 800b264:	220a      	movs	r2, #10
 800b266:	4620      	mov	r0, r4
 800b268:	f000 f9d6 	bl	800b618 <__multadd>
 800b26c:	45b8      	cmp	r8, r7
 800b26e:	4682      	mov	sl, r0
 800b270:	f04f 0300 	mov.w	r3, #0
 800b274:	f04f 020a 	mov.w	r2, #10
 800b278:	4641      	mov	r1, r8
 800b27a:	4620      	mov	r0, r4
 800b27c:	d107      	bne.n	800b28e <_dtoa_r+0xb1e>
 800b27e:	f000 f9cb 	bl	800b618 <__multadd>
 800b282:	4680      	mov	r8, r0
 800b284:	4607      	mov	r7, r0
 800b286:	9b04      	ldr	r3, [sp, #16]
 800b288:	3301      	adds	r3, #1
 800b28a:	9304      	str	r3, [sp, #16]
 800b28c:	e775      	b.n	800b17a <_dtoa_r+0xa0a>
 800b28e:	f000 f9c3 	bl	800b618 <__multadd>
 800b292:	4639      	mov	r1, r7
 800b294:	4680      	mov	r8, r0
 800b296:	2300      	movs	r3, #0
 800b298:	220a      	movs	r2, #10
 800b29a:	4620      	mov	r0, r4
 800b29c:	f000 f9bc 	bl	800b618 <__multadd>
 800b2a0:	4607      	mov	r7, r0
 800b2a2:	e7f0      	b.n	800b286 <_dtoa_r+0xb16>
 800b2a4:	9b04      	ldr	r3, [sp, #16]
 800b2a6:	9301      	str	r3, [sp, #4]
 800b2a8:	9d00      	ldr	r5, [sp, #0]
 800b2aa:	4631      	mov	r1, r6
 800b2ac:	4650      	mov	r0, sl
 800b2ae:	f7ff f9d5 	bl	800a65c <quorem>
 800b2b2:	f100 0930 	add.w	r9, r0, #48	; 0x30
 800b2b6:	9b00      	ldr	r3, [sp, #0]
 800b2b8:	f805 9b01 	strb.w	r9, [r5], #1
 800b2bc:	1aea      	subs	r2, r5, r3
 800b2be:	9b01      	ldr	r3, [sp, #4]
 800b2c0:	4293      	cmp	r3, r2
 800b2c2:	dd07      	ble.n	800b2d4 <_dtoa_r+0xb64>
 800b2c4:	4651      	mov	r1, sl
 800b2c6:	2300      	movs	r3, #0
 800b2c8:	220a      	movs	r2, #10
 800b2ca:	4620      	mov	r0, r4
 800b2cc:	f000 f9a4 	bl	800b618 <__multadd>
 800b2d0:	4682      	mov	sl, r0
 800b2d2:	e7ea      	b.n	800b2aa <_dtoa_r+0xb3a>
 800b2d4:	9b01      	ldr	r3, [sp, #4]
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	bfc8      	it	gt
 800b2da:	461d      	movgt	r5, r3
 800b2dc:	9b00      	ldr	r3, [sp, #0]
 800b2de:	bfd8      	it	le
 800b2e0:	2501      	movle	r5, #1
 800b2e2:	441d      	add	r5, r3
 800b2e4:	f04f 0800 	mov.w	r8, #0
 800b2e8:	4651      	mov	r1, sl
 800b2ea:	2201      	movs	r2, #1
 800b2ec:	4620      	mov	r0, r4
 800b2ee:	f000 fb41 	bl	800b974 <__lshift>
 800b2f2:	4631      	mov	r1, r6
 800b2f4:	4682      	mov	sl, r0
 800b2f6:	f000 fba9 	bl	800ba4c <__mcmp>
 800b2fa:	2800      	cmp	r0, #0
 800b2fc:	dc96      	bgt.n	800b22c <_dtoa_r+0xabc>
 800b2fe:	d102      	bne.n	800b306 <_dtoa_r+0xb96>
 800b300:	f019 0f01 	tst.w	r9, #1
 800b304:	d192      	bne.n	800b22c <_dtoa_r+0xabc>
 800b306:	462b      	mov	r3, r5
 800b308:	461d      	mov	r5, r3
 800b30a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b30e:	2a30      	cmp	r2, #48	; 0x30
 800b310:	d0fa      	beq.n	800b308 <_dtoa_r+0xb98>
 800b312:	e6dd      	b.n	800b0d0 <_dtoa_r+0x960>
 800b314:	9a00      	ldr	r2, [sp, #0]
 800b316:	429a      	cmp	r2, r3
 800b318:	d189      	bne.n	800b22e <_dtoa_r+0xabe>
 800b31a:	f10b 0b01 	add.w	fp, fp, #1
 800b31e:	2331      	movs	r3, #49	; 0x31
 800b320:	e796      	b.n	800b250 <_dtoa_r+0xae0>
 800b322:	4b0a      	ldr	r3, [pc, #40]	; (800b34c <_dtoa_r+0xbdc>)
 800b324:	f7ff ba99 	b.w	800a85a <_dtoa_r+0xea>
 800b328:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b32a:	2b00      	cmp	r3, #0
 800b32c:	f47f aa6d 	bne.w	800a80a <_dtoa_r+0x9a>
 800b330:	4b07      	ldr	r3, [pc, #28]	; (800b350 <_dtoa_r+0xbe0>)
 800b332:	f7ff ba92 	b.w	800a85a <_dtoa_r+0xea>
 800b336:	9b01      	ldr	r3, [sp, #4]
 800b338:	2b00      	cmp	r3, #0
 800b33a:	dcb5      	bgt.n	800b2a8 <_dtoa_r+0xb38>
 800b33c:	9b07      	ldr	r3, [sp, #28]
 800b33e:	2b02      	cmp	r3, #2
 800b340:	f73f aeb1 	bgt.w	800b0a6 <_dtoa_r+0x936>
 800b344:	e7b0      	b.n	800b2a8 <_dtoa_r+0xb38>
 800b346:	bf00      	nop
 800b348:	0800ca47 	.word	0x0800ca47
 800b34c:	0800c911 	.word	0x0800c911
 800b350:	0800c9e2 	.word	0x0800c9e2

0800b354 <_free_r>:
 800b354:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b356:	2900      	cmp	r1, #0
 800b358:	d044      	beq.n	800b3e4 <_free_r+0x90>
 800b35a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b35e:	9001      	str	r0, [sp, #4]
 800b360:	2b00      	cmp	r3, #0
 800b362:	f1a1 0404 	sub.w	r4, r1, #4
 800b366:	bfb8      	it	lt
 800b368:	18e4      	addlt	r4, r4, r3
 800b36a:	f000 f8e7 	bl	800b53c <__malloc_lock>
 800b36e:	4a1e      	ldr	r2, [pc, #120]	; (800b3e8 <_free_r+0x94>)
 800b370:	9801      	ldr	r0, [sp, #4]
 800b372:	6813      	ldr	r3, [r2, #0]
 800b374:	b933      	cbnz	r3, 800b384 <_free_r+0x30>
 800b376:	6063      	str	r3, [r4, #4]
 800b378:	6014      	str	r4, [r2, #0]
 800b37a:	b003      	add	sp, #12
 800b37c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b380:	f000 b8e2 	b.w	800b548 <__malloc_unlock>
 800b384:	42a3      	cmp	r3, r4
 800b386:	d908      	bls.n	800b39a <_free_r+0x46>
 800b388:	6825      	ldr	r5, [r4, #0]
 800b38a:	1961      	adds	r1, r4, r5
 800b38c:	428b      	cmp	r3, r1
 800b38e:	bf01      	itttt	eq
 800b390:	6819      	ldreq	r1, [r3, #0]
 800b392:	685b      	ldreq	r3, [r3, #4]
 800b394:	1949      	addeq	r1, r1, r5
 800b396:	6021      	streq	r1, [r4, #0]
 800b398:	e7ed      	b.n	800b376 <_free_r+0x22>
 800b39a:	461a      	mov	r2, r3
 800b39c:	685b      	ldr	r3, [r3, #4]
 800b39e:	b10b      	cbz	r3, 800b3a4 <_free_r+0x50>
 800b3a0:	42a3      	cmp	r3, r4
 800b3a2:	d9fa      	bls.n	800b39a <_free_r+0x46>
 800b3a4:	6811      	ldr	r1, [r2, #0]
 800b3a6:	1855      	adds	r5, r2, r1
 800b3a8:	42a5      	cmp	r5, r4
 800b3aa:	d10b      	bne.n	800b3c4 <_free_r+0x70>
 800b3ac:	6824      	ldr	r4, [r4, #0]
 800b3ae:	4421      	add	r1, r4
 800b3b0:	1854      	adds	r4, r2, r1
 800b3b2:	42a3      	cmp	r3, r4
 800b3b4:	6011      	str	r1, [r2, #0]
 800b3b6:	d1e0      	bne.n	800b37a <_free_r+0x26>
 800b3b8:	681c      	ldr	r4, [r3, #0]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	6053      	str	r3, [r2, #4]
 800b3be:	440c      	add	r4, r1
 800b3c0:	6014      	str	r4, [r2, #0]
 800b3c2:	e7da      	b.n	800b37a <_free_r+0x26>
 800b3c4:	d902      	bls.n	800b3cc <_free_r+0x78>
 800b3c6:	230c      	movs	r3, #12
 800b3c8:	6003      	str	r3, [r0, #0]
 800b3ca:	e7d6      	b.n	800b37a <_free_r+0x26>
 800b3cc:	6825      	ldr	r5, [r4, #0]
 800b3ce:	1961      	adds	r1, r4, r5
 800b3d0:	428b      	cmp	r3, r1
 800b3d2:	bf04      	itt	eq
 800b3d4:	6819      	ldreq	r1, [r3, #0]
 800b3d6:	685b      	ldreq	r3, [r3, #4]
 800b3d8:	6063      	str	r3, [r4, #4]
 800b3da:	bf04      	itt	eq
 800b3dc:	1949      	addeq	r1, r1, r5
 800b3de:	6021      	streq	r1, [r4, #0]
 800b3e0:	6054      	str	r4, [r2, #4]
 800b3e2:	e7ca      	b.n	800b37a <_free_r+0x26>
 800b3e4:	b003      	add	sp, #12
 800b3e6:	bd30      	pop	{r4, r5, pc}
 800b3e8:	20000878 	.word	0x20000878

0800b3ec <malloc>:
 800b3ec:	4b02      	ldr	r3, [pc, #8]	; (800b3f8 <malloc+0xc>)
 800b3ee:	4601      	mov	r1, r0
 800b3f0:	6818      	ldr	r0, [r3, #0]
 800b3f2:	f000 b823 	b.w	800b43c <_malloc_r>
 800b3f6:	bf00      	nop
 800b3f8:	20000128 	.word	0x20000128

0800b3fc <sbrk_aligned>:
 800b3fc:	b570      	push	{r4, r5, r6, lr}
 800b3fe:	4e0e      	ldr	r6, [pc, #56]	; (800b438 <sbrk_aligned+0x3c>)
 800b400:	460c      	mov	r4, r1
 800b402:	6831      	ldr	r1, [r6, #0]
 800b404:	4605      	mov	r5, r0
 800b406:	b911      	cbnz	r1, 800b40e <sbrk_aligned+0x12>
 800b408:	f000 fe52 	bl	800c0b0 <_sbrk_r>
 800b40c:	6030      	str	r0, [r6, #0]
 800b40e:	4621      	mov	r1, r4
 800b410:	4628      	mov	r0, r5
 800b412:	f000 fe4d 	bl	800c0b0 <_sbrk_r>
 800b416:	1c43      	adds	r3, r0, #1
 800b418:	d00a      	beq.n	800b430 <sbrk_aligned+0x34>
 800b41a:	1cc4      	adds	r4, r0, #3
 800b41c:	f024 0403 	bic.w	r4, r4, #3
 800b420:	42a0      	cmp	r0, r4
 800b422:	d007      	beq.n	800b434 <sbrk_aligned+0x38>
 800b424:	1a21      	subs	r1, r4, r0
 800b426:	4628      	mov	r0, r5
 800b428:	f000 fe42 	bl	800c0b0 <_sbrk_r>
 800b42c:	3001      	adds	r0, #1
 800b42e:	d101      	bne.n	800b434 <sbrk_aligned+0x38>
 800b430:	f04f 34ff 	mov.w	r4, #4294967295
 800b434:	4620      	mov	r0, r4
 800b436:	bd70      	pop	{r4, r5, r6, pc}
 800b438:	2000087c 	.word	0x2000087c

0800b43c <_malloc_r>:
 800b43c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b440:	1ccd      	adds	r5, r1, #3
 800b442:	f025 0503 	bic.w	r5, r5, #3
 800b446:	3508      	adds	r5, #8
 800b448:	2d0c      	cmp	r5, #12
 800b44a:	bf38      	it	cc
 800b44c:	250c      	movcc	r5, #12
 800b44e:	2d00      	cmp	r5, #0
 800b450:	4607      	mov	r7, r0
 800b452:	db01      	blt.n	800b458 <_malloc_r+0x1c>
 800b454:	42a9      	cmp	r1, r5
 800b456:	d905      	bls.n	800b464 <_malloc_r+0x28>
 800b458:	230c      	movs	r3, #12
 800b45a:	603b      	str	r3, [r7, #0]
 800b45c:	2600      	movs	r6, #0
 800b45e:	4630      	mov	r0, r6
 800b460:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b464:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 800b538 <_malloc_r+0xfc>
 800b468:	f000 f868 	bl	800b53c <__malloc_lock>
 800b46c:	f8d8 3000 	ldr.w	r3, [r8]
 800b470:	461c      	mov	r4, r3
 800b472:	bb5c      	cbnz	r4, 800b4cc <_malloc_r+0x90>
 800b474:	4629      	mov	r1, r5
 800b476:	4638      	mov	r0, r7
 800b478:	f7ff ffc0 	bl	800b3fc <sbrk_aligned>
 800b47c:	1c43      	adds	r3, r0, #1
 800b47e:	4604      	mov	r4, r0
 800b480:	d155      	bne.n	800b52e <_malloc_r+0xf2>
 800b482:	f8d8 4000 	ldr.w	r4, [r8]
 800b486:	4626      	mov	r6, r4
 800b488:	2e00      	cmp	r6, #0
 800b48a:	d145      	bne.n	800b518 <_malloc_r+0xdc>
 800b48c:	2c00      	cmp	r4, #0
 800b48e:	d048      	beq.n	800b522 <_malloc_r+0xe6>
 800b490:	6823      	ldr	r3, [r4, #0]
 800b492:	4631      	mov	r1, r6
 800b494:	4638      	mov	r0, r7
 800b496:	eb04 0903 	add.w	r9, r4, r3
 800b49a:	f000 fe09 	bl	800c0b0 <_sbrk_r>
 800b49e:	4581      	cmp	r9, r0
 800b4a0:	d13f      	bne.n	800b522 <_malloc_r+0xe6>
 800b4a2:	6821      	ldr	r1, [r4, #0]
 800b4a4:	1a6d      	subs	r5, r5, r1
 800b4a6:	4629      	mov	r1, r5
 800b4a8:	4638      	mov	r0, r7
 800b4aa:	f7ff ffa7 	bl	800b3fc <sbrk_aligned>
 800b4ae:	3001      	adds	r0, #1
 800b4b0:	d037      	beq.n	800b522 <_malloc_r+0xe6>
 800b4b2:	6823      	ldr	r3, [r4, #0]
 800b4b4:	442b      	add	r3, r5
 800b4b6:	6023      	str	r3, [r4, #0]
 800b4b8:	f8d8 3000 	ldr.w	r3, [r8]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d038      	beq.n	800b532 <_malloc_r+0xf6>
 800b4c0:	685a      	ldr	r2, [r3, #4]
 800b4c2:	42a2      	cmp	r2, r4
 800b4c4:	d12b      	bne.n	800b51e <_malloc_r+0xe2>
 800b4c6:	2200      	movs	r2, #0
 800b4c8:	605a      	str	r2, [r3, #4]
 800b4ca:	e00f      	b.n	800b4ec <_malloc_r+0xb0>
 800b4cc:	6822      	ldr	r2, [r4, #0]
 800b4ce:	1b52      	subs	r2, r2, r5
 800b4d0:	d41f      	bmi.n	800b512 <_malloc_r+0xd6>
 800b4d2:	2a0b      	cmp	r2, #11
 800b4d4:	d917      	bls.n	800b506 <_malloc_r+0xca>
 800b4d6:	1961      	adds	r1, r4, r5
 800b4d8:	42a3      	cmp	r3, r4
 800b4da:	6025      	str	r5, [r4, #0]
 800b4dc:	bf18      	it	ne
 800b4de:	6059      	strne	r1, [r3, #4]
 800b4e0:	6863      	ldr	r3, [r4, #4]
 800b4e2:	bf08      	it	eq
 800b4e4:	f8c8 1000 	streq.w	r1, [r8]
 800b4e8:	5162      	str	r2, [r4, r5]
 800b4ea:	604b      	str	r3, [r1, #4]
 800b4ec:	4638      	mov	r0, r7
 800b4ee:	f104 060b 	add.w	r6, r4, #11
 800b4f2:	f000 f829 	bl	800b548 <__malloc_unlock>
 800b4f6:	f026 0607 	bic.w	r6, r6, #7
 800b4fa:	1d23      	adds	r3, r4, #4
 800b4fc:	1af2      	subs	r2, r6, r3
 800b4fe:	d0ae      	beq.n	800b45e <_malloc_r+0x22>
 800b500:	1b9b      	subs	r3, r3, r6
 800b502:	50a3      	str	r3, [r4, r2]
 800b504:	e7ab      	b.n	800b45e <_malloc_r+0x22>
 800b506:	42a3      	cmp	r3, r4
 800b508:	6862      	ldr	r2, [r4, #4]
 800b50a:	d1dd      	bne.n	800b4c8 <_malloc_r+0x8c>
 800b50c:	f8c8 2000 	str.w	r2, [r8]
 800b510:	e7ec      	b.n	800b4ec <_malloc_r+0xb0>
 800b512:	4623      	mov	r3, r4
 800b514:	6864      	ldr	r4, [r4, #4]
 800b516:	e7ac      	b.n	800b472 <_malloc_r+0x36>
 800b518:	4634      	mov	r4, r6
 800b51a:	6876      	ldr	r6, [r6, #4]
 800b51c:	e7b4      	b.n	800b488 <_malloc_r+0x4c>
 800b51e:	4613      	mov	r3, r2
 800b520:	e7cc      	b.n	800b4bc <_malloc_r+0x80>
 800b522:	230c      	movs	r3, #12
 800b524:	603b      	str	r3, [r7, #0]
 800b526:	4638      	mov	r0, r7
 800b528:	f000 f80e 	bl	800b548 <__malloc_unlock>
 800b52c:	e797      	b.n	800b45e <_malloc_r+0x22>
 800b52e:	6025      	str	r5, [r4, #0]
 800b530:	e7dc      	b.n	800b4ec <_malloc_r+0xb0>
 800b532:	605b      	str	r3, [r3, #4]
 800b534:	deff      	udf	#255	; 0xff
 800b536:	bf00      	nop
 800b538:	20000878 	.word	0x20000878

0800b53c <__malloc_lock>:
 800b53c:	4801      	ldr	r0, [pc, #4]	; (800b544 <__malloc_lock+0x8>)
 800b53e:	f7ff b86d 	b.w	800a61c <__retarget_lock_acquire_recursive>
 800b542:	bf00      	nop
 800b544:	20000874 	.word	0x20000874

0800b548 <__malloc_unlock>:
 800b548:	4801      	ldr	r0, [pc, #4]	; (800b550 <__malloc_unlock+0x8>)
 800b54a:	f7ff b868 	b.w	800a61e <__retarget_lock_release_recursive>
 800b54e:	bf00      	nop
 800b550:	20000874 	.word	0x20000874

0800b554 <_Balloc>:
 800b554:	b570      	push	{r4, r5, r6, lr}
 800b556:	69c6      	ldr	r6, [r0, #28]
 800b558:	4604      	mov	r4, r0
 800b55a:	460d      	mov	r5, r1
 800b55c:	b976      	cbnz	r6, 800b57c <_Balloc+0x28>
 800b55e:	2010      	movs	r0, #16
 800b560:	f7ff ff44 	bl	800b3ec <malloc>
 800b564:	4602      	mov	r2, r0
 800b566:	61e0      	str	r0, [r4, #28]
 800b568:	b920      	cbnz	r0, 800b574 <_Balloc+0x20>
 800b56a:	4b18      	ldr	r3, [pc, #96]	; (800b5cc <_Balloc+0x78>)
 800b56c:	4818      	ldr	r0, [pc, #96]	; (800b5d0 <_Balloc+0x7c>)
 800b56e:	216b      	movs	r1, #107	; 0x6b
 800b570:	f7ff f856 	bl	800a620 <__assert_func>
 800b574:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b578:	6006      	str	r6, [r0, #0]
 800b57a:	60c6      	str	r6, [r0, #12]
 800b57c:	69e6      	ldr	r6, [r4, #28]
 800b57e:	68f3      	ldr	r3, [r6, #12]
 800b580:	b183      	cbz	r3, 800b5a4 <_Balloc+0x50>
 800b582:	69e3      	ldr	r3, [r4, #28]
 800b584:	68db      	ldr	r3, [r3, #12]
 800b586:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800b58a:	b9b8      	cbnz	r0, 800b5bc <_Balloc+0x68>
 800b58c:	2101      	movs	r1, #1
 800b58e:	fa01 f605 	lsl.w	r6, r1, r5
 800b592:	1d72      	adds	r2, r6, #5
 800b594:	0092      	lsls	r2, r2, #2
 800b596:	4620      	mov	r0, r4
 800b598:	f000 fdaf 	bl	800c0fa <_calloc_r>
 800b59c:	b160      	cbz	r0, 800b5b8 <_Balloc+0x64>
 800b59e:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800b5a2:	e00e      	b.n	800b5c2 <_Balloc+0x6e>
 800b5a4:	2221      	movs	r2, #33	; 0x21
 800b5a6:	2104      	movs	r1, #4
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	f000 fda6 	bl	800c0fa <_calloc_r>
 800b5ae:	69e3      	ldr	r3, [r4, #28]
 800b5b0:	60f0      	str	r0, [r6, #12]
 800b5b2:	68db      	ldr	r3, [r3, #12]
 800b5b4:	2b00      	cmp	r3, #0
 800b5b6:	d1e4      	bne.n	800b582 <_Balloc+0x2e>
 800b5b8:	2000      	movs	r0, #0
 800b5ba:	bd70      	pop	{r4, r5, r6, pc}
 800b5bc:	6802      	ldr	r2, [r0, #0]
 800b5be:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800b5c2:	2300      	movs	r3, #0
 800b5c4:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800b5c8:	e7f7      	b.n	800b5ba <_Balloc+0x66>
 800b5ca:	bf00      	nop
 800b5cc:	0800c935 	.word	0x0800c935
 800b5d0:	0800ca58 	.word	0x0800ca58

0800b5d4 <_Bfree>:
 800b5d4:	b570      	push	{r4, r5, r6, lr}
 800b5d6:	69c6      	ldr	r6, [r0, #28]
 800b5d8:	4605      	mov	r5, r0
 800b5da:	460c      	mov	r4, r1
 800b5dc:	b976      	cbnz	r6, 800b5fc <_Bfree+0x28>
 800b5de:	2010      	movs	r0, #16
 800b5e0:	f7ff ff04 	bl	800b3ec <malloc>
 800b5e4:	4602      	mov	r2, r0
 800b5e6:	61e8      	str	r0, [r5, #28]
 800b5e8:	b920      	cbnz	r0, 800b5f4 <_Bfree+0x20>
 800b5ea:	4b09      	ldr	r3, [pc, #36]	; (800b610 <_Bfree+0x3c>)
 800b5ec:	4809      	ldr	r0, [pc, #36]	; (800b614 <_Bfree+0x40>)
 800b5ee:	218f      	movs	r1, #143	; 0x8f
 800b5f0:	f7ff f816 	bl	800a620 <__assert_func>
 800b5f4:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800b5f8:	6006      	str	r6, [r0, #0]
 800b5fa:	60c6      	str	r6, [r0, #12]
 800b5fc:	b13c      	cbz	r4, 800b60e <_Bfree+0x3a>
 800b5fe:	69eb      	ldr	r3, [r5, #28]
 800b600:	6862      	ldr	r2, [r4, #4]
 800b602:	68db      	ldr	r3, [r3, #12]
 800b604:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800b608:	6021      	str	r1, [r4, #0]
 800b60a:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800b60e:	bd70      	pop	{r4, r5, r6, pc}
 800b610:	0800c935 	.word	0x0800c935
 800b614:	0800ca58 	.word	0x0800ca58

0800b618 <__multadd>:
 800b618:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b61c:	690d      	ldr	r5, [r1, #16]
 800b61e:	4607      	mov	r7, r0
 800b620:	460c      	mov	r4, r1
 800b622:	461e      	mov	r6, r3
 800b624:	f101 0c14 	add.w	ip, r1, #20
 800b628:	2000      	movs	r0, #0
 800b62a:	f8dc 3000 	ldr.w	r3, [ip]
 800b62e:	b299      	uxth	r1, r3
 800b630:	fb02 6101 	mla	r1, r2, r1, r6
 800b634:	0c1e      	lsrs	r6, r3, #16
 800b636:	0c0b      	lsrs	r3, r1, #16
 800b638:	fb02 3306 	mla	r3, r2, r6, r3
 800b63c:	b289      	uxth	r1, r1
 800b63e:	3001      	adds	r0, #1
 800b640:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800b644:	4285      	cmp	r5, r0
 800b646:	f84c 1b04 	str.w	r1, [ip], #4
 800b64a:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800b64e:	dcec      	bgt.n	800b62a <__multadd+0x12>
 800b650:	b30e      	cbz	r6, 800b696 <__multadd+0x7e>
 800b652:	68a3      	ldr	r3, [r4, #8]
 800b654:	42ab      	cmp	r3, r5
 800b656:	dc19      	bgt.n	800b68c <__multadd+0x74>
 800b658:	6861      	ldr	r1, [r4, #4]
 800b65a:	4638      	mov	r0, r7
 800b65c:	3101      	adds	r1, #1
 800b65e:	f7ff ff79 	bl	800b554 <_Balloc>
 800b662:	4680      	mov	r8, r0
 800b664:	b928      	cbnz	r0, 800b672 <__multadd+0x5a>
 800b666:	4602      	mov	r2, r0
 800b668:	4b0c      	ldr	r3, [pc, #48]	; (800b69c <__multadd+0x84>)
 800b66a:	480d      	ldr	r0, [pc, #52]	; (800b6a0 <__multadd+0x88>)
 800b66c:	21ba      	movs	r1, #186	; 0xba
 800b66e:	f7fe ffd7 	bl	800a620 <__assert_func>
 800b672:	6922      	ldr	r2, [r4, #16]
 800b674:	3202      	adds	r2, #2
 800b676:	f104 010c 	add.w	r1, r4, #12
 800b67a:	0092      	lsls	r2, r2, #2
 800b67c:	300c      	adds	r0, #12
 800b67e:	f000 fd27 	bl	800c0d0 <memcpy>
 800b682:	4621      	mov	r1, r4
 800b684:	4638      	mov	r0, r7
 800b686:	f7ff ffa5 	bl	800b5d4 <_Bfree>
 800b68a:	4644      	mov	r4, r8
 800b68c:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800b690:	3501      	adds	r5, #1
 800b692:	615e      	str	r6, [r3, #20]
 800b694:	6125      	str	r5, [r4, #16]
 800b696:	4620      	mov	r0, r4
 800b698:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b69c:	0800ca47 	.word	0x0800ca47
 800b6a0:	0800ca58 	.word	0x0800ca58

0800b6a4 <__hi0bits>:
 800b6a4:	0c03      	lsrs	r3, r0, #16
 800b6a6:	041b      	lsls	r3, r3, #16
 800b6a8:	b9d3      	cbnz	r3, 800b6e0 <__hi0bits+0x3c>
 800b6aa:	0400      	lsls	r0, r0, #16
 800b6ac:	2310      	movs	r3, #16
 800b6ae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800b6b2:	bf04      	itt	eq
 800b6b4:	0200      	lsleq	r0, r0, #8
 800b6b6:	3308      	addeq	r3, #8
 800b6b8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800b6bc:	bf04      	itt	eq
 800b6be:	0100      	lsleq	r0, r0, #4
 800b6c0:	3304      	addeq	r3, #4
 800b6c2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800b6c6:	bf04      	itt	eq
 800b6c8:	0080      	lsleq	r0, r0, #2
 800b6ca:	3302      	addeq	r3, #2
 800b6cc:	2800      	cmp	r0, #0
 800b6ce:	db05      	blt.n	800b6dc <__hi0bits+0x38>
 800b6d0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800b6d4:	f103 0301 	add.w	r3, r3, #1
 800b6d8:	bf08      	it	eq
 800b6da:	2320      	moveq	r3, #32
 800b6dc:	4618      	mov	r0, r3
 800b6de:	4770      	bx	lr
 800b6e0:	2300      	movs	r3, #0
 800b6e2:	e7e4      	b.n	800b6ae <__hi0bits+0xa>

0800b6e4 <__lo0bits>:
 800b6e4:	6803      	ldr	r3, [r0, #0]
 800b6e6:	f013 0207 	ands.w	r2, r3, #7
 800b6ea:	d00c      	beq.n	800b706 <__lo0bits+0x22>
 800b6ec:	07d9      	lsls	r1, r3, #31
 800b6ee:	d422      	bmi.n	800b736 <__lo0bits+0x52>
 800b6f0:	079a      	lsls	r2, r3, #30
 800b6f2:	bf49      	itett	mi
 800b6f4:	085b      	lsrmi	r3, r3, #1
 800b6f6:	089b      	lsrpl	r3, r3, #2
 800b6f8:	6003      	strmi	r3, [r0, #0]
 800b6fa:	2201      	movmi	r2, #1
 800b6fc:	bf5c      	itt	pl
 800b6fe:	6003      	strpl	r3, [r0, #0]
 800b700:	2202      	movpl	r2, #2
 800b702:	4610      	mov	r0, r2
 800b704:	4770      	bx	lr
 800b706:	b299      	uxth	r1, r3
 800b708:	b909      	cbnz	r1, 800b70e <__lo0bits+0x2a>
 800b70a:	0c1b      	lsrs	r3, r3, #16
 800b70c:	2210      	movs	r2, #16
 800b70e:	b2d9      	uxtb	r1, r3
 800b710:	b909      	cbnz	r1, 800b716 <__lo0bits+0x32>
 800b712:	3208      	adds	r2, #8
 800b714:	0a1b      	lsrs	r3, r3, #8
 800b716:	0719      	lsls	r1, r3, #28
 800b718:	bf04      	itt	eq
 800b71a:	091b      	lsreq	r3, r3, #4
 800b71c:	3204      	addeq	r2, #4
 800b71e:	0799      	lsls	r1, r3, #30
 800b720:	bf04      	itt	eq
 800b722:	089b      	lsreq	r3, r3, #2
 800b724:	3202      	addeq	r2, #2
 800b726:	07d9      	lsls	r1, r3, #31
 800b728:	d403      	bmi.n	800b732 <__lo0bits+0x4e>
 800b72a:	085b      	lsrs	r3, r3, #1
 800b72c:	f102 0201 	add.w	r2, r2, #1
 800b730:	d003      	beq.n	800b73a <__lo0bits+0x56>
 800b732:	6003      	str	r3, [r0, #0]
 800b734:	e7e5      	b.n	800b702 <__lo0bits+0x1e>
 800b736:	2200      	movs	r2, #0
 800b738:	e7e3      	b.n	800b702 <__lo0bits+0x1e>
 800b73a:	2220      	movs	r2, #32
 800b73c:	e7e1      	b.n	800b702 <__lo0bits+0x1e>
	...

0800b740 <__i2b>:
 800b740:	b510      	push	{r4, lr}
 800b742:	460c      	mov	r4, r1
 800b744:	2101      	movs	r1, #1
 800b746:	f7ff ff05 	bl	800b554 <_Balloc>
 800b74a:	4602      	mov	r2, r0
 800b74c:	b928      	cbnz	r0, 800b75a <__i2b+0x1a>
 800b74e:	4b05      	ldr	r3, [pc, #20]	; (800b764 <__i2b+0x24>)
 800b750:	4805      	ldr	r0, [pc, #20]	; (800b768 <__i2b+0x28>)
 800b752:	f240 1145 	movw	r1, #325	; 0x145
 800b756:	f7fe ff63 	bl	800a620 <__assert_func>
 800b75a:	2301      	movs	r3, #1
 800b75c:	6144      	str	r4, [r0, #20]
 800b75e:	6103      	str	r3, [r0, #16]
 800b760:	bd10      	pop	{r4, pc}
 800b762:	bf00      	nop
 800b764:	0800ca47 	.word	0x0800ca47
 800b768:	0800ca58 	.word	0x0800ca58

0800b76c <__multiply>:
 800b76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b770:	4691      	mov	r9, r2
 800b772:	690a      	ldr	r2, [r1, #16]
 800b774:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b778:	429a      	cmp	r2, r3
 800b77a:	bfb8      	it	lt
 800b77c:	460b      	movlt	r3, r1
 800b77e:	460c      	mov	r4, r1
 800b780:	bfbc      	itt	lt
 800b782:	464c      	movlt	r4, r9
 800b784:	4699      	movlt	r9, r3
 800b786:	6927      	ldr	r7, [r4, #16]
 800b788:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800b78c:	68a3      	ldr	r3, [r4, #8]
 800b78e:	6861      	ldr	r1, [r4, #4]
 800b790:	eb07 060a 	add.w	r6, r7, sl
 800b794:	42b3      	cmp	r3, r6
 800b796:	b085      	sub	sp, #20
 800b798:	bfb8      	it	lt
 800b79a:	3101      	addlt	r1, #1
 800b79c:	f7ff feda 	bl	800b554 <_Balloc>
 800b7a0:	b930      	cbnz	r0, 800b7b0 <__multiply+0x44>
 800b7a2:	4602      	mov	r2, r0
 800b7a4:	4b44      	ldr	r3, [pc, #272]	; (800b8b8 <__multiply+0x14c>)
 800b7a6:	4845      	ldr	r0, [pc, #276]	; (800b8bc <__multiply+0x150>)
 800b7a8:	f44f 71b1 	mov.w	r1, #354	; 0x162
 800b7ac:	f7fe ff38 	bl	800a620 <__assert_func>
 800b7b0:	f100 0514 	add.w	r5, r0, #20
 800b7b4:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800b7b8:	462b      	mov	r3, r5
 800b7ba:	2200      	movs	r2, #0
 800b7bc:	4543      	cmp	r3, r8
 800b7be:	d321      	bcc.n	800b804 <__multiply+0x98>
 800b7c0:	f104 0314 	add.w	r3, r4, #20
 800b7c4:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800b7c8:	f109 0314 	add.w	r3, r9, #20
 800b7cc:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800b7d0:	9202      	str	r2, [sp, #8]
 800b7d2:	1b3a      	subs	r2, r7, r4
 800b7d4:	3a15      	subs	r2, #21
 800b7d6:	f022 0203 	bic.w	r2, r2, #3
 800b7da:	3204      	adds	r2, #4
 800b7dc:	f104 0115 	add.w	r1, r4, #21
 800b7e0:	428f      	cmp	r7, r1
 800b7e2:	bf38      	it	cc
 800b7e4:	2204      	movcc	r2, #4
 800b7e6:	9201      	str	r2, [sp, #4]
 800b7e8:	9a02      	ldr	r2, [sp, #8]
 800b7ea:	9303      	str	r3, [sp, #12]
 800b7ec:	429a      	cmp	r2, r3
 800b7ee:	d80c      	bhi.n	800b80a <__multiply+0x9e>
 800b7f0:	2e00      	cmp	r6, #0
 800b7f2:	dd03      	ble.n	800b7fc <__multiply+0x90>
 800b7f4:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	d05b      	beq.n	800b8b4 <__multiply+0x148>
 800b7fc:	6106      	str	r6, [r0, #16]
 800b7fe:	b005      	add	sp, #20
 800b800:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b804:	f843 2b04 	str.w	r2, [r3], #4
 800b808:	e7d8      	b.n	800b7bc <__multiply+0x50>
 800b80a:	f8b3 a000 	ldrh.w	sl, [r3]
 800b80e:	f1ba 0f00 	cmp.w	sl, #0
 800b812:	d024      	beq.n	800b85e <__multiply+0xf2>
 800b814:	f104 0e14 	add.w	lr, r4, #20
 800b818:	46a9      	mov	r9, r5
 800b81a:	f04f 0c00 	mov.w	ip, #0
 800b81e:	f85e 2b04 	ldr.w	r2, [lr], #4
 800b822:	f8d9 1000 	ldr.w	r1, [r9]
 800b826:	fa1f fb82 	uxth.w	fp, r2
 800b82a:	b289      	uxth	r1, r1
 800b82c:	fb0a 110b 	mla	r1, sl, fp, r1
 800b830:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800b834:	f8d9 2000 	ldr.w	r2, [r9]
 800b838:	4461      	add	r1, ip
 800b83a:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b83e:	fb0a c20b 	mla	r2, sl, fp, ip
 800b842:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800b846:	b289      	uxth	r1, r1
 800b848:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b84c:	4577      	cmp	r7, lr
 800b84e:	f849 1b04 	str.w	r1, [r9], #4
 800b852:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800b856:	d8e2      	bhi.n	800b81e <__multiply+0xb2>
 800b858:	9a01      	ldr	r2, [sp, #4]
 800b85a:	f845 c002 	str.w	ip, [r5, r2]
 800b85e:	9a03      	ldr	r2, [sp, #12]
 800b860:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800b864:	3304      	adds	r3, #4
 800b866:	f1b9 0f00 	cmp.w	r9, #0
 800b86a:	d021      	beq.n	800b8b0 <__multiply+0x144>
 800b86c:	6829      	ldr	r1, [r5, #0]
 800b86e:	f104 0c14 	add.w	ip, r4, #20
 800b872:	46ae      	mov	lr, r5
 800b874:	f04f 0a00 	mov.w	sl, #0
 800b878:	f8bc b000 	ldrh.w	fp, [ip]
 800b87c:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800b880:	fb09 220b 	mla	r2, r9, fp, r2
 800b884:	4452      	add	r2, sl
 800b886:	b289      	uxth	r1, r1
 800b888:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800b88c:	f84e 1b04 	str.w	r1, [lr], #4
 800b890:	f85c 1b04 	ldr.w	r1, [ip], #4
 800b894:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b898:	f8be 1000 	ldrh.w	r1, [lr]
 800b89c:	fb09 110a 	mla	r1, r9, sl, r1
 800b8a0:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800b8a4:	4567      	cmp	r7, ip
 800b8a6:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800b8aa:	d8e5      	bhi.n	800b878 <__multiply+0x10c>
 800b8ac:	9a01      	ldr	r2, [sp, #4]
 800b8ae:	50a9      	str	r1, [r5, r2]
 800b8b0:	3504      	adds	r5, #4
 800b8b2:	e799      	b.n	800b7e8 <__multiply+0x7c>
 800b8b4:	3e01      	subs	r6, #1
 800b8b6:	e79b      	b.n	800b7f0 <__multiply+0x84>
 800b8b8:	0800ca47 	.word	0x0800ca47
 800b8bc:	0800ca58 	.word	0x0800ca58

0800b8c0 <__pow5mult>:
 800b8c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800b8c4:	4615      	mov	r5, r2
 800b8c6:	f012 0203 	ands.w	r2, r2, #3
 800b8ca:	4606      	mov	r6, r0
 800b8cc:	460f      	mov	r7, r1
 800b8ce:	d007      	beq.n	800b8e0 <__pow5mult+0x20>
 800b8d0:	4c25      	ldr	r4, [pc, #148]	; (800b968 <__pow5mult+0xa8>)
 800b8d2:	3a01      	subs	r2, #1
 800b8d4:	2300      	movs	r3, #0
 800b8d6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800b8da:	f7ff fe9d 	bl	800b618 <__multadd>
 800b8de:	4607      	mov	r7, r0
 800b8e0:	10ad      	asrs	r5, r5, #2
 800b8e2:	d03d      	beq.n	800b960 <__pow5mult+0xa0>
 800b8e4:	69f4      	ldr	r4, [r6, #28]
 800b8e6:	b97c      	cbnz	r4, 800b908 <__pow5mult+0x48>
 800b8e8:	2010      	movs	r0, #16
 800b8ea:	f7ff fd7f 	bl	800b3ec <malloc>
 800b8ee:	4602      	mov	r2, r0
 800b8f0:	61f0      	str	r0, [r6, #28]
 800b8f2:	b928      	cbnz	r0, 800b900 <__pow5mult+0x40>
 800b8f4:	4b1d      	ldr	r3, [pc, #116]	; (800b96c <__pow5mult+0xac>)
 800b8f6:	481e      	ldr	r0, [pc, #120]	; (800b970 <__pow5mult+0xb0>)
 800b8f8:	f240 11b3 	movw	r1, #435	; 0x1b3
 800b8fc:	f7fe fe90 	bl	800a620 <__assert_func>
 800b900:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800b904:	6004      	str	r4, [r0, #0]
 800b906:	60c4      	str	r4, [r0, #12]
 800b908:	f8d6 801c 	ldr.w	r8, [r6, #28]
 800b90c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800b910:	b94c      	cbnz	r4, 800b926 <__pow5mult+0x66>
 800b912:	f240 2171 	movw	r1, #625	; 0x271
 800b916:	4630      	mov	r0, r6
 800b918:	f7ff ff12 	bl	800b740 <__i2b>
 800b91c:	2300      	movs	r3, #0
 800b91e:	f8c8 0008 	str.w	r0, [r8, #8]
 800b922:	4604      	mov	r4, r0
 800b924:	6003      	str	r3, [r0, #0]
 800b926:	f04f 0900 	mov.w	r9, #0
 800b92a:	07eb      	lsls	r3, r5, #31
 800b92c:	d50a      	bpl.n	800b944 <__pow5mult+0x84>
 800b92e:	4639      	mov	r1, r7
 800b930:	4622      	mov	r2, r4
 800b932:	4630      	mov	r0, r6
 800b934:	f7ff ff1a 	bl	800b76c <__multiply>
 800b938:	4639      	mov	r1, r7
 800b93a:	4680      	mov	r8, r0
 800b93c:	4630      	mov	r0, r6
 800b93e:	f7ff fe49 	bl	800b5d4 <_Bfree>
 800b942:	4647      	mov	r7, r8
 800b944:	106d      	asrs	r5, r5, #1
 800b946:	d00b      	beq.n	800b960 <__pow5mult+0xa0>
 800b948:	6820      	ldr	r0, [r4, #0]
 800b94a:	b938      	cbnz	r0, 800b95c <__pow5mult+0x9c>
 800b94c:	4622      	mov	r2, r4
 800b94e:	4621      	mov	r1, r4
 800b950:	4630      	mov	r0, r6
 800b952:	f7ff ff0b 	bl	800b76c <__multiply>
 800b956:	6020      	str	r0, [r4, #0]
 800b958:	f8c0 9000 	str.w	r9, [r0]
 800b95c:	4604      	mov	r4, r0
 800b95e:	e7e4      	b.n	800b92a <__pow5mult+0x6a>
 800b960:	4638      	mov	r0, r7
 800b962:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800b966:	bf00      	nop
 800b968:	0800cba8 	.word	0x0800cba8
 800b96c:	0800c935 	.word	0x0800c935
 800b970:	0800ca58 	.word	0x0800ca58

0800b974 <__lshift>:
 800b974:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b978:	460c      	mov	r4, r1
 800b97a:	6849      	ldr	r1, [r1, #4]
 800b97c:	6923      	ldr	r3, [r4, #16]
 800b97e:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800b982:	68a3      	ldr	r3, [r4, #8]
 800b984:	4607      	mov	r7, r0
 800b986:	4691      	mov	r9, r2
 800b988:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800b98c:	f108 0601 	add.w	r6, r8, #1
 800b990:	42b3      	cmp	r3, r6
 800b992:	db0b      	blt.n	800b9ac <__lshift+0x38>
 800b994:	4638      	mov	r0, r7
 800b996:	f7ff fddd 	bl	800b554 <_Balloc>
 800b99a:	4605      	mov	r5, r0
 800b99c:	b948      	cbnz	r0, 800b9b2 <__lshift+0x3e>
 800b99e:	4602      	mov	r2, r0
 800b9a0:	4b28      	ldr	r3, [pc, #160]	; (800ba44 <__lshift+0xd0>)
 800b9a2:	4829      	ldr	r0, [pc, #164]	; (800ba48 <__lshift+0xd4>)
 800b9a4:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800b9a8:	f7fe fe3a 	bl	800a620 <__assert_func>
 800b9ac:	3101      	adds	r1, #1
 800b9ae:	005b      	lsls	r3, r3, #1
 800b9b0:	e7ee      	b.n	800b990 <__lshift+0x1c>
 800b9b2:	2300      	movs	r3, #0
 800b9b4:	f100 0114 	add.w	r1, r0, #20
 800b9b8:	f100 0210 	add.w	r2, r0, #16
 800b9bc:	4618      	mov	r0, r3
 800b9be:	4553      	cmp	r3, sl
 800b9c0:	db33      	blt.n	800ba2a <__lshift+0xb6>
 800b9c2:	6920      	ldr	r0, [r4, #16]
 800b9c4:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800b9c8:	f104 0314 	add.w	r3, r4, #20
 800b9cc:	f019 091f 	ands.w	r9, r9, #31
 800b9d0:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800b9d4:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800b9d8:	d02b      	beq.n	800ba32 <__lshift+0xbe>
 800b9da:	f1c9 0e20 	rsb	lr, r9, #32
 800b9de:	468a      	mov	sl, r1
 800b9e0:	2200      	movs	r2, #0
 800b9e2:	6818      	ldr	r0, [r3, #0]
 800b9e4:	fa00 f009 	lsl.w	r0, r0, r9
 800b9e8:	4310      	orrs	r0, r2
 800b9ea:	f84a 0b04 	str.w	r0, [sl], #4
 800b9ee:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9f2:	459c      	cmp	ip, r3
 800b9f4:	fa22 f20e 	lsr.w	r2, r2, lr
 800b9f8:	d8f3      	bhi.n	800b9e2 <__lshift+0x6e>
 800b9fa:	ebac 0304 	sub.w	r3, ip, r4
 800b9fe:	3b15      	subs	r3, #21
 800ba00:	f023 0303 	bic.w	r3, r3, #3
 800ba04:	3304      	adds	r3, #4
 800ba06:	f104 0015 	add.w	r0, r4, #21
 800ba0a:	4584      	cmp	ip, r0
 800ba0c:	bf38      	it	cc
 800ba0e:	2304      	movcc	r3, #4
 800ba10:	50ca      	str	r2, [r1, r3]
 800ba12:	b10a      	cbz	r2, 800ba18 <__lshift+0xa4>
 800ba14:	f108 0602 	add.w	r6, r8, #2
 800ba18:	3e01      	subs	r6, #1
 800ba1a:	4638      	mov	r0, r7
 800ba1c:	612e      	str	r6, [r5, #16]
 800ba1e:	4621      	mov	r1, r4
 800ba20:	f7ff fdd8 	bl	800b5d4 <_Bfree>
 800ba24:	4628      	mov	r0, r5
 800ba26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ba2a:	f842 0f04 	str.w	r0, [r2, #4]!
 800ba2e:	3301      	adds	r3, #1
 800ba30:	e7c5      	b.n	800b9be <__lshift+0x4a>
 800ba32:	3904      	subs	r1, #4
 800ba34:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba38:	f841 2f04 	str.w	r2, [r1, #4]!
 800ba3c:	459c      	cmp	ip, r3
 800ba3e:	d8f9      	bhi.n	800ba34 <__lshift+0xc0>
 800ba40:	e7ea      	b.n	800ba18 <__lshift+0xa4>
 800ba42:	bf00      	nop
 800ba44:	0800ca47 	.word	0x0800ca47
 800ba48:	0800ca58 	.word	0x0800ca58

0800ba4c <__mcmp>:
 800ba4c:	b530      	push	{r4, r5, lr}
 800ba4e:	6902      	ldr	r2, [r0, #16]
 800ba50:	690c      	ldr	r4, [r1, #16]
 800ba52:	1b12      	subs	r2, r2, r4
 800ba54:	d10e      	bne.n	800ba74 <__mcmp+0x28>
 800ba56:	f100 0314 	add.w	r3, r0, #20
 800ba5a:	3114      	adds	r1, #20
 800ba5c:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800ba60:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ba64:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ba68:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ba6c:	42a5      	cmp	r5, r4
 800ba6e:	d003      	beq.n	800ba78 <__mcmp+0x2c>
 800ba70:	d305      	bcc.n	800ba7e <__mcmp+0x32>
 800ba72:	2201      	movs	r2, #1
 800ba74:	4610      	mov	r0, r2
 800ba76:	bd30      	pop	{r4, r5, pc}
 800ba78:	4283      	cmp	r3, r0
 800ba7a:	d3f3      	bcc.n	800ba64 <__mcmp+0x18>
 800ba7c:	e7fa      	b.n	800ba74 <__mcmp+0x28>
 800ba7e:	f04f 32ff 	mov.w	r2, #4294967295
 800ba82:	e7f7      	b.n	800ba74 <__mcmp+0x28>

0800ba84 <__mdiff>:
 800ba84:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba88:	460c      	mov	r4, r1
 800ba8a:	4606      	mov	r6, r0
 800ba8c:	4611      	mov	r1, r2
 800ba8e:	4620      	mov	r0, r4
 800ba90:	4690      	mov	r8, r2
 800ba92:	f7ff ffdb 	bl	800ba4c <__mcmp>
 800ba96:	1e05      	subs	r5, r0, #0
 800ba98:	d110      	bne.n	800babc <__mdiff+0x38>
 800ba9a:	4629      	mov	r1, r5
 800ba9c:	4630      	mov	r0, r6
 800ba9e:	f7ff fd59 	bl	800b554 <_Balloc>
 800baa2:	b930      	cbnz	r0, 800bab2 <__mdiff+0x2e>
 800baa4:	4b3a      	ldr	r3, [pc, #232]	; (800bb90 <__mdiff+0x10c>)
 800baa6:	4602      	mov	r2, r0
 800baa8:	f240 2137 	movw	r1, #567	; 0x237
 800baac:	4839      	ldr	r0, [pc, #228]	; (800bb94 <__mdiff+0x110>)
 800baae:	f7fe fdb7 	bl	800a620 <__assert_func>
 800bab2:	2301      	movs	r3, #1
 800bab4:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800bab8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800babc:	bfa4      	itt	ge
 800babe:	4643      	movge	r3, r8
 800bac0:	46a0      	movge	r8, r4
 800bac2:	4630      	mov	r0, r6
 800bac4:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800bac8:	bfa6      	itte	ge
 800baca:	461c      	movge	r4, r3
 800bacc:	2500      	movge	r5, #0
 800bace:	2501      	movlt	r5, #1
 800bad0:	f7ff fd40 	bl	800b554 <_Balloc>
 800bad4:	b920      	cbnz	r0, 800bae0 <__mdiff+0x5c>
 800bad6:	4b2e      	ldr	r3, [pc, #184]	; (800bb90 <__mdiff+0x10c>)
 800bad8:	4602      	mov	r2, r0
 800bada:	f240 2145 	movw	r1, #581	; 0x245
 800bade:	e7e5      	b.n	800baac <__mdiff+0x28>
 800bae0:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800bae4:	6926      	ldr	r6, [r4, #16]
 800bae6:	60c5      	str	r5, [r0, #12]
 800bae8:	f104 0914 	add.w	r9, r4, #20
 800baec:	f108 0514 	add.w	r5, r8, #20
 800baf0:	f100 0e14 	add.w	lr, r0, #20
 800baf4:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800baf8:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800bafc:	f108 0210 	add.w	r2, r8, #16
 800bb00:	46f2      	mov	sl, lr
 800bb02:	2100      	movs	r1, #0
 800bb04:	f859 3b04 	ldr.w	r3, [r9], #4
 800bb08:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800bb0c:	fa11 f88b 	uxtah	r8, r1, fp
 800bb10:	b299      	uxth	r1, r3
 800bb12:	0c1b      	lsrs	r3, r3, #16
 800bb14:	eba8 0801 	sub.w	r8, r8, r1
 800bb18:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800bb1c:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800bb20:	fa1f f888 	uxth.w	r8, r8
 800bb24:	1419      	asrs	r1, r3, #16
 800bb26:	454e      	cmp	r6, r9
 800bb28:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800bb2c:	f84a 3b04 	str.w	r3, [sl], #4
 800bb30:	d8e8      	bhi.n	800bb04 <__mdiff+0x80>
 800bb32:	1b33      	subs	r3, r6, r4
 800bb34:	3b15      	subs	r3, #21
 800bb36:	f023 0303 	bic.w	r3, r3, #3
 800bb3a:	3304      	adds	r3, #4
 800bb3c:	3415      	adds	r4, #21
 800bb3e:	42a6      	cmp	r6, r4
 800bb40:	bf38      	it	cc
 800bb42:	2304      	movcc	r3, #4
 800bb44:	441d      	add	r5, r3
 800bb46:	4473      	add	r3, lr
 800bb48:	469e      	mov	lr, r3
 800bb4a:	462e      	mov	r6, r5
 800bb4c:	4566      	cmp	r6, ip
 800bb4e:	d30e      	bcc.n	800bb6e <__mdiff+0xea>
 800bb50:	f10c 0203 	add.w	r2, ip, #3
 800bb54:	1b52      	subs	r2, r2, r5
 800bb56:	f022 0203 	bic.w	r2, r2, #3
 800bb5a:	3d03      	subs	r5, #3
 800bb5c:	45ac      	cmp	ip, r5
 800bb5e:	bf38      	it	cc
 800bb60:	2200      	movcc	r2, #0
 800bb62:	4413      	add	r3, r2
 800bb64:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800bb68:	b17a      	cbz	r2, 800bb8a <__mdiff+0x106>
 800bb6a:	6107      	str	r7, [r0, #16]
 800bb6c:	e7a4      	b.n	800bab8 <__mdiff+0x34>
 800bb6e:	f856 8b04 	ldr.w	r8, [r6], #4
 800bb72:	fa11 f288 	uxtah	r2, r1, r8
 800bb76:	1414      	asrs	r4, r2, #16
 800bb78:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800bb7c:	b292      	uxth	r2, r2
 800bb7e:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800bb82:	f84e 2b04 	str.w	r2, [lr], #4
 800bb86:	1421      	asrs	r1, r4, #16
 800bb88:	e7e0      	b.n	800bb4c <__mdiff+0xc8>
 800bb8a:	3f01      	subs	r7, #1
 800bb8c:	e7ea      	b.n	800bb64 <__mdiff+0xe0>
 800bb8e:	bf00      	nop
 800bb90:	0800ca47 	.word	0x0800ca47
 800bb94:	0800ca58 	.word	0x0800ca58

0800bb98 <__d2b>:
 800bb98:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800bb9c:	460f      	mov	r7, r1
 800bb9e:	2101      	movs	r1, #1
 800bba0:	ec59 8b10 	vmov	r8, r9, d0
 800bba4:	4616      	mov	r6, r2
 800bba6:	f7ff fcd5 	bl	800b554 <_Balloc>
 800bbaa:	4604      	mov	r4, r0
 800bbac:	b930      	cbnz	r0, 800bbbc <__d2b+0x24>
 800bbae:	4602      	mov	r2, r0
 800bbb0:	4b24      	ldr	r3, [pc, #144]	; (800bc44 <__d2b+0xac>)
 800bbb2:	4825      	ldr	r0, [pc, #148]	; (800bc48 <__d2b+0xb0>)
 800bbb4:	f240 310f 	movw	r1, #783	; 0x30f
 800bbb8:	f7fe fd32 	bl	800a620 <__assert_func>
 800bbbc:	f3c9 550a 	ubfx	r5, r9, #20, #11
 800bbc0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800bbc4:	bb2d      	cbnz	r5, 800bc12 <__d2b+0x7a>
 800bbc6:	9301      	str	r3, [sp, #4]
 800bbc8:	f1b8 0300 	subs.w	r3, r8, #0
 800bbcc:	d026      	beq.n	800bc1c <__d2b+0x84>
 800bbce:	4668      	mov	r0, sp
 800bbd0:	9300      	str	r3, [sp, #0]
 800bbd2:	f7ff fd87 	bl	800b6e4 <__lo0bits>
 800bbd6:	e9dd 1200 	ldrd	r1, r2, [sp]
 800bbda:	b1e8      	cbz	r0, 800bc18 <__d2b+0x80>
 800bbdc:	f1c0 0320 	rsb	r3, r0, #32
 800bbe0:	fa02 f303 	lsl.w	r3, r2, r3
 800bbe4:	430b      	orrs	r3, r1
 800bbe6:	40c2      	lsrs	r2, r0
 800bbe8:	6163      	str	r3, [r4, #20]
 800bbea:	9201      	str	r2, [sp, #4]
 800bbec:	9b01      	ldr	r3, [sp, #4]
 800bbee:	61a3      	str	r3, [r4, #24]
 800bbf0:	2b00      	cmp	r3, #0
 800bbf2:	bf14      	ite	ne
 800bbf4:	2202      	movne	r2, #2
 800bbf6:	2201      	moveq	r2, #1
 800bbf8:	6122      	str	r2, [r4, #16]
 800bbfa:	b1bd      	cbz	r5, 800bc2c <__d2b+0x94>
 800bbfc:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800bc00:	4405      	add	r5, r0
 800bc02:	603d      	str	r5, [r7, #0]
 800bc04:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800bc08:	6030      	str	r0, [r6, #0]
 800bc0a:	4620      	mov	r0, r4
 800bc0c:	b003      	add	sp, #12
 800bc0e:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc12:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800bc16:	e7d6      	b.n	800bbc6 <__d2b+0x2e>
 800bc18:	6161      	str	r1, [r4, #20]
 800bc1a:	e7e7      	b.n	800bbec <__d2b+0x54>
 800bc1c:	a801      	add	r0, sp, #4
 800bc1e:	f7ff fd61 	bl	800b6e4 <__lo0bits>
 800bc22:	9b01      	ldr	r3, [sp, #4]
 800bc24:	6163      	str	r3, [r4, #20]
 800bc26:	3020      	adds	r0, #32
 800bc28:	2201      	movs	r2, #1
 800bc2a:	e7e5      	b.n	800bbf8 <__d2b+0x60>
 800bc2c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800bc30:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800bc34:	6038      	str	r0, [r7, #0]
 800bc36:	6918      	ldr	r0, [r3, #16]
 800bc38:	f7ff fd34 	bl	800b6a4 <__hi0bits>
 800bc3c:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800bc40:	e7e2      	b.n	800bc08 <__d2b+0x70>
 800bc42:	bf00      	nop
 800bc44:	0800ca47 	.word	0x0800ca47
 800bc48:	0800ca58 	.word	0x0800ca58

0800bc4c <__ssputs_r>:
 800bc4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800bc50:	688e      	ldr	r6, [r1, #8]
 800bc52:	461f      	mov	r7, r3
 800bc54:	42be      	cmp	r6, r7
 800bc56:	680b      	ldr	r3, [r1, #0]
 800bc58:	4682      	mov	sl, r0
 800bc5a:	460c      	mov	r4, r1
 800bc5c:	4690      	mov	r8, r2
 800bc5e:	d82c      	bhi.n	800bcba <__ssputs_r+0x6e>
 800bc60:	898a      	ldrh	r2, [r1, #12]
 800bc62:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800bc66:	d026      	beq.n	800bcb6 <__ssputs_r+0x6a>
 800bc68:	6965      	ldr	r5, [r4, #20]
 800bc6a:	6909      	ldr	r1, [r1, #16]
 800bc6c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800bc70:	eba3 0901 	sub.w	r9, r3, r1
 800bc74:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800bc78:	1c7b      	adds	r3, r7, #1
 800bc7a:	444b      	add	r3, r9
 800bc7c:	106d      	asrs	r5, r5, #1
 800bc7e:	429d      	cmp	r5, r3
 800bc80:	bf38      	it	cc
 800bc82:	461d      	movcc	r5, r3
 800bc84:	0553      	lsls	r3, r2, #21
 800bc86:	d527      	bpl.n	800bcd8 <__ssputs_r+0x8c>
 800bc88:	4629      	mov	r1, r5
 800bc8a:	f7ff fbd7 	bl	800b43c <_malloc_r>
 800bc8e:	4606      	mov	r6, r0
 800bc90:	b360      	cbz	r0, 800bcec <__ssputs_r+0xa0>
 800bc92:	6921      	ldr	r1, [r4, #16]
 800bc94:	464a      	mov	r2, r9
 800bc96:	f000 fa1b 	bl	800c0d0 <memcpy>
 800bc9a:	89a3      	ldrh	r3, [r4, #12]
 800bc9c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800bca0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bca4:	81a3      	strh	r3, [r4, #12]
 800bca6:	6126      	str	r6, [r4, #16]
 800bca8:	6165      	str	r5, [r4, #20]
 800bcaa:	444e      	add	r6, r9
 800bcac:	eba5 0509 	sub.w	r5, r5, r9
 800bcb0:	6026      	str	r6, [r4, #0]
 800bcb2:	60a5      	str	r5, [r4, #8]
 800bcb4:	463e      	mov	r6, r7
 800bcb6:	42be      	cmp	r6, r7
 800bcb8:	d900      	bls.n	800bcbc <__ssputs_r+0x70>
 800bcba:	463e      	mov	r6, r7
 800bcbc:	6820      	ldr	r0, [r4, #0]
 800bcbe:	4632      	mov	r2, r6
 800bcc0:	4641      	mov	r1, r8
 800bcc2:	f000 f9db 	bl	800c07c <memmove>
 800bcc6:	68a3      	ldr	r3, [r4, #8]
 800bcc8:	1b9b      	subs	r3, r3, r6
 800bcca:	60a3      	str	r3, [r4, #8]
 800bccc:	6823      	ldr	r3, [r4, #0]
 800bcce:	4433      	add	r3, r6
 800bcd0:	6023      	str	r3, [r4, #0]
 800bcd2:	2000      	movs	r0, #0
 800bcd4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bcd8:	462a      	mov	r2, r5
 800bcda:	f000 fa36 	bl	800c14a <_realloc_r>
 800bcde:	4606      	mov	r6, r0
 800bce0:	2800      	cmp	r0, #0
 800bce2:	d1e0      	bne.n	800bca6 <__ssputs_r+0x5a>
 800bce4:	6921      	ldr	r1, [r4, #16]
 800bce6:	4650      	mov	r0, sl
 800bce8:	f7ff fb34 	bl	800b354 <_free_r>
 800bcec:	230c      	movs	r3, #12
 800bcee:	f8ca 3000 	str.w	r3, [sl]
 800bcf2:	89a3      	ldrh	r3, [r4, #12]
 800bcf4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bcf8:	81a3      	strh	r3, [r4, #12]
 800bcfa:	f04f 30ff 	mov.w	r0, #4294967295
 800bcfe:	e7e9      	b.n	800bcd4 <__ssputs_r+0x88>

0800bd00 <_svfiprintf_r>:
 800bd00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bd04:	4698      	mov	r8, r3
 800bd06:	898b      	ldrh	r3, [r1, #12]
 800bd08:	061b      	lsls	r3, r3, #24
 800bd0a:	b09d      	sub	sp, #116	; 0x74
 800bd0c:	4607      	mov	r7, r0
 800bd0e:	460d      	mov	r5, r1
 800bd10:	4614      	mov	r4, r2
 800bd12:	d50e      	bpl.n	800bd32 <_svfiprintf_r+0x32>
 800bd14:	690b      	ldr	r3, [r1, #16]
 800bd16:	b963      	cbnz	r3, 800bd32 <_svfiprintf_r+0x32>
 800bd18:	2140      	movs	r1, #64	; 0x40
 800bd1a:	f7ff fb8f 	bl	800b43c <_malloc_r>
 800bd1e:	6028      	str	r0, [r5, #0]
 800bd20:	6128      	str	r0, [r5, #16]
 800bd22:	b920      	cbnz	r0, 800bd2e <_svfiprintf_r+0x2e>
 800bd24:	230c      	movs	r3, #12
 800bd26:	603b      	str	r3, [r7, #0]
 800bd28:	f04f 30ff 	mov.w	r0, #4294967295
 800bd2c:	e0d0      	b.n	800bed0 <_svfiprintf_r+0x1d0>
 800bd2e:	2340      	movs	r3, #64	; 0x40
 800bd30:	616b      	str	r3, [r5, #20]
 800bd32:	2300      	movs	r3, #0
 800bd34:	9309      	str	r3, [sp, #36]	; 0x24
 800bd36:	2320      	movs	r3, #32
 800bd38:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800bd3c:	f8cd 800c 	str.w	r8, [sp, #12]
 800bd40:	2330      	movs	r3, #48	; 0x30
 800bd42:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 800bee8 <_svfiprintf_r+0x1e8>
 800bd46:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800bd4a:	f04f 0901 	mov.w	r9, #1
 800bd4e:	4623      	mov	r3, r4
 800bd50:	469a      	mov	sl, r3
 800bd52:	f813 2b01 	ldrb.w	r2, [r3], #1
 800bd56:	b10a      	cbz	r2, 800bd5c <_svfiprintf_r+0x5c>
 800bd58:	2a25      	cmp	r2, #37	; 0x25
 800bd5a:	d1f9      	bne.n	800bd50 <_svfiprintf_r+0x50>
 800bd5c:	ebba 0b04 	subs.w	fp, sl, r4
 800bd60:	d00b      	beq.n	800bd7a <_svfiprintf_r+0x7a>
 800bd62:	465b      	mov	r3, fp
 800bd64:	4622      	mov	r2, r4
 800bd66:	4629      	mov	r1, r5
 800bd68:	4638      	mov	r0, r7
 800bd6a:	f7ff ff6f 	bl	800bc4c <__ssputs_r>
 800bd6e:	3001      	adds	r0, #1
 800bd70:	f000 80a9 	beq.w	800bec6 <_svfiprintf_r+0x1c6>
 800bd74:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800bd76:	445a      	add	r2, fp
 800bd78:	9209      	str	r2, [sp, #36]	; 0x24
 800bd7a:	f89a 3000 	ldrb.w	r3, [sl]
 800bd7e:	2b00      	cmp	r3, #0
 800bd80:	f000 80a1 	beq.w	800bec6 <_svfiprintf_r+0x1c6>
 800bd84:	2300      	movs	r3, #0
 800bd86:	f04f 32ff 	mov.w	r2, #4294967295
 800bd8a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800bd8e:	f10a 0a01 	add.w	sl, sl, #1
 800bd92:	9304      	str	r3, [sp, #16]
 800bd94:	9307      	str	r3, [sp, #28]
 800bd96:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800bd9a:	931a      	str	r3, [sp, #104]	; 0x68
 800bd9c:	4654      	mov	r4, sl
 800bd9e:	2205      	movs	r2, #5
 800bda0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800bda4:	4850      	ldr	r0, [pc, #320]	; (800bee8 <_svfiprintf_r+0x1e8>)
 800bda6:	f7f4 fa4b 	bl	8000240 <memchr>
 800bdaa:	9a04      	ldr	r2, [sp, #16]
 800bdac:	b9d8      	cbnz	r0, 800bde6 <_svfiprintf_r+0xe6>
 800bdae:	06d0      	lsls	r0, r2, #27
 800bdb0:	bf44      	itt	mi
 800bdb2:	2320      	movmi	r3, #32
 800bdb4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdb8:	0711      	lsls	r1, r2, #28
 800bdba:	bf44      	itt	mi
 800bdbc:	232b      	movmi	r3, #43	; 0x2b
 800bdbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800bdc2:	f89a 3000 	ldrb.w	r3, [sl]
 800bdc6:	2b2a      	cmp	r3, #42	; 0x2a
 800bdc8:	d015      	beq.n	800bdf6 <_svfiprintf_r+0xf6>
 800bdca:	9a07      	ldr	r2, [sp, #28]
 800bdcc:	4654      	mov	r4, sl
 800bdce:	2000      	movs	r0, #0
 800bdd0:	f04f 0c0a 	mov.w	ip, #10
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800bdda:	3b30      	subs	r3, #48	; 0x30
 800bddc:	2b09      	cmp	r3, #9
 800bdde:	d94d      	bls.n	800be7c <_svfiprintf_r+0x17c>
 800bde0:	b1b0      	cbz	r0, 800be10 <_svfiprintf_r+0x110>
 800bde2:	9207      	str	r2, [sp, #28]
 800bde4:	e014      	b.n	800be10 <_svfiprintf_r+0x110>
 800bde6:	eba0 0308 	sub.w	r3, r0, r8
 800bdea:	fa09 f303 	lsl.w	r3, r9, r3
 800bdee:	4313      	orrs	r3, r2
 800bdf0:	9304      	str	r3, [sp, #16]
 800bdf2:	46a2      	mov	sl, r4
 800bdf4:	e7d2      	b.n	800bd9c <_svfiprintf_r+0x9c>
 800bdf6:	9b03      	ldr	r3, [sp, #12]
 800bdf8:	1d19      	adds	r1, r3, #4
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	9103      	str	r1, [sp, #12]
 800bdfe:	2b00      	cmp	r3, #0
 800be00:	bfbb      	ittet	lt
 800be02:	425b      	neglt	r3, r3
 800be04:	f042 0202 	orrlt.w	r2, r2, #2
 800be08:	9307      	strge	r3, [sp, #28]
 800be0a:	9307      	strlt	r3, [sp, #28]
 800be0c:	bfb8      	it	lt
 800be0e:	9204      	strlt	r2, [sp, #16]
 800be10:	7823      	ldrb	r3, [r4, #0]
 800be12:	2b2e      	cmp	r3, #46	; 0x2e
 800be14:	d10c      	bne.n	800be30 <_svfiprintf_r+0x130>
 800be16:	7863      	ldrb	r3, [r4, #1]
 800be18:	2b2a      	cmp	r3, #42	; 0x2a
 800be1a:	d134      	bne.n	800be86 <_svfiprintf_r+0x186>
 800be1c:	9b03      	ldr	r3, [sp, #12]
 800be1e:	1d1a      	adds	r2, r3, #4
 800be20:	681b      	ldr	r3, [r3, #0]
 800be22:	9203      	str	r2, [sp, #12]
 800be24:	2b00      	cmp	r3, #0
 800be26:	bfb8      	it	lt
 800be28:	f04f 33ff 	movlt.w	r3, #4294967295
 800be2c:	3402      	adds	r4, #2
 800be2e:	9305      	str	r3, [sp, #20]
 800be30:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 800bef8 <_svfiprintf_r+0x1f8>
 800be34:	7821      	ldrb	r1, [r4, #0]
 800be36:	2203      	movs	r2, #3
 800be38:	4650      	mov	r0, sl
 800be3a:	f7f4 fa01 	bl	8000240 <memchr>
 800be3e:	b138      	cbz	r0, 800be50 <_svfiprintf_r+0x150>
 800be40:	9b04      	ldr	r3, [sp, #16]
 800be42:	eba0 000a 	sub.w	r0, r0, sl
 800be46:	2240      	movs	r2, #64	; 0x40
 800be48:	4082      	lsls	r2, r0
 800be4a:	4313      	orrs	r3, r2
 800be4c:	3401      	adds	r4, #1
 800be4e:	9304      	str	r3, [sp, #16]
 800be50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800be54:	4825      	ldr	r0, [pc, #148]	; (800beec <_svfiprintf_r+0x1ec>)
 800be56:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800be5a:	2206      	movs	r2, #6
 800be5c:	f7f4 f9f0 	bl	8000240 <memchr>
 800be60:	2800      	cmp	r0, #0
 800be62:	d038      	beq.n	800bed6 <_svfiprintf_r+0x1d6>
 800be64:	4b22      	ldr	r3, [pc, #136]	; (800bef0 <_svfiprintf_r+0x1f0>)
 800be66:	bb1b      	cbnz	r3, 800beb0 <_svfiprintf_r+0x1b0>
 800be68:	9b03      	ldr	r3, [sp, #12]
 800be6a:	3307      	adds	r3, #7
 800be6c:	f023 0307 	bic.w	r3, r3, #7
 800be70:	3308      	adds	r3, #8
 800be72:	9303      	str	r3, [sp, #12]
 800be74:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be76:	4433      	add	r3, r6
 800be78:	9309      	str	r3, [sp, #36]	; 0x24
 800be7a:	e768      	b.n	800bd4e <_svfiprintf_r+0x4e>
 800be7c:	fb0c 3202 	mla	r2, ip, r2, r3
 800be80:	460c      	mov	r4, r1
 800be82:	2001      	movs	r0, #1
 800be84:	e7a6      	b.n	800bdd4 <_svfiprintf_r+0xd4>
 800be86:	2300      	movs	r3, #0
 800be88:	3401      	adds	r4, #1
 800be8a:	9305      	str	r3, [sp, #20]
 800be8c:	4619      	mov	r1, r3
 800be8e:	f04f 0c0a 	mov.w	ip, #10
 800be92:	4620      	mov	r0, r4
 800be94:	f810 2b01 	ldrb.w	r2, [r0], #1
 800be98:	3a30      	subs	r2, #48	; 0x30
 800be9a:	2a09      	cmp	r2, #9
 800be9c:	d903      	bls.n	800bea6 <_svfiprintf_r+0x1a6>
 800be9e:	2b00      	cmp	r3, #0
 800bea0:	d0c6      	beq.n	800be30 <_svfiprintf_r+0x130>
 800bea2:	9105      	str	r1, [sp, #20]
 800bea4:	e7c4      	b.n	800be30 <_svfiprintf_r+0x130>
 800bea6:	fb0c 2101 	mla	r1, ip, r1, r2
 800beaa:	4604      	mov	r4, r0
 800beac:	2301      	movs	r3, #1
 800beae:	e7f0      	b.n	800be92 <_svfiprintf_r+0x192>
 800beb0:	ab03      	add	r3, sp, #12
 800beb2:	9300      	str	r3, [sp, #0]
 800beb4:	462a      	mov	r2, r5
 800beb6:	4b0f      	ldr	r3, [pc, #60]	; (800bef4 <_svfiprintf_r+0x1f4>)
 800beb8:	a904      	add	r1, sp, #16
 800beba:	4638      	mov	r0, r7
 800bebc:	f7fd fde8 	bl	8009a90 <_printf_float>
 800bec0:	1c42      	adds	r2, r0, #1
 800bec2:	4606      	mov	r6, r0
 800bec4:	d1d6      	bne.n	800be74 <_svfiprintf_r+0x174>
 800bec6:	89ab      	ldrh	r3, [r5, #12]
 800bec8:	065b      	lsls	r3, r3, #25
 800beca:	f53f af2d 	bmi.w	800bd28 <_svfiprintf_r+0x28>
 800bece:	9809      	ldr	r0, [sp, #36]	; 0x24
 800bed0:	b01d      	add	sp, #116	; 0x74
 800bed2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bed6:	ab03      	add	r3, sp, #12
 800bed8:	9300      	str	r3, [sp, #0]
 800beda:	462a      	mov	r2, r5
 800bedc:	4b05      	ldr	r3, [pc, #20]	; (800bef4 <_svfiprintf_r+0x1f4>)
 800bede:	a904      	add	r1, sp, #16
 800bee0:	4638      	mov	r0, r7
 800bee2:	f7fe f879 	bl	8009fd8 <_printf_i>
 800bee6:	e7eb      	b.n	800bec0 <_svfiprintf_r+0x1c0>
 800bee8:	0800cbb4 	.word	0x0800cbb4
 800beec:	0800cbbe 	.word	0x0800cbbe
 800bef0:	08009a91 	.word	0x08009a91
 800bef4:	0800bc4d 	.word	0x0800bc4d
 800bef8:	0800cbba 	.word	0x0800cbba

0800befc <__sflush_r>:
 800befc:	898a      	ldrh	r2, [r1, #12]
 800befe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bf02:	4605      	mov	r5, r0
 800bf04:	0710      	lsls	r0, r2, #28
 800bf06:	460c      	mov	r4, r1
 800bf08:	d458      	bmi.n	800bfbc <__sflush_r+0xc0>
 800bf0a:	684b      	ldr	r3, [r1, #4]
 800bf0c:	2b00      	cmp	r3, #0
 800bf0e:	dc05      	bgt.n	800bf1c <__sflush_r+0x20>
 800bf10:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bf12:	2b00      	cmp	r3, #0
 800bf14:	dc02      	bgt.n	800bf1c <__sflush_r+0x20>
 800bf16:	2000      	movs	r0, #0
 800bf18:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bf1c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf1e:	2e00      	cmp	r6, #0
 800bf20:	d0f9      	beq.n	800bf16 <__sflush_r+0x1a>
 800bf22:	2300      	movs	r3, #0
 800bf24:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bf28:	682f      	ldr	r7, [r5, #0]
 800bf2a:	6a21      	ldr	r1, [r4, #32]
 800bf2c:	602b      	str	r3, [r5, #0]
 800bf2e:	d032      	beq.n	800bf96 <__sflush_r+0x9a>
 800bf30:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bf32:	89a3      	ldrh	r3, [r4, #12]
 800bf34:	075a      	lsls	r2, r3, #29
 800bf36:	d505      	bpl.n	800bf44 <__sflush_r+0x48>
 800bf38:	6863      	ldr	r3, [r4, #4]
 800bf3a:	1ac0      	subs	r0, r0, r3
 800bf3c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bf3e:	b10b      	cbz	r3, 800bf44 <__sflush_r+0x48>
 800bf40:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bf42:	1ac0      	subs	r0, r0, r3
 800bf44:	2300      	movs	r3, #0
 800bf46:	4602      	mov	r2, r0
 800bf48:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bf4a:	6a21      	ldr	r1, [r4, #32]
 800bf4c:	4628      	mov	r0, r5
 800bf4e:	47b0      	blx	r6
 800bf50:	1c43      	adds	r3, r0, #1
 800bf52:	89a3      	ldrh	r3, [r4, #12]
 800bf54:	d106      	bne.n	800bf64 <__sflush_r+0x68>
 800bf56:	6829      	ldr	r1, [r5, #0]
 800bf58:	291d      	cmp	r1, #29
 800bf5a:	d82b      	bhi.n	800bfb4 <__sflush_r+0xb8>
 800bf5c:	4a29      	ldr	r2, [pc, #164]	; (800c004 <__sflush_r+0x108>)
 800bf5e:	410a      	asrs	r2, r1
 800bf60:	07d6      	lsls	r6, r2, #31
 800bf62:	d427      	bmi.n	800bfb4 <__sflush_r+0xb8>
 800bf64:	2200      	movs	r2, #0
 800bf66:	6062      	str	r2, [r4, #4]
 800bf68:	04d9      	lsls	r1, r3, #19
 800bf6a:	6922      	ldr	r2, [r4, #16]
 800bf6c:	6022      	str	r2, [r4, #0]
 800bf6e:	d504      	bpl.n	800bf7a <__sflush_r+0x7e>
 800bf70:	1c42      	adds	r2, r0, #1
 800bf72:	d101      	bne.n	800bf78 <__sflush_r+0x7c>
 800bf74:	682b      	ldr	r3, [r5, #0]
 800bf76:	b903      	cbnz	r3, 800bf7a <__sflush_r+0x7e>
 800bf78:	6560      	str	r0, [r4, #84]	; 0x54
 800bf7a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bf7c:	602f      	str	r7, [r5, #0]
 800bf7e:	2900      	cmp	r1, #0
 800bf80:	d0c9      	beq.n	800bf16 <__sflush_r+0x1a>
 800bf82:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bf86:	4299      	cmp	r1, r3
 800bf88:	d002      	beq.n	800bf90 <__sflush_r+0x94>
 800bf8a:	4628      	mov	r0, r5
 800bf8c:	f7ff f9e2 	bl	800b354 <_free_r>
 800bf90:	2000      	movs	r0, #0
 800bf92:	6360      	str	r0, [r4, #52]	; 0x34
 800bf94:	e7c0      	b.n	800bf18 <__sflush_r+0x1c>
 800bf96:	2301      	movs	r3, #1
 800bf98:	4628      	mov	r0, r5
 800bf9a:	47b0      	blx	r6
 800bf9c:	1c41      	adds	r1, r0, #1
 800bf9e:	d1c8      	bne.n	800bf32 <__sflush_r+0x36>
 800bfa0:	682b      	ldr	r3, [r5, #0]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	d0c5      	beq.n	800bf32 <__sflush_r+0x36>
 800bfa6:	2b1d      	cmp	r3, #29
 800bfa8:	d001      	beq.n	800bfae <__sflush_r+0xb2>
 800bfaa:	2b16      	cmp	r3, #22
 800bfac:	d101      	bne.n	800bfb2 <__sflush_r+0xb6>
 800bfae:	602f      	str	r7, [r5, #0]
 800bfb0:	e7b1      	b.n	800bf16 <__sflush_r+0x1a>
 800bfb2:	89a3      	ldrh	r3, [r4, #12]
 800bfb4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bfb8:	81a3      	strh	r3, [r4, #12]
 800bfba:	e7ad      	b.n	800bf18 <__sflush_r+0x1c>
 800bfbc:	690f      	ldr	r7, [r1, #16]
 800bfbe:	2f00      	cmp	r7, #0
 800bfc0:	d0a9      	beq.n	800bf16 <__sflush_r+0x1a>
 800bfc2:	0793      	lsls	r3, r2, #30
 800bfc4:	680e      	ldr	r6, [r1, #0]
 800bfc6:	bf08      	it	eq
 800bfc8:	694b      	ldreq	r3, [r1, #20]
 800bfca:	600f      	str	r7, [r1, #0]
 800bfcc:	bf18      	it	ne
 800bfce:	2300      	movne	r3, #0
 800bfd0:	eba6 0807 	sub.w	r8, r6, r7
 800bfd4:	608b      	str	r3, [r1, #8]
 800bfd6:	f1b8 0f00 	cmp.w	r8, #0
 800bfda:	dd9c      	ble.n	800bf16 <__sflush_r+0x1a>
 800bfdc:	6a21      	ldr	r1, [r4, #32]
 800bfde:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bfe0:	4643      	mov	r3, r8
 800bfe2:	463a      	mov	r2, r7
 800bfe4:	4628      	mov	r0, r5
 800bfe6:	47b0      	blx	r6
 800bfe8:	2800      	cmp	r0, #0
 800bfea:	dc06      	bgt.n	800bffa <__sflush_r+0xfe>
 800bfec:	89a3      	ldrh	r3, [r4, #12]
 800bfee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bff2:	81a3      	strh	r3, [r4, #12]
 800bff4:	f04f 30ff 	mov.w	r0, #4294967295
 800bff8:	e78e      	b.n	800bf18 <__sflush_r+0x1c>
 800bffa:	4407      	add	r7, r0
 800bffc:	eba8 0800 	sub.w	r8, r8, r0
 800c000:	e7e9      	b.n	800bfd6 <__sflush_r+0xda>
 800c002:	bf00      	nop
 800c004:	dfbffffe 	.word	0xdfbffffe

0800c008 <_fflush_r>:
 800c008:	b538      	push	{r3, r4, r5, lr}
 800c00a:	690b      	ldr	r3, [r1, #16]
 800c00c:	4605      	mov	r5, r0
 800c00e:	460c      	mov	r4, r1
 800c010:	b913      	cbnz	r3, 800c018 <_fflush_r+0x10>
 800c012:	2500      	movs	r5, #0
 800c014:	4628      	mov	r0, r5
 800c016:	bd38      	pop	{r3, r4, r5, pc}
 800c018:	b118      	cbz	r0, 800c022 <_fflush_r+0x1a>
 800c01a:	6a03      	ldr	r3, [r0, #32]
 800c01c:	b90b      	cbnz	r3, 800c022 <_fflush_r+0x1a>
 800c01e:	f7fe f977 	bl	800a310 <__sinit>
 800c022:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c026:	2b00      	cmp	r3, #0
 800c028:	d0f3      	beq.n	800c012 <_fflush_r+0xa>
 800c02a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800c02c:	07d0      	lsls	r0, r2, #31
 800c02e:	d404      	bmi.n	800c03a <_fflush_r+0x32>
 800c030:	0599      	lsls	r1, r3, #22
 800c032:	d402      	bmi.n	800c03a <_fflush_r+0x32>
 800c034:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c036:	f7fe faf1 	bl	800a61c <__retarget_lock_acquire_recursive>
 800c03a:	4628      	mov	r0, r5
 800c03c:	4621      	mov	r1, r4
 800c03e:	f7ff ff5d 	bl	800befc <__sflush_r>
 800c042:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800c044:	07da      	lsls	r2, r3, #31
 800c046:	4605      	mov	r5, r0
 800c048:	d4e4      	bmi.n	800c014 <_fflush_r+0xc>
 800c04a:	89a3      	ldrh	r3, [r4, #12]
 800c04c:	059b      	lsls	r3, r3, #22
 800c04e:	d4e1      	bmi.n	800c014 <_fflush_r+0xc>
 800c050:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800c052:	f7fe fae4 	bl	800a61e <__retarget_lock_release_recursive>
 800c056:	e7dd      	b.n	800c014 <_fflush_r+0xc>

0800c058 <fiprintf>:
 800c058:	b40e      	push	{r1, r2, r3}
 800c05a:	b503      	push	{r0, r1, lr}
 800c05c:	4601      	mov	r1, r0
 800c05e:	ab03      	add	r3, sp, #12
 800c060:	4805      	ldr	r0, [pc, #20]	; (800c078 <fiprintf+0x20>)
 800c062:	f853 2b04 	ldr.w	r2, [r3], #4
 800c066:	6800      	ldr	r0, [r0, #0]
 800c068:	9301      	str	r3, [sp, #4]
 800c06a:	f000 f8d3 	bl	800c214 <_vfiprintf_r>
 800c06e:	b002      	add	sp, #8
 800c070:	f85d eb04 	ldr.w	lr, [sp], #4
 800c074:	b003      	add	sp, #12
 800c076:	4770      	bx	lr
 800c078:	20000128 	.word	0x20000128

0800c07c <memmove>:
 800c07c:	4288      	cmp	r0, r1
 800c07e:	b510      	push	{r4, lr}
 800c080:	eb01 0402 	add.w	r4, r1, r2
 800c084:	d902      	bls.n	800c08c <memmove+0x10>
 800c086:	4284      	cmp	r4, r0
 800c088:	4623      	mov	r3, r4
 800c08a:	d807      	bhi.n	800c09c <memmove+0x20>
 800c08c:	1e43      	subs	r3, r0, #1
 800c08e:	42a1      	cmp	r1, r4
 800c090:	d008      	beq.n	800c0a4 <memmove+0x28>
 800c092:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c096:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c09a:	e7f8      	b.n	800c08e <memmove+0x12>
 800c09c:	4402      	add	r2, r0
 800c09e:	4601      	mov	r1, r0
 800c0a0:	428a      	cmp	r2, r1
 800c0a2:	d100      	bne.n	800c0a6 <memmove+0x2a>
 800c0a4:	bd10      	pop	{r4, pc}
 800c0a6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0aa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0ae:	e7f7      	b.n	800c0a0 <memmove+0x24>

0800c0b0 <_sbrk_r>:
 800c0b0:	b538      	push	{r3, r4, r5, lr}
 800c0b2:	4d06      	ldr	r5, [pc, #24]	; (800c0cc <_sbrk_r+0x1c>)
 800c0b4:	2300      	movs	r3, #0
 800c0b6:	4604      	mov	r4, r0
 800c0b8:	4608      	mov	r0, r1
 800c0ba:	602b      	str	r3, [r5, #0]
 800c0bc:	f7f5 fce8 	bl	8001a90 <_sbrk>
 800c0c0:	1c43      	adds	r3, r0, #1
 800c0c2:	d102      	bne.n	800c0ca <_sbrk_r+0x1a>
 800c0c4:	682b      	ldr	r3, [r5, #0]
 800c0c6:	b103      	cbz	r3, 800c0ca <_sbrk_r+0x1a>
 800c0c8:	6023      	str	r3, [r4, #0]
 800c0ca:	bd38      	pop	{r3, r4, r5, pc}
 800c0cc:	20000870 	.word	0x20000870

0800c0d0 <memcpy>:
 800c0d0:	440a      	add	r2, r1
 800c0d2:	4291      	cmp	r1, r2
 800c0d4:	f100 33ff 	add.w	r3, r0, #4294967295
 800c0d8:	d100      	bne.n	800c0dc <memcpy+0xc>
 800c0da:	4770      	bx	lr
 800c0dc:	b510      	push	{r4, lr}
 800c0de:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c0e2:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c0e6:	4291      	cmp	r1, r2
 800c0e8:	d1f9      	bne.n	800c0de <memcpy+0xe>
 800c0ea:	bd10      	pop	{r4, pc}

0800c0ec <abort>:
 800c0ec:	b508      	push	{r3, lr}
 800c0ee:	2006      	movs	r0, #6
 800c0f0:	f000 fa68 	bl	800c5c4 <raise>
 800c0f4:	2001      	movs	r0, #1
 800c0f6:	f7f5 fc53 	bl	80019a0 <_exit>

0800c0fa <_calloc_r>:
 800c0fa:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800c0fc:	fba1 2402 	umull	r2, r4, r1, r2
 800c100:	b94c      	cbnz	r4, 800c116 <_calloc_r+0x1c>
 800c102:	4611      	mov	r1, r2
 800c104:	9201      	str	r2, [sp, #4]
 800c106:	f7ff f999 	bl	800b43c <_malloc_r>
 800c10a:	9a01      	ldr	r2, [sp, #4]
 800c10c:	4605      	mov	r5, r0
 800c10e:	b930      	cbnz	r0, 800c11e <_calloc_r+0x24>
 800c110:	4628      	mov	r0, r5
 800c112:	b003      	add	sp, #12
 800c114:	bd30      	pop	{r4, r5, pc}
 800c116:	220c      	movs	r2, #12
 800c118:	6002      	str	r2, [r0, #0]
 800c11a:	2500      	movs	r5, #0
 800c11c:	e7f8      	b.n	800c110 <_calloc_r+0x16>
 800c11e:	4621      	mov	r1, r4
 800c120:	f7fe f9a3 	bl	800a46a <memset>
 800c124:	e7f4      	b.n	800c110 <_calloc_r+0x16>

0800c126 <__ascii_mbtowc>:
 800c126:	b082      	sub	sp, #8
 800c128:	b901      	cbnz	r1, 800c12c <__ascii_mbtowc+0x6>
 800c12a:	a901      	add	r1, sp, #4
 800c12c:	b142      	cbz	r2, 800c140 <__ascii_mbtowc+0x1a>
 800c12e:	b14b      	cbz	r3, 800c144 <__ascii_mbtowc+0x1e>
 800c130:	7813      	ldrb	r3, [r2, #0]
 800c132:	600b      	str	r3, [r1, #0]
 800c134:	7812      	ldrb	r2, [r2, #0]
 800c136:	1e10      	subs	r0, r2, #0
 800c138:	bf18      	it	ne
 800c13a:	2001      	movne	r0, #1
 800c13c:	b002      	add	sp, #8
 800c13e:	4770      	bx	lr
 800c140:	4610      	mov	r0, r2
 800c142:	e7fb      	b.n	800c13c <__ascii_mbtowc+0x16>
 800c144:	f06f 0001 	mvn.w	r0, #1
 800c148:	e7f8      	b.n	800c13c <__ascii_mbtowc+0x16>

0800c14a <_realloc_r>:
 800c14a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c14e:	4680      	mov	r8, r0
 800c150:	4614      	mov	r4, r2
 800c152:	460e      	mov	r6, r1
 800c154:	b921      	cbnz	r1, 800c160 <_realloc_r+0x16>
 800c156:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c15a:	4611      	mov	r1, r2
 800c15c:	f7ff b96e 	b.w	800b43c <_malloc_r>
 800c160:	b92a      	cbnz	r2, 800c16e <_realloc_r+0x24>
 800c162:	f7ff f8f7 	bl	800b354 <_free_r>
 800c166:	4625      	mov	r5, r4
 800c168:	4628      	mov	r0, r5
 800c16a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c16e:	f000 fa45 	bl	800c5fc <_malloc_usable_size_r>
 800c172:	4284      	cmp	r4, r0
 800c174:	4607      	mov	r7, r0
 800c176:	d802      	bhi.n	800c17e <_realloc_r+0x34>
 800c178:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c17c:	d812      	bhi.n	800c1a4 <_realloc_r+0x5a>
 800c17e:	4621      	mov	r1, r4
 800c180:	4640      	mov	r0, r8
 800c182:	f7ff f95b 	bl	800b43c <_malloc_r>
 800c186:	4605      	mov	r5, r0
 800c188:	2800      	cmp	r0, #0
 800c18a:	d0ed      	beq.n	800c168 <_realloc_r+0x1e>
 800c18c:	42bc      	cmp	r4, r7
 800c18e:	4622      	mov	r2, r4
 800c190:	4631      	mov	r1, r6
 800c192:	bf28      	it	cs
 800c194:	463a      	movcs	r2, r7
 800c196:	f7ff ff9b 	bl	800c0d0 <memcpy>
 800c19a:	4631      	mov	r1, r6
 800c19c:	4640      	mov	r0, r8
 800c19e:	f7ff f8d9 	bl	800b354 <_free_r>
 800c1a2:	e7e1      	b.n	800c168 <_realloc_r+0x1e>
 800c1a4:	4635      	mov	r5, r6
 800c1a6:	e7df      	b.n	800c168 <_realloc_r+0x1e>

0800c1a8 <__ascii_wctomb>:
 800c1a8:	b149      	cbz	r1, 800c1be <__ascii_wctomb+0x16>
 800c1aa:	2aff      	cmp	r2, #255	; 0xff
 800c1ac:	bf85      	ittet	hi
 800c1ae:	238a      	movhi	r3, #138	; 0x8a
 800c1b0:	6003      	strhi	r3, [r0, #0]
 800c1b2:	700a      	strbls	r2, [r1, #0]
 800c1b4:	f04f 30ff 	movhi.w	r0, #4294967295
 800c1b8:	bf98      	it	ls
 800c1ba:	2001      	movls	r0, #1
 800c1bc:	4770      	bx	lr
 800c1be:	4608      	mov	r0, r1
 800c1c0:	4770      	bx	lr

0800c1c2 <__sfputc_r>:
 800c1c2:	6893      	ldr	r3, [r2, #8]
 800c1c4:	3b01      	subs	r3, #1
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	b410      	push	{r4}
 800c1ca:	6093      	str	r3, [r2, #8]
 800c1cc:	da08      	bge.n	800c1e0 <__sfputc_r+0x1e>
 800c1ce:	6994      	ldr	r4, [r2, #24]
 800c1d0:	42a3      	cmp	r3, r4
 800c1d2:	db01      	blt.n	800c1d8 <__sfputc_r+0x16>
 800c1d4:	290a      	cmp	r1, #10
 800c1d6:	d103      	bne.n	800c1e0 <__sfputc_r+0x1e>
 800c1d8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1dc:	f000 b934 	b.w	800c448 <__swbuf_r>
 800c1e0:	6813      	ldr	r3, [r2, #0]
 800c1e2:	1c58      	adds	r0, r3, #1
 800c1e4:	6010      	str	r0, [r2, #0]
 800c1e6:	7019      	strb	r1, [r3, #0]
 800c1e8:	4608      	mov	r0, r1
 800c1ea:	f85d 4b04 	ldr.w	r4, [sp], #4
 800c1ee:	4770      	bx	lr

0800c1f0 <__sfputs_r>:
 800c1f0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c1f2:	4606      	mov	r6, r0
 800c1f4:	460f      	mov	r7, r1
 800c1f6:	4614      	mov	r4, r2
 800c1f8:	18d5      	adds	r5, r2, r3
 800c1fa:	42ac      	cmp	r4, r5
 800c1fc:	d101      	bne.n	800c202 <__sfputs_r+0x12>
 800c1fe:	2000      	movs	r0, #0
 800c200:	e007      	b.n	800c212 <__sfputs_r+0x22>
 800c202:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c206:	463a      	mov	r2, r7
 800c208:	4630      	mov	r0, r6
 800c20a:	f7ff ffda 	bl	800c1c2 <__sfputc_r>
 800c20e:	1c43      	adds	r3, r0, #1
 800c210:	d1f3      	bne.n	800c1fa <__sfputs_r+0xa>
 800c212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800c214 <_vfiprintf_r>:
 800c214:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c218:	460d      	mov	r5, r1
 800c21a:	b09d      	sub	sp, #116	; 0x74
 800c21c:	4614      	mov	r4, r2
 800c21e:	4698      	mov	r8, r3
 800c220:	4606      	mov	r6, r0
 800c222:	b118      	cbz	r0, 800c22c <_vfiprintf_r+0x18>
 800c224:	6a03      	ldr	r3, [r0, #32]
 800c226:	b90b      	cbnz	r3, 800c22c <_vfiprintf_r+0x18>
 800c228:	f7fe f872 	bl	800a310 <__sinit>
 800c22c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c22e:	07d9      	lsls	r1, r3, #31
 800c230:	d405      	bmi.n	800c23e <_vfiprintf_r+0x2a>
 800c232:	89ab      	ldrh	r3, [r5, #12]
 800c234:	059a      	lsls	r2, r3, #22
 800c236:	d402      	bmi.n	800c23e <_vfiprintf_r+0x2a>
 800c238:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c23a:	f7fe f9ef 	bl	800a61c <__retarget_lock_acquire_recursive>
 800c23e:	89ab      	ldrh	r3, [r5, #12]
 800c240:	071b      	lsls	r3, r3, #28
 800c242:	d501      	bpl.n	800c248 <_vfiprintf_r+0x34>
 800c244:	692b      	ldr	r3, [r5, #16]
 800c246:	b99b      	cbnz	r3, 800c270 <_vfiprintf_r+0x5c>
 800c248:	4629      	mov	r1, r5
 800c24a:	4630      	mov	r0, r6
 800c24c:	f000 f93a 	bl	800c4c4 <__swsetup_r>
 800c250:	b170      	cbz	r0, 800c270 <_vfiprintf_r+0x5c>
 800c252:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c254:	07dc      	lsls	r4, r3, #31
 800c256:	d504      	bpl.n	800c262 <_vfiprintf_r+0x4e>
 800c258:	f04f 30ff 	mov.w	r0, #4294967295
 800c25c:	b01d      	add	sp, #116	; 0x74
 800c25e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c262:	89ab      	ldrh	r3, [r5, #12]
 800c264:	0598      	lsls	r0, r3, #22
 800c266:	d4f7      	bmi.n	800c258 <_vfiprintf_r+0x44>
 800c268:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c26a:	f7fe f9d8 	bl	800a61e <__retarget_lock_release_recursive>
 800c26e:	e7f3      	b.n	800c258 <_vfiprintf_r+0x44>
 800c270:	2300      	movs	r3, #0
 800c272:	9309      	str	r3, [sp, #36]	; 0x24
 800c274:	2320      	movs	r3, #32
 800c276:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800c27a:	f8cd 800c 	str.w	r8, [sp, #12]
 800c27e:	2330      	movs	r3, #48	; 0x30
 800c280:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 800c434 <_vfiprintf_r+0x220>
 800c284:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800c288:	f04f 0901 	mov.w	r9, #1
 800c28c:	4623      	mov	r3, r4
 800c28e:	469a      	mov	sl, r3
 800c290:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c294:	b10a      	cbz	r2, 800c29a <_vfiprintf_r+0x86>
 800c296:	2a25      	cmp	r2, #37	; 0x25
 800c298:	d1f9      	bne.n	800c28e <_vfiprintf_r+0x7a>
 800c29a:	ebba 0b04 	subs.w	fp, sl, r4
 800c29e:	d00b      	beq.n	800c2b8 <_vfiprintf_r+0xa4>
 800c2a0:	465b      	mov	r3, fp
 800c2a2:	4622      	mov	r2, r4
 800c2a4:	4629      	mov	r1, r5
 800c2a6:	4630      	mov	r0, r6
 800c2a8:	f7ff ffa2 	bl	800c1f0 <__sfputs_r>
 800c2ac:	3001      	adds	r0, #1
 800c2ae:	f000 80a9 	beq.w	800c404 <_vfiprintf_r+0x1f0>
 800c2b2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800c2b4:	445a      	add	r2, fp
 800c2b6:	9209      	str	r2, [sp, #36]	; 0x24
 800c2b8:	f89a 3000 	ldrb.w	r3, [sl]
 800c2bc:	2b00      	cmp	r3, #0
 800c2be:	f000 80a1 	beq.w	800c404 <_vfiprintf_r+0x1f0>
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2c8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800c2cc:	f10a 0a01 	add.w	sl, sl, #1
 800c2d0:	9304      	str	r3, [sp, #16]
 800c2d2:	9307      	str	r3, [sp, #28]
 800c2d4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800c2d8:	931a      	str	r3, [sp, #104]	; 0x68
 800c2da:	4654      	mov	r4, sl
 800c2dc:	2205      	movs	r2, #5
 800c2de:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c2e2:	4854      	ldr	r0, [pc, #336]	; (800c434 <_vfiprintf_r+0x220>)
 800c2e4:	f7f3 ffac 	bl	8000240 <memchr>
 800c2e8:	9a04      	ldr	r2, [sp, #16]
 800c2ea:	b9d8      	cbnz	r0, 800c324 <_vfiprintf_r+0x110>
 800c2ec:	06d1      	lsls	r1, r2, #27
 800c2ee:	bf44      	itt	mi
 800c2f0:	2320      	movmi	r3, #32
 800c2f2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c2f6:	0713      	lsls	r3, r2, #28
 800c2f8:	bf44      	itt	mi
 800c2fa:	232b      	movmi	r3, #43	; 0x2b
 800c2fc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800c300:	f89a 3000 	ldrb.w	r3, [sl]
 800c304:	2b2a      	cmp	r3, #42	; 0x2a
 800c306:	d015      	beq.n	800c334 <_vfiprintf_r+0x120>
 800c308:	9a07      	ldr	r2, [sp, #28]
 800c30a:	4654      	mov	r4, sl
 800c30c:	2000      	movs	r0, #0
 800c30e:	f04f 0c0a 	mov.w	ip, #10
 800c312:	4621      	mov	r1, r4
 800c314:	f811 3b01 	ldrb.w	r3, [r1], #1
 800c318:	3b30      	subs	r3, #48	; 0x30
 800c31a:	2b09      	cmp	r3, #9
 800c31c:	d94d      	bls.n	800c3ba <_vfiprintf_r+0x1a6>
 800c31e:	b1b0      	cbz	r0, 800c34e <_vfiprintf_r+0x13a>
 800c320:	9207      	str	r2, [sp, #28]
 800c322:	e014      	b.n	800c34e <_vfiprintf_r+0x13a>
 800c324:	eba0 0308 	sub.w	r3, r0, r8
 800c328:	fa09 f303 	lsl.w	r3, r9, r3
 800c32c:	4313      	orrs	r3, r2
 800c32e:	9304      	str	r3, [sp, #16]
 800c330:	46a2      	mov	sl, r4
 800c332:	e7d2      	b.n	800c2da <_vfiprintf_r+0xc6>
 800c334:	9b03      	ldr	r3, [sp, #12]
 800c336:	1d19      	adds	r1, r3, #4
 800c338:	681b      	ldr	r3, [r3, #0]
 800c33a:	9103      	str	r1, [sp, #12]
 800c33c:	2b00      	cmp	r3, #0
 800c33e:	bfbb      	ittet	lt
 800c340:	425b      	neglt	r3, r3
 800c342:	f042 0202 	orrlt.w	r2, r2, #2
 800c346:	9307      	strge	r3, [sp, #28]
 800c348:	9307      	strlt	r3, [sp, #28]
 800c34a:	bfb8      	it	lt
 800c34c:	9204      	strlt	r2, [sp, #16]
 800c34e:	7823      	ldrb	r3, [r4, #0]
 800c350:	2b2e      	cmp	r3, #46	; 0x2e
 800c352:	d10c      	bne.n	800c36e <_vfiprintf_r+0x15a>
 800c354:	7863      	ldrb	r3, [r4, #1]
 800c356:	2b2a      	cmp	r3, #42	; 0x2a
 800c358:	d134      	bne.n	800c3c4 <_vfiprintf_r+0x1b0>
 800c35a:	9b03      	ldr	r3, [sp, #12]
 800c35c:	1d1a      	adds	r2, r3, #4
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	9203      	str	r2, [sp, #12]
 800c362:	2b00      	cmp	r3, #0
 800c364:	bfb8      	it	lt
 800c366:	f04f 33ff 	movlt.w	r3, #4294967295
 800c36a:	3402      	adds	r4, #2
 800c36c:	9305      	str	r3, [sp, #20]
 800c36e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 800c444 <_vfiprintf_r+0x230>
 800c372:	7821      	ldrb	r1, [r4, #0]
 800c374:	2203      	movs	r2, #3
 800c376:	4650      	mov	r0, sl
 800c378:	f7f3 ff62 	bl	8000240 <memchr>
 800c37c:	b138      	cbz	r0, 800c38e <_vfiprintf_r+0x17a>
 800c37e:	9b04      	ldr	r3, [sp, #16]
 800c380:	eba0 000a 	sub.w	r0, r0, sl
 800c384:	2240      	movs	r2, #64	; 0x40
 800c386:	4082      	lsls	r2, r0
 800c388:	4313      	orrs	r3, r2
 800c38a:	3401      	adds	r4, #1
 800c38c:	9304      	str	r3, [sp, #16]
 800c38e:	f814 1b01 	ldrb.w	r1, [r4], #1
 800c392:	4829      	ldr	r0, [pc, #164]	; (800c438 <_vfiprintf_r+0x224>)
 800c394:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800c398:	2206      	movs	r2, #6
 800c39a:	f7f3 ff51 	bl	8000240 <memchr>
 800c39e:	2800      	cmp	r0, #0
 800c3a0:	d03f      	beq.n	800c422 <_vfiprintf_r+0x20e>
 800c3a2:	4b26      	ldr	r3, [pc, #152]	; (800c43c <_vfiprintf_r+0x228>)
 800c3a4:	bb1b      	cbnz	r3, 800c3ee <_vfiprintf_r+0x1da>
 800c3a6:	9b03      	ldr	r3, [sp, #12]
 800c3a8:	3307      	adds	r3, #7
 800c3aa:	f023 0307 	bic.w	r3, r3, #7
 800c3ae:	3308      	adds	r3, #8
 800c3b0:	9303      	str	r3, [sp, #12]
 800c3b2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c3b4:	443b      	add	r3, r7
 800c3b6:	9309      	str	r3, [sp, #36]	; 0x24
 800c3b8:	e768      	b.n	800c28c <_vfiprintf_r+0x78>
 800c3ba:	fb0c 3202 	mla	r2, ip, r2, r3
 800c3be:	460c      	mov	r4, r1
 800c3c0:	2001      	movs	r0, #1
 800c3c2:	e7a6      	b.n	800c312 <_vfiprintf_r+0xfe>
 800c3c4:	2300      	movs	r3, #0
 800c3c6:	3401      	adds	r4, #1
 800c3c8:	9305      	str	r3, [sp, #20]
 800c3ca:	4619      	mov	r1, r3
 800c3cc:	f04f 0c0a 	mov.w	ip, #10
 800c3d0:	4620      	mov	r0, r4
 800c3d2:	f810 2b01 	ldrb.w	r2, [r0], #1
 800c3d6:	3a30      	subs	r2, #48	; 0x30
 800c3d8:	2a09      	cmp	r2, #9
 800c3da:	d903      	bls.n	800c3e4 <_vfiprintf_r+0x1d0>
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d0c6      	beq.n	800c36e <_vfiprintf_r+0x15a>
 800c3e0:	9105      	str	r1, [sp, #20]
 800c3e2:	e7c4      	b.n	800c36e <_vfiprintf_r+0x15a>
 800c3e4:	fb0c 2101 	mla	r1, ip, r1, r2
 800c3e8:	4604      	mov	r4, r0
 800c3ea:	2301      	movs	r3, #1
 800c3ec:	e7f0      	b.n	800c3d0 <_vfiprintf_r+0x1bc>
 800c3ee:	ab03      	add	r3, sp, #12
 800c3f0:	9300      	str	r3, [sp, #0]
 800c3f2:	462a      	mov	r2, r5
 800c3f4:	4b12      	ldr	r3, [pc, #72]	; (800c440 <_vfiprintf_r+0x22c>)
 800c3f6:	a904      	add	r1, sp, #16
 800c3f8:	4630      	mov	r0, r6
 800c3fa:	f7fd fb49 	bl	8009a90 <_printf_float>
 800c3fe:	4607      	mov	r7, r0
 800c400:	1c78      	adds	r0, r7, #1
 800c402:	d1d6      	bne.n	800c3b2 <_vfiprintf_r+0x19e>
 800c404:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800c406:	07d9      	lsls	r1, r3, #31
 800c408:	d405      	bmi.n	800c416 <_vfiprintf_r+0x202>
 800c40a:	89ab      	ldrh	r3, [r5, #12]
 800c40c:	059a      	lsls	r2, r3, #22
 800c40e:	d402      	bmi.n	800c416 <_vfiprintf_r+0x202>
 800c410:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800c412:	f7fe f904 	bl	800a61e <__retarget_lock_release_recursive>
 800c416:	89ab      	ldrh	r3, [r5, #12]
 800c418:	065b      	lsls	r3, r3, #25
 800c41a:	f53f af1d 	bmi.w	800c258 <_vfiprintf_r+0x44>
 800c41e:	9809      	ldr	r0, [sp, #36]	; 0x24
 800c420:	e71c      	b.n	800c25c <_vfiprintf_r+0x48>
 800c422:	ab03      	add	r3, sp, #12
 800c424:	9300      	str	r3, [sp, #0]
 800c426:	462a      	mov	r2, r5
 800c428:	4b05      	ldr	r3, [pc, #20]	; (800c440 <_vfiprintf_r+0x22c>)
 800c42a:	a904      	add	r1, sp, #16
 800c42c:	4630      	mov	r0, r6
 800c42e:	f7fd fdd3 	bl	8009fd8 <_printf_i>
 800c432:	e7e4      	b.n	800c3fe <_vfiprintf_r+0x1ea>
 800c434:	0800cbb4 	.word	0x0800cbb4
 800c438:	0800cbbe 	.word	0x0800cbbe
 800c43c:	08009a91 	.word	0x08009a91
 800c440:	0800c1f1 	.word	0x0800c1f1
 800c444:	0800cbba 	.word	0x0800cbba

0800c448 <__swbuf_r>:
 800c448:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c44a:	460e      	mov	r6, r1
 800c44c:	4614      	mov	r4, r2
 800c44e:	4605      	mov	r5, r0
 800c450:	b118      	cbz	r0, 800c45a <__swbuf_r+0x12>
 800c452:	6a03      	ldr	r3, [r0, #32]
 800c454:	b90b      	cbnz	r3, 800c45a <__swbuf_r+0x12>
 800c456:	f7fd ff5b 	bl	800a310 <__sinit>
 800c45a:	69a3      	ldr	r3, [r4, #24]
 800c45c:	60a3      	str	r3, [r4, #8]
 800c45e:	89a3      	ldrh	r3, [r4, #12]
 800c460:	071a      	lsls	r2, r3, #28
 800c462:	d525      	bpl.n	800c4b0 <__swbuf_r+0x68>
 800c464:	6923      	ldr	r3, [r4, #16]
 800c466:	b31b      	cbz	r3, 800c4b0 <__swbuf_r+0x68>
 800c468:	6823      	ldr	r3, [r4, #0]
 800c46a:	6922      	ldr	r2, [r4, #16]
 800c46c:	1a98      	subs	r0, r3, r2
 800c46e:	6963      	ldr	r3, [r4, #20]
 800c470:	b2f6      	uxtb	r6, r6
 800c472:	4283      	cmp	r3, r0
 800c474:	4637      	mov	r7, r6
 800c476:	dc04      	bgt.n	800c482 <__swbuf_r+0x3a>
 800c478:	4621      	mov	r1, r4
 800c47a:	4628      	mov	r0, r5
 800c47c:	f7ff fdc4 	bl	800c008 <_fflush_r>
 800c480:	b9e0      	cbnz	r0, 800c4bc <__swbuf_r+0x74>
 800c482:	68a3      	ldr	r3, [r4, #8]
 800c484:	3b01      	subs	r3, #1
 800c486:	60a3      	str	r3, [r4, #8]
 800c488:	6823      	ldr	r3, [r4, #0]
 800c48a:	1c5a      	adds	r2, r3, #1
 800c48c:	6022      	str	r2, [r4, #0]
 800c48e:	701e      	strb	r6, [r3, #0]
 800c490:	6962      	ldr	r2, [r4, #20]
 800c492:	1c43      	adds	r3, r0, #1
 800c494:	429a      	cmp	r2, r3
 800c496:	d004      	beq.n	800c4a2 <__swbuf_r+0x5a>
 800c498:	89a3      	ldrh	r3, [r4, #12]
 800c49a:	07db      	lsls	r3, r3, #31
 800c49c:	d506      	bpl.n	800c4ac <__swbuf_r+0x64>
 800c49e:	2e0a      	cmp	r6, #10
 800c4a0:	d104      	bne.n	800c4ac <__swbuf_r+0x64>
 800c4a2:	4621      	mov	r1, r4
 800c4a4:	4628      	mov	r0, r5
 800c4a6:	f7ff fdaf 	bl	800c008 <_fflush_r>
 800c4aa:	b938      	cbnz	r0, 800c4bc <__swbuf_r+0x74>
 800c4ac:	4638      	mov	r0, r7
 800c4ae:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c4b0:	4621      	mov	r1, r4
 800c4b2:	4628      	mov	r0, r5
 800c4b4:	f000 f806 	bl	800c4c4 <__swsetup_r>
 800c4b8:	2800      	cmp	r0, #0
 800c4ba:	d0d5      	beq.n	800c468 <__swbuf_r+0x20>
 800c4bc:	f04f 37ff 	mov.w	r7, #4294967295
 800c4c0:	e7f4      	b.n	800c4ac <__swbuf_r+0x64>
	...

0800c4c4 <__swsetup_r>:
 800c4c4:	b538      	push	{r3, r4, r5, lr}
 800c4c6:	4b2a      	ldr	r3, [pc, #168]	; (800c570 <__swsetup_r+0xac>)
 800c4c8:	4605      	mov	r5, r0
 800c4ca:	6818      	ldr	r0, [r3, #0]
 800c4cc:	460c      	mov	r4, r1
 800c4ce:	b118      	cbz	r0, 800c4d8 <__swsetup_r+0x14>
 800c4d0:	6a03      	ldr	r3, [r0, #32]
 800c4d2:	b90b      	cbnz	r3, 800c4d8 <__swsetup_r+0x14>
 800c4d4:	f7fd ff1c 	bl	800a310 <__sinit>
 800c4d8:	89a3      	ldrh	r3, [r4, #12]
 800c4da:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c4de:	0718      	lsls	r0, r3, #28
 800c4e0:	d422      	bmi.n	800c528 <__swsetup_r+0x64>
 800c4e2:	06d9      	lsls	r1, r3, #27
 800c4e4:	d407      	bmi.n	800c4f6 <__swsetup_r+0x32>
 800c4e6:	2309      	movs	r3, #9
 800c4e8:	602b      	str	r3, [r5, #0]
 800c4ea:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800c4ee:	81a3      	strh	r3, [r4, #12]
 800c4f0:	f04f 30ff 	mov.w	r0, #4294967295
 800c4f4:	e034      	b.n	800c560 <__swsetup_r+0x9c>
 800c4f6:	0758      	lsls	r0, r3, #29
 800c4f8:	d512      	bpl.n	800c520 <__swsetup_r+0x5c>
 800c4fa:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c4fc:	b141      	cbz	r1, 800c510 <__swsetup_r+0x4c>
 800c4fe:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800c502:	4299      	cmp	r1, r3
 800c504:	d002      	beq.n	800c50c <__swsetup_r+0x48>
 800c506:	4628      	mov	r0, r5
 800c508:	f7fe ff24 	bl	800b354 <_free_r>
 800c50c:	2300      	movs	r3, #0
 800c50e:	6363      	str	r3, [r4, #52]	; 0x34
 800c510:	89a3      	ldrh	r3, [r4, #12]
 800c512:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800c516:	81a3      	strh	r3, [r4, #12]
 800c518:	2300      	movs	r3, #0
 800c51a:	6063      	str	r3, [r4, #4]
 800c51c:	6923      	ldr	r3, [r4, #16]
 800c51e:	6023      	str	r3, [r4, #0]
 800c520:	89a3      	ldrh	r3, [r4, #12]
 800c522:	f043 0308 	orr.w	r3, r3, #8
 800c526:	81a3      	strh	r3, [r4, #12]
 800c528:	6923      	ldr	r3, [r4, #16]
 800c52a:	b94b      	cbnz	r3, 800c540 <__swsetup_r+0x7c>
 800c52c:	89a3      	ldrh	r3, [r4, #12]
 800c52e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800c532:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c536:	d003      	beq.n	800c540 <__swsetup_r+0x7c>
 800c538:	4621      	mov	r1, r4
 800c53a:	4628      	mov	r0, r5
 800c53c:	f000 f88c 	bl	800c658 <__smakebuf_r>
 800c540:	89a0      	ldrh	r0, [r4, #12]
 800c542:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800c546:	f010 0301 	ands.w	r3, r0, #1
 800c54a:	d00a      	beq.n	800c562 <__swsetup_r+0x9e>
 800c54c:	2300      	movs	r3, #0
 800c54e:	60a3      	str	r3, [r4, #8]
 800c550:	6963      	ldr	r3, [r4, #20]
 800c552:	425b      	negs	r3, r3
 800c554:	61a3      	str	r3, [r4, #24]
 800c556:	6923      	ldr	r3, [r4, #16]
 800c558:	b943      	cbnz	r3, 800c56c <__swsetup_r+0xa8>
 800c55a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800c55e:	d1c4      	bne.n	800c4ea <__swsetup_r+0x26>
 800c560:	bd38      	pop	{r3, r4, r5, pc}
 800c562:	0781      	lsls	r1, r0, #30
 800c564:	bf58      	it	pl
 800c566:	6963      	ldrpl	r3, [r4, #20]
 800c568:	60a3      	str	r3, [r4, #8]
 800c56a:	e7f4      	b.n	800c556 <__swsetup_r+0x92>
 800c56c:	2000      	movs	r0, #0
 800c56e:	e7f7      	b.n	800c560 <__swsetup_r+0x9c>
 800c570:	20000128 	.word	0x20000128

0800c574 <_raise_r>:
 800c574:	291f      	cmp	r1, #31
 800c576:	b538      	push	{r3, r4, r5, lr}
 800c578:	4604      	mov	r4, r0
 800c57a:	460d      	mov	r5, r1
 800c57c:	d904      	bls.n	800c588 <_raise_r+0x14>
 800c57e:	2316      	movs	r3, #22
 800c580:	6003      	str	r3, [r0, #0]
 800c582:	f04f 30ff 	mov.w	r0, #4294967295
 800c586:	bd38      	pop	{r3, r4, r5, pc}
 800c588:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800c58a:	b112      	cbz	r2, 800c592 <_raise_r+0x1e>
 800c58c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c590:	b94b      	cbnz	r3, 800c5a6 <_raise_r+0x32>
 800c592:	4620      	mov	r0, r4
 800c594:	f000 f830 	bl	800c5f8 <_getpid_r>
 800c598:	462a      	mov	r2, r5
 800c59a:	4601      	mov	r1, r0
 800c59c:	4620      	mov	r0, r4
 800c59e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c5a2:	f000 b817 	b.w	800c5d4 <_kill_r>
 800c5a6:	2b01      	cmp	r3, #1
 800c5a8:	d00a      	beq.n	800c5c0 <_raise_r+0x4c>
 800c5aa:	1c59      	adds	r1, r3, #1
 800c5ac:	d103      	bne.n	800c5b6 <_raise_r+0x42>
 800c5ae:	2316      	movs	r3, #22
 800c5b0:	6003      	str	r3, [r0, #0]
 800c5b2:	2001      	movs	r0, #1
 800c5b4:	e7e7      	b.n	800c586 <_raise_r+0x12>
 800c5b6:	2400      	movs	r4, #0
 800c5b8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c5bc:	4628      	mov	r0, r5
 800c5be:	4798      	blx	r3
 800c5c0:	2000      	movs	r0, #0
 800c5c2:	e7e0      	b.n	800c586 <_raise_r+0x12>

0800c5c4 <raise>:
 800c5c4:	4b02      	ldr	r3, [pc, #8]	; (800c5d0 <raise+0xc>)
 800c5c6:	4601      	mov	r1, r0
 800c5c8:	6818      	ldr	r0, [r3, #0]
 800c5ca:	f7ff bfd3 	b.w	800c574 <_raise_r>
 800c5ce:	bf00      	nop
 800c5d0:	20000128 	.word	0x20000128

0800c5d4 <_kill_r>:
 800c5d4:	b538      	push	{r3, r4, r5, lr}
 800c5d6:	4d07      	ldr	r5, [pc, #28]	; (800c5f4 <_kill_r+0x20>)
 800c5d8:	2300      	movs	r3, #0
 800c5da:	4604      	mov	r4, r0
 800c5dc:	4608      	mov	r0, r1
 800c5de:	4611      	mov	r1, r2
 800c5e0:	602b      	str	r3, [r5, #0]
 800c5e2:	f7f5 f9cd 	bl	8001980 <_kill>
 800c5e6:	1c43      	adds	r3, r0, #1
 800c5e8:	d102      	bne.n	800c5f0 <_kill_r+0x1c>
 800c5ea:	682b      	ldr	r3, [r5, #0]
 800c5ec:	b103      	cbz	r3, 800c5f0 <_kill_r+0x1c>
 800c5ee:	6023      	str	r3, [r4, #0]
 800c5f0:	bd38      	pop	{r3, r4, r5, pc}
 800c5f2:	bf00      	nop
 800c5f4:	20000870 	.word	0x20000870

0800c5f8 <_getpid_r>:
 800c5f8:	f7f5 b9ba 	b.w	8001970 <_getpid>

0800c5fc <_malloc_usable_size_r>:
 800c5fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c600:	1f18      	subs	r0, r3, #4
 800c602:	2b00      	cmp	r3, #0
 800c604:	bfbc      	itt	lt
 800c606:	580b      	ldrlt	r3, [r1, r0]
 800c608:	18c0      	addlt	r0, r0, r3
 800c60a:	4770      	bx	lr

0800c60c <__swhatbuf_r>:
 800c60c:	b570      	push	{r4, r5, r6, lr}
 800c60e:	460c      	mov	r4, r1
 800c610:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c614:	2900      	cmp	r1, #0
 800c616:	b096      	sub	sp, #88	; 0x58
 800c618:	4615      	mov	r5, r2
 800c61a:	461e      	mov	r6, r3
 800c61c:	da0d      	bge.n	800c63a <__swhatbuf_r+0x2e>
 800c61e:	89a3      	ldrh	r3, [r4, #12]
 800c620:	f013 0f80 	tst.w	r3, #128	; 0x80
 800c624:	f04f 0100 	mov.w	r1, #0
 800c628:	bf0c      	ite	eq
 800c62a:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 800c62e:	2340      	movne	r3, #64	; 0x40
 800c630:	2000      	movs	r0, #0
 800c632:	6031      	str	r1, [r6, #0]
 800c634:	602b      	str	r3, [r5, #0]
 800c636:	b016      	add	sp, #88	; 0x58
 800c638:	bd70      	pop	{r4, r5, r6, pc}
 800c63a:	466a      	mov	r2, sp
 800c63c:	f000 f848 	bl	800c6d0 <_fstat_r>
 800c640:	2800      	cmp	r0, #0
 800c642:	dbec      	blt.n	800c61e <__swhatbuf_r+0x12>
 800c644:	9901      	ldr	r1, [sp, #4]
 800c646:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 800c64a:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800c64e:	4259      	negs	r1, r3
 800c650:	4159      	adcs	r1, r3
 800c652:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c656:	e7eb      	b.n	800c630 <__swhatbuf_r+0x24>

0800c658 <__smakebuf_r>:
 800c658:	898b      	ldrh	r3, [r1, #12]
 800c65a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c65c:	079d      	lsls	r5, r3, #30
 800c65e:	4606      	mov	r6, r0
 800c660:	460c      	mov	r4, r1
 800c662:	d507      	bpl.n	800c674 <__smakebuf_r+0x1c>
 800c664:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c668:	6023      	str	r3, [r4, #0]
 800c66a:	6123      	str	r3, [r4, #16]
 800c66c:	2301      	movs	r3, #1
 800c66e:	6163      	str	r3, [r4, #20]
 800c670:	b002      	add	sp, #8
 800c672:	bd70      	pop	{r4, r5, r6, pc}
 800c674:	ab01      	add	r3, sp, #4
 800c676:	466a      	mov	r2, sp
 800c678:	f7ff ffc8 	bl	800c60c <__swhatbuf_r>
 800c67c:	9900      	ldr	r1, [sp, #0]
 800c67e:	4605      	mov	r5, r0
 800c680:	4630      	mov	r0, r6
 800c682:	f7fe fedb 	bl	800b43c <_malloc_r>
 800c686:	b948      	cbnz	r0, 800c69c <__smakebuf_r+0x44>
 800c688:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c68c:	059a      	lsls	r2, r3, #22
 800c68e:	d4ef      	bmi.n	800c670 <__smakebuf_r+0x18>
 800c690:	f023 0303 	bic.w	r3, r3, #3
 800c694:	f043 0302 	orr.w	r3, r3, #2
 800c698:	81a3      	strh	r3, [r4, #12]
 800c69a:	e7e3      	b.n	800c664 <__smakebuf_r+0xc>
 800c69c:	89a3      	ldrh	r3, [r4, #12]
 800c69e:	6020      	str	r0, [r4, #0]
 800c6a0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6a4:	81a3      	strh	r3, [r4, #12]
 800c6a6:	9b00      	ldr	r3, [sp, #0]
 800c6a8:	6163      	str	r3, [r4, #20]
 800c6aa:	9b01      	ldr	r3, [sp, #4]
 800c6ac:	6120      	str	r0, [r4, #16]
 800c6ae:	b15b      	cbz	r3, 800c6c8 <__smakebuf_r+0x70>
 800c6b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c6b4:	4630      	mov	r0, r6
 800c6b6:	f000 f81d 	bl	800c6f4 <_isatty_r>
 800c6ba:	b128      	cbz	r0, 800c6c8 <__smakebuf_r+0x70>
 800c6bc:	89a3      	ldrh	r3, [r4, #12]
 800c6be:	f023 0303 	bic.w	r3, r3, #3
 800c6c2:	f043 0301 	orr.w	r3, r3, #1
 800c6c6:	81a3      	strh	r3, [r4, #12]
 800c6c8:	89a3      	ldrh	r3, [r4, #12]
 800c6ca:	431d      	orrs	r5, r3
 800c6cc:	81a5      	strh	r5, [r4, #12]
 800c6ce:	e7cf      	b.n	800c670 <__smakebuf_r+0x18>

0800c6d0 <_fstat_r>:
 800c6d0:	b538      	push	{r3, r4, r5, lr}
 800c6d2:	4d07      	ldr	r5, [pc, #28]	; (800c6f0 <_fstat_r+0x20>)
 800c6d4:	2300      	movs	r3, #0
 800c6d6:	4604      	mov	r4, r0
 800c6d8:	4608      	mov	r0, r1
 800c6da:	4611      	mov	r1, r2
 800c6dc:	602b      	str	r3, [r5, #0]
 800c6de:	f7f5 f9ae 	bl	8001a3e <_fstat>
 800c6e2:	1c43      	adds	r3, r0, #1
 800c6e4:	d102      	bne.n	800c6ec <_fstat_r+0x1c>
 800c6e6:	682b      	ldr	r3, [r5, #0]
 800c6e8:	b103      	cbz	r3, 800c6ec <_fstat_r+0x1c>
 800c6ea:	6023      	str	r3, [r4, #0]
 800c6ec:	bd38      	pop	{r3, r4, r5, pc}
 800c6ee:	bf00      	nop
 800c6f0:	20000870 	.word	0x20000870

0800c6f4 <_isatty_r>:
 800c6f4:	b538      	push	{r3, r4, r5, lr}
 800c6f6:	4d06      	ldr	r5, [pc, #24]	; (800c710 <_isatty_r+0x1c>)
 800c6f8:	2300      	movs	r3, #0
 800c6fa:	4604      	mov	r4, r0
 800c6fc:	4608      	mov	r0, r1
 800c6fe:	602b      	str	r3, [r5, #0]
 800c700:	f7f5 f9ad 	bl	8001a5e <_isatty>
 800c704:	1c43      	adds	r3, r0, #1
 800c706:	d102      	bne.n	800c70e <_isatty_r+0x1a>
 800c708:	682b      	ldr	r3, [r5, #0]
 800c70a:	b103      	cbz	r3, 800c70e <_isatty_r+0x1a>
 800c70c:	6023      	str	r3, [r4, #0]
 800c70e:	bd38      	pop	{r3, r4, r5, pc}
 800c710:	20000870 	.word	0x20000870

0800c714 <_init>:
 800c714:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c716:	bf00      	nop
 800c718:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c71a:	bc08      	pop	{r3}
 800c71c:	469e      	mov	lr, r3
 800c71e:	4770      	bx	lr

0800c720 <_fini>:
 800c720:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c722:	bf00      	nop
 800c724:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c726:	bc08      	pop	{r3}
 800c728:	469e      	mov	lr, r3
 800c72a:	4770      	bx	lr
